     1                                          BOOT_LOAD       equ     0x7c00
     2                                  
     3                                          ORG     BOOT_LOAD
     4                                  ;マクロ
     5                                  
     6                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
     7                                  
     8                                  ;エントリポイント
     9                                  
    10                                  entry:
    11 00000000 EB58                            jmp     ipl
    12                                  
    13                                          ; BIOS Parameter Block
    14                                  
    15 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    16                                  
    17                                          ; Initial Program Loader
    18                                  
    19                                  ipl:
    20                                  
    21 0000005A FA                              cli                                 ;割り込みの禁止
    22                                  
    23 0000005B B80000                          mov     ax, 0x0000
    24 0000005E 8ED8                            mov     ds, ax
    25 00000060 8EC0                            mov     es, ax
    26 00000062 8ED0                            mov     ss, ax
    27 00000064 BC007C                          mov     sp, BOOT_LOAD
    28                                  
    29 00000067 FB                              sti                                 ;割り込みの許可
    30                                  
    31 00000068 8816[4801]                      mov     [BOOT.DRIVE], dl            ;ブートドライブを保存
    32                                  
    33                                          ;文字列の表示
    34                                  
    35 0000006C 68[3001]E8D80083C4-             cdecl   puts, .s0                   ;puts(.s0)
    35 00000074 02                 
    36                                  
    37                                          ;数値の表示
    38                                  
    39 00000075 6A016A0A6A0868-         	cdecl	int_to_str,  8086, .s1, 8, 10, 0b0001	; "    8086"
    39 0000007C [3D01]68961FE8E500-
    39 00000084 83C40A             
    40 00000087 68[3D01]E8BD0083C4-     	cdecl	puts, .s1
    40 0000008F 02                 
    41                                  
    42 00000090 6A036A0A6A0868-         	cdecl	int_to_str,  8086, .s1, 8, 10, 0b0011	; "+   8086"
    42 00000097 [3D01]68961FE8CA00-
    42 0000009F 83C40A             
    43 000000A2 68[3D01]E8A20083C4-     	cdecl	puts, .s1
    43 000000AA 02                 
    44                                  
    45 000000AB 6A016A0A6A0868-         	cdecl	int_to_str, -8086, .s1, 8, 10, 0b0001	; "-   8086"
    45 000000B2 [3D01]686AE0E8AF00-
    45 000000BA 83C40A             
    46 000000BD 68[3D01]E8870083C4-     	cdecl	puts, .s1
    46 000000C5 02                 
    47                                  
    48 000000C6 6A016A0A6A0868-         	cdecl	int_to_str,    -1, .s1, 8, 10, 0b0001	; "-      1"
    48 000000CD [3D01]6AFFE8950083-
    48 000000D5 C40A               
    49 000000D7 68[3D01]E86D0083C4-     	cdecl	puts, .s1
    49 000000DF 02                 
    50                                  
    51 000000E0 6A006A0A6A0868-         	cdecl	int_to_str,    -1, .s1, 8, 10, 0b0000	; "   65535"
    51 000000E7 [3D01]6AFFE87B0083-
    51 000000EF C40A               
    52 000000F1 68[3D01]E8530083C4-     	cdecl	puts, .s1
    52 000000F9 02                 
    53                                  
    54 000000FA 6A006A106A0868-         	cdecl	int_to_str,    -1, .s1, 8, 16, 0b0000	; "    FFFF"
    54 00000101 [3D01]6AFFE8610083-
    54 00000109 C40A               
    55 0000010B 68[3D01]E8390083C4-     	cdecl	puts, .s1
    55 00000113 02                 
    56                                  
    57 00000114 6A046A026A0868-         	cdecl	int_to_str,    12, .s1, 8,  2, 0b0100	; "00001100"
    57 0000011B [3D01]6A0CE8470083-
    57 00000123 C40A               
    58 00000125 68[3D01]E81F0083C4-     	cdecl	puts, .s1
    58 0000012D 02                 
    59                                  
    60                                          ; 処理の終了
    61                                  
    62 0000012E EBFE                            jmp     $
    63                                  
    64 00000130 426F6F74696E672E2E-     .s0     db      "Booting...", 0x0A, 0x0D, 0
    64 00000139 2E0A0D00           
    65 0000013D 2D2D2D2D2D2D2D2D0A-     .s1     db      "--------", 0x0A, 0x0D, 0
    65 00000146 0D00               
    66                                  
    67                                  ALIGN 2, db 0
    68                                  BOOT:                                       ;ブートドライブに関する情報
    69 00000148 0000                    .DRIVE:         dw  0                       ;ドライブ番号
    70                                  
    71                                  ;モジュール
    72                                  
    73                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 0000014A 55                  <1>         push    bp
     6 0000014B 89E5                <1>         mov     bp, sp                                  ;  +4 | 文字列へのアドレス
     7                              <1>                                                         ;  +2 | Instruction Pointer
     8                              <1>                                                         ;BP+0 | BP
     9                              <1> 
    10                              <1>         ;レジスタを保存
    11                              <1> 
    12 0000014D 50                  <1>         push    ax
    13 0000014E 53                  <1>         push    bx
    14 0000014F 56                  <1>         push    si
    15                              <1> 
    16                              <1>         ;引数の取得
    17                              <1> 
    18 00000150 8B7604              <1>         mov     si, [bp + 4]                            ;Source Index == 文字列へのアドレス
    19                              <1> 
    20                              <1>         ;処理
    21                              <1> 
    22 00000153 B40E                <1>         mov     ah, 0x0E
    23 00000155 BB0000              <1>         mov     bx, 0x0000
    24 00000158 FC                  <1>         cld
    25                              <1> 
    26                              <1> .10L:                                                   ;do{
    27                              <1>                                                         ;   AL = *SI++
    28 00000159 AC                  <1>         lodsb                                           ;
    29                              <1>                                                         ;   if (0 == AL)
    30 0000015A 3C00                <1>         cmp     al, 0                                   ;       break;
    31 0000015C 7404                <1>         je      .10E                                    ;
    32                              <1>                                                         ;   Int10(0x0E, AL); //文字出力
    33 0000015E CD10                <1>         int     0x10                                    ;} while(1);
    34 00000160 EBF7                <1>         jmp     .10L
    35                              <1> 
    36                              <1> .10E:
    37                              <1> 
    38                              <1>         ;レジスタの復帰
    39                              <1> 
    40 00000162 5E                  <1>         pop     si
    41 00000163 5B                  <1>         pop     bx
    42 00000164 58                  <1>         pop     ax
    43                              <1> 
    44                              <1>         ;スタックフレームの破棄
    45                              <1> 
    46 00000165 89EC                <1>         mov     sp, bp
    47 00000167 5D                  <1>         pop     bp
    48                              <1> 
    49 00000168 C3                  <1>         ret
    74                                  %include    "../modules/real/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 00000169 55                  <1>         push    bp
     6 0000016A 89E5                <1>         mov     bp, sp                          ;  +12|フラグ
     7                              <1>                                                 ;  +10|基数
     8                              <1>                                                 ;  + 8|保存先バッファサイズ
     9                              <1>                                                 ;  + 6|保存先バッファアドレス
    10                              <1>                                                 ;  + 4|変換する値
    11                              <1>                                                 ;  + 2|IP(戻り番地)
    12                              <1>                                                 ;BP+ 0|BP
    13                              <1>         ;レジスタの保存
    14                              <1> 
    15 0000016C 50                  <1>         push    ax
    16 0000016D 53                  <1>         push    bx
    17 0000016E 51                  <1>         push    cx
    18 0000016F 52                  <1>         push    dx
    19 00000170 56                  <1>         push    si
    20 00000171 57                  <1>         push    di
    21                              <1> 
    22                              <1>         ;引数の取得
    23                              <1> 
    24 00000172 8B4604              <1>         mov     ax, [bp + 4]                    ;val = 数値
    25 00000175 8B7606              <1>         mov     si, [bp + 6]                    ;dest= バッファアドレス
    26 00000178 8B4E08              <1>         mov     cx, [bp + 8]                    ;size= バッファサイズ
    27                              <1> 
    28 0000017B 89F7                <1>         mov     di, si                          ;バッファの最後尾
    29 0000017D 01CF                <1>         add     di, cx                          ;dest = &dest[size - 1]
    30 0000017F 4F                  <1>         dec     di
    31                              <1> 
    32 00000180 8B5E0C              <1>         mov     bx, word [bp + 12]              ;flags = フラグ
    33                              <1>                                                 ;B2: 空白をゼロで埋める B1:+/-記号を付加する B0:値を符号付き変数として扱う
    34                              <1> 
    35                              <1>         ;符号付き判定
    36                              <1> 
    37 00000183 F7C30100            <1>         test    bx, 0b0001                      ; if (flags & 0x01) //符号付きならZF = 0
    38 00000187 7408                <1> .10Q    je      .10E                            ; {                 //符号なしならZF = 1だからjmp
    39 00000189 83F800              <1>         cmp     ax, 0                           ;   if (val < 0)    //CF = 1, ZF = 0
    40 0000018C 7D03                <1> .12Q    jge     .12E                            ;   {               //val >= 0 なら必要ないのでjmp
    41 0000018E 83CB02              <1>         or      bx, 0b0010                      ;       flags |= 2; //B1をセット
    42                              <1>                                                 ;}}
    43                              <1> .12E:
    44                              <1> .10E:
    45                              <1> 
    46                              <1>         ;符号出力判定
    47                              <1> 
    48 00000191 F7C30200            <1>         test    bx, 0b0010
    49 00000195 7410                <1> .20Q    je      .20E
    50 00000197 83F800              <1>         cmp     ax, 0
    51 0000019A 7D07                <1> .22Q    jge     .22F
    52 0000019C F7D8                <1>         neg     ax                              ;符号反転
    53 0000019E C6042D              <1>         mov     [si], byte '-'                  ;符号表示
    54 000001A1 EB03                <1>         jmp     .22E
    55                              <1> .22F:
    56 000001A3 C6042B              <1>         mov     [si], byte '+'
    57                              <1> .22E:
    58 000001A6 49                  <1>         dec     cx                              ;残りバッファサイズの減算 -> ?
    59                              <1> .20E:
    60                              <1> 
    61                              <1>         ;ASCII変換
    62                              <1> 
    63 000001A7 8B5E0A              <1>         mov     bx, [bp + 10]                   ;BX = 基数
    64                              <1> 
    65                              <1> .30L:                                           ;do{
    66 000001AA BA0000              <1>         mov     dx, 0
    67 000001AD F7F3                <1>         div     bx                              ;   DX = DX:AX % BX;
    68                              <1>                                                 ;   AX = DX:AX / BX;
    69                              <1> 
    70 000001AF 89D6                <1>         mov     si, dx                          ;   //変換テーブル参照
    71 000001B1 8A94[CF01]          <1>         mov     dl, byte [.ascii + si]          ;   DL = ASCII[DX];
    72                              <1> 
    73 000001B5 8815                <1>         mov     [di], dl                        ;   *dest = DL;
    74 000001B7 4F                  <1>         dec     di                              ;   dest--;
    75                              <1> 
    76 000001B8 83F800              <1>         cmp     ax, 0
    77 000001BB E0ED                <1>         loopnz  .30L                            ;} while(AX);
    78                              <1> 
    79                              <1> .30E:
    80                              <1> 
    81                              <1>         ;空欄をゼロ埋め/空白埋め
    82                              <1> 
    83 000001BD 83F900              <1>         cmp     cx, 0                           ;if (size)
    84 000001C0 740D                <1> .40Q:   je      .40E                            ;{
    85 000001C2 B020                <1>         mov     al, ' '                         ;   AL = ' '; //空白埋め
    86 000001C4 837E0C04            <1>         cmp     [bp + 12], word 0b0100          ;   if (flags & 0x04)
    87 000001C8 7502                <1> .42Q:   jne     .42E                            ;   {
    88 000001CA B030                <1>         mov     al, '0'                         ;       AL = '0'; //ゼロ埋め
    89                              <1> .42E:                                           ;   }
    90 000001CC FD                  <1>         std                                     ;   // DF = 1(減算)
    91 000001CD F3AA                <1>         rep stosb                               ;   while (--cx) * DI-- = ' ';
    92                              <1> .40E:                                           ;}
    93                              <1> 
    94                              <1> 
    95 000001CF 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
    95 000001D8 39414243444546      <1>
    75                                  
    76                                  ;ブートフラグ(512biteの終了)
    77                                  
    78 000001DF 00<rept>                        times   510 - ($ - $$) db 0x00
    79 000001FE 55AA                            db 0x55, 0xAA
