     1                                  ;マクロ
     2                                  
     3                                  %include    "../include/define.s"
     1                              <1>         BOOT_LOAD       equ     0x7c00                          ;ブートプログラムのロード位置
     2                              <1> 
     3                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ;ブートコードサイズ
     4                              <1>         SECT_SIZE       equ     (512)                           ;セクタサイズ
     5                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ;ブートプログラムのセクタ数
     4                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc   drive                               ;セクタ読み出し時のパラメータを構造体で定義
    18 00000000 <res 00000002>      <1>             .no         resw    1           ;ドライブ番号
    19 00000002 <res 00000002>      <1>             .cyln       resw    1           ;シリンダ
    20 00000004 <res 00000002>      <1>             .head       resw    1           ;ヘッド
    21 00000006 <res 00000002>      <1>             .sect       resw    1           ;セクタ
    22                              <1> endstruc
     5                                  
     6                                          ORG     BOOT_LOAD
     7                                  
     8                                  
     9                                  ;エントリポイント
    10                                  
    11                                  entry:
    12 00000000 EB58                            jmp     ipl
    13                                  
    14                                  ; BIOS Parameter Block
    15                                  
    16 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    17                                  
    18                                  ; Initial Program Loader
    19                                  
    20                                  ipl:
    21                                  
    22 0000005A FA                              cli                                 ;割り込みの禁止
    23                                  
    24 0000005B B80000                          mov     ax, 0x0000
    25 0000005E 8ED8                            mov     ds, ax
    26 00000060 8EC0                            mov     es, ax
    27 00000062 8ED0                            mov     ss, ax
    28 00000064 BC007C                          mov     sp, BOOT_LOAD
    29                                  
    30 00000067 FB                              sti                                 ;割り込みの許可
    31                                  
    32                                          ;ブートドライブ番号の保存
    33                                  
    34 00000068 8816[BA00]                      mov     [BOOT + drive.no], dl       ;ブートドライブを保存
    35                                  
    36                                          ;文字列の表示
    37                                  
    38 0000006C 68[9900]E8500083C4-             cdecl   puts, .s0                   ;puts(.s0)
    38 00000074 02                 
    39                                  
    40                                          ;残りのセクタをすべて読み込む
    41                                  
    42 00000075 BB0F00                          mov     bx, BOOT_SECT - 1           ;BX = 残りのブートセクト数
    43 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE   ;CX = 次のロードアドレス
    44                                  
    45 0000007B 515368[BA00]E89D00-             cdecl   read_sect, BOOT, bx, cx     ;AX = read_sect(BOOT, bx, cx)
    45 00000083 83C406             
    46                                  
    47 00000086 39D8                            cmp     ax, bx
    48 00000088 740C                    .10Q:   jz      .10E                        ;if (ax != 残りのセクタ数)
    49                                  
    50 0000008A 68[A600]E8320083C4-     .10T:   cdecl   puts, .e0                   ;{  puts(.e0);
    50 00000092 02                 
    51 00000093 E84B00                          call    reboot                      ;   reboot(); //再起動
    52                                  
    53                                  .10E:                                       ;}
    54                                  
    55                                          ;次のステージへ移行
    56                                  
    57 00000096 E94C02                          jmp     stage_2                     ;ブート処理の第2ステージへ
    58                                  
    59                                          ;データ
    60                                  
    61 00000099 626F6F74696E672E2E-     .s0     db      "booting...", 0x0A, 0x0D, 0
    61 000000A2 2E0A0D00           
    62 000000A6 4572726F723A207365-     .e0     db      "Error: sector read", 0
    62 000000AF 63746F722072656164-
    62 000000B8 00                 
    63                                  
    64                                  ;ブートドライブに関する情報
    65                                  
    66 000000B9 00                      ALIGN 2, db 0
    67                                  BOOT:
    68                                          istruc  drive
    69 000000BA 0000                                at  drive.no,       dw 0        ;ドライブ番号
    70 000000BC 0000                                at  drive.cyln,     dw 0        ;シリンダ
    71 000000BE 0000                                at  drive.head,     dw 0        ;ヘッド
    72 000000C0 0200                                at  drive.sect,     dw 2        ;セクタ
    73                                          iend
    74                                  
    75                                  ;モジュール(512バイト以降に配置)
    76                                  
    77                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 000000C2 55                  <1>         push    bp
     6 000000C3 89E5                <1>         mov     bp, sp                                  ;  +4 | 文字列へのアドレス
     7                              <1>                                                         ;  +2 | Instruction Pointer
     8                              <1>                                                         ;BP+0 | BP
     9                              <1> 
    10                              <1>         ;レジスタを保存
    11                              <1> 
    12 000000C5 50                  <1>         push    ax
    13 000000C6 53                  <1>         push    bx
    14 000000C7 56                  <1>         push    si
    15                              <1> 
    16                              <1>         ;引数の取得
    17                              <1> 
    18 000000C8 8B7604              <1>         mov     si, [bp + 4]                            ;Source Index == 文字列へのアドレス
    19                              <1> 
    20                              <1>         ;処理
    21                              <1> 
    22 000000CB B40E                <1>         mov     ah, 0x0E
    23 000000CD BB0000              <1>         mov     bx, 0x0000
    24 000000D0 FC                  <1>         cld
    25                              <1> 
    26                              <1> .10L:                                                   ;do{
    27                              <1>                                                         ;   AL = *SI++
    28 000000D1 AC                  <1>         lodsb                                           ;
    29                              <1>                                                         ;   if (0 == AL)
    30 000000D2 3C00                <1>         cmp     al, 0                                   ;       break;
    31 000000D4 7404                <1>         je      .10E                                    ;
    32                              <1>                                                         ;   Int10(0x0E, AL); //文字出力
    33 000000D6 CD10                <1>         int     0x10                                    ;} while(1);
    34 000000D8 EBF7                <1>         jmp     .10L
    35                              <1> 
    36                              <1> .10E:
    37                              <1> 
    38                              <1>         ;レジスタの復帰
    39                              <1> 
    40 000000DA 5E                  <1>         pop     si
    41 000000DB 5B                  <1>         pop     bx
    42 000000DC 58                  <1>         pop     ax
    43                              <1> 
    44                              <1>         ;スタックフレームの破棄
    45                              <1> 
    46 000000DD 89EC                <1>         mov     sp, bp
    47 000000DF 5D                  <1>         pop     bp
    48                              <1> 
    49 000000E0 C3                  <1>         ret
    78                                  %include    "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3                              <1>         ;メッセージを表示
     4                              <1> 
     5 000000E1 68[FD00]E8DBFF83C4- <1>         cdecl   puts, .s0                       ;//再起動メッセージを表示
     5 000000E9 02                  <1>
     6                              <1> 
     7                              <1>         ;キー入力待ち
     8                              <1> 
     9                              <1> .10L:                                           ; do {
    10 000000EA B410                <1>         mov     ah, 0x10                        ;       //キー入力待ち
    11 000000EC CD16                <1>         int     0x16                            ;       AL = BIOS(0x16, 0x10)
    12                              <1> 
    13 000000EE 3C20                <1>         cmp     al, ' '                         ;       ZF = (AL == ' ');
    14 000000F0 75F8                <1>         jne     .10L                            ; } while (!ZF);
    15                              <1> 
    16                              <1>         ;改行を出力
    17                              <1> 
    18 000000F2 68[1B01]E8CAFF83C4- <1>         cdecl   puts, .s1
    18 000000FA 02                  <1>
    19                              <1> 
    20                              <1>         ;再起動
    21                              <1> 
    22 000000FB CD19                <1>         int     0x19                            ; BIOS(0x19);
    23                              <1> 
    24                              <1>         ;文字列データ
    25                              <1> 
    26 000000FD 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    26 00000106 414345206B65792074- <1>
    26 0000010F 6F207265626F6F742E- <1>
    26 00000118 2E2E00              <1>
    27 0000011B 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    79                                  %include    "../modules/real/read_sect.s"
     1                              <1> read_sect:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4                              <1>                                                     ;   +8 | 読み出し先アドレス
     5                              <1>                                                     ;   +6 | セクタ数
     6                              <1>                                                     ;   +4 | drive構造体のアドレス
     7                              <1>                                                     ;   +2 | 戻り番地
     8                              <1>                                                     ;BP +0 | BP
     9                              <1>                                                     ;   -2 | retry = 3; //リトライ回数
    10                              <1>                                                     ;   -4 | sect  = 0; //読み込みセクタ数
    11 00000120 55                  <1>             push    bp
    12 00000121 89E5                <1>             mov     bp, sp
    13 00000123 6A03                <1>             push    3
    14 00000125 6A00                <1>             push    0
    15                              <1> 
    16                              <1>             ;レジスタの保存
    17                              <1> 
    18 00000127 53                  <1>             push    bx
    19 00000128 51                  <1>             push    cx
    20 00000129 52                  <1>             push    dx
    21 0000012A 06                  <1>             push    es
    22 0000012B 56                  <1>             push    si
    23                              <1> 
    24                              <1>             ;処理
    25 0000012C 8B7604              <1>             mov     si, [bp + 4]                    ;構造体のアドレス
    26                              <1> 
    27                              <1>             ;CXレジスタの設定
    28                              <1>             ;[構造体のアドレス + オフセット + ?]
    29                              <1> 
    30 0000012F 8A6C02              <1>             mov     ch, [si + drive.cyln + 0]       ;CH = シリンダ番号（下位バイト）
    31 00000132 8A4C03              <1>             mov     cl, [si + drive.cyln + 1]       ;CL = シリンダ番号（上位バイト）
    32 00000135 C0E106              <1>             shl     cl, 6                           ;CL <<= 6; //最上位2ビットにシフト
    33 00000138 0A4C06              <1>             or      cl, [si + drive.sect]           ;CL |= セクタ番号;
    34                              <1> 
    35                              <1>             ;セクタ読み込み
    36                              <1> 
    37 0000013B 8A7404              <1>             mov     dh, [si + drive.head]           ;DH = ヘッド番号
    38 0000013E 8A14                <1>             mov     dl, [si + 0]                    ;DL = ドライブ番号
    39 00000140 B80000              <1>             mov     ax, 0x0000
    40 00000143 8EC0                <1>             mov     es, ax                          ;ESセグメント初期化
    41 00000145 8B5E08              <1>             mov     bx, [bp + 8]                    ;読み出し先アドレス
    42                              <1> 
    43                              <1>             ; do{
    44                              <1>             ;     AH = セクタ読み込み
    45                              <1>             ;     AL = セクタ数
    46                              <1> 
    47                              <1>             ;     CF = BIOS(0x13, 0x02);
    48                              <1>             ;     if (CF)
    49                              <1>             ;     {
    50                              <1>             ;         AL = 0;
    51                              <1>             ;         break;
    52                              <1>             ;     }
    53                              <1> 
    54                              <1>             ;     if (読み込んだセクタがある)
    55                              <1>             ;         break;
    56                              <1> 
    57                              <1>             ;     ret = 0;
    58                              <1>             ; } while(--retry);
    59                              <1> 
    60                              <1> .10L:
    61 00000148 B402                <1>             mov     ah, 0x02
    62 0000014A 8A4606              <1>             mov     al, [bp + 6]
    63                              <1> 
    64 0000014D CD13                <1>             int     0x13
    65 0000014F 7304                <1>             jnc     .11E                            ;成功したら.11Eへ
    66                              <1> 
    67 00000151 B000                <1>             mov     al, 0
    68 00000153 EB0C                <1>             jmp     .10E                            ;失敗したらリトライなしで.10Eへ
    69                              <1> .11E:
    70 00000155 3C00                <1>             cmp     al, 0                           ; if (読み込んだセクタ数 > 0)
    71 00000157 7508                <1>             jne     .10E                            ;   break;
    72                              <1> 
    73 00000159 B80000              <1>             mov     ax, 0                           ;戻り値
    74 0000015C FF4EFE              <1>             dec     word [bp - 2]
    75 0000015F 75E7                <1>             jnz     .10L                            ;読み込んだセクタ数が0なら.10Lへ
    76                              <1> .10E:
    77 00000161 B400                <1>             mov     ah, 0                           ;AH = 0 //ステータス情報の破棄
    78                              <1> 
    79                              <1>             ;レジスタの復帰
    80                              <1> 
    81 00000163 5E                  <1>             pop     si
    82 00000164 07                  <1>             pop     es
    83 00000165 5A                  <1>             pop     dx
    84 00000166 59                  <1>             pop     cx
    85 00000167 5B                  <1>             pop     bx
    86                              <1> 
    87                              <1>             ;スタックフレームの破棄
    88                              <1> 
    89 00000168 89EC                <1>             mov     sp, bp
    90 0000016A 5D                  <1>             pop     bp
    91                              <1> 
    92 0000016B C3                  <1>             ret
    80                                  
    81                                  ;ブートフラグ(512biteの終了)
    82                                  
    83 0000016C 00<rept>                        times   510 - ($ - $$) db 0x00
    84 000001FE 55AA                            db 0x55, 0xAA
    85                                  
    86                                  ;リアルモード時に取得した情報
    87                                  FONT:                                           ;フォント
    88 00000200 0000                    .seg:   dw 0
    89 00000202 0000                    .off:   dw 0
    90                                  
    91                                  %include    "../modules/real/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 00000204 55                  <1>         push    bp
     6 00000205 89E5                <1>         mov     bp, sp                          ;  +12|フラグ
     7                              <1>                                                 ;  +10|基数
     8                              <1>                                                 ;  + 8|保存先バッファサイズ
     9                              <1>                                                 ;  + 6|保存先バッファアドレス
    10                              <1>                                                 ;  + 4|変換する値
    11                              <1>                                                 ;  + 2|IP(戻り番地)
    12                              <1>                                                 ;BP+ 0|BP
    13                              <1>         ;レジスタの保存
    14                              <1> 
    15 00000207 50                  <1>         push    ax
    16 00000208 53                  <1>         push    bx
    17 00000209 51                  <1>         push    cx
    18 0000020A 52                  <1>         push    dx
    19 0000020B 56                  <1>         push    si
    20 0000020C 57                  <1>         push    di
    21                              <1> 
    22                              <1>         ;引数の取得
    23                              <1> 
    24 0000020D 8B4604              <1>         mov     ax, [bp + 4]                    ;val = 数値
    25 00000210 8B7606              <1>         mov     si, [bp + 6]                    ;dest= バッファアドレス
    26 00000213 8B4E08              <1>         mov     cx, [bp + 8]                    ;size= バッファサイズ
    27                              <1> 
    28 00000216 89F7                <1>         mov     di, si                          ;バッファの最後尾
    29 00000218 01CF                <1>         add     di, cx                          ;dest = &dest[size - 1]
    30 0000021A 4F                  <1>         dec     di
    31                              <1> 
    32 0000021B 8B5E0C              <1>         mov     bx, word [bp + 12]              ;flags = フラグ
    33                              <1>                                                 ;B2: 空白をゼロで埋める B1:+/-記号を付加する B0:値を符号付き変数として扱う
    34                              <1> 
    35                              <1>         ;符号付き判定
    36                              <1> 
    37 0000021E F7C30100            <1>         test    bx, 0b0001                      ; if (flags & 0x01) //符号付きならZF = 0
    38 00000222 7408                <1> .10Q    je      .10E                            ; {                 //符号なしならZF = 1だからjmp
    39 00000224 83F800              <1>         cmp     ax, 0                           ;   if (val < 0)    //CF = 1, ZF = 0
    40 00000227 7D03                <1> .12Q    jge     .12E                            ;   {               //val >= 0 なら必要ないのでjmp
    41 00000229 83CB02              <1>         or      bx, 0b0010                      ;       flags |= 2; //B1をセット
    42                              <1>                                                 ;}}
    43                              <1> .12E:
    44                              <1> .10E:
    45                              <1> 
    46                              <1>         ;符号出力判定
    47                              <1> 
    48 0000022C F7C30200            <1>         test    bx, 0b0010
    49 00000230 7410                <1> .20Q    je      .20E
    50 00000232 83F800              <1>         cmp     ax, 0
    51 00000235 7D07                <1> .22Q    jge     .22F
    52 00000237 F7D8                <1>         neg     ax                              ;符号反転
    53 00000239 C6042D              <1>         mov     [si], byte '-'                  ;符号表示
    54 0000023C EB03                <1>         jmp     .22E
    55                              <1> .22F:
    56 0000023E C6042B              <1>         mov     [si], byte '+'
    57                              <1> .22E:
    58 00000241 49                  <1>         dec     cx                              ;残りバッファサイズの減算 -> ?
    59                              <1> .20E:
    60                              <1> 
    61                              <1>         ;ASCII変換
    62                              <1> 
    63 00000242 8B5E0A              <1>         mov     bx, [bp + 10]                   ;BX = 基数
    64                              <1> 
    65                              <1> .30L:                                           ;do{
    66 00000245 BA0000              <1>         mov     dx, 0
    67 00000248 F7F3                <1>         div     bx                              ;   DX = DX:AX % BX;
    68                              <1>                                                 ;   AX = DX:AX / BX;
    69                              <1> 
    70 0000024A 89D6                <1>         mov     si, dx                          ;   //変換テーブル参照
    71 0000024C 8A94[7402]          <1>         mov     dl, byte [.ascii + si]          ;   DL = ASCII[DX];
    72                              <1> 
    73 00000250 8815                <1>         mov     [di], dl                        ;   *dest = DL;
    74 00000252 4F                  <1>         dec     di                              ;   dest--;
    75                              <1> 
    76 00000253 83F800              <1>         cmp     ax, 0
    77 00000256 E0ED                <1>         loopnz  .30L                            ;} while(AX);
    78                              <1> 
    79                              <1> .30E:
    80                              <1> 
    81                              <1>         ;空欄をゼロ埋め/空白埋め
    82                              <1> 
    83 00000258 83F900              <1>         cmp     cx, 0                           ;if (size)
    84 0000025B 740D                <1> .40Q:   je      .40E                            ;{
    85 0000025D B020                <1>         mov     al, ' '                         ;   AL = ' '; //空白埋め
    86 0000025F 837E0C04            <1>         cmp     [bp + 12], word 0b0100          ;   if (flags & 0x04)
    87 00000263 7502                <1> .42Q:   jne     .42E                            ;   {
    88 00000265 B030                <1>         mov     al, '0'                         ;       AL = '0'; //ゼロ埋め
    89                              <1> .42E:                                           ;   }
    90 00000267 FD                  <1>         std                                     ;   // DF = 1(減算)
    91 00000268 F3AA                <1>         rep stosb                               ;   while (--cx) * DI-- = ' ';
    92                              <1> .40E:                                           ;}
    93                              <1> 
    94                              <1>         ;レジスタの復帰
    95                              <1> 
    96 0000026A 5F                  <1>         pop     di
    97 0000026B 5E                  <1>         pop     si
    98 0000026C 5A                  <1>         pop     dx
    99 0000026D 59                  <1>         pop     cx
   100 0000026E 5B                  <1>         pop     bx
   101 0000026F 58                  <1>         pop     ax
   102                              <1> 
   103                              <1>         ;スタックフレームの破棄
   104                              <1> 
   105 00000270 89EC                <1>         mov     sp, bp
   106 00000272 5D                  <1>         pop     bp
   107                              <1> 
   108 00000273 C3                  <1>         ret
   109                              <1> 
   110                              <1> 
   111 00000274 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   111 0000027D 39414243444546      <1>
    92                                  %include    "../modules/real/get_drive_params.s"
     1                              <1> get_drive_params:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4 00000284 55                  <1>             push    bp                                  ;BP +4 | drive構造体のアドレス
     5 00000285 89E5                <1>             mov     bp, sp
     6                              <1> 
     7                              <1>             ;レジスタの保存
     8                              <1> 
     9 00000287 53                  <1>             push    bx
    10 00000288 51                  <1>             push    cx
    11 00000289 06                  <1>             push    es
    12 0000028A 56                  <1>             push    si
    13 0000028B 57                  <1>             push    di
    14                              <1> 
    15                              <1>             ;処理
    16 0000028C 8B7604              <1>             mov     si, [bp + 4]
    17                              <1> 
    18 0000028F B80000              <1>             mov     ax, 0                               ;Disk Base Table Pointer の初期化
    19 00000292 8EC0                <1>             mov     es, ax
    20 00000294 89C7                <1>             mov     di, ax                              ;int 0x13命令時ES:DIにディスクベーステーブルのアドレスが設定される
    21                              <1> 
    22 00000296 B408                <1>             mov     ah, 8
    23 00000298 8A14                <1>             mov     dl, [si + drive.no]                 ;DL = ドライブ番号
    24 0000029A CD13                <1>             int     0x13
    25                              <1> 
    26 0000029C 721B                <1> .10Q:       jc      .10F                                ; if (0 == CF) // 0:成功, 1:失敗
    27                              <1> .10T:                                                   ; {
    28 0000029E 88C8                <1>             mov     al, cl                              ;   AX = セクタ数;
    29 000002A0 83E03F              <1>             and     ax, 0x3F                            ;   // 下位6ビットのみ有効
    30                              <1> 
    31 000002A3 C0E906              <1>             shr     cl, 6                               ;   CX = シリンダ数;
    32 000002A6 C1C908              <1>             ror     cx, 8
    33 000002A9 41                  <1>             inc     cx                                  ;   //シリンダ番号は0始まりなので，最大シリンダ数を得るために1加算
    34                              <1> 
    35 000002AA 0FB6DE              <1>             movzx   bx, dh                              ;   BX = ヘッド数(1ベース) //ゼロ拡張(2byte)
    36 000002AD 43                  <1>             inc     bx                                  ;   //ヘッド番号も同様
    37                              <1> 
    38 000002AE 894C02              <1>             mov     [si + drive.cyln], cx               ;   //オフセットアドレスに格納
    39 000002B1 895C04              <1>             mov     [si + drive.head], bx
    40 000002B4 894406              <1>             mov     [si + drive.sect], ax
    41                              <1> 
    42 000002B7 EB03                <1>             jmp     .10E                                ; }
    43                              <1> .10F:                                                   ; else
    44 000002B9 B80000              <1>             mov     ax, 0                               ; {
    45                              <1> .10E:                                                   ;   AX = 0; //失敗
    46                              <1>                                                         ; }
    47                              <1> 
    48                              <1>             ;レジスタの復帰
    49 000002BC 5F                  <1>             pop     di
    50 000002BD 5E                  <1>             pop     si
    51 000002BE 07                  <1>             pop     es
    52 000002BF 59                  <1>             pop     cx
    53 000002C0 5B                  <1>             pop     bx
    54                              <1> 
    55                              <1>             ;スタックフレームの破棄
    56 000002C1 89EC                <1>             mov     sp, bp
    57 000002C3 5D                  <1>             pop     bp
    58                              <1> 
    59 000002C4 C3                  <1>             ret
    93                                  %include    "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4 000002C5 55                  <1>             push    bp                                          ; BP+4 | フォントアドレスの格納位置
     5 000002C6 89E5                <1>             mov     bp, sp
     6                              <1> 
     7                              <1>             ;レジスタの保存
     8                              <1> 
     9 000002C8 50                  <1>             push    ax
    10 000002C9 53                  <1>             push    bx
    11 000002CA 56                  <1>             push    si
    12 000002CB 06                  <1>             push    es
    13 000002CC 55                  <1>             push    bp
    14                              <1> 
    15                              <1>             ;引数の取得
    16 000002CD 8B7604              <1>             mov     si, [bp + 4]
    17                              <1> 
    18                              <1>             ;フォントアドレスの取得
    19 000002D0 B83011              <1>             mov     ax, 0x1130
    20 000002D3 B706                <1>             mov     bh, 0x06                                    ;8 x 16 font(vga/mcga)
    21 000002D5 CD10                <1>             int     0x10                                        ;ES:BP = Font Address
    22                              <1> 
    23                              <1>             ;フォントアドレスを保存
    24 000002D7 8C04                <1>             mov     [si + 0], es                                ;dest[0] = セグメント
    25 000002D9 895C02              <1>             mov     [si + 2], bx                                ;dest[1] = オフセット
    26                              <1> 
    27                              <1>             ;レジスタの復帰
    28 000002DC 5D                  <1>             pop     bp
    29 000002DD 07                  <1>             pop     es
    30 000002DE 5E                  <1>             pop     si
    31 000002DF 5B                  <1>             pop     bx
    32 000002E0 58                  <1>             pop     ax
    33                              <1> 
    34                              <1>             ;スタックフレームの破棄
    35 000002E1 89EC                <1>             mov     sp, bp
    36 000002E3 5D                  <1>             pop     bp
    37                              <1> 
    38 000002E4 C3                  <1>             ret
    94                                  
    95                                  ;ブート処理の第2ステージ
    96                                  
    97                                  stage_2:
    98                                  
    99                                          ;文字列を表示
   100 000002E5 68[5F03]E8D7FD83C4-             cdecl   puts, .s0
   100 000002ED 02                 
   101                                  
   102                                          ;ドライブ情報を取得
   103 000002EE 68[BA00]E890FF83C4-             cdecl   get_drive_params, BOOT          ;get_drive_params(DX, BOOT.CYLN);
   103 000002F6 02                 
   104 000002F7 83F800                          cmp     ax, 0                           ;if (0 == AX){
   105 000002FA 750C                    .10Q:   jne     .10E                            ;       puts(.e0);
   106 000002FC 68[9603]E8C0FD83C4-     .10T:   cdecl   puts, .e0                       ;       reboot();
   106 00000304 02                 
   107 00000305 E8D9FD                          call    reboot                          ; }
   108                                  .10E:
   109                                  
   110                                          ;ドライブ情報を表示
   111 00000308 A1[BA00]                        mov     ax, [BOOT + drive.no]           ;AX = ブートドライブ
   112 0000030B 6A046A106A0268-                 cdecl   int_to_str, ax, .p1, 2, 16, 0b0100
   112 00000312 [7703]50E8ECFE83C4-
   112 0000031A 0A                 
   113 0000031B A1[BC00]                        mov     ax, [BOOT + drive.cyln]           ;
   114 0000031E 6A046A106A0468-                 cdecl   int_to_str, ax, .p2, 4, 16, 0b0100
   114 00000325 [7F03]50E8D9FE83C4-
   114 0000032D 0A                 
   115 0000032E A1[BE00]                        mov     ax, [BOOT + drive.head]           ;AX = ヘッド数
   116 00000331 6A046A106A0268-                 cdecl   int_to_str, ax, .p3, 2, 16, 0b0100
   116 00000338 [8903]50E8C6FE83C4-
   116 00000340 0A                 
   117 00000341 A1[C000]                        mov     ax, [BOOT + drive.sect]           ;AX = トラック当たりのセクタ数
   118 00000344 6A046A106A0268-                 cdecl   int_to_str, ax, .p4, 2, 16, 0b0100
   118 0000034B [9103]50E8B3FE83C4-
   118 00000353 0A                 
   119 00000354 68[6E03]E868FD83C4-             cdecl   puts, .s1
   119 0000035C 02                 
   120                                  
   121                                  
   122                                          ;処理の終了
   123                                  
   124 0000035D EB52                            jmp     stage_3
   125                                  
   126                                          ;データ
   127                                  
   128 0000035F 326E64207374616765-     .s0     db      "2nd stage...", 0x0A, 0x0D, 0
   128 00000368 2E2E2E0A0D00       
   129                                  
   130 0000036E 2044726976653A3078      .s1     db      " Drive:0x"
   131 00000377 20202C20433A3078        .p1     db      "  , C:0x"
   132 0000037F 202020202C20483A30-     .p2     db      "    , H:0x"
   132 00000388 78                 
   133 00000389 20202C20533A3078        .p3     db      "  , S:0x"
   134 00000391 20200A0D00              .p4     db      "  ", 0x0A, 0x0D, 0
   135                                  
   136 00000396 43616E277420676574-     .e0     db      "Can't get drive Parameter.", 0
   136 0000039F 206472697665205061-
   136 000003A8 72616D657465722E00 
   137                                  
   138                                  stage_3:
   139                                  
   140                                          ;文字列を表示
   141 000003B1 68[F403]E80BFD83C4-             cdecl   puts, .s0
   141 000003B9 02                 
   142                                  
   143                                          ;プロテクトモードで使用するフォントは
   144                                          ;BIOSに内蔵されたものを流用する
   145                                  
   146 000003BA 68[0002]E805FF83C4-             cdecl   get_font_adr, FONT
   146 000003C2 02                 
   147                                  
   148                                          ;フォントアドレスの表示
   149 000003C3 6A046A106A0468-                 cdecl   int_to_str, word [FONT.seg], .p1, 4, 16, 0b0100
   149 000003CA [1104]FF36[0002]E8-
   149 000003D1 31FE83C40A         
   150 000003D6 6A046A106A0468-                 cdecl   int_to_str, word [FONT.off], .p2, 4, 16, 0b0100
   150 000003DD [1604]FF36[0202]E8-
   150 000003E4 1EFE83C40A         
   151 000003E9 68[0304]E8D3FC83C4-             cdecl   puts, .s1
   151 000003F1 02                 
   152                                  
   153                                          ;処理の終了
   154                                  
   155 000003F2 EBFE                            jmp     $
   156                                  
   157                                          ;データ
   158 000003F4 337264207374616765-     .s0     db      "3rd stage...", 0x0A, 0x0D, 0
   158 000003FD 2E2E2E0A0D00       
   159                                  
   160 00000403 20466F6E7420416464-     .s1     db      " Font Address="
   160 0000040C 726573733D         
   161 00000411 5A5A5A5A3A              .p1     db      "ZZZZ:"
   162 00000416 5A5A5A5A0A0D00          .p2     db      "ZZZZ", 0x0A, 0x0D, 0
   163 0000041D 0A0D00                          db      0x0A, 0x0D, 0
   164                                  
   165                                  ;パディング
   166                                  
   167 00000420 00<rept>                        times   BOOT_SIZE - ($ - $$)       db  0        ;8Kバイト
