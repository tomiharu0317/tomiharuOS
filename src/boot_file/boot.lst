     1                                  ;マクロ
     2                                  
     3                                  %include    "../include/define.s"
     1                              <1>         BOOT_LOAD       equ     0x7c00                          ;ブートプログラムのロード位置
     2                              <1> 
     3                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ;ブートコードサイズ
     4                              <1>         SECT_SIZE       equ     (512)                           ;セクタサイズ
     5                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ;ブートプログラムのセクタ数
     4                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc   drive                               ;セクタ読み出し時のパラメータを構造体で定義
    18 00000000 <res 00000002>      <1>             .no         resw    1           ;ドライブ番号
    19 00000002 <res 00000002>      <1>             .cyln       resw    1           ;シリンダ
    20 00000004 <res 00000002>      <1>             .head       resw    1           ;ヘッド
    21 00000006 <res 00000002>      <1>             .sect       resw    1           ;セクタ
    22                              <1> endstruc
     5                                  
     6                                          ORG     BOOT_LOAD
     7                                  
     8                                  
     9                                  ;エントリポイント
    10                                  
    11                                  entry:
    12 00000000 EB58                            jmp     ipl
    13                                  
    14                                  ; BIOS Parameter Block
    15                                  
    16 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    17                                  
    18                                  ; Initial Program Loader
    19                                  
    20                                  ipl:
    21                                  
    22 0000005A FA                              cli                                 ;割り込みの禁止
    23                                  
    24 0000005B B80000                          mov     ax, 0x0000
    25 0000005E 8ED8                            mov     ds, ax
    26 00000060 8EC0                            mov     es, ax
    27 00000062 8ED0                            mov     ss, ax
    28 00000064 BC007C                          mov     sp, BOOT_LOAD
    29                                  
    30 00000067 FB                              sti                                 ;割り込みの許可
    31                                  
    32                                          ;ブートドライブ番号の保存
    33                                  
    34 00000068 8816[BA00]                      mov     [BOOT + drive.no], dl       ;ブートドライブを保存
    35                                  
    36                                          ;文字列の表示
    37                                  
    38 0000006C 68[9900]E8500083C4-             cdecl   puts, .s0                   ;puts(.s0)
    38 00000074 02                 
    39                                  
    40                                          ;残りのセクタをすべて読み込む
    41                                  
    42 00000075 BB0F00                          mov     bx, BOOT_SECT - 1           ;BX = 残りのブートセクト数
    43 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE   ;CX = 次のロードアドレス
    44                                  
    45 0000007B 515368[BA00]E81D01-             cdecl   read_sect, BOOT, bx, cx     ;AX = read_sect(BOOT, bx, cx)
    45 00000083 83C406             
    46                                  
    47 00000086 39D8                            cmp     ax, bx
    48 00000088 740C                    .10Q:   jz      .10E                        ;if (ax != 残りのセクタ数)
    49                                  
    50 0000008A 68[A600]E8320083C4-     .10T:   cdecl   puts, .e0                   ;{  puts(.e0);
    50 00000092 02                 
    51 00000093 E8CB00                          call    reboot                      ;   reboot(); //再起動
    52                                  
    53                                  .10E:                                       ;}
    54                                  
    55                                          ;次のステージへ移行
    56                                  
    57 00000096 E96701                          jmp     stage_2                     ;ブート処理の第2ステージへ
    58                                  
    59                                          ;データ
    60                                  
    61 00000099 626F6F74696E672E2E-     .s0     db      "booting...", 0x0A, 0x0D, 0
    61 000000A2 2E0A0D00           
    62 000000A6 4572726F723A207365-     .e0     db      "Error: sector read", 0
    62 000000AF 63746F722072656164-
    62 000000B8 00                 
    63                                  
    64                                  ;ブートドライブに関する情報
    65                                  
    66 000000B9 00                      ALIGN 2, db 0
    67                                  BOOT:
    68                                          istruc  drive
    69 000000BA 0000                                at  drive.no,       dw 0        ;ドライブ番号
    70 000000BC 0000                                at  drive.cyln,     dw 0        ;シリンダ
    71 000000BE 0000                                at  drive.head,     dw 0        ;ヘッド
    72 000000C0 0200                                at  drive.sect,     dw 2        ;セクタ
    73                                          iend
    74                                  
    75                                  ;モジュール
    76                                  
    77                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 000000C2 55                  <1>         push    bp
     6 000000C3 89E5                <1>         mov     bp, sp                                  ;  +4 | 文字列へのアドレス
     7                              <1>                                                         ;  +2 | Instruction Pointer
     8                              <1>                                                         ;BP+0 | BP
     9                              <1> 
    10                              <1>         ;レジスタを保存
    11                              <1> 
    12 000000C5 50                  <1>         push    ax
    13 000000C6 53                  <1>         push    bx
    14 000000C7 56                  <1>         push    si
    15                              <1> 
    16                              <1>         ;引数の取得
    17                              <1> 
    18 000000C8 8B7604              <1>         mov     si, [bp + 4]                            ;Source Index == 文字列へのアドレス
    19                              <1> 
    20                              <1>         ;処理
    21                              <1> 
    22 000000CB B40E                <1>         mov     ah, 0x0E
    23 000000CD BB0000              <1>         mov     bx, 0x0000
    24 000000D0 FC                  <1>         cld
    25                              <1> 
    26                              <1> .10L:                                                   ;do{
    27                              <1>                                                         ;   AL = *SI++
    28 000000D1 AC                  <1>         lodsb                                           ;
    29                              <1>                                                         ;   if (0 == AL)
    30 000000D2 3C00                <1>         cmp     al, 0                                   ;       break;
    31 000000D4 7404                <1>         je      .10E                                    ;
    32                              <1>                                                         ;   Int10(0x0E, AL); //文字出力
    33 000000D6 CD10                <1>         int     0x10                                    ;} while(1);
    34 000000D8 EBF7                <1>         jmp     .10L
    35                              <1> 
    36                              <1> .10E:
    37                              <1> 
    38                              <1>         ;レジスタの復帰
    39                              <1> 
    40 000000DA 5E                  <1>         pop     si
    41 000000DB 5B                  <1>         pop     bx
    42 000000DC 58                  <1>         pop     ax
    43                              <1> 
    44                              <1>         ;スタックフレームの破棄
    45                              <1> 
    46 000000DD 89EC                <1>         mov     sp, bp
    47 000000DF 5D                  <1>         pop     bp
    48                              <1> 
    49 000000E0 C3                  <1>         ret
    78                                  %include    "../modules/real/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 000000E1 55                  <1>         push    bp
     6 000000E2 89E5                <1>         mov     bp, sp                          ;  +12|フラグ
     7                              <1>                                                 ;  +10|基数
     8                              <1>                                                 ;  + 8|保存先バッファサイズ
     9                              <1>                                                 ;  + 6|保存先バッファアドレス
    10                              <1>                                                 ;  + 4|変換する値
    11                              <1>                                                 ;  + 2|IP(戻り番地)
    12                              <1>                                                 ;BP+ 0|BP
    13                              <1>         ;レジスタの保存
    14                              <1> 
    15 000000E4 50                  <1>         push    ax
    16 000000E5 53                  <1>         push    bx
    17 000000E6 51                  <1>         push    cx
    18 000000E7 52                  <1>         push    dx
    19 000000E8 56                  <1>         push    si
    20 000000E9 57                  <1>         push    di
    21                              <1> 
    22                              <1>         ;引数の取得
    23                              <1> 
    24 000000EA 8B4604              <1>         mov     ax, [bp + 4]                    ;val = 数値
    25 000000ED 8B7606              <1>         mov     si, [bp + 6]                    ;dest= バッファアドレス
    26 000000F0 8B4E08              <1>         mov     cx, [bp + 8]                    ;size= バッファサイズ
    27                              <1> 
    28 000000F3 89F7                <1>         mov     di, si                          ;バッファの最後尾
    29 000000F5 01CF                <1>         add     di, cx                          ;dest = &dest[size - 1]
    30 000000F7 4F                  <1>         dec     di
    31                              <1> 
    32 000000F8 8B5E0C              <1>         mov     bx, word [bp + 12]              ;flags = フラグ
    33                              <1>                                                 ;B2: 空白をゼロで埋める B1:+/-記号を付加する B0:値を符号付き変数として扱う
    34                              <1> 
    35                              <1>         ;符号付き判定
    36                              <1> 
    37 000000FB F7C30100            <1>         test    bx, 0b0001                      ; if (flags & 0x01) //符号付きならZF = 0
    38 000000FF 7408                <1> .10Q    je      .10E                            ; {                 //符号なしならZF = 1だからjmp
    39 00000101 83F800              <1>         cmp     ax, 0                           ;   if (val < 0)    //CF = 1, ZF = 0
    40 00000104 7D03                <1> .12Q    jge     .12E                            ;   {               //val >= 0 なら必要ないのでjmp
    41 00000106 83CB02              <1>         or      bx, 0b0010                      ;       flags |= 2; //B1をセット
    42                              <1>                                                 ;}}
    43                              <1> .12E:
    44                              <1> .10E:
    45                              <1> 
    46                              <1>         ;符号出力判定
    47                              <1> 
    48 00000109 F7C30200            <1>         test    bx, 0b0010
    49 0000010D 7410                <1> .20Q    je      .20E
    50 0000010F 83F800              <1>         cmp     ax, 0
    51 00000112 7D07                <1> .22Q    jge     .22F
    52 00000114 F7D8                <1>         neg     ax                              ;符号反転
    53 00000116 C6042D              <1>         mov     [si], byte '-'                  ;符号表示
    54 00000119 EB03                <1>         jmp     .22E
    55                              <1> .22F:
    56 0000011B C6042B              <1>         mov     [si], byte '+'
    57                              <1> .22E:
    58 0000011E 49                  <1>         dec     cx                              ;残りバッファサイズの減算 -> ?
    59                              <1> .20E:
    60                              <1> 
    61                              <1>         ;ASCII変換
    62                              <1> 
    63 0000011F 8B5E0A              <1>         mov     bx, [bp + 10]                   ;BX = 基数
    64                              <1> 
    65                              <1> .30L:                                           ;do{
    66 00000122 BA0000              <1>         mov     dx, 0
    67 00000125 F7F3                <1>         div     bx                              ;   DX = DX:AX % BX;
    68                              <1>                                                 ;   AX = DX:AX / BX;
    69                              <1> 
    70 00000127 89D6                <1>         mov     si, dx                          ;   //変換テーブル参照
    71 00000129 8A94[5101]          <1>         mov     dl, byte [.ascii + si]          ;   DL = ASCII[DX];
    72                              <1> 
    73 0000012D 8815                <1>         mov     [di], dl                        ;   *dest = DL;
    74 0000012F 4F                  <1>         dec     di                              ;   dest--;
    75                              <1> 
    76 00000130 83F800              <1>         cmp     ax, 0
    77 00000133 E0ED                <1>         loopnz  .30L                            ;} while(AX);
    78                              <1> 
    79                              <1> .30E:
    80                              <1> 
    81                              <1>         ;空欄をゼロ埋め/空白埋め
    82                              <1> 
    83 00000135 83F900              <1>         cmp     cx, 0                           ;if (size)
    84 00000138 740D                <1> .40Q:   je      .40E                            ;{
    85 0000013A B020                <1>         mov     al, ' '                         ;   AL = ' '; //空白埋め
    86 0000013C 837E0C04            <1>         cmp     [bp + 12], word 0b0100          ;   if (flags & 0x04)
    87 00000140 7502                <1> .42Q:   jne     .42E                            ;   {
    88 00000142 B030                <1>         mov     al, '0'                         ;       AL = '0'; //ゼロ埋め
    89                              <1> .42E:                                           ;   }
    90 00000144 FD                  <1>         std                                     ;   // DF = 1(減算)
    91 00000145 F3AA                <1>         rep stosb                               ;   while (--cx) * DI-- = ' ';
    92                              <1> .40E:                                           ;}
    93                              <1> 
    94                              <1>         ;レジスタの復帰
    95                              <1> 
    96 00000147 5F                  <1>         pop     di
    97 00000148 5E                  <1>         pop     si
    98 00000149 5A                  <1>         pop     dx
    99 0000014A 59                  <1>         pop     cx
   100 0000014B 5B                  <1>         pop     bx
   101 0000014C 58                  <1>         pop     ax
   102                              <1> 
   103                              <1>         ;スタックフレームの破棄
   104                              <1> 
   105 0000014D 89EC                <1>         mov     sp, bp
   106 0000014F 5D                  <1>         pop     bp
   107                              <1> 
   108 00000150 C3                  <1>         ret
   109                              <1> 
   110                              <1> 
   111 00000151 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   111 0000015A 39414243444546      <1>
    79                                  %include    "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3                              <1>         ;メッセージを表示
     4                              <1> 
     5 00000161 68[7D01]E85BFF83C4- <1>         cdecl   puts, .s0                       ;//再起動メッセージを表示
     5 00000169 02                  <1>
     6                              <1> 
     7                              <1>         ;キー入力待ち
     8                              <1> 
     9                              <1> .10L:                                           ; do {
    10 0000016A B410                <1>         mov     ah, 0x10                        ;       //キー入力待ち
    11 0000016C CD16                <1>         int     0x16                            ;       AL = BIOS(0x16, 0x10)
    12                              <1> 
    13 0000016E 3C20                <1>         cmp     al, ' '                         ;       ZF = (AL == ' ');
    14 00000170 75F8                <1>         jne     .10L                            ; } while (!ZF);
    15                              <1> 
    16                              <1>         ;改行を出力
    17                              <1> 
    18 00000172 68[9B01]E84AFF83C4- <1>         cdecl   puts, .s1
    18 0000017A 02                  <1>
    19                              <1> 
    20                              <1>         ;再起動
    21                              <1> 
    22 0000017B CD19                <1>         int     0x19                            ; BIOS(0x19);
    23                              <1> 
    24                              <1>         ;文字列データ
    25                              <1> 
    26 0000017D 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    26 00000186 414345206B65792074- <1>
    26 0000018F 6F207265626F6F742E- <1>
    26 00000198 2E2E00              <1>
    27 0000019B 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    80                                  %include    "../modules/real/read_sect.s"
     1                              <1> read_sect:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4                              <1>                                                     ;   +8 | 読み出し先アドレス
     5                              <1>                                                     ;   +6 | セクタ数
     6                              <1>                                                     ;   +4 | drive構造体のアドレス
     7                              <1>                                                     ;   +2 | 戻り番地
     8                              <1>                                                     ;BP +0 | BP
     9                              <1>                                                     ;   -2 | retry = 3; //リトライ回数
    10                              <1>                                                     ;   -4 | sect  = 0; //読み込みセクタ数
    11 000001A0 55                  <1>             push    bp
    12 000001A1 89E5                <1>             mov     bp, sp
    13 000001A3 6A03                <1>             push    3
    14 000001A5 6A00                <1>             push    0
    15                              <1> 
    16                              <1>             ;レジスタの保存
    17                              <1> 
    18 000001A7 53                  <1>             push    bx
    19 000001A8 51                  <1>             push    cx
    20 000001A9 52                  <1>             push    dx
    21 000001AA 06                  <1>             push    es
    22 000001AB 56                  <1>             push    si
    23                              <1> 
    24                              <1>             ;処理
    25 000001AC 8B7604              <1>             mov     si, [bp + 4]                    ;構造体のアドレス
    26                              <1> 
    27                              <1>             ;CXレジスタの設定
    28                              <1>             ;[構造体のアドレス + オフセット + ?]
    29                              <1> 
    30 000001AF 8A6C02              <1>             mov     ch, [si + drive.cyln + 0]       ;CH = シリンダ番号（下位バイト）
    31 000001B2 8A4C03              <1>             mov     cl, [si + drive.cyln + 1]       ;CL = シリンダ番号（上位バイト）
    32 000001B5 C0E106              <1>             shl     cl, 6                           ;CL <<= 6; //最上位2ビットにシフト
    33 000001B8 0A4C06              <1>             or      cl, [si + drive.sect]           ;CL |= セクタ番号;
    34                              <1> 
    35                              <1>             ;セクタ読み込み
    36                              <1> 
    37 000001BB 8A7404              <1>             mov     dh, [si + drive.head]           ;DH = ヘッド番号
    38 000001BE 8A14                <1>             mov     dl, [si + 0]                    ;DL = ドライブ番号
    39 000001C0 B80000              <1>             mov     ax, 0x0000
    40 000001C3 8EC0                <1>             mov     es, ax                          ;ESセグメント初期化
    41 000001C5 8B5E08              <1>             mov     bx, [bp + 8]                    ;読み出し先アドレス
    42                              <1> 
    43                              <1>             ; do{
    44                              <1>             ;     AH = セクタ読み込み
    45                              <1>             ;     AL = セクタ数
    46                              <1> 
    47                              <1>             ;     CF = BIOS(0x13, 0x02);
    48                              <1>             ;     if (CF)
    49                              <1>             ;     {
    50                              <1>             ;         AL = 0;
    51                              <1>             ;         break;
    52                              <1>             ;     }
    53                              <1> 
    54                              <1>             ;     if (読み込んだセクタがある)
    55                              <1>             ;         break;
    56                              <1> 
    57                              <1>             ;     ret = 0;
    58                              <1>             ; } while(--retry);
    59                              <1> 
    60                              <1> .10L:
    61 000001C8 B402                <1>             mov     ah, 0x02
    62 000001CA 8A4606              <1>             mov     al, [bp + 6]
    63                              <1> 
    64 000001CD CD13                <1>             int     0x13
    65 000001CF 7304                <1>             jnc     .11E                            ;成功したら.11Eへ
    66                              <1> 
    67 000001D1 B000                <1>             mov     al, 0
    68 000001D3 EB0C                <1>             jmp     .10E                            ;失敗したらリトライなしで.10Eへ
    69                              <1> .11E:
    70 000001D5 3C00                <1>             cmp     al, 0                           ; if (読み込んだセクタ数 > 0)
    71 000001D7 7508                <1>             jne     .10E                            ;   break;
    72                              <1> 
    73 000001D9 B80000              <1>             mov     ax, 0                           ;戻り値
    74 000001DC FF4EFE              <1>             dec     word [bp - 2]
    75 000001DF 75E7                <1>             jnz     .10L                            ;読み込んだセクタ数が0なら.10Lへ
    76                              <1> .10E:
    77 000001E1 B400                <1>             mov     ah, 0                           ;AH = 0 //ステータス情報の破棄
    78                              <1> 
    79                              <1>             ;レジスタの復帰
    80                              <1> 
    81 000001E3 5E                  <1>             pop     si
    82 000001E4 07                  <1>             pop     es
    83 000001E5 5A                  <1>             pop     dx
    84 000001E6 59                  <1>             pop     cx
    85 000001E7 5B                  <1>             pop     bx
    86                              <1> 
    87                              <1>             ;スタックフレームの破棄
    88                              <1> 
    89 000001E8 89EC                <1>             mov     sp, bp
    90 000001EA 5D                  <1>             pop     bp
    91                              <1> 
    92 000001EB C3                  <1>             ret
    81                                  
    82                                  ;ブートフラグ(512biteの終了)
    83                                  
    84 000001EC 00<rept>                        times   510 - ($ - $$) db 0x00
    85 000001FE 55AA                            db 0x55, 0xAA
    86                                  
    87                                  ;ブート処理の第2ステージ
    88                                  
    89                                  stage_2:
    90                                  
    91                                          ;文字列を表示
    92 00000200 68[0B02]E8BCFE83C4-             cdecl   puts, .s0
    92 00000208 02                 
    93                                  
    94                                          ;処理の終了
    95                                  
    96 00000209 EBFE                            jmp     $
    97                                  
    98                                          ;データ
    99                                  
   100 0000020B 326E64207374616765-     .s0     db      "2nd stage...", 0x0A, 0x0D, 0
   100 00000214 2E2E2E0A0D00       
   101                                  
   102                                  ;パディング（ファイルサイズは8Kバイト）
   103                                  
   104 0000021A 00<rept>                        times   BOOT_SIZE - ($ - $$)       db  0
