     1                                          BOOT_LOAD       equ     0x7c00
     2                                  
     3                                          ORG     BOOT_LOAD
     4                                  ;マクロ
     5                                  
     6                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
     7                                  
     8                                  ;エントリポイント
     9                                  
    10                                  entry:
    11 00000000 EB58                            jmp     ipl
    12                                  
    13                                          ; BIOS Parameter Block
    14                                  
    15 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    16                                  
    17                                          ; Initial Program Loader
    18                                  
    19                                  ipl:
    20                                  
    21 0000005A FA                              cli                                 ;割り込みの禁止
    22                                  
    23 0000005B B80000                          mov     ax, 0x0000
    24 0000005E 8ED8                            mov     ds, ax
    25 00000060 8EC0                            mov     es, ax
    26 00000062 8ED0                            mov     ss, ax
    27 00000064 BC007C                          mov     sp, BOOT_LOAD
    28                                  
    29 00000067 FB                              sti                                 ;割り込みの許可
    30                                  
    31 00000068 8816[BA00]                      mov     [BOOT.DRIVE], dl            ;ブートドライブを保存
    32                                  
    33                                          ;文字列の表示
    34                                  
    35 0000006C 68[9A00]E84A0083C4-             cdecl   puts, .s0                   ;puts(.s0)
    35 00000074 02                 
    36                                  
    37                                          ;次の512バイトを読み込む
    38                                  
    39 00000075 B402                            mov     ah, 0x02                    ;AH = 読み込み命令
    40 00000077 B001                            mov     al, 1                       ;AL = 読み込みセクタ数
    41 00000079 B90200                          mov     cx, 0x0002                  ;CX = シリンダ/セクタ
    42 0000007C B600                            mov     dh, 0x00                    ;DH = ヘッド位置
    43 0000007E 8A16[BA00]                      mov     dl, [BOOT.DRIVE]            ;DL = ドライブ番号
    44 00000082 BB007E                          mov     bx, 0x7C00 + 512            ;BX = 読み込みアドレス（オフセット）
    45 00000085 CD13                            int     0x13                        ;Cf = 0 if succeed, else 1
    46 00000087 730C                    .10Q:   jnc     .10E
    47 00000089 68[A700]E82D0083C4-     .10T:   cdecl   puts, .e0
    47 00000091 02                 
    48 00000092 E8C600                          call    reboot
    49                                  .10E:
    50                                  
    51                                          ;次のステージへ移行
    52                                  
    53 00000095 E96801                          jmp     stage_2                     ;ブート処理の第2ステージへ
    54                                  
    55                                          ; 処理の終了
    56                                  
    57 00000098 EBFE                            jmp     $
    58                                  
    59 0000009A 426F6F74696E672E2E-     .s0     db      "Booting...", 0x0A, 0x0D, 0
    59 000000A3 2E0A0D00           
    60                                  ;.s1     db      "--------",   0x0A, 0x0D, 0
    61 000000A7 4572726F723A207365-     .e0     db      "Error: sector read", 0
    61 000000B0 63746F722072656164-
    61 000000B9 00                 
    62                                  
    63                                  ALIGN 2, db 0
    64                                  BOOT:                                       ;ブートドライブに関する情報
    65 000000BA 0000                    .DRIVE:         dw  0                       ;ドライブ番号
    66                                  
    67                                  ;モジュール
    68                                  
    69                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 000000BC 55                  <1>         push    bp
     6 000000BD 89E5                <1>         mov     bp, sp                                  ;  +4 | 文字列へのアドレス
     7                              <1>                                                         ;  +2 | Instruction Pointer
     8                              <1>                                                         ;BP+0 | BP
     9                              <1> 
    10                              <1>         ;レジスタを保存
    11                              <1> 
    12 000000BF 50                  <1>         push    ax
    13 000000C0 53                  <1>         push    bx
    14 000000C1 56                  <1>         push    si
    15                              <1> 
    16                              <1>         ;引数の取得
    17                              <1> 
    18 000000C2 8B7604              <1>         mov     si, [bp + 4]                            ;Source Index == 文字列へのアドレス
    19                              <1> 
    20                              <1>         ;処理
    21                              <1> 
    22 000000C5 B40E                <1>         mov     ah, 0x0E
    23 000000C7 BB0000              <1>         mov     bx, 0x0000
    24 000000CA FC                  <1>         cld
    25                              <1> 
    26                              <1> .10L:                                                   ;do{
    27                              <1>                                                         ;   AL = *SI++
    28 000000CB AC                  <1>         lodsb                                           ;
    29                              <1>                                                         ;   if (0 == AL)
    30 000000CC 3C00                <1>         cmp     al, 0                                   ;       break;
    31 000000CE 7404                <1>         je      .10E                                    ;
    32                              <1>                                                         ;   Int10(0x0E, AL); //文字出力
    33 000000D0 CD10                <1>         int     0x10                                    ;} while(1);
    34 000000D2 EBF7                <1>         jmp     .10L
    35                              <1> 
    36                              <1> .10E:
    37                              <1> 
    38                              <1>         ;レジスタの復帰
    39                              <1> 
    40 000000D4 5E                  <1>         pop     si
    41 000000D5 5B                  <1>         pop     bx
    42 000000D6 58                  <1>         pop     ax
    43                              <1> 
    44                              <1>         ;スタックフレームの破棄
    45                              <1> 
    46 000000D7 89EC                <1>         mov     sp, bp
    47 000000D9 5D                  <1>         pop     bp
    48                              <1> 
    49 000000DA C3                  <1>         ret
    70                                  %include    "../modules/real/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 000000DB 55                  <1>         push    bp
     6 000000DC 89E5                <1>         mov     bp, sp                          ;  +12|フラグ
     7                              <1>                                                 ;  +10|基数
     8                              <1>                                                 ;  + 8|保存先バッファサイズ
     9                              <1>                                                 ;  + 6|保存先バッファアドレス
    10                              <1>                                                 ;  + 4|変換する値
    11                              <1>                                                 ;  + 2|IP(戻り番地)
    12                              <1>                                                 ;BP+ 0|BP
    13                              <1>         ;レジスタの保存
    14                              <1> 
    15 000000DE 50                  <1>         push    ax
    16 000000DF 53                  <1>         push    bx
    17 000000E0 51                  <1>         push    cx
    18 000000E1 52                  <1>         push    dx
    19 000000E2 56                  <1>         push    si
    20 000000E3 57                  <1>         push    di
    21                              <1> 
    22                              <1>         ;引数の取得
    23                              <1> 
    24 000000E4 8B4604              <1>         mov     ax, [bp + 4]                    ;val = 数値
    25 000000E7 8B7606              <1>         mov     si, [bp + 6]                    ;dest= バッファアドレス
    26 000000EA 8B4E08              <1>         mov     cx, [bp + 8]                    ;size= バッファサイズ
    27                              <1> 
    28 000000ED 89F7                <1>         mov     di, si                          ;バッファの最後尾
    29 000000EF 01CF                <1>         add     di, cx                          ;dest = &dest[size - 1]
    30 000000F1 4F                  <1>         dec     di
    31                              <1> 
    32 000000F2 8B5E0C              <1>         mov     bx, word [bp + 12]              ;flags = フラグ
    33                              <1>                                                 ;B2: 空白をゼロで埋める B1:+/-記号を付加する B0:値を符号付き変数として扱う
    34                              <1> 
    35                              <1>         ;符号付き判定
    36                              <1> 
    37 000000F5 F7C30100            <1>         test    bx, 0b0001                      ; if (flags & 0x01) //符号付きならZF = 0
    38 000000F9 7408                <1> .10Q    je      .10E                            ; {                 //符号なしならZF = 1だからjmp
    39 000000FB 83F800              <1>         cmp     ax, 0                           ;   if (val < 0)    //CF = 1, ZF = 0
    40 000000FE 7D03                <1> .12Q    jge     .12E                            ;   {               //val >= 0 なら必要ないのでjmp
    41 00000100 83CB02              <1>         or      bx, 0b0010                      ;       flags |= 2; //B1をセット
    42                              <1>                                                 ;}}
    43                              <1> .12E:
    44                              <1> .10E:
    45                              <1> 
    46                              <1>         ;符号出力判定
    47                              <1> 
    48 00000103 F7C30200            <1>         test    bx, 0b0010
    49 00000107 7410                <1> .20Q    je      .20E
    50 00000109 83F800              <1>         cmp     ax, 0
    51 0000010C 7D07                <1> .22Q    jge     .22F
    52 0000010E F7D8                <1>         neg     ax                              ;符号反転
    53 00000110 C6042D              <1>         mov     [si], byte '-'                  ;符号表示
    54 00000113 EB03                <1>         jmp     .22E
    55                              <1> .22F:
    56 00000115 C6042B              <1>         mov     [si], byte '+'
    57                              <1> .22E:
    58 00000118 49                  <1>         dec     cx                              ;残りバッファサイズの減算 -> ?
    59                              <1> .20E:
    60                              <1> 
    61                              <1>         ;ASCII変換
    62                              <1> 
    63 00000119 8B5E0A              <1>         mov     bx, [bp + 10]                   ;BX = 基数
    64                              <1> 
    65                              <1> .30L:                                           ;do{
    66 0000011C BA0000              <1>         mov     dx, 0
    67 0000011F F7F3                <1>         div     bx                              ;   DX = DX:AX % BX;
    68                              <1>                                                 ;   AX = DX:AX / BX;
    69                              <1> 
    70 00000121 89D6                <1>         mov     si, dx                          ;   //変換テーブル参照
    71 00000123 8A94[4B01]          <1>         mov     dl, byte [.ascii + si]          ;   DL = ASCII[DX];
    72                              <1> 
    73 00000127 8815                <1>         mov     [di], dl                        ;   *dest = DL;
    74 00000129 4F                  <1>         dec     di                              ;   dest--;
    75                              <1> 
    76 0000012A 83F800              <1>         cmp     ax, 0
    77 0000012D E0ED                <1>         loopnz  .30L                            ;} while(AX);
    78                              <1> 
    79                              <1> .30E:
    80                              <1> 
    81                              <1>         ;空欄をゼロ埋め/空白埋め
    82                              <1> 
    83 0000012F 83F900              <1>         cmp     cx, 0                           ;if (size)
    84 00000132 740D                <1> .40Q:   je      .40E                            ;{
    85 00000134 B020                <1>         mov     al, ' '                         ;   AL = ' '; //空白埋め
    86 00000136 837E0C04            <1>         cmp     [bp + 12], word 0b0100          ;   if (flags & 0x04)
    87 0000013A 7502                <1> .42Q:   jne     .42E                            ;   {
    88 0000013C B030                <1>         mov     al, '0'                         ;       AL = '0'; //ゼロ埋め
    89                              <1> .42E:                                           ;   }
    90 0000013E FD                  <1>         std                                     ;   // DF = 1(減算)
    91 0000013F F3AA                <1>         rep stosb                               ;   while (--cx) * DI-- = ' ';
    92                              <1> .40E:                                           ;}
    93                              <1> 
    94                              <1>         ;レジスタの復帰
    95                              <1> 
    96 00000141 5F                  <1>         pop     di
    97 00000142 5E                  <1>         pop     si
    98 00000143 5A                  <1>         pop     dx
    99 00000144 59                  <1>         pop     cx
   100 00000145 5B                  <1>         pop     bx
   101 00000146 58                  <1>         pop     ax
   102                              <1> 
   103                              <1>         ;スタックフレームの破棄
   104                              <1> 
   105 00000147 89EC                <1>         mov     sp, bp
   106 00000149 5D                  <1>         pop     bp
   107                              <1> 
   108 0000014A C3                  <1>         ret
   109                              <1> 
   110                              <1> 
   111 0000014B 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   111 00000154 39414243444546      <1>
    71                                  %include    "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3                              <1>         ;メッセージを表示
     4                              <1> 
     5 0000015B 68[7701]E85BFF83C4- <1>         cdecl   puts, .s0                       ;//再起動メッセージを表示
     5 00000163 02                  <1>
     6                              <1> 
     7                              <1>         ;キー入力待ち
     8                              <1> 
     9                              <1> .10L:                                           ; do {
    10 00000164 B410                <1>         mov     ah, 0x10                        ;       //キー入力待ち
    11 00000166 CD16                <1>         int     0x16                            ;       AL = BIOS(0x16, 0x10)
    12                              <1> 
    13 00000168 3C20                <1>         cmp     al, ' '                         ;       ZF = (AL == ' ');
    14 0000016A 75F8                <1>         jne     .10L                            ; } while (!ZF);
    15                              <1> 
    16                              <1>         ;改行を出力
    17                              <1> 
    18 0000016C 68[9501]E84AFF83C4- <1>         cdecl   puts, .s1
    18 00000174 02                  <1>
    19                              <1> 
    20                              <1>         ;再起動
    21                              <1> 
    22 00000175 CD19                <1>         int     0x19                            ; BIOS(0x19);
    23                              <1> 
    24                              <1>         ;文字列データ
    25                              <1> 
    26 00000177 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    26 00000180 414345206B65792074- <1>
    26 00000189 6F207265626F6F742E- <1>
    26 00000192 2E2E00              <1>
    27 00000195 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    72                                  
    73                                  ;ブートフラグ(512biteの終了)
    74                                  
    75 0000019A 00<rept>                        times   510 - ($ - $$) db 0x00
    76 000001FE 55AA                            db 0x55, 0xAA
    77                                  
    78                                  ;ブート処理の第2ステージ
    79                                  
    80                                  stage_2:
    81                                  
    82                                          ;文字列を表示
    83 00000200 68[0B02]E8B6FE83C4-             cdecl   puts, .s0
    83 00000208 02                 
    84                                  
    85                                          ;処理の終了
    86                                  
    87 00000209 EBFE                            jmp     $
    88                                  
    89                                          ;データ
    90                                  
    91 0000020B 326E64207374616765-     .s0     db      "2nd stage...", 0x0A, 0x0D, 0
    91 00000214 2E2E2E0A0D00       
    92                                  
    93                                  ;パディング（ファイルサイズは8Kバイト）
    94                                  
    95 0000021A 00<rept>                        times   (1024 * 8) - ($ - $$)       db  0
