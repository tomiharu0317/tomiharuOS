     1                                  ;マクロ
     2                                  
     3                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ;ブートプログラムのロード位置
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ;セクタサイズ
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ;ブートプログラムのセクタ数
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE   equ     0x0010_0000                                     ; 0010_0000 ~ 0010_07FF
     4                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
     5                                  
     6                                          ORG     BOOT_LOAD
     7                                  
     8                                  
     9                                  ;エントリポイント
    10                                  
    11                                  entry:
    12 00000000 EB58                            jmp     ipl
    13                                  
    14                                  ; BIOS Parameter Block
    15                                  
    16 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    17                                  
    18                                  ; Initial Program Loader
    19                                  
    20                                  ipl:
    21                                  
    22 0000005A FA                              cli                                 ;割り込みの禁止
    23                                  
    24 0000005B B80000                          mov     ax, 0x0000
    25 0000005E 8ED8                            mov     ds, ax
    26 00000060 8EC0                            mov     es, ax
    27 00000062 8ED0                            mov     ss, ax
    28 00000064 BC007C                          mov     sp, BOOT_LOAD
    29                                  
    30 00000067 FB                              sti                                 ;割り込みの許可
    31                                  
    32                                          ;ブートドライブ番号の保存
    33                                  
    34 00000068 8816[BA00]                      mov     [BOOT + drive.no], dl       ;ブートドライブを保存
    35                                  
    36                                          ;文字列の表示
    37                                  
    38 0000006C 68[9900]E8500083C4-             cdecl   puts, .s0                   ;puts(.s0)
    38 00000074 02                 
    39                                  
    40                                          ;残りのセクタをすべて読み込む
    41                                  
    42 00000075 BB0F00                          mov     bx, BOOT_SECT - 1           ;BX = 残りのブートセクト数
    43 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE   ;CX = 次のロードアドレス
    44                                  
    45 0000007B 515368[BA00]E89D00-             cdecl   read_chs, BOOT, bx, cx     ;AX = read_chs(BOOT, bx, cx)
    45 00000083 83C406             
    46                                  
    47 00000086 39D8                            cmp     ax, bx
    48 00000088 740C                    .10Q:   jz      .10E                        ;if (ax != 残りのセクタ数)
    49                                  
    50 0000008A 68[A600]E8320083C4-     .10T:   cdecl   puts, .e0                   ;{  puts(.e0);
    50 00000092 02                 
    51 00000093 E84B00                          call    reboot                      ;   reboot(); //再起動
    52                                  
    53                                  .10E:                                       ;}
    54                                  
    55                                          ;次のステージへ移行
    56                                  
    57 00000096 E9D305                          jmp     stage_2                     ;ブート処理の第2ステージへ
    58                                  
    59                                          ;データ
    60                                  
    61 00000099 626F6F74696E672E2E-     .s0     db      "booting...", 0x0A, 0x0D, 0
    61 000000A2 2E0A0D00           
    62 000000A6 4572726F723A207365-     .e0     db      "Error: sector read", 0
    62 000000AF 63746F722072656164-
    62 000000B8 00                 
    63                                  
    64                                  ;ブートドライブに関する情報
    65                                  
    66 000000B9 00                      ALIGN 2, db 0
    67                                  BOOT:
    68                                          istruc  drive
    69 000000BA 0000                                at  drive.no,       dw 0        ;ドライブ番号
    70 000000BC 0000                                at  drive.cyln,     dw 0        ;シリンダ
    71 000000BE 0000                                at  drive.head,     dw 0        ;ヘッド
    72 000000C0 0200                                at  drive.sect,     dw 2        ;セクタ
    73                                          iend
    74                                  
    75                                  ;モジュール(512バイト以降に配置)
    76                                  
    77                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 000000C2 55                  <1>         push    bp
     6 000000C3 89E5                <1>         mov     bp, sp                                  ;  +4 | 文字列へのアドレス
     7                              <1>                                                         ;  +2 | Instruction Pointer
     8                              <1>                                                         ;BP+0 | BP
     9                              <1> 
    10                              <1>         ;レジスタを保存
    11                              <1> 
    12 000000C5 50                  <1>         push    ax
    13 000000C6 53                  <1>         push    bx
    14 000000C7 56                  <1>         push    si
    15                              <1> 
    16                              <1>         ;引数の取得
    17                              <1> 
    18 000000C8 8B7604              <1>         mov     si, [bp + 4]                            ;Source Index == 文字列へのアドレス
    19                              <1> 
    20                              <1>         ;処理
    21                              <1> 
    22 000000CB B40E                <1>         mov     ah, 0x0E
    23 000000CD BB0000              <1>         mov     bx, 0x0000
    24 000000D0 FC                  <1>         cld
    25                              <1> 
    26                              <1> .10L:                                                   ;do{
    27                              <1>                                                         ;   AL = *SI++
    28 000000D1 AC                  <1>         lodsb                                           ;
    29                              <1>                                                         ;   if (0 == AL)
    30 000000D2 3C00                <1>         cmp     al, 0                                   ;       break;
    31 000000D4 7404                <1>         je      .10E                                    ;
    32                              <1>                                                         ;   Int10(0x0E, AL); //文字出力
    33 000000D6 CD10                <1>         int     0x10                                    ;} while(1);
    34 000000D8 EBF7                <1>         jmp     .10L
    35                              <1> 
    36                              <1> .10E:
    37                              <1> 
    38                              <1>         ;レジスタの復帰
    39                              <1> 
    40 000000DA 5E                  <1>         pop     si
    41 000000DB 5B                  <1>         pop     bx
    42 000000DC 58                  <1>         pop     ax
    43                              <1> 
    44                              <1>         ;スタックフレームの破棄
    45                              <1> 
    46 000000DD 89EC                <1>         mov     sp, bp
    47 000000DF 5D                  <1>         pop     bp
    48                              <1> 
    49 000000E0 C3                  <1>         ret
    78                                  %include    "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3                              <1>         ;メッセージを表示
     4                              <1> 
     5 000000E1 68[FD00]E8DBFF83C4- <1>         cdecl   puts, .s0                       ;//再起動メッセージを表示
     5 000000E9 02                  <1>
     6                              <1> 
     7                              <1>         ;キー入力待ち
     8                              <1> 
     9                              <1> .10L:                                           ; do {
    10 000000EA B410                <1>         mov     ah, 0x10                        ;       //キー入力待ち
    11 000000EC CD16                <1>         int     0x16                            ;       AL = BIOS(0x16, 0x10)
    12                              <1> 
    13 000000EE 3C20                <1>         cmp     al, ' '                         ;       ZF = (AL == ' ');
    14 000000F0 75F8                <1>         jne     .10L                            ; } while (!ZF);
    15                              <1> 
    16                              <1>         ;改行を出力
    17                              <1> 
    18 000000F2 68[1B01]E8CAFF83C4- <1>         cdecl   puts, .s1
    18 000000FA 02                  <1>
    19                              <1> 
    20                              <1>         ;再起動
    21                              <1> 
    22 000000FB CD19                <1>         int     0x19                            ; BIOS(0x19);
    23                              <1> 
    24                              <1>         ;文字列データ
    25                              <1> 
    26 000000FD 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    26 00000106 414345206B65792074- <1>
    26 0000010F 6F207265626F6F742E- <1>
    26 00000118 2E2E00              <1>
    27 0000011B 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    79                                  %include    "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4                              <1>                                                     ;   +8 | 読み出し先アドレス
     5                              <1>                                                     ;   +6 | セクタ数
     6                              <1>                                                     ;   +4 | drive構造体のアドレス
     7                              <1>                                                     ;   +2 | 戻り番地
     8                              <1>                                                     ;BP +0 | BP
     9                              <1>                                                     ;   -2 | retry = 3; //リトライ回数
    10                              <1>                                                     ;   -4 | sect  = 0; //読み込みセクタ数
    11 00000120 55                  <1>             push    bp
    12 00000121 89E5                <1>             mov     bp, sp
    13 00000123 6A03                <1>             push    3
    14 00000125 6A00                <1>             push    0
    15                              <1> 
    16                              <1>             ;レジスタの保存
    17                              <1> 
    18 00000127 53                  <1>             push    bx
    19 00000128 51                  <1>             push    cx
    20 00000129 52                  <1>             push    dx
    21 0000012A 06                  <1>             push    es
    22 0000012B 56                  <1>             push    si
    23                              <1> 
    24                              <1>             ;処理
    25 0000012C 8B7604              <1>             mov     si, [bp + 4]                    ;構造体のアドレス
    26                              <1> 
    27                              <1>             ;CXレジスタの設定
    28                              <1>             ;[構造体のアドレス + オフセット + ?]
    29                              <1> 
    30 0000012F 8A6C02              <1>             mov     ch, [si + drive.cyln + 0]       ;CH = シリンダ番号（下位バイト）
    31 00000132 8A4C03              <1>             mov     cl, [si + drive.cyln + 1]       ;CL = シリンダ番号（上位バイト）
    32 00000135 C0E106              <1>             shl     cl, 6                           ;CL <<= 6; //最上位2ビットにシフト
    33 00000138 0A4C06              <1>             or      cl, [si + drive.sect]           ;CL |= セクタ番号;
    34                              <1> 
    35                              <1>             ;セクタ読み込み
    36                              <1> 
    37 0000013B 8A7404              <1>             mov     dh, [si + drive.head]           ;DH = ヘッド番号
    38 0000013E 8A14                <1>             mov     dl, [si + 0]                    ;DL = ドライブ番号
    39 00000140 B80000              <1>             mov     ax, 0x0000
    40 00000143 8EC0                <1>             mov     es, ax                          ;ESセグメント初期化
    41 00000145 8B5E08              <1>             mov     bx, [bp + 8]                    ;読み出し先アドレス
    42                              <1> 
    43                              <1>             ; do{
    44                              <1>             ;     AH = セクタ読み込み
    45                              <1>             ;     AL = セクタ数
    46                              <1> 
    47                              <1>             ;     CF = BIOS(0x13, 0x02);
    48                              <1>             ;     if (CF)
    49                              <1>             ;     {
    50                              <1>             ;         AL = 0;
    51                              <1>             ;         break;
    52                              <1>             ;     }
    53                              <1> 
    54                              <1>             ;     if (読み込んだセクタがある)
    55                              <1>             ;         break;
    56                              <1> 
    57                              <1>             ;     ret = 0;
    58                              <1>             ; } while(--retry);
    59                              <1> 
    60                              <1> .10L:
    61 00000148 B402                <1>             mov     ah, 0x02
    62 0000014A 8A4606              <1>             mov     al, [bp + 6]
    63                              <1> 
    64 0000014D CD13                <1>             int     0x13
    65 0000014F 7304                <1>             jnc     .11E                            ;成功したら.11Eへ
    66                              <1> 
    67 00000151 B000                <1>             mov     al, 0
    68 00000153 EB0C                <1>             jmp     .10E                            ;失敗したらリトライなしで.10Eへ
    69                              <1> .11E:
    70 00000155 3C00                <1>             cmp     al, 0                           ; if (読み込んだセクタ数 > 0)
    71 00000157 7508                <1>             jne     .10E                            ;   break;
    72                              <1> 
    73 00000159 B80000              <1>             mov     ax, 0                           ;戻り値
    74 0000015C FF4EFE              <1>             dec     word [bp - 2]
    75 0000015F 75E7                <1>             jnz     .10L                            ;読み込んだセクタ数が0なら.10Lへ
    76                              <1> .10E:
    77 00000161 B400                <1>             mov     ah, 0                           ;AH = 0 //ステータス情報の破棄
    78                              <1> 
    79                              <1>             ;レジスタの復帰
    80                              <1> 
    81 00000163 5E                  <1>             pop     si
    82 00000164 07                  <1>             pop     es
    83 00000165 5A                  <1>             pop     dx
    84 00000166 59                  <1>             pop     cx
    85 00000167 5B                  <1>             pop     bx
    86                              <1> 
    87                              <1>             ;スタックフレームの破棄
    88                              <1> 
    89 00000168 89EC                <1>             mov     sp, bp
    90 0000016A 5D                  <1>             pop     bp
    91                              <1> 
    92 0000016B C3                  <1>             ret
    80                                  
    81                                  ;ブートフラグ(512biteの終了)
    82                                  
    83 0000016C 00<rept>                        times   510 - ($ - $$) db 0x00
    84 000001FE 55AA                            db 0x55, 0xAA
    85                                  
    86                                  ;リアルモード時に取得した情報
    87                                  FONT:                                           ;フォント
    88 00000200 0000                    .seg:   dw 0
    89 00000202 0000                    .off:   dw 0
    90                                  ACPI_DATA:
    91 00000204 00000000                .adr:   dd 0                                    ; ACPI base address
    92 00000208 00000000                .len:   dd 0                                    ;      data length
    93                                  
    94                                  %include    "../modules/real/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 0000020C 55                  <1>         push    bp
     6 0000020D 89E5                <1>         mov     bp, sp                          ;  +12|フラグ
     7                              <1>                                                 ;  +10|基数
     8                              <1>                                                 ;  + 8|保存先バッファサイズ
     9                              <1>                                                 ;  + 6|保存先バッファアドレス
    10                              <1>                                                 ;  + 4|変換する値
    11                              <1>                                                 ;  + 2|IP(戻り番地)
    12                              <1>                                                 ;BP+ 0|BP
    13                              <1>         ; save registers
    14 0000020F 50                  <1>         push    ax
    15 00000210 53                  <1>         push    bx
    16 00000211 51                  <1>         push    cx
    17 00000212 52                  <1>         push    dx
    18 00000213 56                  <1>         push    si
    19 00000214 57                  <1>         push    di
    20                              <1> 
    21                              <1>         ; get args
    22                              <1> 
    23 00000215 8B4604              <1>         mov     ax, [bp + 4]                    ;val = 数値
    24 00000218 8B7606              <1>         mov     si, [bp + 6]                    ;dest= バッファアドレス
    25 0000021B 8B4E08              <1>         mov     cx, [bp + 8]                    ;size= バッファサイズ
    26                              <1> 
    27 0000021E 89F7                <1>         mov     di, si                          ;バッファの最後尾
    28 00000220 01CF                <1>         add     di, cx                          ;dest = &dest[size - 1]
    29 00000222 4F                  <1>         dec     di
    30                              <1> 
    31 00000223 8B5E0C              <1>         mov     bx, word [bp + 12]              ;flags = フラグ
    32                              <1>                                                 ;B2: 空白をゼロで埋める B1:+/-記号を付加する B0:値を符号付き変数として扱う
    33                              <1> 
    34                              <1>         ;符号付き判定
    35                              <1> 
    36 00000226 F7C30100            <1>         test    bx, 0b0001                      ; if (flags & 0x01) //符号付きならZF = 0
    37 0000022A 7408                <1> .10Q    je      .10E                            ; {                 //符号なしならZF = 1だからjmp
    38 0000022C 83F800              <1>         cmp     ax, 0                           ;   if (val < 0)    //CF = 1, ZF = 0
    39 0000022F 7D03                <1> .12Q    jge     .12E                            ;   {               //val >= 0 なら必要ないのでjmp
    40 00000231 83CB02              <1>         or      bx, 0b0010                      ;       flags |= 2; //B1をセット
    41                              <1>                                                 ;}}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ;符号出力判定
    46                              <1> 
    47 00000234 F7C30200            <1>         test    bx, 0b0010
    48 00000238 7410                <1> .20Q    je      .20E
    49 0000023A 83F800              <1>         cmp     ax, 0
    50 0000023D 7D07                <1> .22Q    jge     .22F
    51 0000023F F7D8                <1>         neg     ax                              ;符号反転
    52 00000241 C6042D              <1>         mov     [si], byte '-'                  ;符号表示
    53 00000244 EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 00000246 C6042B              <1>         mov     [si], byte '+'
    56                              <1> .22E:
    57 00000249 49                  <1>         dec     cx                              ;残りバッファサイズの減算 -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ;ASCII変換
    61                              <1> 
    62 0000024A 8B5E0A              <1>         mov     bx, [bp + 10]                   ;BX = 基数
    63                              <1> 
    64                              <1> .30L:                                           ;do{
    65 0000024D BA0000              <1>         mov     dx, 0
    66 00000250 F7F3                <1>         div     bx                              ;   DX = DX:AX % BX;
    67                              <1>                                                 ;   AX = DX:AX / BX;
    68                              <1> 
    69 00000252 89D6                <1>         mov     si, dx                          ;   //変換テーブル参照
    70 00000254 8A94[7C02]          <1>         mov     dl, byte [.ascii + si]          ;   DL = ASCII[DX];
    71                              <1> 
    72 00000258 8815                <1>         mov     [di], dl                        ;   *dest = DL;
    73 0000025A 4F                  <1>         dec     di                              ;   dest--;
    74                              <1> 
    75 0000025B 83F800              <1>         cmp     ax, 0
    76 0000025E E0ED                <1>         loopnz  .30L                            ;} while(AX);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ;空欄をゼロ埋め/空白埋め
    81                              <1> 
    82 00000260 83F900              <1>         cmp     cx, 0                           ;if (size)
    83 00000263 740D                <1> .40Q:   je      .40E                            ;{
    84 00000265 B020                <1>         mov     al, ' '                         ;   AL = ' '; //空白埋め
    85 00000267 837E0C04            <1>         cmp     [bp + 12], word 0b0100          ;   if (flags & 0x04)
    86 0000026B 7502                <1> .42Q:   jne     .42E                            ;   {
    87 0000026D B030                <1>         mov     al, '0'                         ;       AL = '0'; //ゼロ埋め
    88                              <1> .42E:                                           ;   }
    89 0000026F FD                  <1>         std                                     ;   // DF = 1(減算)
    90 00000270 F3AA                <1>         rep stosb                               ;   while (--cx) * DI-- = ' ';
    91                              <1> .40E:                                           ;}
    92                              <1> 
    93                              <1>         ;レジスタの復帰
    94                              <1> 
    95 00000272 5F                  <1>         pop     di
    96 00000273 5E                  <1>         pop     si
    97 00000274 5A                  <1>         pop     dx
    98 00000275 59                  <1>         pop     cx
    99 00000276 5B                  <1>         pop     bx
   100 00000277 58                  <1>         pop     ax
   101                              <1> 
   102                              <1>         ;スタックフレームの破棄
   103                              <1> 
   104 00000278 89EC                <1>         mov     sp, bp
   105 0000027A 5D                  <1>         pop     bp
   106                              <1> 
   107 0000027B C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 0000027C 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   110 00000285 39414243444546      <1>
    95                                  %include    "../modules/real/get_drive_params.s"
     1                              <1> get_drive_params:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4 0000028C 55                  <1>             push    bp                                  ;BP +4 | drive構造体のアドレス
     5 0000028D 89E5                <1>             mov     bp, sp
     6                              <1> 
     7                              <1>             ;レジスタの保存
     8                              <1> 
     9 0000028F 53                  <1>             push    bx
    10 00000290 51                  <1>             push    cx
    11 00000291 06                  <1>             push    es
    12 00000292 56                  <1>             push    si
    13 00000293 57                  <1>             push    di
    14                              <1> 
    15                              <1>             ;処理
    16 00000294 8B7604              <1>             mov     si, [bp + 4]
    17                              <1> 
    18 00000297 B80000              <1>             mov     ax, 0                               ;Disk Base Table Pointer の初期化
    19 0000029A 8EC0                <1>             mov     es, ax
    20 0000029C 89C7                <1>             mov     di, ax                              ;int 0x13命令時ES:DIにディスクベーステーブルのアドレスが設定される
    21                              <1> 
    22 0000029E B408                <1>             mov     ah, 8
    23 000002A0 8A14                <1>             mov     dl, [si + drive.no]                 ;DL = ドライブ番号
    24 000002A2 CD13                <1>             int     0x13
    25                              <1> 
    26 000002A4 721B                <1> .10Q:       jc      .10F                                ; if (0 == CF) // 0:成功, 1:失敗
    27                              <1> .10T:                                                   ; {
    28 000002A6 88C8                <1>             mov     al, cl                              ;   AX = セクタ数;
    29 000002A8 83E03F              <1>             and     ax, 0x3F                            ;   // 下位6ビットのみ有効
    30                              <1> 
    31 000002AB C0E906              <1>             shr     cl, 6                               ;   CX = シリンダ数;
    32 000002AE C1C908              <1>             ror     cx, 8
    33 000002B1 41                  <1>             inc     cx                                  ;   //シリンダ番号は0始まりなので，最大シリンダ数を得るために1加算
    34                              <1> 
    35 000002B2 0FB6DE              <1>             movzx   bx, dh                              ;   BX = ヘッド数(1ベース) //ゼロ拡張(2byte)
    36 000002B5 43                  <1>             inc     bx                                  ;   //ヘッド番号も同様
    37                              <1> 
    38 000002B6 894C02              <1>             mov     [si + drive.cyln], cx               ;   //オフセットアドレスに格納
    39 000002B9 895C04              <1>             mov     [si + drive.head], bx
    40 000002BC 894406              <1>             mov     [si + drive.sect], ax
    41                              <1> 
    42 000002BF EB03                <1>             jmp     .10E                                ; }
    43                              <1> .10F:                                                   ; else
    44 000002C1 B80000              <1>             mov     ax, 0                               ; {
    45                              <1> .10E:                                                   ;   AX = 0; //失敗
    46                              <1>                                                         ; }
    47                              <1> 
    48                              <1>             ;レジスタの復帰
    49 000002C4 5F                  <1>             pop     di
    50 000002C5 5E                  <1>             pop     si
    51 000002C6 07                  <1>             pop     es
    52 000002C7 59                  <1>             pop     cx
    53 000002C8 5B                  <1>             pop     bx
    54                              <1> 
    55                              <1>             ;スタックフレームの破棄
    56 000002C9 89EC                <1>             mov     sp, bp
    57 000002CB 5D                  <1>             pop     bp
    58                              <1> 
    59 000002CC C3                  <1>             ret
    96                                  %include    "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000002CD 55                  <1>             push    bp                                          ; BP+4 | where font address is located
     5 000002CE 89E5                <1>             mov     bp, sp
     6                              <1> 
     7                              <1>             ; save registers
     8 000002D0 50                  <1>             push    ax
     9 000002D1 53                  <1>             push    bx
    10 000002D2 56                  <1>             push    si
    11 000002D3 06                  <1>             push    es
    12 000002D4 55                  <1>             push    bp
    13                              <1> 
    14                              <1>             ; get argumentes
    15 000002D5 8B7604              <1>             mov     si, [bp + 4]
    16                              <1> 
    17                              <1>             ; get font address
    18 000002D8 B83011              <1>             mov     ax, 0x1130
    19 000002DB B706                <1>             mov     bh, 0x06                                    ;8 x 16 font(vga/mcga)
    20 000002DD CD10                <1>             int     10h                                         ;ES:BP = Font Address
    21                              <1> 
    22                              <1>             ; save font address
    23 000002DF 8C04                <1>             mov     [si + 0], es                                ;dest[0] = segment
    24 000002E1 896C02              <1>             mov     [si + 2], bp                                ;dest[1] = offset
    25                              <1> 
    26                              <1>             ; return registers
    27 000002E4 5D                  <1>             pop     bp
    28 000002E5 07                  <1>             pop     es
    29 000002E6 5E                  <1>             pop     si
    30 000002E7 5B                  <1>             pop     bx
    31 000002E8 58                  <1>             pop     ax
    32                              <1> 
    33                              <1>             ; destruct stack frame
    34 000002E9 89EC                <1>             mov     sp, bp
    35 000002EB 5D                  <1>             pop     bp
    36                              <1> 
    37 000002EC C3                  <1>             ret
    97                                  %include    "../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1> 
     3                              <1>             ;レジスタの保存
     4 000002ED 6650                <1>             push    eax
     5 000002EF 6653                <1>             push    ebx
     6 000002F1 6651                <1>             push    ecx
     7 000002F3 6652                <1>             push    edx
     8 000002F5 56                  <1>             push    si
     9 000002F6 57                  <1>             push    di
    10 000002F7 55                  <1>             push    bp
    11                              <1> 
    12                              <1>             ;文字列を表示
    13 000002F8 68[8C03]E8C4FD83C4- <1>             cdecl   puts, .s0
    13 00000300 02                  <1>
    14                              <1> 
    15 00000301 BD0000              <1>             mov     bp, 0                           ; lines = 0; //行数
    16 00000304 66BB00000000        <1>             mov     ebx, 0                          ; index = 0; //初期化
    17                              <1> .10L:                                               ; do
    18                              <1>                                                     ; {
    19 0000030A 66B820E80000        <1>             mov     eax, 0x0000E820                 ;   EAX  = 0xE820;
    20 00000310 66B914000000        <1>             mov     ecx, E820_RECORD_SIZE           ;   ECX  = 要求バイト数;
    21 00000316 66BA50414D53        <1>             mov     edx, 'PAMS'                     ;   EDX  = 'SMAP' //固定値
    22 0000031C BF[1804]            <1>             mov     di, .b0                         ;   ES:DI= 書き込み先
    23 0000031F CD15                <1>             int     0x15                            ;   BIOS(0x15, 0xE820);
    24                              <1>                                                     ; }
    25                              <1> 
    26 00000321 663D50414D53        <1>             cmp     eax, 'PAMS'                     ; コマンド未対応なら終了
    27 00000327 7402                <1>             je      .12E
    28 00000329 EB4C                <1>             jmp     .10E
    29                              <1> 
    30                              <1> .12E:
    31                              <1> 
    32                              <1> 
    33 0000032B 7302                <1>             jnc     .14E                            ; CF 0:成功 1:失敗
    34 0000032D EB48                <1>             jmp     .10E
    35                              <1> .14E:
    36                              <1> 
    37 0000032F 57E8F90083C402      <1>             cdecl   put_mem_info, di                ; 1レコード分のメモリ情報を表示
    38                              <1> 
    39                              <1>             ;ACPI data のアドレスを取得
    40 00000336 668B4510            <1>             mov     eax, [di + 16]                  ; EAX = データタイプ
    41 0000033A 6683F803            <1>             cmp     eax, 3                          ; 3:AddressRangeACPI
    42 0000033E 750F                <1>             jne     .15E
    43                              <1> 
    44 00000340 668B05              <1>             mov     eax, [di + 0]                   ; EAX = BASE address
    45 00000343 66A3[0402]          <1>             mov     [ACPI_DATA.adr], eax
    46                              <1> 
    47 00000347 668B4508            <1>             mov     eax, [di + 8]
    48 0000034B 66A3[0802]          <1>             mov     [ACPI_DATA.len], eax
    49                              <1> .15E:
    50                              <1> 
    51 0000034F 6683FB00            <1>             cmp     ebx, 0
    52 00000353 741C                <1>             jz      .16E
    53                              <1> 
    54 00000355 45                  <1>             inc     bp                              ; lines++
    55 00000356 83E507              <1>             and     bp, 0x07                        ; lines &= 0x07; //メモリ情報を8行表示するたびに
    56 00000359 7516                <1>             jnz     .16E                            ;                //ユーザーからのキー入力があるまで
    57                              <1>                                                     ;                //処理を中断
    58 0000035B 68[FF03]E861FD83C4- <1>             cdecl   puts, .s2                       ; 中断メッセージ
    58 00000363 02                  <1>
    59 00000364 B410                <1>             mov     ah, 0x10                        ; キー入力待ち
    60 00000366 CD16                <1>             int     0x16
    61                              <1> 
    62 00000368 68[0A04]E854FD83C4- <1>             cdecl   puts, .s3
    62 00000370 02                  <1>
    63                              <1> .16E:
    64                              <1> 
    65 00000371 6683FB00            <1>             cmp     ebx, 0
    66 00000375 7593                <1>             jne     .10L
    67                              <1> .10E:
    68                              <1> 
    69 00000377 68[CF03]E845FD83C4- <1>             cdecl   puts, .s1
    69 0000037F 02                  <1>
    70                              <1> 
    71                              <1>             ;レジスタの復帰
    72 00000380 5D                  <1>             pop     bp
    73 00000381 5F                  <1>             pop     di
    74 00000382 5E                  <1>             pop     si
    75 00000383 665A                <1>             pop     edx
    76 00000385 6659                <1>             pop     ecx
    77 00000387 665B                <1>             pop     ebx
    78 00000389 6658                <1>             pop     eax
    79                              <1> 
    80 0000038B C3                  <1>             ret
    81                              <1> 
    82 0000038C 2045383230204D656D- <1> .s0:	    db " E820 Memory Map:", 0x0A, 0x0D
    82 00000395 6F7279204D61703A0A- <1>
    82 0000039E 0D                  <1>
    83 0000039F 20426173655F5F5F5F- <1> 		    db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
    83 000003A8 5F5F5F5F5F5F5F5F5F- <1>
    83 000003B1 204C656E6774685F5F- <1>
    83 000003BA 5F5F5F5F5F5F5F5F5F- <1>
    83 000003C3 20547970655F5F5F5F- <1>
    83 000003CC 0A0D00              <1>
    84 000003CF 202D2D2D2D2D2D2D2D- <1> .s1:	    db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
    84 000003D8 2D2D2D2D2D2D2D2D2D- <1>
    84 000003E1 202D2D2D2D2D2D2D2D- <1>
    84 000003EA 2D2D2D2D2D2D2D2D2D- <1>
    84 000003F3 202D2D2D2D2D2D2D2D- <1>
    84 000003FC 0A0D00              <1>
    85 000003FF 203C6D6F72652E2E2E- <1> .s2:	    db " <more...>", 0
    85 00000408 3E00                <1>
    86 0000040A 0D2020202020202020- <1> .s3:	    db 0x0D, "          ", 0x0D, 0
    86 00000413 20200D00            <1>
    87                              <1> 
    88 00000417 00                  <1> ALIGN 4, db 0
    89 00000418 00<rept>            <1> .b0:    times E820_RECORD_SIZE db 0
    90                              <1> 
    91                              <1> put_mem_info:
    92                              <1> 
    93                              <1>             ;スタックフレームの構築
    94 0000042C 55                  <1>             push    bp                              ;BP +4 | メモリ情報が格納されたバッファアドレス
    95 0000042D 89E5                <1>             mov     bp, sp
    96                              <1> 
    97                              <1>             ;レジスタの保存
    98 0000042F 53                  <1>             push    bx
    99 00000430 56                  <1>             push    si
   100                              <1> 
   101                              <1>             ;引数の取得
   102 00000431 8B7604              <1>             mov     si, [bp + 4]
   103                              <1> 
   104                              <1>             ; Base(64bit)
   105 00000434 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 6], .p2 + 0, 4, 16, 0b0100
   105 0000043B [0B05]FF7406E8C9FD- <1>
   105 00000443 83C40A              <1>
   106 00000446 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 4], .p2 + 4, 4, 16, 0b0100
   106 0000044D [0F05]FF7404E8B7FD- <1>
   106 00000455 83C40A              <1>
   107 00000458 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 2], .p3 + 0, 4, 16, 0b0100
   107 0000045F [1405]FF7402E8A5FD- <1>
   107 00000467 83C40A              <1>
   108 0000046A 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 0], .p3 + 4, 4, 16, 0b0100
   108 00000471 [1805]FF34E894FD83- <1>
   108 00000479 C40A                <1>
   109                              <1> 
   110                              <1>             ; Length(64bit)
   111 0000047B 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 14], .p4 + 0, 4, 16, 0b0100
   111 00000482 [1D05]FF740EE882FD- <1>
   111 0000048A 83C40A              <1>
   112 0000048D 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 12], .p4 + 4, 4, 16, 0b0100
   112 00000494 [2105]FF740CE870FD- <1>
   112 0000049C 83C40A              <1>
   113 0000049F 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 10], .p5 + 0, 4, 16, 0b0100
   113 000004A6 [2605]FF740AE85EFD- <1>
   113 000004AE 83C40A              <1>
   114 000004B1 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 8 ], .p5 + 4, 4, 16, 0b0100
   114 000004B8 [2A05]FF7408E84CFD- <1>
   114 000004C0 83C40A              <1>
   115                              <1> 
   116                              <1>             ; Type(32bit)
   117 000004C3 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 18], .p6 + 0, 4, 16, 0b0100
   117 000004CA [2F05]FF7412E83AFD- <1>
   117 000004D2 83C40A              <1>
   118 000004D5 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 16], .p6 + 4, 4, 16, 0b0100
   118 000004DC [3305]FF7410E828FD- <1>
   118 000004E4 83C40A              <1>
   119                              <1> 
   120 000004E7 68[0A05]E8D5FB83C4- <1>             cdecl   puts, .s1                       ; //レコード情報を表示
   120 000004EF 02                  <1>
   121                              <1> 
   122 000004F0 8B5C10              <1>             mov     bx, [si + 16]                   ; //タイプを文字列で表示
   123 000004F3 83E307              <1>             and     bx, 0x07                        ; BX = Type(0~5)
   124 000004F6 D1E3                <1>             shl     bx, 1                           ; BX *= 2   //要素サイズに変換
   125 000004F8 81C3[8D05]          <1>             add     bx, .t0                         ; BX += .t0 //テーブルの先頭アドレスを加算
   126 000004FC FF37E8C1FB83C402    <1>             cdecl   puts, word [bx]
   127                              <1> 
   128                              <1>             ;レジスタの復帰
   129 00000504 5E                  <1>             pop     si
   130 00000505 5B                  <1>             pop     bx
   131                              <1> 
   132                              <1>             ;スタックフレームの破棄
   133 00000506 89EC                <1>             mov     sp, bp
   134 00000508 5D                  <1>             pop     bp
   135                              <1> 
   136 00000509 C3                  <1>             ret
   137                              <1> 
   138 0000050A 20                  <1> .s1:        db  " "
   139 0000050B 5A5A5A5A5A5A5A5A5F  <1> .p2:        db  "ZZZZZZZZ_"
   140 00000514 5A5A5A5A5A5A5A5A20  <1> .p3:        db  "ZZZZZZZZ "
   141 0000051D 5A5A5A5A5A5A5A5A5F  <1> .p4:        db  "ZZZZZZZZ_"
   142 00000526 5A5A5A5A5A5A5A5A20  <1> .p5:        db  "ZZZZZZZZ "
   143 0000052F 5A5A5A5A5A5A5A5A20- <1> .p6:        db  "ZZZZZZZZ ", 0
   143 00000538 00                  <1>
   144                              <1> 
   145 00000539 2028556E6B6E6F776E- <1> .s4:        db  " (Unknown)", 0x0A, 0x0D, 0
   145 00000542 290A0D00            <1>
   146 00000546 2028757361626C6529- <1> .s5:        db  " (usable)", 0x0A, 0x0D, 0
   146 0000054F 0A0D00              <1>
   147 00000552 202872657365727665- <1> .s6:        db  " (reserved)", 0x0A, 0x0D, 0
   147 0000055B 64290A0D00          <1>
   148 00000560 202841435049206461- <1> .s7:        db  " (ACPI data)", 0x0A, 0x0D, 0
   148 00000569 7461290A0D00        <1>
   149 0000056F 202841435049204E56- <1> .s8:        db  " (ACPI NVS)", 0x0A, 0x0D, 0
   149 00000578 53290A0D00          <1>
   150 0000057D 2028626164206D656D- <1> .s9:        db  " (bad memory)", 0x0A, 0x0D, 0
   150 00000586 6F7279290A0D00      <1>
   151                              <1> 
   152 0000058D [3905][4605][5205]- <1> .t0:        dw  .s4, .s5, .s6, .s7, .s8, .s4, .s4
   152 00000593 [6005][6F05][3905]- <1>
   152 00000599 [3905]              <1>
    98                                  %include    "../modules/real/kbc.s"
     1                              <1> KBC_Data_Write:
     2                              <1> 
     3                              <1>             ;construct stack frame
     4                              <1>                                                         ; BP +4 | data
     5 0000059B 55                  <1>             push    bp
     6 0000059C 89E5                <1>             mov     bp, sp
     7                              <1> 
     8                              <1>             ;save register
     9 0000059E 51                  <1>             push    cx
    10                              <1> 
    11                              <1>             ;process
    12 0000059F B90000              <1>             mov     cx, 0                               ; CX = 0; // max count value
    13                              <1> .10L:
    14 000005A2 E464                <1>             in      al, 0x64
    15 000005A4 A802                <1>             test    al, 0x02                            ; ZF = AL & 0x02 // B1:input buffer full
    16 000005A6 E0FA                <1>             loopnz  .10L                                ; loop while 1 set at B1
    17                              <1> 
    18 000005A8 83F900              <1>             cmp     cx, 0
    19 000005AB 7405                <1>             jz      .20E                                ; timeout
    20                              <1> 
    21 000005AD 8A4604              <1>             mov     al, [bp + 4]
    22 000005B0 E660                <1>             out     0x60, al
    23                              <1> .20E:
    24                              <1> 
    25 000005B2 89C8                <1>             mov     ax, cx                              ; return CX
    26                              <1> 
    27                              <1>             ;return register
    28 000005B4 59                  <1>             pop     cx
    29                              <1> 
    30                              <1>             ;destruct stack frame
    31                              <1> 
    32 000005B5 89EC                <1>             mov     sp, bp
    33 000005B7 5D                  <1>             pop     bp
    34                              <1> 
    35 000005B8 C3                  <1>             ret
    36                              <1> 
    37                              <1> KBC_Data_Read:
    38                              <1> 
    39                              <1>             ;construct stack frame
    40                              <1> 
    41 000005B9 55                  <1>             push    bp
    42 000005BA 89E5                <1>             mov     bp, sp
    43                              <1> 
    44                              <1>             ;save register
    45 000005BC 51                  <1>             push    cx
    46 000005BD 57                  <1>             push    di
    47                              <1> 
    48                              <1>             ;process
    49 000005BE B90000              <1>             mov     cx, 0
    50                              <1> .10L:
    51 000005C1 E464                <1>             in      al, 0x64
    52 000005C3 A801                <1>             test    al, 0x01                            ; ZF = AL & 0x01 // B0:output buffer full
    53 000005C5 E1FA                <1>             loopz  .10L                                 ; loop while 0 set at B0
    54                              <1> 
    55 000005C7 83F900              <1>             cmp     cx, 0
    56 000005CA 7409                <1>             jz      .20E
    57                              <1> 
    58 000005CC B400                <1>             mov     ah, 0x00
    59 000005CE E460                <1>             in      al, 0x60
    60                              <1> 
    61 000005D0 8B7E04              <1>             mov     di, [bp + 4]                        ; DI = Address where read data will be saved
    62 000005D3 8905                <1>             mov     [di + 0], ax
    63                              <1> .20E:
    64                              <1> 
    65 000005D5 89C8                <1>             mov     ax, cx
    66                              <1> 
    67                              <1>             ;return register
    68 000005D7 5F                  <1>             pop     di
    69 000005D8 59                  <1>             pop     cx
    70                              <1> 
    71                              <1>             ;destruct stack frame
    72                              <1> 
    73 000005D9 89EC                <1>             mov     sp, bp
    74 000005DB 5D                  <1>             pop     bp
    75                              <1> 
    76 000005DC C3                  <1>             ret
    77                              <1> 
    78                              <1> KBC_Cmd_Write:
    79                              <1> 
    80                              <1>             ;construct stack frame
    81                              <1>                                                         ; BP +4 | data
    82 000005DD 55                  <1>             push    bp
    83 000005DE 89E5                <1>             mov     bp, sp
    84                              <1> 
    85                              <1>             ;save register
    86 000005E0 51                  <1>             push    cx
    87                              <1> 
    88                              <1>             ;process
    89 000005E1 B90000              <1>             mov     cx, 0                               ; CX = 0; // max count value
    90                              <1> .10L:
    91 000005E4 E464                <1>             in      al, 0x64
    92 000005E6 A802                <1>             test    al, 0x02                            ; ZF = AL & 0x02 // B1:input buffer full
    93 000005E8 E0FA                <1>             loopnz  .10L
    94                              <1> 
    95 000005EA 83F900              <1>             cmp     cx, 0
    96 000005ED 7405                <1>             jz      .20E                                ; timeout
    97                              <1> 
    98 000005EF 8A4604              <1>             mov     al, [bp + 4]
    99 000005F2 E664                <1>             out     0x64, al
   100                              <1> .20E:
   101                              <1> 
   102 000005F4 89C8                <1>             mov     ax, cx                              ; return CX
   103                              <1> 
   104                              <1>             ;return register
   105 000005F6 59                  <1>             pop     cx
   106                              <1> 
   107                              <1>             ;destruct stack frame
   108                              <1> 
   109 000005F7 89EC                <1>             mov     sp, bp
   110 000005F9 5D                  <1>             pop     bp
   111                              <1> 
   112 000005FA C3                  <1>             ret
    99                                  %include    "../modules/real/lba_chs.s"
     1                              <1> lba_chs:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000005FB 55                  <1>             push    bp
     5 000005FC 89E5                <1>             mov     bp, sp                                  ;  +8 | LBA value
     6                              <1>                                                             ;  +6 | address of drive struc(where conversed parameters will be stored)
     7                              <1>                                                             ;BP+4 | address of drive struc(where drive parameters are stored)
     8                              <1> 
     9                              <1>             ; save registers
    10                              <1> 
    11 000005FE 50                  <1>             push    ax
    12 000005FF 53                  <1>             push    bx
    13 00000600 52                  <1>             push    dx
    14 00000601 56                  <1>             push    si
    15 00000602 57                  <1>             push    di
    16                              <1> 
    17                              <1>             ; start of process
    18                              <1> 
    19 00000603 8B7604              <1>             mov     si, [bp + 4]
    20 00000606 8B7E06              <1>             mov     di, [bp + 6]
    21                              <1> 
    22 00000609 8A4404              <1>             mov     al,  [si + drive.head]                   ; AL = max head num
    23 0000060C F66406              <1>             mul     byte [si + drive.sect]                 ; AX = max head * max sect
    24 0000060F 89C3                <1>             mov     bx, ax                                  ; BX = num of sect per cylinder
    25                              <1> 
    26 00000611 BA0000              <1>             mov     dx, 0                                   ; DX = LBA(top 2 byte)
    27 00000614 8B4608              <1>             mov     ax, [bp + 8]                            ; AX = LBA(lower 2 byte)
    28 00000617 F7F3                <1>             div     bx                                      ; AX = DX:AX / BX   => cylinder number
    29                              <1>                                                             ; DX = DX:AX % BX
    30                              <1> 
    31 00000619 894502              <1>             mov     [di + drive.cyln], ax
    32                              <1> 
    33 0000061C 89D0                <1>             mov     ax, dx
    34 0000061E F67406              <1>             div     byte [si + drive.sect]                  ; AL = AX / max num of sect => head number
    35                              <1>                                                             ; AH = AX % max num of sect => sector number
    36                              <1> 
    37 00000621 0FB6D4              <1>             movzx   dx, ah                                  ; DX = sector number
    38 00000624 42                  <1>             inc     dx                                      ; sect starts from no.1
    39                              <1> 
    40 00000625 B400                <1>             mov     ah, 0x00                                ; AX = head num
    41                              <1> 
    42 00000627 894504              <1>             mov     [di + drive.head], ax
    43 0000062A 895506              <1>             mov     [di + drive.sect], dx
    44                              <1> 
    45                              <1>             ; return registers
    46 0000062D 5F                  <1>             pop     di
    47 0000062E 5E                  <1>             pop     si
    48 0000062F 5A                  <1>             pop     dx
    49 00000630 5B                  <1>             pop     bx
    50 00000631 58                  <1>             pop     ax
    51                              <1> 
    52                              <1>             ; destruct stack frame
    53 00000632 89EC                <1>             mov     sp, bp
    54 00000634 5D                  <1>             pop     bp
    55                              <1> 
    56 00000635 C3                  <1>             ret
   100                                  %include    "../modules/real/read_lba.s"
     1                              <1> read_lba:
     2                              <1> 
     3                              <1>             ;construct stack frame
     4                              <1> 
     5 00000636 55                  <1>             push    bp                                      ;  +10 | destination address
     6 00000637 89E5                <1>             mov     bp, sp                                  ;  + 8 | read sect num
     7                              <1>                                                             ;  + 6 | LBA
     8                              <1>                                                             ;BP+ 4 | address of drive struc
     9                              <1> 
    10                              <1>             ;save register
    11                              <1> 
    12 00000639 56                  <1>             push    si
    13                              <1> 
    14                              <1>             ;get argument
    15 0000063A 8B7604              <1>             mov     si, [bp + 4]                            ; si = drive info
    16                              <1> 
    17                              <1>             ;LBA -> CHS conversion
    18 0000063D 8B4606              <1>             mov     ax, [bp + 6]
    19 00000640 5068[6406]56E8B3FF- <1>             cdecl   lba_chs, si, .chs, ax
    19 00000648 83C406              <1>
    20                              <1> 
    21                              <1>             ;copy drive no.
    22 0000064B 8A04                <1>             mov     al, [si + drive.no]
    23 0000064D A2[6406]            <1>             mov     [.chs + drive.no], al
    24                              <1> 
    25                              <1>             ;read sector
    26 00000650 FF760AFF760868-     <1>             cdecl   read_chs, .chs, word [bp + 8], word [bp + 10]
    26 00000657 [6406]E8C4FA83C406  <1>
    27                              <1>                                                             ; AX = read_chs(.chs, sect num, ofs)
    28                              <1> 
    29                              <1>             ;return register
    30                              <1> 
    31 0000065F 5E                  <1>             pop     si
    32                              <1> 
    33                              <1>             ;destruct stack frame
    34                              <1> 
    35 00000660 89EC                <1>             mov     sp, bp
    36 00000662 5D                  <1>             pop     bp
    37                              <1> 
    38 00000663 C3                  <1>             ret
    39                              <1> ALIGN 2
    40 00000664 00<rept>            <1> .chs:	times drive_size	db	0
    41                              <1> 
   101                                  
   102                                  
   103                                  
   104                                  ;ブート処理の第2ステージ
   105                                  
   106                                  stage_2:
   107                                  
   108                                          ;文字列を表示
   109 0000066C 68[E606]E850FA83C4-             cdecl   puts, .s0
   109 00000674 02                 
   110                                  
   111                                          ;ドライブ情報を取得
   112 00000675 68[BA00]E811FC83C4-             cdecl   get_drive_params, BOOT          ;get_drive_params(DX, BOOT.CYLN);
   112 0000067D 02                 
   113 0000067E 83F800                          cmp     ax, 0                           ;if (0 == AX){
   114 00000681 750C                    .10Q:   jne     .10E                            ;       puts(.e0);
   115 00000683 68[1D07]E839FA83C4-     .10T:   cdecl   puts, .e0                       ;       reboot();
   115 0000068B 02                 
   116 0000068C E852FA                          call    reboot                          ; }
   117                                  .10E:
   118                                  
   119                                          ;ドライブ情報を表示
   120 0000068F A1[BA00]                        mov     ax, [BOOT + drive.no]           ;AX = ブートドライブ
   121 00000692 6A046A106A0268-                 cdecl   int_to_str, ax, .p1, 2, 16, 0b0100
   121 00000699 [FE06]50E86DFB83C4-
   121 000006A1 0A                 
   122 000006A2 A1[BC00]                        mov     ax, [BOOT + drive.cyln]           ;
   123 000006A5 6A046A106A0468-                 cdecl   int_to_str, ax, .p2, 4, 16, 0b0100
   123 000006AC [0607]50E85AFB83C4-
   123 000006B4 0A                 
   124 000006B5 A1[BE00]                        mov     ax, [BOOT + drive.head]           ;AX = ヘッド数
   125 000006B8 6A046A106A0268-                 cdecl   int_to_str, ax, .p3, 2, 16, 0b0100
   125 000006BF [1007]50E847FB83C4-
   125 000006C7 0A                 
   126 000006C8 A1[C000]                        mov     ax, [BOOT + drive.sect]           ;AX = トラック当たりのセクタ数
   127 000006CB 6A046A106A0268-                 cdecl   int_to_str, ax, .p4, 2, 16, 0b0100
   127 000006D2 [1807]50E834FB83C4-
   127 000006DA 0A                 
   128 000006DB 68[F506]E8E1F983C4-             cdecl   puts, .s1
   128 000006E3 02                 
   129                                  
   130                                  
   131                                          ;処理の終了
   132                                  
   133 000006E4 EB52                            jmp     stage_3
   134                                  
   135                                          ;データ
   136                                  
   137 000006E6 326E64207374616765-     .s0     db      "2nd stage...", 0x0A, 0x0D, 0
   137 000006EF 2E2E2E0A0D00       
   138                                  
   139 000006F5 2044726976653A3078      .s1     db      " Drive:0x"
   140 000006FE 20202C20433A3078        .p1     db      "  , C:0x"
   141 00000706 202020202C20483A30-     .p2     db      "    , H:0x"
   141 0000070F 78                 
   142 00000710 20202C20533A3078        .p3     db      "  , S:0x"
   143 00000718 20200A0D00              .p4     db      "  ", 0x0A, 0x0D, 0
   144                                  
   145 0000071D 43616E277420676574-     .e0     db      "Can't get drive Parameter.", 0
   145 00000726 206472697665205061-
   145 0000072F 72616D657465722E00 
   146                                  
   147                                  stage_3:
   148                                  
   149                                          ;文字列を表示
   150 00000738 68[B507]E884F983C4-             cdecl   puts, .s0
   150 00000740 02                 
   151                                  
   152                                          ;プロテクトモードで使用するフォントは
   153                                          ;BIOSに内蔵されたものを流用する
   154                                  
   155 00000741 68[0002]E886FB83C4-             cdecl   get_font_adr, FONT
   155 00000749 02                 
   156                                  
   157                                          ;フォントアドレスの表示
   158 0000074A 6A046A106A0468-                 cdecl   int_to_str, word [FONT.seg], .p1, 4, 16, 0b0100
   158 00000751 [D207]FF36[0002]E8-
   158 00000758 B2FA83C40A         
   159 0000075D 6A046A106A0468-                 cdecl   int_to_str, word [FONT.off], .p2, 4, 16, 0b0100
   159 00000764 [D707]FF36[0202]E8-
   159 0000076B 9FFA83C40A         
   160 00000770 68[C407]E84CF983C4-             cdecl   puts, .s1
   160 00000778 02                 
   161                                  
   162                                          ;メモリ情報の取得と表示
   163 00000779 E871FB                          cdecl   get_mem_info              ;get_mem_info()
   164                                  
   165 0000077C 66A1[0402]                      mov     eax, [ACPI_DATA.adr]
   166 00000780 6683F800                        cmp     eax, 0
   167 00000784 742D                            je      .10E
   168                                  
   169 00000786 6A046A106A0468-                 cdecl   int_to_str, ax, .p4, 4, 16, 0b0100      ;下位アドレス
   169 0000078D [F107]50E879FA83C4-
   169 00000795 0A                 
   170 00000796 66C1E810                        shr     eax, 16                                 ;EAX >>= 16
   171 0000079A 6A046A106A0468-                 cdecl   int_to_str, ax, .p3, 4, 16, 0b0100      ;上位アドレス
   171 000007A1 [ED07]50E865FA83C4-
   171 000007A9 0A                 
   172                                  
   173 000007AA 68[E107]E812F983C4-             cdecl   puts, .s2
   173 000007B2 02                 
   174                                  .10E:
   175                                  
   176                                          ;処理の終了
   177 000007B3 EB43                            jmp     stage_4
   178                                  
   179                                          ;データ
   180 000007B5 337264207374616765-     .s0:    db      "3rd stage...", 0x0A, 0x0D, 0
   180 000007BE 2E2E2E0A0D00       
   181                                  
   182 000007C4 20466F6E7420416464-     .s1:    db      " Font Address="
   182 000007CD 726573733D         
   183 000007D2 5A5A5A5A3A              .p1:    db      "ZZZZ:"
   184 000007D7 5A5A5A5A0A0D00          .p2:    db      "ZZZZ", 0x0A, 0x0D, 0
   185 000007DE 0A0D00                          db      0x0A, 0x0D, 0
   186                                  
   187 000007E1 204143504920646174-     .s2:    db      " ACPI data ="
   187 000007EA 61203D             
   188 000007ED 5A5A5A5A                .p3:    db      "ZZZZ"
   189 000007F1 5A5A5A5A0A0D00          .p4:    db      "ZZZZ", 0x0A, 0x0D, 0
   190                                  
   191                                  
   192                                  
   193                                  stage_4:
   194                                  
   195                                          ; put char
   196 000007F8 68[CC08]E8C4F883C4-             cdecl   puts, .s0
   196 00000800 02                 
   197                                  
   198                                          ; enable A20 gate
   199                                  
   200 00000801 FA                              cli                                             ; disable interrupt
   201                                  
   202 00000802 68AD00E8D5FD83C402              cdecl   KBC_Cmd_Write, 0xAD                     ; disable Keyboard
   203                                  
   204 0000080B 68D000E8CCFD83C402              cdecl   KBC_Cmd_Write, 0xD0                     ; cmd that read output port
   205 00000814 68[1309]E89FFD83C4-             cdecl   KBC_Data_Read, .key                     ; output port data
   205 0000081C 02                 
   206                                  
   207 0000081D 8A1E[1309]                      mov     bl, [.key]
   208 00000821 80CB02                          or      bl, 0x02                                ; Enable A20 gate
   209                                  
   210 00000824 68D100E8B3FD83C402              cdecl   KBC_Cmd_Write, 0xD1                     ; cmd that write output port
   211 0000082D 53E86AFD83C402                  cdecl   KBC_Data_Write, bx                      ; output port data
   212                                  
   213 00000834 68AE00E8A3FD83C402              cdecl   KBC_Cmd_Write, 0xAE                     ; Enable Keyboard
   214                                  
   215 0000083D FB                              sti
   216                                  
   217                                          ; put char
   218 0000083E 68[DB08]E87EF883C4-             cdecl   puts, .s1
   218 00000846 02                 
   219                                  
   220                                          ; Test Keyboard LED
   221 00000847 68[F008]E875F883C4-             cdecl   puts, .s2
   221 0000084F 02                 
   222                                  
   223 00000850 BB0000                          mov     bx, 0                                   ; BX = initial value of LED
   224                                  
   225                                  .10L:
   226 00000853 B400                            mov     ah, 0x00
   227 00000855 CD16                            int     0x16                                    ; AL = BIOS(0x16, 0x00)  //getting key code
   228                                  
   229 00000857 3C31                            cmp     al, '1'                                 ; if (AL < '1') break;
   230 00000859 7266                            jb      .10E
   231                                  
   232 0000085B 3C33                            cmp     al, '3'                                 ; if (AL > '3') break;
   233 0000085D 7762                            ja      .10E
   234                                  
   235 0000085F 88C1                            mov     cl, al
   236 00000861 FEC9                            dec     cl
   237 00000863 80E103                          and     cl, 0x03                                ; CL = times of bit shift
   238 00000866 B80100                          mov     ax, 0x0001                              ; AX = for bit conversion
   239 00000869 D3E0                            shl     ax, cl                                  ; AX <<= CL
   240 0000086B 31C3                            xor     bx, ax                                  ; BX ^= AX      // bit inversion
   241                                  
   242                                          ; Send LED command
   243                                  
   244 0000086D FA                              cli                                             ; disable interrupt
   245 0000086E 68AD00E869FD83C402              cdecl   KBC_Cmd_Write, 0xAD                     ; disable keyboard
   246                                  
   247 00000877 68ED00E81EFD83C402              cdecl   KBC_Data_Write, 0xED                    ; AX = KBC_Data_Write(0xED) // LED command
   248 00000880 68[1309]E833FD83C4-             cdecl   KBC_Data_Read, .key                     ; AX = KBC_Data_Read(&key) // ACK(Acknowledge)
   248 00000888 02                 
   249                                  
   250 00000889 803E[1309]FA                    cmp     [.key], byte 0xFA                       ; whether it's equipped with LED
   251 0000088E 7509                            jne     .11F
   252                                  
   253 00000890 53E807FD83C402                  cdecl   KBC_Data_Write, bx                      ; AX = KBC_Data_Write(BX) // LED data
   254                                  
   255 00000897 EB1C                            jmp     .11E
   256                                  
   257                                  .11F:
   258 00000899 6A046A106A0268-                 cdecl   int_to_str, word [.key], .e1, 2, 16, 0b0100
   258 000008A0 [0F09]FF36[1309]E8-
   258 000008A7 63F983C40A         
   259 000008AC 68[0E09]E810F883C4-             cdecl   puts, .e0                               ; put received code
   259 000008B4 02                 
   260                                  
   261                                  .11E:
   262                                  
   263 000008B5 68AE00E822FD83C402              cdecl   KBC_Cmd_Write, 0xAE                     ; Enable Keyboard
   264                                  
   265 000008BE FB                              sti                                             ; Enable interrupt
   266                                  
   267 000008BF EB92                            jmp     .10L
   268                                  
   269                                  .10E:
   270                                  
   271                                          ; put char
   272 000008C1 68[0509]E8FBF783C4-             cdecl   puts, .s3
   272 000008C9 02                 
   273                                  
   274                                          ; End of Process
   275 000008CA EB49                            jmp     stage_5
   276                                  
   277                                          ; data
   278 000008CC 347468207374616765-     .s0:    db      "4th stage...", 0x0A, 0x0D, 0
   278 000008D5 2E2E2E0A0D00       
   279 000008DB 204132302047617465-     .s1:    db      " A20 Gate Enabled.", 0x0A, 0x0D, 0
   279 000008E4 20456E61626C65642E-
   279 000008ED 0A0D00             
   280 000008F0 4B6579626F61726420-     .s2:    db      "Keyboard LED Test...", 0
   280 000008F9 4C454420546573742E-
   280 00000902 2E2E00             
   281 00000905 28646F6E65290A0D00      .s3:    db      "(done)", 0x0A, 0x0D, 0
   282 0000090E 5B                      .e0:    db      "["
   283 0000090F 5A5A5D00                .e1:    db      "ZZ]", 0
   284                                  
   285 00000913 0000                    .key:   dw      0
   286                                  
   287                                  stage_5:
   288                                  
   289                                          ; put char
   290 00000915 68[4109]E8A7F783C4-             cdecl   puts, .s0
   290 0000091D 02                 
   291                                  
   292                                          ; load Kernel
   293 0000091E 68009C6A106A1068-               cdecl   read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   293 00000926 [BA00]E80BFD83C408 
   294                                  
   295 0000092E 83F810                          cmp     ax, KERNEL_SECT
   296 00000931 740C                    .10Q:   jz      .10E
   297 00000933 68[5009]E889F783C4-     .10T:   cdecl   puts, .e0
   297 0000093B 02                 
   298 0000093C E8A2F7                          call    reboot
   299                                  .10E:
   300                                  
   301                                          ; End of Process
   302 0000093F EB2B                            jmp     stage_6
   303                                  
   304 00000941 357468207374616765-     .s0:    db      "5th stage...", 0x0A, 0x0D, 0
   304 0000094A 2E2E2E0A0D00       
   305 00000950 4661696C7572652074-     .e0:    db      "Failure to load kernel...", 0x0A, 0x0D, 0
   305 00000959 6F206C6F6164206B65-
   305 00000962 726E656C2E2E2E0A0D-
   305 0000096B 00                 
   306                                  
   307                                  stage_6:
   308                                  
   309                                          ; put char
   310 0000096C 68[8409]E850F783C4-             cdecl   puts, .s0
   310 00000974 02                 
   311                                  
   312                                          ; wait until user approves
   313                                  
   314                                  .10L:
   315                                  
   316 00000975 B400                            mov     ah, 0x00
   317 00000977 CD16                            int     0x16
   318 00000979 3C20                            cmp     al, ' '
   319 0000097B 75F8                            jne     .10L
   320                                  
   321                                          ; set video mode
   322 0000097D B81200                          mov     ax, 0x0012
   323 00000980 CD10                            int     0x10
   324                                  
   325                                          ; End of Process
   326 00000982 EB5C                            jmp     stage_7
   327                                  
   328 00000984 367468207374616765-     .s0:    db      "6th stage...", 0x0A, 0x0D, 0x0A, 0x0D
   328 0000098D 2E2E2E0A0D0A0D     
   329 00000994 205B50757368205350-             db      " [Push SPACE key to protect mode...]", 0x0A, 0x0D, 0
   329 0000099D 414345206B65792074-
   329 000009A6 6F2070726F74656374-
   329 000009AF 206D6F64652E2E2E5D-
   329 000009B8 0A0D00             
   330                                  
   331                                  ;
   332                                  ; GLOBAL DESCRIPTOR TABLE
   333                                  ;
   334 000009BB 00                      ALIGN 4, db 0
   335 000009BC 0000000000000000        GDT:    dq      0x00_0000_000000_0000                   ; NULL Descriptor
   336 000009C4 FFFF0000009ACF00        .cs:    dq      0x00_CF9A_000000_FFFF                   ; CODE 4G
   337 000009CC FFFF00000092CF00        .ds:    dq      0x00_CF92_000000_FFFF                   ; DATA 4G
   338                                  .gdt_end:
   339                                  
   340                                  ; SEGMENT SELECTOR
   341                                  
   342                                  SEL_CODE        equ GDT.cs - GDT                        ; selector for code
   343                                  SEL_DATA        equ GDT.ds - GDT                        ; selector for data
   344                                  
   345                                  ; GDT
   346                                  
   347 000009D4 1700                    GDTR:   dw      GDT.gdt_end - GDT - 1                   ; limit of descriptor table
   348 000009D6 [BC090000]                      dd      GDT                                     ; base address of descriptor table
   349                                  
   350                                  ; IDT
   351                                  
   352 000009DA 0000                    IDTR:   dw      0                                       ; limit of interrupt descriptor table
   353 000009DC 00000000                        dd      0                                       ; base address of interrupt descriptor table
   354                                  
   355                                  
   356                                  stage_7:
   357 000009E0 FA                              cli                                             ; disable interrupt
   358                                  
   359                                          ; load Descriptor table
   360                                  
   361 000009E1 0F0116[D409]                    lgdt    [GDTR]                                  ; load Global Descriptor Table
   362 000009E6 0F011E[DA09]                    lidt    [IDTR]                                  ; load Interrupt Descriptor Table
   363                                  
   364                                          ; migrate to protect mode
   365 000009EB 0F20C0                          mov     eax, cr0                                ; set PE(Protect Enable) bit
   366 000009EE 83C801                          or      ax, 1                                   ; CRO |= 1
   367 000009F1 0F22C0                          mov     cr0, eax
   368                                  
   369 000009F4 EB00                            jmp     $ + 2                                   ; clear look ahead of cpu instruction
   370                                  
   371                                  [BITS 32]
   372 000009F6 66                              db      0x66                                    ; Operand Size Override prefix
   373 000009F7 EA[FE090000]0800                jmp     SEL_CODE:CODE_32                        ; FAR jump // segment:offset
   374                                  
   375                                  CODE_32:
   376 000009FE 66B81000                        mov     ax, SEL_DATA
   377 00000A02 8ED8                            mov     ds, ax
   378 00000A04 8EC0                            mov     es, ax
   379 00000A06 8EE0                            mov     fs, ax
   380 00000A08 8EE8                            mov     gs, ax
   381 00000A0A 8ED0                            mov     ss, ax
   382                                  
   383                                          ; copy kernel program
   384                                  
   385 00000A0C B900080000                      mov     ecx, (KERNEL_SIZE) / 4                  ; ECX = copy by 4 byte unit
   386 00000A11 BE009C0000                      mov     esi, BOOT_END                            ; ESI = 0x0000_9c00 // kernel part
   387 00000A16 BF00101000                      mov     edi, KERNEL_LOAD                         ; EDI = 0x0010_1000
   388 00000A1B FC                              cld                                             ; DF => +
   389 00000A1C F3A5                            rep     movsd                                   ; while(--ECX) *EDI++ = *ESI++;
   390                                  
   391                                          ; jump to Kernel Process
   392 00000A1E E9(00101000)                    jmp     KERNEL_LOAD
   393                                  
   394                                          ; Padding
   395 00000A23 00<rept>                        times   BOOT_SIZE - ($ - $$)       db  0        ;8K byte
