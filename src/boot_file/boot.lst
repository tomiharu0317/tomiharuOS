     1                                  ; macro
     2                                  
     3                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1>         SP_TASK_2       equ     STACK_BASE + (STACK_SIZE * 3)
    24                              <1>         SP_TASK_3       equ     STACK_BASE + (STACK_SIZE * 4)
    25                              <1>         SP_TASK_4       equ     STACK_BASE + (STACK_SIZE * 5)
    26                              <1>         SP_TASK_5       equ     STACK_BASE + (STACK_SIZE * 6)
    27                              <1>         SP_TASK_6       equ     STACK_BASE + (STACK_SIZE * 7)
    28                              <1> 
    29                              <1>         PARAM_TASK_4    equ     0x0010_8000                     ; drawing params : for task4
    30                              <1>         PARAM_TASK_5    equ     0x0010_9000                     ; drawing params : for task5
    31                              <1>         PARAM_TASK_6    equ     0x0010_A000                     ; drawing params : for task6
    32                              <1> 
    33                              <1> 
    34                              <1>         CR3_BASE        equ     0x0010_5000                     ; page conversion table: for task 3
    35                              <1> 
    36                              <1>         CR3_TASK_4      equ     0x0020_0000                     ; page conversion table: for task 4
    37                              <1>         CR3_TASK_5      equ     0x0020_2000                     ; page conversion table: for task 5
    38                              <1>         CR3_TASK_6      equ     0x0020_4000                     ; page conversion table: for task 6
    39                              <1> 
    40                              <1> ;------------------------------------------------------------------------------------------------------
    41                              <1> ; FAT settings
    42                              <1> ;------------------------------------------------------------------------------------------------------
    43                              <1> 
    44                              <1>         FAT_SIZE        equ             (1024 * 128)            ; FAT-1/2
    45                              <1>         ROOT_SIZE       equ             (1024 * 16)
    46                              <1> 
    47                              <1> 	FAT1_START      equ		(KERNEL_SIZE)
    48                              <1> 	FAT2_START      equ		(FAT1_START + FAT_SIZE)
    49                              <1> 	ROOT_START      equ		(FAT2_START + FAT_SIZE)
    50                              <1> 	FILE_START      equ		(ROOT_START + ROOT_SIZE)
    51                              <1> 
    52                              <1>         ATTR_ARCHIVE    equ     0x20
    53                              <1>         ATTR_VOLUME_ID  equ     0x08
     4                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
    56                              <1> 
    57                              <1> %macro  set_desc 2-*
    58                              <1>             push    eax
    59                              <1>             push    edi
    60                              <1> 
    61                              <1>             mov     edi, %1                             ; descriptor address
    62                              <1>             mov     eax, %2                             ; base address
    63                              <1> 
    64                              <1>         %if 3 == %0
    65                              <1>             mov     [edi + 0], %3                       ; limit
    66                              <1>         %endif
    67                              <1> 
    68                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 4], al                       ; base([23:16])
    71                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    72                              <1> 
    73                              <1>             pop     edi
    74                              <1>             pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate 2-*
    78                              <1>             push    eax
    79                              <1>             push    edi
    80                              <1> 
    81                              <1>             mov     edi, %1                             ; descriptor address
    82                              <1>             mov     eax, %2                             ; base address
    83                              <1> 
    84                              <1>             mov     [edi + 0], ax                       ; base([15:0])
    85                              <1>             shr     eax, 16
    86                              <1>             mov     [edi + 6], ax                       ; base([31:16])
    87                              <1> 
    88                              <1>             pop     edi
    89                              <1>             pop     eax
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> struc   rose
    93 00000000 <res 00000004>      <1>             .x0         resd    1                       ; upper left coordinate : X0
    94 00000004 <res 00000004>      <1>             .y0         resd    1                       ; upper left coordinate : Y0
    95 00000008 <res 00000004>      <1>             .x1         resd    1                       ; lower right coordinate : X1
    96 0000000C <res 00000004>      <1>             .y1         resd    1                       ; lower right coordinate : Y1
    97                              <1> 
    98 00000010 <res 00000004>      <1>             .n          resd    1                       ; variable:n
    99 00000014 <res 00000004>      <1>             .d          resd    1                       ; variable:d
   100                              <1> 
   101 00000018 <res 00000004>      <1>             .color_x    resd    1                       ; display color : X axis
   102 0000001C <res 00000004>      <1>             .color_y    resd    1                       ; display color : Y axis
   103 00000020 <res 00000004>      <1>             .color_z    resd    1                       ; display color : frame
   104 00000024 <res 00000004>      <1>             .color_s    resd    1                       ; display color : char
   105 00000028 <res 00000004>      <1>             .color_f    resd    1                       ; display color : graph display color
   106 0000002C <res 00000004>      <1>             .color_b    resd    1                       ; display color : graph erase color
   107                              <1> 
   108 00000030 <res 00000010>      <1>             .title      resb    16                      ; title
   109                              <1> endstruc
   110                              <1> 
   111                              <1> 
     5                                  
     6                                          ORG     BOOT_LOAD
     7                                  
     8                                  
     9                                  ; entry point
    10                                  
    11                                  entry:
    12                                  
    13                                  ; BIOS Parameter Block
    14                                  
    15                                  
    16 00000000 EB3C                            jmp     ipl                             ; 0x00( 3) jmp instruction to boot code
    17 00000002 90                              times 3 - ($ - $$) db 0x90
    18 00000003 4F454D2D4E414D45                db      'OEM-NAME'                      ; 0x03( 8) OEM name
    19                                  
    20 0000000B 0002                            dw      512                             ; 0x0B( 2) num of byte of sector
    21 0000000D 01                              db      1                               ; 0x0D( 1) num of sector of cluster
    22 0000000E 2000                            dw      32                              ; 0x0E( 2) num of reserved sector
    23 00000010 02                              db      2                               ; 0x10( 1) num of FAT
    24 00000011 0002                            dw      512                             ; 0x11( 2) num of root entry
    25 00000013 F0FF                            dw      0xFFF0                          ; 0x13( 2) total sector:16
    26 00000015 F8                              db      0xF8                            ; 0x15( 1) media type
    27 00000016 0001                            dw      256                             ; 0x16( 2) num of sector of FAT
    28 00000018 1000                            dw      0x10                            ; 0x18( 2) num of sector of track
    29 0000001A 0200                            dw      2                               ; 0x1A( 2) num of head
    30 0000001C 00000000                        dd      0                               ; 0x1C( 4) num of hidden sector
    31                                  
    32 00000020 00000000                        dd      0                               ; 0x20( 4) total sector:32
    33 00000024 80                              db      0x80                            ; 0x24( 1) drive no.
    34 00000025 00                              db      0                               ; 0x25( 1) (reserved)
    35 00000026 29                              db      0x29                            ; 0x26( 1) boot flag
    36 00000027 EFBE0000                        dd      0xbeef                          ; 0x27( 4) serial number
    37 0000002B 424F4F5441424C4520-             db      'BOOTABLE   '                   ; 0x2B(11) volume label
    37 00000034 2020               
    38 00000036 4641543136202020                db      'FAT16   '                      ; 0x36( 8) FAT type
    39                                  
    40                                  ; Initial Program Loader
    41                                  
    42                                  ipl:
    43                                  
    44 0000003E FA                              cli                                     ; disable interrupt
    45                                  
    46 0000003F B80000                          mov     ax, 0x0000
    47 00000042 8ED8                            mov     ds, ax
    48 00000044 8EC0                            mov     es, ax
    49 00000046 8ED0                            mov     ss, ax
    50 00000048 BC007C                          mov     sp, BOOT_LOAD
    51                                  
    52 0000004B FB                              sti                                     ; enable interrupt
    53                                  
    54                                          ; save boot drive no.
    55                                  
    56 0000004C 8816[9E00]                      mov     [BOOT + drive.no], dl           ; save boot drive
    57                                  
    58                                          ; put char
    59                                  
    60 00000050 68[7D00]E8500083C4-             cdecl   puts, .s0                       ;puts(.s0)
    60 00000058 02                 
    61                                  
    62                                          ;残りのセクタをすべて読み込む
    63                                  
    64 00000059 BB0F00                          mov     bx, BOOT_SECT - 1           ;BX = 残りのブートセクト数
    65 0000005C B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE   ;CX = 次のロードアドレス
    66                                  
    67 0000005F 515368[9E00]E89D00-             cdecl   read_chs, BOOT, bx, cx     ;AX = read_chs(BOOT, bx, cx)
    67 00000067 83C406             
    68                                  
    69 0000006A 39D8                            cmp     ax, bx
    70 0000006C 740C                    .10Q:   jz      .10E                        ;if (ax != 残りのセクタ数)
    71                                  
    72 0000006E 68[8A00]E8320083C4-     .10T:   cdecl   puts, .e0                   ;{  puts(.e0);
    72 00000076 02                 
    73 00000077 E84B00                          call    reboot                      ;   reboot(); //再起動
    74                                  
    75                                  .10E:                                       ;}
    76                                  
    77                                          ;次のステージへ移行
    78                                  
    79 0000007A E92F06                          jmp     stage_2                     ;ブート処理の第2ステージへ
    80                                  
    81                                          ;データ
    82                                  
    83 0000007D 626F6F74696E672E2E-     .s0     db      "booting...", 0x0A, 0x0D, 0
    83 00000086 2E0A0D00           
    84 0000008A 4572726F723A207365-     .e0     db      "Error: sector read", 0
    84 00000093 63746F722072656164-
    84 0000009C 00                 
    85                                  
    86                                  ;ブートドライブに関する情報
    87                                  
    88 0000009D 00                      ALIGN 2, db 0
    89                                  BOOT:
    90                                          istruc  drive
    91 0000009E 0000                                at  drive.no,       dw 0        ;ドライブ番号
    92 000000A0 0000                                at  drive.cyln,     dw 0        ;シリンダ
    93 000000A2 0000                                at  drive.head,     dw 0        ;ヘッド
    94 000000A4 0200                                at  drive.sect,     dw 2        ;セクタ
    95                                          iend
    96                                  
    97                                  ;モジュール(512バイト以降に配置)
    98                                  
    99                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 000000A6 55                  <1>         push    bp
     6 000000A7 89E5                <1>         mov     bp, sp                                  ;  +4 | 文字列へのアドレス
     7                              <1>                                                         ;  +2 | Instruction Pointer
     8                              <1>                                                         ;BP+0 | BP
     9                              <1> 
    10                              <1>         ;レジスタを保存
    11                              <1> 
    12 000000A9 50                  <1>         push    ax
    13 000000AA 53                  <1>         push    bx
    14 000000AB 56                  <1>         push    si
    15                              <1> 
    16                              <1>         ;引数の取得
    17                              <1> 
    18 000000AC 8B7604              <1>         mov     si, [bp + 4]                            ;Source Index == 文字列へのアドレス
    19                              <1> 
    20                              <1>         ;処理
    21                              <1> 
    22 000000AF B40E                <1>         mov     ah, 0x0E
    23 000000B1 BB0000              <1>         mov     bx, 0x0000
    24 000000B4 FC                  <1>         cld
    25                              <1> 
    26                              <1> .10L:                                                   ;do{
    27                              <1>                                                         ;   AL = *SI++
    28 000000B5 AC                  <1>         lodsb                                           ;
    29                              <1>                                                         ;   if (0 == AL)
    30 000000B6 3C00                <1>         cmp     al, 0                                   ;       break;
    31 000000B8 7404                <1>         je      .10E                                    ;
    32                              <1>                                                         ;   Int10(0x0E, AL); //文字出力
    33 000000BA CD10                <1>         int     0x10                                    ;} while(1);
    34 000000BC EBF7                <1>         jmp     .10L
    35                              <1> 
    36                              <1> .10E:
    37                              <1> 
    38                              <1>         ;レジスタの復帰
    39                              <1> 
    40 000000BE 5E                  <1>         pop     si
    41 000000BF 5B                  <1>         pop     bx
    42 000000C0 58                  <1>         pop     ax
    43                              <1> 
    44                              <1>         ;スタックフレームの破棄
    45                              <1> 
    46 000000C1 89EC                <1>         mov     sp, bp
    47 000000C3 5D                  <1>         pop     bp
    48                              <1> 
    49 000000C4 C3                  <1>         ret
   100                                  %include    "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3                              <1>         ;メッセージを表示
     4                              <1> 
     5 000000C5 68[E100]E8DBFF83C4- <1>         cdecl   puts, .s0                       ;//再起動メッセージを表示
     5 000000CD 02                  <1>
     6                              <1> 
     7                              <1>         ;キー入力待ち
     8                              <1> 
     9                              <1> .10L:                                           ; do {
    10 000000CE B410                <1>         mov     ah, 0x10                        ;       //キー入力待ち
    11 000000D0 CD16                <1>         int     0x16                            ;       AL = BIOS(0x16, 0x10)
    12                              <1> 
    13 000000D2 3C20                <1>         cmp     al, ' '                         ;       ZF = (AL == ' ');
    14 000000D4 75F8                <1>         jne     .10L                            ; } while (!ZF);
    15                              <1> 
    16                              <1>         ;改行を出力
    17                              <1> 
    18 000000D6 68[FF00]E8CAFF83C4- <1>         cdecl   puts, .s1
    18 000000DE 02                  <1>
    19                              <1> 
    20                              <1>         ;再起動
    21                              <1> 
    22 000000DF CD19                <1>         int     0x19                            ; BIOS(0x19);
    23                              <1> 
    24                              <1>         ;文字列データ
    25                              <1> 
    26 000000E1 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    26 000000EA 414345206B65792074- <1>
    26 000000F3 6F207265626F6F742E- <1>
    26 000000FC 2E2E00              <1>
    27 000000FF 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
   101                                  %include    "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4                              <1>                                                     ;   +8 | 読み出し先アドレス
     5                              <1>                                                     ;   +6 | セクタ数
     6                              <1>                                                     ;   +4 | drive構造体のアドレス
     7                              <1>                                                     ;   +2 | 戻り番地
     8                              <1>                                                     ;BP +0 | BP
     9                              <1>                                                     ;   -2 | retry = 3; //リトライ回数
    10                              <1>                                                     ;   -4 | sect  = 0; //読み込みセクタ数
    11 00000104 55                  <1>             push    bp
    12 00000105 89E5                <1>             mov     bp, sp
    13 00000107 6A03                <1>             push    3
    14 00000109 6A00                <1>             push    0
    15                              <1> 
    16                              <1>             ;レジスタの保存
    17                              <1> 
    18 0000010B 53                  <1>             push    bx
    19 0000010C 51                  <1>             push    cx
    20 0000010D 52                  <1>             push    dx
    21 0000010E 06                  <1>             push    es
    22 0000010F 56                  <1>             push    si
    23                              <1> 
    24                              <1>             ;処理
    25 00000110 8B7604              <1>             mov     si, [bp + 4]                    ;構造体のアドレス
    26                              <1> 
    27                              <1>             ;CXレジスタの設定
    28                              <1>             ;[構造体のアドレス + オフセット + ?]
    29                              <1> 
    30 00000113 8A6C02              <1>             mov     ch, [si + drive.cyln + 0]       ;CH = シリンダ番号（下位バイト）
    31 00000116 8A4C03              <1>             mov     cl, [si + drive.cyln + 1]       ;CL = シリンダ番号（上位バイト）
    32 00000119 C0E106              <1>             shl     cl, 6                           ;CL <<= 6; //最上位2ビットにシフト
    33 0000011C 0A4C06              <1>             or      cl, [si + drive.sect]           ;CL |= セクタ番号;
    34                              <1> 
    35                              <1>             ;セクタ読み込み
    36                              <1> 
    37 0000011F 8A7404              <1>             mov     dh, [si + drive.head]           ;DH = ヘッド番号
    38 00000122 8A14                <1>             mov     dl, [si + 0]                    ;DL = ドライブ番号
    39 00000124 B80000              <1>             mov     ax, 0x0000
    40 00000127 8EC0                <1>             mov     es, ax                          ;ESセグメント初期化
    41 00000129 8B5E08              <1>             mov     bx, [bp + 8]                    ;読み出し先アドレス
    42                              <1> 
    43                              <1>             ; do{
    44                              <1>             ;     AH = セクタ読み込み
    45                              <1>             ;     AL = セクタ数
    46                              <1> 
    47                              <1>             ;     CF = BIOS(0x13, 0x02);
    48                              <1>             ;     if (CF)
    49                              <1>             ;     {
    50                              <1>             ;         AL = 0;
    51                              <1>             ;         break;
    52                              <1>             ;     }
    53                              <1> 
    54                              <1>             ;     if (読み込んだセクタがある)
    55                              <1>             ;         break;
    56                              <1> 
    57                              <1>             ;     ret = 0;
    58                              <1>             ; } while(--retry);
    59                              <1> 
    60                              <1> .10L:
    61 0000012C B402                <1>             mov     ah, 0x02
    62 0000012E 8A4606              <1>             mov     al, [bp + 6]
    63                              <1> 
    64 00000131 CD13                <1>             int     0x13
    65 00000133 7304                <1>             jnc     .11E                            ;成功したら.11Eへ
    66                              <1> 
    67 00000135 B000                <1>             mov     al, 0
    68 00000137 EB0C                <1>             jmp     .10E                            ;失敗したらリトライなしで.10Eへ
    69                              <1> .11E:
    70 00000139 3C00                <1>             cmp     al, 0                           ; if (読み込んだセクタ数 > 0)
    71 0000013B 7508                <1>             jne     .10E                            ;   break;
    72                              <1> 
    73 0000013D B80000              <1>             mov     ax, 0                           ;戻り値
    74 00000140 FF4EFE              <1>             dec     word [bp - 2]
    75 00000143 75E7                <1>             jnz     .10L                            ;読み込んだセクタ数が0なら.10Lへ
    76                              <1> .10E:
    77 00000145 B400                <1>             mov     ah, 0                           ;AH = 0 //ステータス情報の破棄
    78                              <1> 
    79                              <1>             ;レジスタの復帰
    80                              <1> 
    81 00000147 5E                  <1>             pop     si
    82 00000148 07                  <1>             pop     es
    83 00000149 5A                  <1>             pop     dx
    84 0000014A 59                  <1>             pop     cx
    85 0000014B 5B                  <1>             pop     bx
    86                              <1> 
    87                              <1>             ;スタックフレームの破棄
    88                              <1> 
    89 0000014C 89EC                <1>             mov     sp, bp
    90 0000014E 5D                  <1>             pop     bp
    91                              <1> 
    92 0000014F C3                  <1>             ret
   102                                  
   103                                  ;ブートフラグ(512biteの終了)
   104                                  
   105 00000150 00<rept>                        times   510 - ($ - $$) db 0x00
   106 000001FE 55AA                            db 0x55, 0xAA
   107                                  
   108                                  ;リアルモード時に取得した情報
   109                                  FONT:                                           ;フォント
   110 00000200 0000                    .seg:   dw 0
   111 00000202 0000                    .off:   dw 0
   112                                  ACPI_DATA:
   113 00000204 00000000                .adr:   dd 0                                    ; ACPI base address
   114 00000208 00000000                .len:   dd 0                                    ;      data length
   115                                  
   116                                  %include    "../modules/real/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 0000020C 55                  <1>         push    bp
     6 0000020D 89E5                <1>         mov     bp, sp                          ;  +12|フラグ
     7                              <1>                                                 ;  +10|基数
     8                              <1>                                                 ;  + 8|保存先バッファサイズ
     9                              <1>                                                 ;  + 6|保存先バッファアドレス
    10                              <1>                                                 ;  + 4|変換する値
    11                              <1>                                                 ;  + 2|IP(戻り番地)
    12                              <1>                                                 ;BP+ 0|BP
    13                              <1>         ; save registers
    14 0000020F 50                  <1>         push    ax
    15 00000210 53                  <1>         push    bx
    16 00000211 51                  <1>         push    cx
    17 00000212 52                  <1>         push    dx
    18 00000213 56                  <1>         push    si
    19 00000214 57                  <1>         push    di
    20                              <1> 
    21                              <1>         ; get args
    22                              <1> 
    23 00000215 8B4604              <1>         mov     ax, [bp + 4]                    ;val = 数値
    24 00000218 8B7606              <1>         mov     si, [bp + 6]                    ;dest= バッファアドレス
    25 0000021B 8B4E08              <1>         mov     cx, [bp + 8]                    ;size= バッファサイズ
    26                              <1> 
    27 0000021E 89F7                <1>         mov     di, si                          ;バッファの最後尾
    28 00000220 01CF                <1>         add     di, cx                          ;dest = &dest[size - 1]
    29 00000222 4F                  <1>         dec     di
    30                              <1> 
    31 00000223 8B5E0C              <1>         mov     bx, word [bp + 12]              ;flags = フラグ
    32                              <1>                                                 ;B2: 空白をゼロで埋める B1:+/-記号を付加する B0:値を符号付き変数として扱う
    33                              <1> 
    34                              <1>         ;符号付き判定
    35                              <1> 
    36 00000226 F7C30100            <1>         test    bx, 0b0001                      ; if (flags & 0x01) //符号付きならZF = 0
    37 0000022A 7408                <1> .10Q    je      .10E                            ; {                 //符号なしならZF = 1だからjmp
    38 0000022C 83F800              <1>         cmp     ax, 0                           ;   if (val < 0)    //CF = 1, ZF = 0
    39 0000022F 7D03                <1> .12Q    jge     .12E                            ;   {               //val >= 0 なら必要ないのでjmp
    40 00000231 83CB02              <1>         or      bx, 0b0010                      ;       flags |= 2; //B1をセット
    41                              <1>                                                 ;}}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ;符号出力判定
    46                              <1> 
    47 00000234 F7C30200            <1>         test    bx, 0b0010
    48 00000238 7410                <1> .20Q    je      .20E
    49 0000023A 83F800              <1>         cmp     ax, 0
    50 0000023D 7D07                <1> .22Q    jge     .22F
    51 0000023F F7D8                <1>         neg     ax                              ;符号反転
    52 00000241 C6042D              <1>         mov     [si], byte '-'                  ;符号表示
    53 00000244 EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 00000246 C6042B              <1>         mov     [si], byte '+'
    56                              <1> .22E:
    57 00000249 49                  <1>         dec     cx                              ;残りバッファサイズの減算 -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ;ASCII変換
    61                              <1> 
    62 0000024A 8B5E0A              <1>         mov     bx, [bp + 10]                   ;BX = 基数
    63                              <1> 
    64                              <1> .30L:                                           ;do{
    65 0000024D BA0000              <1>         mov     dx, 0
    66 00000250 F7F3                <1>         div     bx                              ;   DX = DX:AX % BX;
    67                              <1>                                                 ;   AX = DX:AX / BX;
    68                              <1> 
    69 00000252 89D6                <1>         mov     si, dx                          ;   //変換テーブル参照
    70 00000254 8A94[7C02]          <1>         mov     dl, byte [.ascii + si]          ;   DL = ASCII[DX];
    71                              <1> 
    72 00000258 8815                <1>         mov     [di], dl                        ;   *dest = DL;
    73 0000025A 4F                  <1>         dec     di                              ;   dest--;
    74                              <1> 
    75 0000025B 83F800              <1>         cmp     ax, 0
    76 0000025E E0ED                <1>         loopnz  .30L                            ;} while(AX);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ;空欄をゼロ埋め/空白埋め
    81                              <1> 
    82 00000260 83F900              <1>         cmp     cx, 0                           ;if (size)
    83 00000263 740D                <1> .40Q:   je      .40E                            ;{
    84 00000265 B020                <1>         mov     al, ' '                         ;   AL = ' '; //空白埋め
    85 00000267 837E0C04            <1>         cmp     [bp + 12], word 0b0100          ;   if (flags & 0x04)
    86 0000026B 7502                <1> .42Q:   jne     .42E                            ;   {
    87 0000026D B030                <1>         mov     al, '0'                         ;       AL = '0'; //ゼロ埋め
    88                              <1> .42E:                                           ;   }
    89 0000026F FD                  <1>         std                                     ;   // DF = 1(減算)
    90 00000270 F3AA                <1>         rep stosb                               ;   while (--cx) * DI-- = ' ';
    91                              <1> .40E:                                           ;}
    92                              <1> 
    93                              <1>         ;レジスタの復帰
    94                              <1> 
    95 00000272 5F                  <1>         pop     di
    96 00000273 5E                  <1>         pop     si
    97 00000274 5A                  <1>         pop     dx
    98 00000275 59                  <1>         pop     cx
    99 00000276 5B                  <1>         pop     bx
   100 00000277 58                  <1>         pop     ax
   101                              <1> 
   102                              <1>         ;スタックフレームの破棄
   103                              <1> 
   104 00000278 89EC                <1>         mov     sp, bp
   105 0000027A 5D                  <1>         pop     bp
   106                              <1> 
   107 0000027B C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 0000027C 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   110 00000285 39414243444546      <1>
   117                                  %include    "../modules/real/get_drive_params.s"
     1                              <1> get_drive_params:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4 0000028C 55                  <1>             push    bp                                  ;BP +4 | drive構造体のアドレス
     5 0000028D 89E5                <1>             mov     bp, sp
     6                              <1> 
     7                              <1>             ;レジスタの保存
     8                              <1> 
     9 0000028F 53                  <1>             push    bx
    10 00000290 51                  <1>             push    cx
    11 00000291 06                  <1>             push    es
    12 00000292 56                  <1>             push    si
    13 00000293 57                  <1>             push    di
    14                              <1> 
    15                              <1>             ;処理
    16 00000294 8B7604              <1>             mov     si, [bp + 4]
    17                              <1> 
    18 00000297 B80000              <1>             mov     ax, 0                               ;Disk Base Table Pointer の初期化
    19 0000029A 8EC0                <1>             mov     es, ax
    20 0000029C 89C7                <1>             mov     di, ax                              ;int 0x13命令時ES:DIにディスクベーステーブルのアドレスが設定される
    21                              <1> 
    22 0000029E B408                <1>             mov     ah, 8
    23 000002A0 8A14                <1>             mov     dl, [si + drive.no]                 ;DL = ドライブ番号
    24 000002A2 CD13                <1>             int     0x13
    25                              <1> 
    26 000002A4 721B                <1> .10Q:       jc      .10F                                ; if (0 == CF) // 0:成功, 1:失敗
    27                              <1> .10T:                                                   ; {
    28 000002A6 88C8                <1>             mov     al, cl                              ;   AX = セクタ数;
    29 000002A8 83E03F              <1>             and     ax, 0x3F                            ;   // 下位6ビットのみ有効
    30                              <1> 
    31 000002AB C0E906              <1>             shr     cl, 6                               ;   CX = シリンダ数;
    32 000002AE C1C908              <1>             ror     cx, 8
    33 000002B1 41                  <1>             inc     cx                                  ;   //シリンダ番号は0始まりなので，最大シリンダ数を得るために1加算
    34                              <1> 
    35 000002B2 0FB6DE              <1>             movzx   bx, dh                              ;   BX = ヘッド数(1ベース) //ゼロ拡張(2byte)
    36 000002B5 43                  <1>             inc     bx                                  ;   //ヘッド番号も同様
    37                              <1> 
    38 000002B6 894C02              <1>             mov     [si + drive.cyln], cx               ;   //オフセットアドレスに格納
    39 000002B9 895C04              <1>             mov     [si + drive.head], bx
    40 000002BC 894406              <1>             mov     [si + drive.sect], ax
    41                              <1> 
    42 000002BF EB03                <1>             jmp     .10E                                ; }
    43                              <1> .10F:                                                   ; else
    44 000002C1 B80000              <1>             mov     ax, 0                               ; {
    45                              <1> .10E:                                                   ;   AX = 0; //失敗
    46                              <1>                                                         ; }
    47                              <1> 
    48                              <1>             ;レジスタの復帰
    49 000002C4 5F                  <1>             pop     di
    50 000002C5 5E                  <1>             pop     si
    51 000002C6 07                  <1>             pop     es
    52 000002C7 59                  <1>             pop     cx
    53 000002C8 5B                  <1>             pop     bx
    54                              <1> 
    55                              <1>             ;スタックフレームの破棄
    56 000002C9 89EC                <1>             mov     sp, bp
    57 000002CB 5D                  <1>             pop     bp
    58                              <1> 
    59 000002CC C3                  <1>             ret
   118                                  %include    "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000002CD 55                  <1>             push    bp                                          ; BP+4 | where font address is located
     5 000002CE 89E5                <1>             mov     bp, sp
     6                              <1> 
     7                              <1>             ; save registers
     8 000002D0 50                  <1>             push    ax
     9 000002D1 53                  <1>             push    bx
    10 000002D2 56                  <1>             push    si
    11 000002D3 06                  <1>             push    es
    12 000002D4 55                  <1>             push    bp
    13                              <1> 
    14                              <1>             ; get argumentes
    15 000002D5 8B7604              <1>             mov     si, [bp + 4]
    16                              <1> 
    17                              <1>             ; get font address
    18 000002D8 B83011              <1>             mov     ax, 0x1130
    19 000002DB B706                <1>             mov     bh, 0x06                                    ;8 x 16 font(vga/mcga)
    20 000002DD CD10                <1>             int     10h                                         ;ES:BP = Font Address
    21                              <1> 
    22                              <1>             ; save font address
    23 000002DF 8C04                <1>             mov     [si + 0], es                                ;dest[0] = segment
    24 000002E1 896C02              <1>             mov     [si + 2], bp                                ;dest[1] = offset
    25                              <1> 
    26                              <1>             ; return registers
    27 000002E4 5D                  <1>             pop     bp
    28 000002E5 07                  <1>             pop     es
    29 000002E6 5E                  <1>             pop     si
    30 000002E7 5B                  <1>             pop     bx
    31 000002E8 58                  <1>             pop     ax
    32                              <1> 
    33                              <1>             ; destruct stack frame
    34 000002E9 89EC                <1>             mov     sp, bp
    35 000002EB 5D                  <1>             pop     bp
    36                              <1> 
    37 000002EC C3                  <1>             ret
   119                                  %include    "../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1> 
     3                              <1>             ;レジスタの保存
     4 000002ED 6650                <1>             push    eax
     5 000002EF 6653                <1>             push    ebx
     6 000002F1 6651                <1>             push    ecx
     7 000002F3 6652                <1>             push    edx
     8 000002F5 56                  <1>             push    si
     9 000002F6 57                  <1>             push    di
    10 000002F7 55                  <1>             push    bp
    11                              <1> 
    12                              <1>             ;文字列を表示
    13 000002F8 68[8C03]E8A8FD83C4- <1>             cdecl   puts, .s0
    13 00000300 02                  <1>
    14                              <1> 
    15 00000301 BD0000              <1>             mov     bp, 0                           ; lines = 0; //行数
    16 00000304 66BB00000000        <1>             mov     ebx, 0                          ; index = 0; //初期化
    17                              <1> .10L:                                               ; do
    18                              <1>                                                     ; {
    19 0000030A 66B820E80000        <1>             mov     eax, 0x0000E820                 ;   EAX  = 0xE820;
    20 00000310 66B914000000        <1>             mov     ecx, E820_RECORD_SIZE           ;   ECX  = 要求バイト数;
    21 00000316 66BA50414D53        <1>             mov     edx, 'PAMS'                     ;   EDX  = 'SMAP' //固定値
    22 0000031C BF[1804]            <1>             mov     di, .b0                         ;   ES:DI= 書き込み先
    23 0000031F CD15                <1>             int     0x15                            ;   BIOS(0x15, 0xE820);
    24                              <1>                                                     ; }
    25                              <1> 
    26 00000321 663D50414D53        <1>             cmp     eax, 'PAMS'                     ; コマンド未対応なら終了
    27 00000327 7402                <1>             je      .12E
    28 00000329 EB4C                <1>             jmp     .10E
    29                              <1> 
    30                              <1> .12E:
    31                              <1> 
    32                              <1> 
    33 0000032B 7302                <1>             jnc     .14E                            ; CF 0:成功 1:失敗
    34 0000032D EB48                <1>             jmp     .10E
    35                              <1> .14E:
    36                              <1> 
    37 0000032F 57E8F90083C402      <1>             cdecl   put_mem_info, di                ; 1レコード分のメモリ情報を表示
    38                              <1> 
    39                              <1>             ;ACPI data のアドレスを取得
    40 00000336 668B4510            <1>             mov     eax, [di + 16]                  ; EAX = データタイプ
    41 0000033A 6683F803            <1>             cmp     eax, 3                          ; 3:AddressRangeACPI
    42 0000033E 750F                <1>             jne     .15E
    43                              <1> 
    44 00000340 668B05              <1>             mov     eax, [di + 0]                   ; EAX = BASE address
    45 00000343 66A3[0402]          <1>             mov     [ACPI_DATA.adr], eax
    46                              <1> 
    47 00000347 668B4508            <1>             mov     eax, [di + 8]
    48 0000034B 66A3[0802]          <1>             mov     [ACPI_DATA.len], eax
    49                              <1> .15E:
    50                              <1> 
    51 0000034F 6683FB00            <1>             cmp     ebx, 0
    52 00000353 741C                <1>             jz      .16E
    53                              <1> 
    54 00000355 45                  <1>             inc     bp                              ; lines++
    55 00000356 83E507              <1>             and     bp, 0x07                        ; lines &= 0x07; //メモリ情報を8行表示するたびに
    56 00000359 7516                <1>             jnz     .16E                            ;                //ユーザーからのキー入力があるまで
    57                              <1>                                                     ;                //処理を中断
    58 0000035B 68[FF03]E845FD83C4- <1>             cdecl   puts, .s2                       ; 中断メッセージ
    58 00000363 02                  <1>
    59 00000364 B410                <1>             mov     ah, 0x10                        ; キー入力待ち
    60 00000366 CD16                <1>             int     0x16
    61                              <1> 
    62 00000368 68[0A04]E838FD83C4- <1>             cdecl   puts, .s3
    62 00000370 02                  <1>
    63                              <1> .16E:
    64                              <1> 
    65 00000371 6683FB00            <1>             cmp     ebx, 0
    66 00000375 7593                <1>             jne     .10L
    67                              <1> .10E:
    68                              <1> 
    69 00000377 68[CF03]E829FD83C4- <1>             cdecl   puts, .s1
    69 0000037F 02                  <1>
    70                              <1> 
    71                              <1>             ;レジスタの復帰
    72 00000380 5D                  <1>             pop     bp
    73 00000381 5F                  <1>             pop     di
    74 00000382 5E                  <1>             pop     si
    75 00000383 665A                <1>             pop     edx
    76 00000385 6659                <1>             pop     ecx
    77 00000387 665B                <1>             pop     ebx
    78 00000389 6658                <1>             pop     eax
    79                              <1> 
    80 0000038B C3                  <1>             ret
    81                              <1> 
    82 0000038C 2045383230204D656D- <1> .s0:	    db " E820 Memory Map:", 0x0A, 0x0D
    82 00000395 6F7279204D61703A0A- <1>
    82 0000039E 0D                  <1>
    83 0000039F 20426173655F5F5F5F- <1> 		    db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
    83 000003A8 5F5F5F5F5F5F5F5F5F- <1>
    83 000003B1 204C656E6774685F5F- <1>
    83 000003BA 5F5F5F5F5F5F5F5F5F- <1>
    83 000003C3 20547970655F5F5F5F- <1>
    83 000003CC 0A0D00              <1>
    84 000003CF 202D2D2D2D2D2D2D2D- <1> .s1:	    db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
    84 000003D8 2D2D2D2D2D2D2D2D2D- <1>
    84 000003E1 202D2D2D2D2D2D2D2D- <1>
    84 000003EA 2D2D2D2D2D2D2D2D2D- <1>
    84 000003F3 202D2D2D2D2D2D2D2D- <1>
    84 000003FC 0A0D00              <1>
    85 000003FF 203C6D6F72652E2E2E- <1> .s2:	    db " <more...>", 0
    85 00000408 3E00                <1>
    86 0000040A 0D2020202020202020- <1> .s3:	    db 0x0D, "          ", 0x0D, 0
    86 00000413 20200D00            <1>
    87                              <1> 
    88 00000417 00                  <1> ALIGN 4, db 0
    89 00000418 00<rept>            <1> .b0:    times E820_RECORD_SIZE db 0
    90                              <1> 
    91                              <1> put_mem_info:
    92                              <1> 
    93                              <1>             ;スタックフレームの構築
    94 0000042C 55                  <1>             push    bp                              ;BP +4 | メモリ情報が格納されたバッファアドレス
    95 0000042D 89E5                <1>             mov     bp, sp
    96                              <1> 
    97                              <1>             ;レジスタの保存
    98 0000042F 53                  <1>             push    bx
    99 00000430 56                  <1>             push    si
   100                              <1> 
   101                              <1>             ;引数の取得
   102 00000431 8B7604              <1>             mov     si, [bp + 4]
   103                              <1> 
   104                              <1>             ; Base(64bit)
   105 00000434 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 6], .p2 + 0, 4, 16, 0b0100
   105 0000043B [0B05]FF7406E8C9FD- <1>
   105 00000443 83C40A              <1>
   106 00000446 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 4], .p2 + 4, 4, 16, 0b0100
   106 0000044D [0F05]FF7404E8B7FD- <1>
   106 00000455 83C40A              <1>
   107 00000458 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 2], .p3 + 0, 4, 16, 0b0100
   107 0000045F [1405]FF7402E8A5FD- <1>
   107 00000467 83C40A              <1>
   108 0000046A 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 0], .p3 + 4, 4, 16, 0b0100
   108 00000471 [1805]FF34E894FD83- <1>
   108 00000479 C40A                <1>
   109                              <1> 
   110                              <1>             ; Length(64bit)
   111 0000047B 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 14], .p4 + 0, 4, 16, 0b0100
   111 00000482 [1D05]FF740EE882FD- <1>
   111 0000048A 83C40A              <1>
   112 0000048D 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 12], .p4 + 4, 4, 16, 0b0100
   112 00000494 [2105]FF740CE870FD- <1>
   112 0000049C 83C40A              <1>
   113 0000049F 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 10], .p5 + 0, 4, 16, 0b0100
   113 000004A6 [2605]FF740AE85EFD- <1>
   113 000004AE 83C40A              <1>
   114 000004B1 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 8 ], .p5 + 4, 4, 16, 0b0100
   114 000004B8 [2A05]FF7408E84CFD- <1>
   114 000004C0 83C40A              <1>
   115                              <1> 
   116                              <1>             ; Type(32bit)
   117 000004C3 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 18], .p6 + 0, 4, 16, 0b0100
   117 000004CA [2F05]FF7412E83AFD- <1>
   117 000004D2 83C40A              <1>
   118 000004D5 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 16], .p6 + 4, 4, 16, 0b0100
   118 000004DC [3305]FF7410E828FD- <1>
   118 000004E4 83C40A              <1>
   119                              <1> 
   120 000004E7 68[0A05]E8B9FB83C4- <1>             cdecl   puts, .s1                       ; //レコード情報を表示
   120 000004EF 02                  <1>
   121                              <1> 
   122 000004F0 8B5C10              <1>             mov     bx, [si + 16]                   ; //タイプを文字列で表示
   123 000004F3 83E307              <1>             and     bx, 0x07                        ; BX = Type(0~5)
   124 000004F6 D1E3                <1>             shl     bx, 1                           ; BX *= 2   //要素サイズに変換
   125 000004F8 81C3[8D05]          <1>             add     bx, .t0                         ; BX += .t0 //テーブルの先頭アドレスを加算
   126 000004FC FF37E8A5FB83C402    <1>             cdecl   puts, word [bx]
   127                              <1> 
   128                              <1>             ;レジスタの復帰
   129 00000504 5E                  <1>             pop     si
   130 00000505 5B                  <1>             pop     bx
   131                              <1> 
   132                              <1>             ;スタックフレームの破棄
   133 00000506 89EC                <1>             mov     sp, bp
   134 00000508 5D                  <1>             pop     bp
   135                              <1> 
   136 00000509 C3                  <1>             ret
   137                              <1> 
   138 0000050A 20                  <1> .s1:        db  " "
   139 0000050B 5A5A5A5A5A5A5A5A5F  <1> .p2:        db  "ZZZZZZZZ_"
   140 00000514 5A5A5A5A5A5A5A5A20  <1> .p3:        db  "ZZZZZZZZ "
   141 0000051D 5A5A5A5A5A5A5A5A5F  <1> .p4:        db  "ZZZZZZZZ_"
   142 00000526 5A5A5A5A5A5A5A5A20  <1> .p5:        db  "ZZZZZZZZ "
   143 0000052F 5A5A5A5A5A5A5A5A20- <1> .p6:        db  "ZZZZZZZZ ", 0
   143 00000538 00                  <1>
   144                              <1> 
   145 00000539 2028556E6B6E6F776E- <1> .s4:        db  " (Unknown)", 0x0A, 0x0D, 0
   145 00000542 290A0D00            <1>
   146 00000546 2028757361626C6529- <1> .s5:        db  " (usable)", 0x0A, 0x0D, 0
   146 0000054F 0A0D00              <1>
   147 00000552 202872657365727665- <1> .s6:        db  " (reserved)", 0x0A, 0x0D, 0
   147 0000055B 64290A0D00          <1>
   148 00000560 202841435049206461- <1> .s7:        db  " (ACPI data)", 0x0A, 0x0D, 0
   148 00000569 7461290A0D00        <1>
   149 0000056F 202841435049204E56- <1> .s8:        db  " (ACPI NVS)", 0x0A, 0x0D, 0
   149 00000578 53290A0D00          <1>
   150 0000057D 2028626164206D656D- <1> .s9:        db  " (bad memory)", 0x0A, 0x0D, 0
   150 00000586 6F7279290A0D00      <1>
   151                              <1> 
   152 0000058D [3905][4605][5205]- <1> .t0:        dw  .s4, .s5, .s6, .s7, .s8, .s4, .s4
   152 00000593 [6005][6F05][3905]- <1>
   152 00000599 [3905]              <1>
   120                                  %include    "../modules/real/kbc.s"
     1                              <1> KBC_Data_Write:
     2                              <1> 
     3                              <1>             ;construct stack frame
     4                              <1>                                                         ; BP +4 | data
     5 0000059B 55                  <1>             push    bp
     6 0000059C 89E5                <1>             mov     bp, sp
     7                              <1> 
     8                              <1>             ;save register
     9 0000059E 51                  <1>             push    cx
    10                              <1> 
    11                              <1>             ;process
    12 0000059F B90000              <1>             mov     cx, 0                               ; CX = 0; // max count value
    13                              <1> .10L:
    14 000005A2 E464                <1>             in      al, 0x64
    15 000005A4 A802                <1>             test    al, 0x02                            ; ZF = AL & 0x02 // B1:input buffer full
    16 000005A6 E0FA                <1>             loopnz  .10L                                ; loop while 1 set at B1
    17                              <1> 
    18 000005A8 83F900              <1>             cmp     cx, 0
    19 000005AB 7405                <1>             jz      .20E                                ; timeout
    20                              <1> 
    21 000005AD 8A4604              <1>             mov     al, [bp + 4]
    22 000005B0 E660                <1>             out     0x60, al
    23                              <1> .20E:
    24                              <1> 
    25 000005B2 89C8                <1>             mov     ax, cx                              ; return CX
    26                              <1> 
    27                              <1>             ;return register
    28 000005B4 59                  <1>             pop     cx
    29                              <1> 
    30                              <1>             ;destruct stack frame
    31                              <1> 
    32 000005B5 89EC                <1>             mov     sp, bp
    33 000005B7 5D                  <1>             pop     bp
    34                              <1> 
    35 000005B8 C3                  <1>             ret
    36                              <1> 
    37                              <1> KBC_Data_Read:
    38                              <1> 
    39                              <1>             ;construct stack frame
    40                              <1> 
    41 000005B9 55                  <1>             push    bp
    42 000005BA 89E5                <1>             mov     bp, sp
    43                              <1> 
    44                              <1>             ;save register
    45 000005BC 51                  <1>             push    cx
    46 000005BD 57                  <1>             push    di
    47                              <1> 
    48                              <1>             ;process
    49 000005BE B90000              <1>             mov     cx, 0
    50                              <1> .10L:
    51 000005C1 E464                <1>             in      al, 0x64
    52 000005C3 A801                <1>             test    al, 0x01                            ; ZF = AL & 0x01 // B0:output buffer full
    53 000005C5 E1FA                <1>             loopz  .10L                                 ; loop while 0 set at B0
    54                              <1> 
    55 000005C7 83F900              <1>             cmp     cx, 0
    56 000005CA 7409                <1>             jz      .20E
    57                              <1> 
    58 000005CC B400                <1>             mov     ah, 0x00
    59 000005CE E460                <1>             in      al, 0x60
    60                              <1> 
    61 000005D0 8B7E04              <1>             mov     di, [bp + 4]                        ; DI = Address where read data will be saved
    62 000005D3 8905                <1>             mov     [di + 0], ax
    63                              <1> .20E:
    64                              <1> 
    65 000005D5 89C8                <1>             mov     ax, cx
    66                              <1> 
    67                              <1>             ;return register
    68 000005D7 5F                  <1>             pop     di
    69 000005D8 59                  <1>             pop     cx
    70                              <1> 
    71                              <1>             ;destruct stack frame
    72                              <1> 
    73 000005D9 89EC                <1>             mov     sp, bp
    74 000005DB 5D                  <1>             pop     bp
    75                              <1> 
    76 000005DC C3                  <1>             ret
    77                              <1> 
    78                              <1> KBC_Cmd_Write:
    79                              <1> 
    80                              <1>             ;construct stack frame
    81                              <1>                                                         ; BP +4 | data
    82 000005DD 55                  <1>             push    bp
    83 000005DE 89E5                <1>             mov     bp, sp
    84                              <1> 
    85                              <1>             ;save register
    86 000005E0 51                  <1>             push    cx
    87                              <1> 
    88                              <1>             ;process
    89 000005E1 B90000              <1>             mov     cx, 0                               ; CX = 0; // max count value
    90                              <1> .10L:
    91 000005E4 E464                <1>             in      al, 0x64
    92 000005E6 A802                <1>             test    al, 0x02                            ; ZF = AL & 0x02 // B1:input buffer full
    93 000005E8 E0FA                <1>             loopnz  .10L
    94                              <1> 
    95 000005EA 83F900              <1>             cmp     cx, 0
    96 000005ED 7405                <1>             jz      .20E                                ; timeout
    97                              <1> 
    98 000005EF 8A4604              <1>             mov     al, [bp + 4]
    99 000005F2 E664                <1>             out     0x64, al
   100                              <1> .20E:
   101                              <1> 
   102 000005F4 89C8                <1>             mov     ax, cx                              ; return CX
   103                              <1> 
   104                              <1>             ;return register
   105 000005F6 59                  <1>             pop     cx
   106                              <1> 
   107                              <1>             ;destruct stack frame
   108                              <1> 
   109 000005F7 89EC                <1>             mov     sp, bp
   110 000005F9 5D                  <1>             pop     bp
   111                              <1> 
   112 000005FA C3                  <1>             ret
   121                                  %include    "../modules/real/lba_chs.s"
     1                              <1> lba_chs:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000005FB 55                  <1>             push    bp
     5 000005FC 89E5                <1>             mov     bp, sp                                  ;  +8 | LBA value
     6                              <1>                                                             ;  +6 | address of drive struc(where conversed parameters will be stored)
     7                              <1>                                                             ;BP+4 | address of drive struc(where drive parameters are stored)
     8                              <1> 
     9                              <1>             ; save registers
    10                              <1> 
    11 000005FE 50                  <1>             push    ax
    12 000005FF 53                  <1>             push    bx
    13 00000600 52                  <1>             push    dx
    14 00000601 56                  <1>             push    si
    15 00000602 57                  <1>             push    di
    16                              <1> 
    17                              <1>             ; start of process
    18                              <1> 
    19 00000603 8B7604              <1>             mov     si, [bp + 4]
    20 00000606 8B7E06              <1>             mov     di, [bp + 6]
    21                              <1> 
    22 00000609 8A4404              <1>             mov     al,  [si + drive.head]                   ; AL = max head num
    23 0000060C F66406              <1>             mul     byte [si + drive.sect]                 ; AX = max head * max sect
    24 0000060F 89C3                <1>             mov     bx, ax                                  ; BX = num of sect per cylinder
    25                              <1> 
    26 00000611 BA0000              <1>             mov     dx, 0                                   ; DX = LBA(top 2 byte)
    27 00000614 8B4608              <1>             mov     ax, [bp + 8]                            ; AX = LBA(lower 2 byte)
    28 00000617 F7F3                <1>             div     bx                                      ; AX = DX:AX / BX   => cylinder number
    29                              <1>                                                             ; DX = DX:AX % BX
    30                              <1> 
    31 00000619 894502              <1>             mov     [di + drive.cyln], ax
    32                              <1> 
    33 0000061C 89D0                <1>             mov     ax, dx
    34 0000061E F67406              <1>             div     byte [si + drive.sect]                  ; AL = AX / max num of sect => head number
    35                              <1>                                                             ; AH = AX % max num of sect => sector number
    36                              <1> 
    37 00000621 0FB6D4              <1>             movzx   dx, ah                                  ; DX = sector number
    38 00000624 42                  <1>             inc     dx                                      ; sect starts from no.1
    39                              <1> 
    40 00000625 B400                <1>             mov     ah, 0x00                                ; AX = head num
    41                              <1> 
    42 00000627 894504              <1>             mov     [di + drive.head], ax
    43 0000062A 895506              <1>             mov     [di + drive.sect], dx
    44                              <1> 
    45                              <1>             ; return registers
    46 0000062D 5F                  <1>             pop     di
    47 0000062E 5E                  <1>             pop     si
    48 0000062F 5A                  <1>             pop     dx
    49 00000630 5B                  <1>             pop     bx
    50 00000631 58                  <1>             pop     ax
    51                              <1> 
    52                              <1>             ; destruct stack frame
    53 00000632 89EC                <1>             mov     sp, bp
    54 00000634 5D                  <1>             pop     bp
    55                              <1> 
    56 00000635 C3                  <1>             ret
   122                                  %include    "../modules/real/read_lba.s"
     1                              <1> read_lba:
     2                              <1> 
     3                              <1>             ;construct stack frame
     4                              <1> 
     5 00000636 55                  <1>             push    bp                                      ;  +10 | destination address
     6 00000637 89E5                <1>             mov     bp, sp                                  ;  + 8 | read sect num
     7                              <1>                                                             ;  + 6 | LBA
     8                              <1>                                                             ;BP+ 4 | address of drive struc
     9                              <1> 
    10                              <1>             ;save register
    11                              <1> 
    12 00000639 56                  <1>             push    si
    13                              <1> 
    14                              <1>             ;get argument
    15 0000063A 8B7604              <1>             mov     si, [bp + 4]                            ; si = drive info
    16                              <1> 
    17                              <1>             ;LBA -> CHS conversion
    18 0000063D 8B4606              <1>             mov     ax, [bp + 6]
    19 00000640 5068[6406]56E8B3FF- <1>             cdecl   lba_chs, si, .chs, ax
    19 00000648 83C406              <1>
    20                              <1> 
    21                              <1>             ;copy drive no.
    22 0000064B 8A04                <1>             mov     al, [si + drive.no]
    23 0000064D A2[6406]            <1>             mov     [.chs + drive.no], al
    24                              <1> 
    25                              <1>             ;read sector
    26 00000650 FF760AFF760868-     <1>             cdecl   read_chs, .chs, word [bp + 8], word [bp + 10]
    26 00000657 [6406]E8A8FA83C406  <1>
    27                              <1>                                                             ; AX = read_chs(.chs, sect num, ofs)
    28                              <1> 
    29                              <1>             ;return register
    30                              <1> 
    31 0000065F 5E                  <1>             pop     si
    32                              <1> 
    33                              <1>             ;destruct stack frame
    34                              <1> 
    35 00000660 89EC                <1>             mov     sp, bp
    36 00000662 5D                  <1>             pop     bp
    37                              <1> 
    38 00000663 C3                  <1>             ret
    39                              <1> ALIGN 2
    40 00000664 00<rept>            <1> .chs:	times drive_size	db	0
    41                              <1> 
   123                                  %include    "../modules/real/memcpy.s"
     1                              <1> memcpy:
     2                              <1> 
     3                              <1>         ; スタックフレームの構築
     4                              <1> 
     5 0000066C 55                  <1>         push    bp
     6 0000066D 89E5                <1>         mov     bp, sp
     7                              <1> 
     8                              <1>         
     9                              <1>         ; ローカル変数として使用するレジスタの保存
    10                              <1> 
    11 0000066F 51                  <1>         push    cx
    12 00000670 56                  <1>         push    si
    13 00000671 57                  <1>         push    di
    14                              <1> 
    15                              <1>         ; バイト単位でのコピー
    16                              <1> 
    17 00000672 FC                  <1>         cld                                 ; DF = 0
    18 00000673 8B7E04              <1>         mov     di, [bp + 4]
    19 00000676 8B7606              <1>         mov     si, [bp + 6]
    20 00000679 8B4E08              <1>         mov     cx, [bp + 8]
    21                              <1> 
    22 0000067C F3A4                <1>         rep movsb                           ; while (*DI++ == *SI++) ;
    23                              <1> 
    24                              <1>         ; レジスタの復帰
    25                              <1> 
    26 0000067E 5F                  <1>         pop     di
    27 0000067F 5E                  <1>         pop     si
    28 00000680 59                  <1>         pop     cx
    29                              <1> 
    30                              <1>         ; スタックフレームの破棄
    31                              <1> 
    32 00000681 89EC                <1>         mov     sp, bp
    33 00000683 5D                  <1>         pop     bp
    34                              <1> 
    35 00000684 C3                  <1>         ret
   124                                  %include    "../modules/real/memcmp.s"
     1                              <1> memcmp:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5                              <1>                                         ;BP+ 8 | バイト数
     6                              <1>                                         ;BP+ 6 | アドレス1
     7                              <1>                                         ;BP+ 4 | アドレス0
     8                              <1>                                         ;------|---------
     9                              <1>                                         ;BP+ 2 | IP(戻り番地)
    10                              <1>                                         ;BP+ 0 | BP(元の値)
    11 00000685 55                  <1>         push    bp
    12 00000686 89E5                <1>         mov     bp, sp
    13                              <1> 
    14                              <1>         ;レジスタの保存
    15                              <1> 
    16 00000688 53                  <1>         push    bx
    17 00000689 51                  <1>         push    cx
    18 0000068A 52                  <1>         push    dx
    19 0000068B 56                  <1>         push    si
    20 0000068C 57                  <1>         push    di
    21                              <1> 
    22                              <1>         ;引数の取得
    23                              <1> 
    24 0000068D FC                  <1>         cld
    25 0000068E 8B7604              <1>         mov     si, [bp + 4]
    26 00000691 8B7E06              <1>         mov     di, [bp + 6]
    27 00000694 8B4E08              <1>         mov     cx, [bp + 8]
    28                              <1> 
    29                              <1>         ;バイト単位での比較
    30                              <1> 
    31 00000697 F3A6                <1>         repe cmpsb                      ; if(ZF = 異なる文字なし)
    32 00000699 7505                <1>         jnz     .10F                    ; {
    33 0000069B B80000              <1>         mov     ax, 0                   ; ret = 0; // 一致
    34 0000069E EB03                <1>         jmp     .10E                    ; }
    35                              <1> .10F:                                   ; else
    36 000006A0 B8FFFF              <1>         mov     ax, -1                  ; {
    37                              <1> .10E:                                   ; ret = -1 // 不一致
    38                              <1>                                         ; }
    39                              <1> 
    40                              <1>         ;レジスタの復帰
    41                              <1> 
    42 000006A3 5F                  <1>         pop     di
    43 000006A4 5E                  <1>         pop     si
    44 000006A5 5A                  <1>         pop     dx
    45 000006A6 59                  <1>         pop     cx
    46 000006A7 5B                  <1>         pop     bx
    47                              <1> 
    48                              <1>         ;スタックフレームの破棄
    49                              <1> 
    50 000006A8 89EC                <1>         mov     sp, bp
    51 000006AA 5D                  <1>         pop     bp
    52                              <1> 
    53 000006AB C3                  <1>         ret
   125                                  
   126                                  
   127                                  
   128                                  
   129                                  ;ブート処理の第2ステージ
   130                                  
   131                                  stage_2:
   132                                  
   133                                          ;文字列を表示
   134 000006AC 68[2607]E8F4F983C4-             cdecl   puts, .s0
   134 000006B4 02                 
   135                                  
   136                                          ;ドライブ情報を取得
   137 000006B5 68[9E00]E8D1FB83C4-             cdecl   get_drive_params, BOOT          ;get_drive_params(DX, BOOT.CYLN);
   137 000006BD 02                 
   138 000006BE 83F800                          cmp     ax, 0                           ;if (0 == AX){
   139 000006C1 750C                    .10Q:   jne     .10E                            ;       puts(.e0);
   140 000006C3 68[5D07]E8DDF983C4-     .10T:   cdecl   puts, .e0                       ;       reboot();
   140 000006CB 02                 
   141 000006CC E8F6F9                          call    reboot                          ; }
   142                                  .10E:
   143                                  
   144                                          ;ドライブ情報を表示
   145 000006CF A1[9E00]                        mov     ax, [BOOT + drive.no]           ;AX = ブートドライブ
   146 000006D2 6A046A106A0268-                 cdecl   int_to_str, ax, .p1, 2, 16, 0b0100
   146 000006D9 [3E07]50E82DFB83C4-
   146 000006E1 0A                 
   147 000006E2 A1[A000]                        mov     ax, [BOOT + drive.cyln]           ;
   148 000006E5 6A046A106A0468-                 cdecl   int_to_str, ax, .p2, 4, 16, 0b0100
   148 000006EC [4607]50E81AFB83C4-
   148 000006F4 0A                 
   149 000006F5 A1[A200]                        mov     ax, [BOOT + drive.head]           ;AX = ヘッド数
   150 000006F8 6A046A106A0268-                 cdecl   int_to_str, ax, .p3, 2, 16, 0b0100
   150 000006FF [5007]50E807FB83C4-
   150 00000707 0A                 
   151 00000708 A1[A400]                        mov     ax, [BOOT + drive.sect]           ;AX = トラック当たりのセクタ数
   152 0000070B 6A046A106A0268-                 cdecl   int_to_str, ax, .p4, 2, 16, 0b0100
   152 00000712 [5807]50E8F4FA83C4-
   152 0000071A 0A                 
   153 0000071B 68[3507]E885F983C4-             cdecl   puts, .s1
   153 00000723 02                 
   154                                  
   155                                  
   156                                          ;処理の終了
   157                                  
   158 00000724 EB52                            jmp     stage_3
   159                                  
   160                                          ;データ
   161                                  
   162 00000726 326E64207374616765-     .s0     db      "2nd stage...", 0x0A, 0x0D, 0
   162 0000072F 2E2E2E0A0D00       
   163                                  
   164 00000735 2044726976653A3078      .s1     db      " Drive:0x"
   165 0000073E 20202C20433A3078        .p1     db      "  , C:0x"
   166 00000746 202020202C20483A30-     .p2     db      "    , H:0x"
   166 0000074F 78                 
   167 00000750 20202C20533A3078        .p3     db      "  , S:0x"
   168 00000758 20200A0D00              .p4     db      "  ", 0x0A, 0x0D, 0
   169                                  
   170 0000075D 43616E277420676574-     .e0     db      "Can't get drive Parameter.", 0
   170 00000766 206472697665205061-
   170 0000076F 72616D657465722E00 
   171                                  
   172                                  stage_3:
   173                                  
   174                                          ;文字列を表示
   175 00000778 68[F507]E828F983C4-             cdecl   puts, .s0
   175 00000780 02                 
   176                                  
   177                                          ;プロテクトモードで使用するフォントは
   178                                          ;BIOSに内蔵されたものを流用する
   179                                  
   180 00000781 68[0002]E846FB83C4-             cdecl   get_font_adr, FONT
   180 00000789 02                 
   181                                  
   182                                          ;フォントアドレスの表示
   183 0000078A 6A046A106A0468-                 cdecl   int_to_str, word [FONT.seg], .p1, 4, 16, 0b0100
   183 00000791 [1208]FF36[0002]E8-
   183 00000798 72FA83C40A         
   184 0000079D 6A046A106A0468-                 cdecl   int_to_str, word [FONT.off], .p2, 4, 16, 0b0100
   184 000007A4 [1708]FF36[0202]E8-
   184 000007AB 5FFA83C40A         
   185 000007B0 68[0408]E8F0F883C4-             cdecl   puts, .s1
   185 000007B8 02                 
   186                                  
   187                                          ;メモリ情報の取得と表示
   188 000007B9 E831FB                          cdecl   get_mem_info              ;get_mem_info()
   189                                  
   190 000007BC 66A1[0402]                      mov     eax, [ACPI_DATA.adr]
   191 000007C0 6683F800                        cmp     eax, 0
   192 000007C4 742D                            je      .10E
   193                                  
   194 000007C6 6A046A106A0468-                 cdecl   int_to_str, ax, .p4, 4, 16, 0b0100      ;下位アドレス
   194 000007CD [3108]50E839FA83C4-
   194 000007D5 0A                 
   195 000007D6 66C1E810                        shr     eax, 16                                 ;EAX >>= 16
   196 000007DA 6A046A106A0468-                 cdecl   int_to_str, ax, .p3, 4, 16, 0b0100      ;上位アドレス
   196 000007E1 [2D08]50E825FA83C4-
   196 000007E9 0A                 
   197                                  
   198 000007EA 68[2108]E8B6F883C4-             cdecl   puts, .s2
   198 000007F2 02                 
   199                                  .10E:
   200                                  
   201                                          ;処理の終了
   202 000007F3 EB43                            jmp     stage_4
   203                                  
   204                                          ;データ
   205 000007F5 337264207374616765-     .s0:    db      "3rd stage...", 0x0A, 0x0D, 0
   205 000007FE 2E2E2E0A0D00       
   206                                  
   207 00000804 20466F6E7420416464-     .s1:    db      " Font Address="
   207 0000080D 726573733D         
   208 00000812 5A5A5A5A3A              .p1:    db      "ZZZZ:"
   209 00000817 5A5A5A5A0A0D00          .p2:    db      "ZZZZ", 0x0A, 0x0D, 0
   210 0000081E 0A0D00                          db      0x0A, 0x0D, 0
   211                                  
   212 00000821 204143504920646174-     .s2:    db      " ACPI data ="
   212 0000082A 61203D             
   213 0000082D 5A5A5A5A                .p3:    db      "ZZZZ"
   214 00000831 5A5A5A5A0A0D00          .p4:    db      "ZZZZ", 0x0A, 0x0D, 0
   215                                  
   216                                  
   217                                  
   218                                  stage_4:
   219                                  
   220                                          ; put char
   221 00000838 68[0C09]E868F883C4-             cdecl   puts, .s0
   221 00000840 02                 
   222                                  
   223                                          ; enable A20 gate
   224                                  
   225 00000841 FA                              cli                                             ; disable interrupt
   226                                  
   227 00000842 68AD00E895FD83C402              cdecl   KBC_Cmd_Write, 0xAD                     ; disable Keyboard
   228                                  
   229 0000084B 68D000E88CFD83C402              cdecl   KBC_Cmd_Write, 0xD0                     ; cmd that read output port
   230 00000854 68[5309]E85FFD83C4-             cdecl   KBC_Data_Read, .key                     ; output port data
   230 0000085C 02                 
   231                                  
   232 0000085D 8A1E[5309]                      mov     bl, [.key]
   233 00000861 80CB02                          or      bl, 0x02                                ; Enable A20 gate
   234                                  
   235 00000864 68D100E873FD83C402              cdecl   KBC_Cmd_Write, 0xD1                     ; cmd that write output port
   236 0000086D 53E82AFD83C402                  cdecl   KBC_Data_Write, bx                      ; output port data
   237                                  
   238 00000874 68AE00E863FD83C402              cdecl   KBC_Cmd_Write, 0xAE                     ; Enable Keyboard
   239                                  
   240 0000087D FB                              sti
   241                                  
   242                                          ; put char
   243 0000087E 68[1B09]E822F883C4-             cdecl   puts, .s1
   243 00000886 02                 
   244                                  
   245                                          ; Test Keyboard LED
   246 00000887 68[3009]E819F883C4-             cdecl   puts, .s2
   246 0000088F 02                 
   247                                  
   248 00000890 BB0000                          mov     bx, 0                                   ; BX = initial value of LED
   249                                  
   250                                  .10L:
   251 00000893 B400                            mov     ah, 0x00
   252 00000895 CD16                            int     0x16                                    ; AL = BIOS(0x16, 0x00)  //getting key code
   253                                  
   254 00000897 3C31                            cmp     al, '1'                                 ; if (AL < '1') break;
   255 00000899 7266                            jb      .10E
   256                                  
   257 0000089B 3C33                            cmp     al, '3'                                 ; if (AL > '3') break;
   258 0000089D 7762                            ja      .10E
   259                                  
   260 0000089F 88C1                            mov     cl, al
   261 000008A1 FEC9                            dec     cl
   262 000008A3 80E103                          and     cl, 0x03                                ; CL = times of bit shift
   263 000008A6 B80100                          mov     ax, 0x0001                              ; AX = for bit conversion
   264 000008A9 D3E0                            shl     ax, cl                                  ; AX <<= CL
   265 000008AB 31C3                            xor     bx, ax                                  ; BX ^= AX      // bit inversion
   266                                  
   267                                          ; Send LED command
   268                                  
   269 000008AD FA                              cli                                             ; disable interrupt
   270 000008AE 68AD00E829FD83C402              cdecl   KBC_Cmd_Write, 0xAD                     ; disable keyboard
   271                                  
   272 000008B7 68ED00E8DEFC83C402              cdecl   KBC_Data_Write, 0xED                    ; AX = KBC_Data_Write(0xED) // LED command
   273 000008C0 68[5309]E8F3FC83C4-             cdecl   KBC_Data_Read, .key                     ; AX = KBC_Data_Read(&key) // ACK(Acknowledge)
   273 000008C8 02                 
   274                                  
   275 000008C9 803E[5309]FA                    cmp     [.key], byte 0xFA                       ; whether it's equipped with LED
   276 000008CE 7509                            jne     .11F
   277                                  
   278 000008D0 53E8C7FC83C402                  cdecl   KBC_Data_Write, bx                      ; AX = KBC_Data_Write(BX) // LED data
   279                                  
   280 000008D7 EB1C                            jmp     .11E
   281                                  
   282                                  .11F:
   283 000008D9 6A046A106A0268-                 cdecl   int_to_str, word [.key], .e1, 2, 16, 0b0100
   283 000008E0 [4F09]FF36[5309]E8-
   283 000008E7 23F983C40A         
   284 000008EC 68[4E09]E8B4F783C4-             cdecl   puts, .e0                               ; put received code
   284 000008F4 02                 
   285                                  
   286                                  .11E:
   287                                  
   288 000008F5 68AE00E8E2FC83C402              cdecl   KBC_Cmd_Write, 0xAE                     ; Enable Keyboard
   289                                  
   290 000008FE FB                              sti                                             ; Enable interrupt
   291                                  
   292 000008FF EB92                            jmp     .10L
   293                                  
   294                                  .10E:
   295                                  
   296                                          ; put char
   297 00000901 68[4509]E89FF783C4-             cdecl   puts, .s3
   297 00000909 02                 
   298                                  
   299                                          ; End of Process
   300 0000090A EB49                            jmp     stage_5
   301                                  
   302                                          ; data
   303 0000090C 347468207374616765-     .s0:    db      "4th stage...", 0x0A, 0x0D, 0
   303 00000915 2E2E2E0A0D00       
   304 0000091B 204132302047617465-     .s1:    db      " A20 Gate Enabled.", 0x0A, 0x0D, 0
   304 00000924 20456E61626C65642E-
   304 0000092D 0A0D00             
   305 00000930 4B6579626F61726420-     .s2:    db      "Keyboard LED Test...", 0
   305 00000939 4C454420546573742E-
   305 00000942 2E2E00             
   306 00000945 28646F6E65290A0D00      .s3:    db      "(done)", 0x0A, 0x0D, 0
   307 0000094E 5B                      .e0:    db      "["
   308 0000094F 5A5A5D00                .e1:    db      "ZZ]", 0
   309                                  
   310 00000953 0000                    .key:   dw      0
   311                                  
   312                                  stage_5:
   313                                  
   314                                          ; put char
   315 00000955 68[8109]E84BF783C4-             cdecl   puts, .s0
   315 0000095D 02                 
   316                                  
   317                                          ; load Kernel
   318 0000095E 68009C6A106A1068-               cdecl   read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   318 00000966 [9E00]E8CBFC83C408 
   319                                  
   320 0000096E 83F810                          cmp     ax, KERNEL_SECT
   321 00000971 740C                    .10Q:   jz      .10E
   322 00000973 68[9009]E82DF783C4-     .10T:   cdecl   puts, .e0
   322 0000097B 02                 
   323 0000097C E846F7                          call    reboot
   324                                  .10E:
   325                                  
   326                                          ; End of Process
   327 0000097F EB2B                            jmp     stage_6
   328                                  
   329 00000981 357468207374616765-     .s0:    db      "5th stage...", 0x0A, 0x0D, 0
   329 0000098A 2E2E2E0A0D00       
   330 00000990 4661696C7572652074-     .e0:    db      "Failure to load kernel...", 0x0A, 0x0D, 0
   330 00000999 6F206C6F6164206B65-
   330 000009A2 726E656C2E2E2E0A0D-
   330 000009AB 00                 
   331                                  
   332                                  stage_6:
   333                                  
   334                                          ; put char
   335 000009AC 68[C409]E8F4F683C4-             cdecl   puts, .s0
   335 000009B4 02                 
   336                                  
   337                                          ; wait until user approves
   338                                  
   339                                  .10L:
   340                                  
   341 000009B5 B400                            mov     ah, 0x00
   342 000009B7 CD16                            int     0x16
   343 000009B9 3C20                            cmp     al, ' '
   344 000009BB 75F8                            jne     .10L
   345                                  
   346                                          ; set video mode
   347 000009BD B81200                          mov     ax, 0x0012
   348 000009C0 CD10                            int     0x10
   349                                  
   350                                          ; End of Process
   351 000009C2 EB7C                            jmp     stage_7
   352                                  
   353 000009C4 367468207374616765-     .s0:    db      "6th stage...", 0x0A, 0x0D, 0x0A, 0x0D
   353 000009CD 2E2E2E0A0D0A0D     
   354 000009D4 205B50757368205350-             db      " [Push SPACE key to protect mode...]", 0x0A, 0x0D, 0
   354 000009DD 414345206B65792074-
   354 000009E6 6F2070726F74656374-
   354 000009EF 206D6F64652E2E2E5D-
   354 000009F8 0A0D00             
   355                                  
   356                                  
   357                                  ; read file func-------------------------------------
   358                                  read_file:
   359                                  
   360 000009FB 6A1068[0A0A]680078-             cdecl   memcpy, 0x7800, .s0, .s1 - .s0
   360 00000A03 E866FC83C406       
   361                                  
   362 00000A09 C3                              ret
   363                                  
   364 00000A0A 46696C65206E6F7420-     .s0:    db      'File not found.', 0
   364 00000A13 666F756E642E00     
   365                                  .s1:
   366                                  ;-----------------------------------------------------
   367                                  
   368                                  ;
   369                                  ; GLOBAL DESCRIPTOR TABLE
   370                                  ;
   371 00000A1A 00<rept>                ALIGN 4, db 0
   372 00000A1C 0000000000000000        GDT:    dq      0x00_0000_000000_0000                   ; NULL Descriptor
   373 00000A24 FFFF0000009ACF00        .cs:    dq      0x00_CF9A_000000_FFFF                   ; CODE 4G
   374 00000A2C FFFF00000092CF00        .ds:    dq      0x00_CF92_000000_FFFF                   ; DATA 4G
   375                                  .gdt_end:
   376                                  
   377                                  ; SEGMENT SELECTOR
   378                                  
   379                                  SEL_CODE        equ GDT.cs - GDT                        ; selector for code
   380                                  SEL_DATA        equ GDT.ds - GDT                        ; selector for data
   381                                  
   382                                  ; GDT
   383                                  
   384 00000A34 1700                    GDTR:   dw      GDT.gdt_end - GDT - 1                   ; limit of descriptor table
   385 00000A36 [1C0A0000]                      dd      GDT                                     ; base address of descriptor table
   386                                  
   387                                  ; IDT
   388                                  
   389 00000A3A 0000                    IDTR:   dw      0                                       ; limit of interrupt descriptor table
   390 00000A3C 00000000                        dd      0                                       ; base address of interrupt descriptor table
   391                                  
   392                                  
   393                                  stage_7:
   394 00000A40 FA                              cli                                             ; disable interrupt
   395                                  
   396                                          ; load Descriptor table
   397                                  
   398 00000A41 0F0116[340A]                    lgdt    [GDTR]                                  ; load Global Descriptor Table
   399 00000A46 0F011E[3A0A]                    lidt    [IDTR]                                  ; load Interrupt Descriptor Table
   400                                  
   401                                          ; migrate to protect mode
   402 00000A4B 0F20C0                          mov     eax, cr0                                ; set PE(Protect Enable) bit
   403 00000A4E 83C801                          or      ax, 1                                   ; CRO |= 1
   404 00000A51 0F22C0                          mov     cr0, eax
   405                                  
   406 00000A54 EB00                            jmp     $ + 2                                   ; clear look ahead of cpu instruction
   407                                  
   408                                  [BITS 32]
   409 00000A56 66                              db      0x66                                    ; Operand Size Override prefix
   410 00000A57 EA[5E0A0000]0800                jmp     SEL_CODE:CODE_32                        ; FAR jump // segment:offset
   411                                  
   412                                  CODE_32:
   413 00000A5E 66B81000                        mov     ax, SEL_DATA
   414 00000A62 8ED8                            mov     ds, ax
   415 00000A64 8EC0                            mov     es, ax
   416 00000A66 8EE0                            mov     fs, ax
   417 00000A68 8EE8                            mov     gs, ax
   418 00000A6A 8ED0                            mov     ss, ax
   419                                  
   420                                          ; copy kernel program
   421                                  
   422 00000A6C B900080000                      mov     ecx, (KERNEL_SIZE) / 4                  ; ECX = copy by 4 byte unit
   423 00000A71 BE009C0000                      mov     esi, BOOT_END                            ; ESI = 0x0000_9c00 // kernel part
   424 00000A76 BF00101000                      mov     edi, KERNEL_LOAD                         ; EDI = 0x0010_1000
   425 00000A7B FC                              cld                                             ; DF => +
   426 00000A7C F3A5                            rep     movsd                                   ; while(--ECX) *EDI++ = *ESI++;
   427                                  
   428                                          ; jump to Kernel Process
   429 00000A7E E9(00101000)                    jmp     KERNEL_LOAD
   430                                  
   431                                  ;-------------------------------------------------------------------------------------------
   432                                  ; migrating to real mode program
   433                                  ;-------------------------------------------------------------------------------------------
   434                                  TO_REAL_MODE:
   435                                  
   436                                          ; construct stack frame
   437                                                                                          ;    +20 | *p(address to strings)
   438                                                                                          ;    +16 | color
   439 00000A83 55                              push    ebp                                     ;    +12 | row
   440 00000A84 89E5                            mov     ebp, esp                                ;    + 8 | column
   441                                  
   442                                          ; save registers
   443 00000A86 60                              pusha
   444                                  
   445 00000A87 FA                              cli                                             ; disable interrupt
   446                                  
   447                                          ; save current settings
   448 00000A88 0F20C0                          mov     eax, cr0
   449 00000A8B A3[1B0B0000]                    mov     [.cr0_saved], eax                       ; save cr0 register
   450 00000A90 8925[1F0B0000]                  mov     [.esp_saved], esp                       ; save esp register
   451 00000A96 0F010D[150B0000]                sidt    [.idtr_save]                            ; save IDTR
   452 00000A9D 0F011D[0F0B0000]                lidt    [.idtr_real]                            ; set interrupt during real mode
   453                                  
   454                                          ; migrate to 16bit protect mode
   455 00000AA4 EA[AB0A0000]1800                jmp     0x0018:.bit16                           ; CS = 0x18
   456                                  
   457                                  [BITS 16]
   458                                  .bit16:
   459 00000AAB B82000                          mov     ax, 0x0020                              ; DS = 0x20
   460 00000AAE 8ED8                            mov     ds, ax
   461 00000AB0 8EC0                            mov     es, ax
   462 00000AB2 8ED0                            mov     ss, ax
   463                                  
   464                                          ; migrate to real mode(disable paging)
   465 00000AB4 0F20C0                          mov     eax, cr0
   466 00000AB7 6625FEFFFF7F                    and     eax, 0x7FFF_FFFE                       ; clear PG/PE bits
   467 00000ABD 0F22C0                          mov     cr0, eax
   468 00000AC0 EB00                            jmp     $ + 2                                   ; Flush()
   469                                  
   470                                          ; set up segment(real mode)
   471 00000AC2 EA[C70A]0000                    jmp     0:.real                                 ; CS = 0x0000
   472                                  .real:
   473 00000AC7 B80000                          mov     ax, 0x0000
   474 00000ACA 8ED8                            mov     ds, ax
   475 00000ACC 8EC0                            mov     es, ax
   476 00000ACE 8ED0                            mov     ss, ax
   477 00000AD0 BC007C                          mov     sp, 0x7C00
   478                                  
   479                                          ; read file
   480 00000AD3 E825FF                          cdecl   read_file
   481                                  
   482                                          ; migrate to 16 bit protect mode
   483 00000AD6 0F20C0                          mov     eax, cr0
   484 00000AD9 6683C801                        or      eax, 1                                  ; set PE bit
   485 00000ADD 0F22C0                          mov     cr0, eax
   486 00000AE0 EB00                            jmp     $ + 2                                   ; Flush()
   487                                  
   488                                          ; migrate to 32 bit protect mode
   489 00000AE2 66                              DB      0x66                                    ; 32 bit override
   490                                  [BITS 32]
   491 00000AE3 EA[EA0A0000]0800                jmp     0x0008:.bit32                           ; CS = 32 bit CS
   492                                  .bit32:
   493 00000AEA 66B81000                        mov     ax, 0x0010                              ; DS = 32 bit DS
   494 00000AEE 8ED8                            mov     ds, ax
   495 00000AF0 8EC0                            mov     es, ax
   496 00000AF2 8ED0                            mov     ss, ax
   497                                  
   498                                          ; reset register saved before and complete migration
   499 00000AF4 8B25[1F0B0000]                  mov     esp, [.esp_saved]                       ; return ESP register
   500 00000AFA A1[1B0B0000]                    mov     eax, [.cr0_saved]                       ; return CR0 register
   501 00000AFF 0F22C0                          mov     cr0, eax
   502 00000B02 0F011D[150B0000]                lidt    [.idtr_save]                            ; return IDTR
   503                                  
   504 00000B09 FB                              sti                                             ; enable interrupt
   505                                  
   506                                          ; return registers
   507 00000B0A 61                              popa
   508                                  
   509                                          ; destruct stack frame
   510 00000B0B 89EC                            mov     esp, ebp
   511 00000B0D 5D                              pop     ebp
   512                                  
   513 00000B0E C3                              ret
   514                                  
   515                                  .idtr_real:
   516 00000B0F FF03                            dw      0x3FF                                   ; 8 * 256 - 1   : idt_limit
   517 00000B11 00000000                        dd      0                                       ; VECT_BASE     : idt location
   518                                  
   519                                  .idtr_save:
   520 00000B15 0000                            dw      0                                       ; limit
   521 00000B17 00000000                        dd      0                                       ; base
   522                                  
   523                                  .cr0_saved:
   524 00000B1B 00000000                        dd      0
   525                                  
   526                                  .esp_saved:
   527 00000B1F 00000000                        dd      0
   528                                  
   529                                  ;---------------------------------------------------------------------------------
   530                                  ; Padding
   531                                  ;---------------------------------------------------------------------------------
   532 00000B23 00<rept>                        times   BOOT_SIZE - ($ - $$) - 16  db  0
   533                                  
   534 00001FF0 [830A0000]                      dd      TO_REAL_MODE                            ; read mode migration progaram
   535                                  
   536                                  ;---------------------------------------------------------------------------------
   537                                  ; Padding
   538                                  ;---------------------------------------------------------------------------------
   539                                  
   540 00001FF4 00<rept>                        times   BOOT_SIZE - ($ - $$)       db  0        ;8K byte
