     1                                  ;マクロ
     2                                  
     3                                  %include    "../include/define.s"
     1                              <1>         BOOT_LOAD       equ     0x7c00                          ;ブートプログラムのロード位置
     2                              <1> 
     3                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ;ブートコードサイズ
     4                              <1>         SECT_SIZE       equ     (512)                           ;セクタサイズ
     5                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ;ブートプログラムのセクタ数
     6                              <1> 
     7                              <1>         E820_RECORD_SIZE        equ     20
     4                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc   drive                               ;セクタ読み出し時のパラメータを構造体で定義
    18 00000000 <res 00000002>      <1>             .no         resw    1           ;ドライブ番号
    19 00000002 <res 00000002>      <1>             .cyln       resw    1           ;シリンダ
    20 00000004 <res 00000002>      <1>             .head       resw    1           ;ヘッド
    21 00000006 <res 00000002>      <1>             .sect       resw    1           ;セクタ
    22                              <1> endstruc
     5                                  
     6                                          ORG     BOOT_LOAD
     7                                  
     8                                  
     9                                  ;エントリポイント
    10                                  
    11                                  entry:
    12 00000000 EB58                            jmp     ipl
    13                                  
    14                                  ; BIOS Parameter Block
    15                                  
    16 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    17                                  
    18                                  ; Initial Program Loader
    19                                  
    20                                  ipl:
    21                                  
    22 0000005A FA                              cli                                 ;割り込みの禁止
    23                                  
    24 0000005B B80000                          mov     ax, 0x0000
    25 0000005E 8ED8                            mov     ds, ax
    26 00000060 8EC0                            mov     es, ax
    27 00000062 8ED0                            mov     ss, ax
    28 00000064 BC007C                          mov     sp, BOOT_LOAD
    29                                  
    30 00000067 FB                              sti                                 ;割り込みの許可
    31                                  
    32                                          ;ブートドライブ番号の保存
    33                                  
    34 00000068 8816[BA00]                      mov     [BOOT + drive.no], dl       ;ブートドライブを保存
    35                                  
    36                                          ;文字列の表示
    37                                  
    38 0000006C 68[9900]E8500083C4-             cdecl   puts, .s0                   ;puts(.s0)
    38 00000074 02                 
    39                                  
    40                                          ;残りのセクタをすべて読み込む
    41                                  
    42 00000075 BB0F00                          mov     bx, BOOT_SECT - 1           ;BX = 残りのブートセクト数
    43 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE   ;CX = 次のロードアドレス
    44                                  
    45 0000007B 515368[BA00]E89D00-             cdecl   read_sect, BOOT, bx, cx     ;AX = read_sect(BOOT, bx, cx)
    45 00000083 83C406             
    46                                  
    47 00000086 39D8                            cmp     ax, bx
    48 00000088 740C                    .10Q:   jz      .10E                        ;if (ax != 残りのセクタ数)
    49                                  
    50 0000008A 68[A600]E8320083C4-     .10T:   cdecl   puts, .e0                   ;{  puts(.e0);
    50 00000092 02                 
    51 00000093 E84B00                          call    reboot                      ;   reboot(); //再起動
    52                                  
    53                                  .10E:                                       ;}
    54                                  
    55                                          ;次のステージへ移行
    56                                  
    57 00000096 E96205                          jmp     stage_2                     ;ブート処理の第2ステージへ
    58                                  
    59                                          ;データ
    60                                  
    61 00000099 626F6F74696E672E2E-     .s0     db      "booting...", 0x0A, 0x0D, 0
    61 000000A2 2E0A0D00           
    62 000000A6 4572726F723A207365-     .e0     db      "Error: sector read", 0
    62 000000AF 63746F722072656164-
    62 000000B8 00                 
    63                                  
    64                                  ;ブートドライブに関する情報
    65                                  
    66 000000B9 00                      ALIGN 2, db 0
    67                                  BOOT:
    68                                          istruc  drive
    69 000000BA 0000                                at  drive.no,       dw 0        ;ドライブ番号
    70 000000BC 0000                                at  drive.cyln,     dw 0        ;シリンダ
    71 000000BE 0000                                at  drive.head,     dw 0        ;ヘッド
    72 000000C0 0200                                at  drive.sect,     dw 2        ;セクタ
    73                                          iend
    74                                  
    75                                  ;モジュール(512バイト以降に配置)
    76                                  
    77                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 000000C2 55                  <1>         push    bp
     6 000000C3 89E5                <1>         mov     bp, sp                                  ;  +4 | 文字列へのアドレス
     7                              <1>                                                         ;  +2 | Instruction Pointer
     8                              <1>                                                         ;BP+0 | BP
     9                              <1> 
    10                              <1>         ;レジスタを保存
    11                              <1> 
    12 000000C5 50                  <1>         push    ax
    13 000000C6 53                  <1>         push    bx
    14 000000C7 56                  <1>         push    si
    15                              <1> 
    16                              <1>         ;引数の取得
    17                              <1> 
    18 000000C8 8B7604              <1>         mov     si, [bp + 4]                            ;Source Index == 文字列へのアドレス
    19                              <1> 
    20                              <1>         ;処理
    21                              <1> 
    22 000000CB B40E                <1>         mov     ah, 0x0E
    23 000000CD BB0000              <1>         mov     bx, 0x0000
    24 000000D0 FC                  <1>         cld
    25                              <1> 
    26                              <1> .10L:                                                   ;do{
    27                              <1>                                                         ;   AL = *SI++
    28 000000D1 AC                  <1>         lodsb                                           ;
    29                              <1>                                                         ;   if (0 == AL)
    30 000000D2 3C00                <1>         cmp     al, 0                                   ;       break;
    31 000000D4 7404                <1>         je      .10E                                    ;
    32                              <1>                                                         ;   Int10(0x0E, AL); //文字出力
    33 000000D6 CD10                <1>         int     0x10                                    ;} while(1);
    34 000000D8 EBF7                <1>         jmp     .10L
    35                              <1> 
    36                              <1> .10E:
    37                              <1> 
    38                              <1>         ;レジスタの復帰
    39                              <1> 
    40 000000DA 5E                  <1>         pop     si
    41 000000DB 5B                  <1>         pop     bx
    42 000000DC 58                  <1>         pop     ax
    43                              <1> 
    44                              <1>         ;スタックフレームの破棄
    45                              <1> 
    46 000000DD 89EC                <1>         mov     sp, bp
    47 000000DF 5D                  <1>         pop     bp
    48                              <1> 
    49 000000E0 C3                  <1>         ret
    78                                  %include    "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3                              <1>         ;メッセージを表示
     4                              <1> 
     5 000000E1 68[FD00]E8DBFF83C4- <1>         cdecl   puts, .s0                       ;//再起動メッセージを表示
     5 000000E9 02                  <1>
     6                              <1> 
     7                              <1>         ;キー入力待ち
     8                              <1> 
     9                              <1> .10L:                                           ; do {
    10 000000EA B410                <1>         mov     ah, 0x10                        ;       //キー入力待ち
    11 000000EC CD16                <1>         int     0x16                            ;       AL = BIOS(0x16, 0x10)
    12                              <1> 
    13 000000EE 3C20                <1>         cmp     al, ' '                         ;       ZF = (AL == ' ');
    14 000000F0 75F8                <1>         jne     .10L                            ; } while (!ZF);
    15                              <1> 
    16                              <1>         ;改行を出力
    17                              <1> 
    18 000000F2 68[1B01]E8CAFF83C4- <1>         cdecl   puts, .s1
    18 000000FA 02                  <1>
    19                              <1> 
    20                              <1>         ;再起動
    21                              <1> 
    22 000000FB CD19                <1>         int     0x19                            ; BIOS(0x19);
    23                              <1> 
    24                              <1>         ;文字列データ
    25                              <1> 
    26 000000FD 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    26 00000106 414345206B65792074- <1>
    26 0000010F 6F207265626F6F742E- <1>
    26 00000118 2E2E00              <1>
    27 0000011B 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    79                                  %include    "../modules/real/read_sect.s"
     1                              <1> read_sect:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4                              <1>                                                     ;   +8 | 読み出し先アドレス
     5                              <1>                                                     ;   +6 | セクタ数
     6                              <1>                                                     ;   +4 | drive構造体のアドレス
     7                              <1>                                                     ;   +2 | 戻り番地
     8                              <1>                                                     ;BP +0 | BP
     9                              <1>                                                     ;   -2 | retry = 3; //リトライ回数
    10                              <1>                                                     ;   -4 | sect  = 0; //読み込みセクタ数
    11 00000120 55                  <1>             push    bp
    12 00000121 89E5                <1>             mov     bp, sp
    13 00000123 6A03                <1>             push    3
    14 00000125 6A00                <1>             push    0
    15                              <1> 
    16                              <1>             ;レジスタの保存
    17                              <1> 
    18 00000127 53                  <1>             push    bx
    19 00000128 51                  <1>             push    cx
    20 00000129 52                  <1>             push    dx
    21 0000012A 06                  <1>             push    es
    22 0000012B 56                  <1>             push    si
    23                              <1> 
    24                              <1>             ;処理
    25 0000012C 8B7604              <1>             mov     si, [bp + 4]                    ;構造体のアドレス
    26                              <1> 
    27                              <1>             ;CXレジスタの設定
    28                              <1>             ;[構造体のアドレス + オフセット + ?]
    29                              <1> 
    30 0000012F 8A6C02              <1>             mov     ch, [si + drive.cyln + 0]       ;CH = シリンダ番号（下位バイト）
    31 00000132 8A4C03              <1>             mov     cl, [si + drive.cyln + 1]       ;CL = シリンダ番号（上位バイト）
    32 00000135 C0E106              <1>             shl     cl, 6                           ;CL <<= 6; //最上位2ビットにシフト
    33 00000138 0A4C06              <1>             or      cl, [si + drive.sect]           ;CL |= セクタ番号;
    34                              <1> 
    35                              <1>             ;セクタ読み込み
    36                              <1> 
    37 0000013B 8A7404              <1>             mov     dh, [si + drive.head]           ;DH = ヘッド番号
    38 0000013E 8A14                <1>             mov     dl, [si + 0]                    ;DL = ドライブ番号
    39 00000140 B80000              <1>             mov     ax, 0x0000
    40 00000143 8EC0                <1>             mov     es, ax                          ;ESセグメント初期化
    41 00000145 8B5E08              <1>             mov     bx, [bp + 8]                    ;読み出し先アドレス
    42                              <1> 
    43                              <1>             ; do{
    44                              <1>             ;     AH = セクタ読み込み
    45                              <1>             ;     AL = セクタ数
    46                              <1> 
    47                              <1>             ;     CF = BIOS(0x13, 0x02);
    48                              <1>             ;     if (CF)
    49                              <1>             ;     {
    50                              <1>             ;         AL = 0;
    51                              <1>             ;         break;
    52                              <1>             ;     }
    53                              <1> 
    54                              <1>             ;     if (読み込んだセクタがある)
    55                              <1>             ;         break;
    56                              <1> 
    57                              <1>             ;     ret = 0;
    58                              <1>             ; } while(--retry);
    59                              <1> 
    60                              <1> .10L:
    61 00000148 B402                <1>             mov     ah, 0x02
    62 0000014A 8A4606              <1>             mov     al, [bp + 6]
    63                              <1> 
    64 0000014D CD13                <1>             int     0x13
    65 0000014F 7304                <1>             jnc     .11E                            ;成功したら.11Eへ
    66                              <1> 
    67 00000151 B000                <1>             mov     al, 0
    68 00000153 EB0C                <1>             jmp     .10E                            ;失敗したらリトライなしで.10Eへ
    69                              <1> .11E:
    70 00000155 3C00                <1>             cmp     al, 0                           ; if (読み込んだセクタ数 > 0)
    71 00000157 7508                <1>             jne     .10E                            ;   break;
    72                              <1> 
    73 00000159 B80000              <1>             mov     ax, 0                           ;戻り値
    74 0000015C FF4EFE              <1>             dec     word [bp - 2]
    75 0000015F 75E7                <1>             jnz     .10L                            ;読み込んだセクタ数が0なら.10Lへ
    76                              <1> .10E:
    77 00000161 B400                <1>             mov     ah, 0                           ;AH = 0 //ステータス情報の破棄
    78                              <1> 
    79                              <1>             ;レジスタの復帰
    80                              <1> 
    81 00000163 5E                  <1>             pop     si
    82 00000164 07                  <1>             pop     es
    83 00000165 5A                  <1>             pop     dx
    84 00000166 59                  <1>             pop     cx
    85 00000167 5B                  <1>             pop     bx
    86                              <1> 
    87                              <1>             ;スタックフレームの破棄
    88                              <1> 
    89 00000168 89EC                <1>             mov     sp, bp
    90 0000016A 5D                  <1>             pop     bp
    91                              <1> 
    92 0000016B C3                  <1>             ret
    80                                  
    81                                  ;ブートフラグ(512biteの終了)
    82                                  
    83 0000016C 00<rept>                        times   510 - ($ - $$) db 0x00
    84 000001FE 55AA                            db 0x55, 0xAA
    85                                  
    86                                  ;リアルモード時に取得した情報
    87                                  FONT:                                           ;フォント
    88 00000200 0000                    .seg:   dw 0
    89 00000202 0000                    .off:   dw 0
    90                                  ACPI_DATA:
    91 00000204 00000000                .adr:   dd 0                                    ; ACPI base address
    92 00000208 00000000                .len:   dd 0                                    ;      data length
    93                                  
    94                                  %include    "../modules/real/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;スタックフレームの構築
     4                              <1> 
     5 0000020C 55                  <1>         push    bp
     6 0000020D 89E5                <1>         mov     bp, sp                          ;  +12|フラグ
     7                              <1>                                                 ;  +10|基数
     8                              <1>                                                 ;  + 8|保存先バッファサイズ
     9                              <1>                                                 ;  + 6|保存先バッファアドレス
    10                              <1>                                                 ;  + 4|変換する値
    11                              <1>                                                 ;  + 2|IP(戻り番地)
    12                              <1>                                                 ;BP+ 0|BP
    13                              <1>         ;レジスタの保存
    14                              <1> 
    15 0000020F 50                  <1>         push    ax
    16 00000210 53                  <1>         push    bx
    17 00000211 51                  <1>         push    cx
    18 00000212 52                  <1>         push    dx
    19 00000213 56                  <1>         push    si
    20 00000214 57                  <1>         push    di
    21                              <1> 
    22                              <1>         ;引数の取得
    23                              <1> 
    24 00000215 8B4604              <1>         mov     ax, [bp + 4]                    ;val = 数値
    25 00000218 8B7606              <1>         mov     si, [bp + 6]                    ;dest= バッファアドレス
    26 0000021B 8B4E08              <1>         mov     cx, [bp + 8]                    ;size= バッファサイズ
    27                              <1> 
    28 0000021E 89F7                <1>         mov     di, si                          ;バッファの最後尾
    29 00000220 01CF                <1>         add     di, cx                          ;dest = &dest[size - 1]
    30 00000222 4F                  <1>         dec     di
    31                              <1> 
    32 00000223 8B5E0C              <1>         mov     bx, word [bp + 12]              ;flags = フラグ
    33                              <1>                                                 ;B2: 空白をゼロで埋める B1:+/-記号を付加する B0:値を符号付き変数として扱う
    34                              <1> 
    35                              <1>         ;符号付き判定
    36                              <1> 
    37 00000226 F7C30100            <1>         test    bx, 0b0001                      ; if (flags & 0x01) //符号付きならZF = 0
    38 0000022A 7408                <1> .10Q    je      .10E                            ; {                 //符号なしならZF = 1だからjmp
    39 0000022C 83F800              <1>         cmp     ax, 0                           ;   if (val < 0)    //CF = 1, ZF = 0
    40 0000022F 7D03                <1> .12Q    jge     .12E                            ;   {               //val >= 0 なら必要ないのでjmp
    41 00000231 83CB02              <1>         or      bx, 0b0010                      ;       flags |= 2; //B1をセット
    42                              <1>                                                 ;}}
    43                              <1> .12E:
    44                              <1> .10E:
    45                              <1> 
    46                              <1>         ;符号出力判定
    47                              <1> 
    48 00000234 F7C30200            <1>         test    bx, 0b0010
    49 00000238 7410                <1> .20Q    je      .20E
    50 0000023A 83F800              <1>         cmp     ax, 0
    51 0000023D 7D07                <1> .22Q    jge     .22F
    52 0000023F F7D8                <1>         neg     ax                              ;符号反転
    53 00000241 C6042D              <1>         mov     [si], byte '-'                  ;符号表示
    54 00000244 EB03                <1>         jmp     .22E
    55                              <1> .22F:
    56 00000246 C6042B              <1>         mov     [si], byte '+'
    57                              <1> .22E:
    58 00000249 49                  <1>         dec     cx                              ;残りバッファサイズの減算 -> ?
    59                              <1> .20E:
    60                              <1> 
    61                              <1>         ;ASCII変換
    62                              <1> 
    63 0000024A 8B5E0A              <1>         mov     bx, [bp + 10]                   ;BX = 基数
    64                              <1> 
    65                              <1> .30L:                                           ;do{
    66 0000024D BA0000              <1>         mov     dx, 0
    67 00000250 F7F3                <1>         div     bx                              ;   DX = DX:AX % BX;
    68                              <1>                                                 ;   AX = DX:AX / BX;
    69                              <1> 
    70 00000252 89D6                <1>         mov     si, dx                          ;   //変換テーブル参照
    71 00000254 8A94[7C02]          <1>         mov     dl, byte [.ascii + si]          ;   DL = ASCII[DX];
    72                              <1> 
    73 00000258 8815                <1>         mov     [di], dl                        ;   *dest = DL;
    74 0000025A 4F                  <1>         dec     di                              ;   dest--;
    75                              <1> 
    76 0000025B 83F800              <1>         cmp     ax, 0
    77 0000025E E0ED                <1>         loopnz  .30L                            ;} while(AX);
    78                              <1> 
    79                              <1> .30E:
    80                              <1> 
    81                              <1>         ;空欄をゼロ埋め/空白埋め
    82                              <1> 
    83 00000260 83F900              <1>         cmp     cx, 0                           ;if (size)
    84 00000263 740D                <1> .40Q:   je      .40E                            ;{
    85 00000265 B020                <1>         mov     al, ' '                         ;   AL = ' '; //空白埋め
    86 00000267 837E0C04            <1>         cmp     [bp + 12], word 0b0100          ;   if (flags & 0x04)
    87 0000026B 7502                <1> .42Q:   jne     .42E                            ;   {
    88 0000026D B030                <1>         mov     al, '0'                         ;       AL = '0'; //ゼロ埋め
    89                              <1> .42E:                                           ;   }
    90 0000026F FD                  <1>         std                                     ;   // DF = 1(減算)
    91 00000270 F3AA                <1>         rep stosb                               ;   while (--cx) * DI-- = ' ';
    92                              <1> .40E:                                           ;}
    93                              <1> 
    94                              <1>         ;レジスタの復帰
    95                              <1> 
    96 00000272 5F                  <1>         pop     di
    97 00000273 5E                  <1>         pop     si
    98 00000274 5A                  <1>         pop     dx
    99 00000275 59                  <1>         pop     cx
   100 00000276 5B                  <1>         pop     bx
   101 00000277 58                  <1>         pop     ax
   102                              <1> 
   103                              <1>         ;スタックフレームの破棄
   104                              <1> 
   105 00000278 89EC                <1>         mov     sp, bp
   106 0000027A 5D                  <1>         pop     bp
   107                              <1> 
   108 0000027B C3                  <1>         ret
   109                              <1> 
   110                              <1> 
   111 0000027C 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   111 00000285 39414243444546      <1>
    95                                  %include    "../modules/real/get_drive_params.s"
     1                              <1> get_drive_params:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4 0000028C 55                  <1>             push    bp                                  ;BP +4 | drive構造体のアドレス
     5 0000028D 89E5                <1>             mov     bp, sp
     6                              <1> 
     7                              <1>             ;レジスタの保存
     8                              <1> 
     9 0000028F 53                  <1>             push    bx
    10 00000290 51                  <1>             push    cx
    11 00000291 06                  <1>             push    es
    12 00000292 56                  <1>             push    si
    13 00000293 57                  <1>             push    di
    14                              <1> 
    15                              <1>             ;処理
    16 00000294 8B7604              <1>             mov     si, [bp + 4]
    17                              <1> 
    18 00000297 B80000              <1>             mov     ax, 0                               ;Disk Base Table Pointer の初期化
    19 0000029A 8EC0                <1>             mov     es, ax
    20 0000029C 89C7                <1>             mov     di, ax                              ;int 0x13命令時ES:DIにディスクベーステーブルのアドレスが設定される
    21                              <1> 
    22 0000029E B408                <1>             mov     ah, 8
    23 000002A0 8A14                <1>             mov     dl, [si + drive.no]                 ;DL = ドライブ番号
    24 000002A2 CD13                <1>             int     0x13
    25                              <1> 
    26 000002A4 721B                <1> .10Q:       jc      .10F                                ; if (0 == CF) // 0:成功, 1:失敗
    27                              <1> .10T:                                                   ; {
    28 000002A6 88C8                <1>             mov     al, cl                              ;   AX = セクタ数;
    29 000002A8 83E03F              <1>             and     ax, 0x3F                            ;   // 下位6ビットのみ有効
    30                              <1> 
    31 000002AB C0E906              <1>             shr     cl, 6                               ;   CX = シリンダ数;
    32 000002AE C1C908              <1>             ror     cx, 8
    33 000002B1 41                  <1>             inc     cx                                  ;   //シリンダ番号は0始まりなので，最大シリンダ数を得るために1加算
    34                              <1> 
    35 000002B2 0FB6DE              <1>             movzx   bx, dh                              ;   BX = ヘッド数(1ベース) //ゼロ拡張(2byte)
    36 000002B5 43                  <1>             inc     bx                                  ;   //ヘッド番号も同様
    37                              <1> 
    38 000002B6 894C02              <1>             mov     [si + drive.cyln], cx               ;   //オフセットアドレスに格納
    39 000002B9 895C04              <1>             mov     [si + drive.head], bx
    40 000002BC 894406              <1>             mov     [si + drive.sect], ax
    41                              <1> 
    42 000002BF EB03                <1>             jmp     .10E                                ; }
    43                              <1> .10F:                                                   ; else
    44 000002C1 B80000              <1>             mov     ax, 0                               ; {
    45                              <1> .10E:                                                   ;   AX = 0; //失敗
    46                              <1>                                                         ; }
    47                              <1> 
    48                              <1>             ;レジスタの復帰
    49 000002C4 5F                  <1>             pop     di
    50 000002C5 5E                  <1>             pop     si
    51 000002C6 07                  <1>             pop     es
    52 000002C7 59                  <1>             pop     cx
    53 000002C8 5B                  <1>             pop     bx
    54                              <1> 
    55                              <1>             ;スタックフレームの破棄
    56 000002C9 89EC                <1>             mov     sp, bp
    57 000002CB 5D                  <1>             pop     bp
    58                              <1> 
    59 000002CC C3                  <1>             ret
    96                                  %include    "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1> 
     3                              <1>             ;スタックフレームの構築
     4 000002CD 55                  <1>             push    bp                                          ; BP+4 | フォントアドレスの格納位置
     5 000002CE 89E5                <1>             mov     bp, sp
     6                              <1> 
     7                              <1>             ;レジスタの保存
     8                              <1> 
     9 000002D0 50                  <1>             push    ax
    10 000002D1 53                  <1>             push    bx
    11 000002D2 56                  <1>             push    si
    12 000002D3 06                  <1>             push    es
    13 000002D4 55                  <1>             push    bp
    14                              <1> 
    15                              <1>             ;引数の取得
    16 000002D5 8B7604              <1>             mov     si, [bp + 4]
    17                              <1> 
    18                              <1>             ;フォントアドレスの取得
    19 000002D8 B83011              <1>             mov     ax, 0x1130
    20 000002DB B706                <1>             mov     bh, 0x06                                    ;8 x 16 font(vga/mcga)
    21 000002DD CD10                <1>             int     0x10                                        ;ES:BP = Font Address
    22                              <1> 
    23                              <1>             ;フォントアドレスを保存
    24 000002DF 8C04                <1>             mov     [si + 0], es                                ;dest[0] = セグメント
    25 000002E1 895C02              <1>             mov     [si + 2], bx                                ;dest[1] = オフセット
    26                              <1> 
    27                              <1>             ;レジスタの復帰
    28 000002E4 5D                  <1>             pop     bp
    29 000002E5 07                  <1>             pop     es
    30 000002E6 5E                  <1>             pop     si
    31 000002E7 5B                  <1>             pop     bx
    32 000002E8 58                  <1>             pop     ax
    33                              <1> 
    34                              <1>             ;スタックフレームの破棄
    35 000002E9 89EC                <1>             mov     sp, bp
    36 000002EB 5D                  <1>             pop     bp
    37                              <1> 
    38 000002EC C3                  <1>             ret
    97                                  %include    "../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1> 
     3                              <1>             ;レジスタの保存
     4 000002ED 6650                <1>             push    eax
     5 000002EF 6653                <1>             push    ebx
     6 000002F1 6651                <1>             push    ecx
     7 000002F3 6652                <1>             push    edx
     8 000002F5 56                  <1>             push    si
     9 000002F6 57                  <1>             push    di
    10 000002F7 55                  <1>             push    bp
    11                              <1> 
    12                              <1>             ;文字列を表示
    13 000002F8 68[8C03]E8C4FD83C4- <1>             cdecl   puts, .s0
    13 00000300 02                  <1>
    14                              <1> 
    15 00000301 BD0000              <1>             mov     bp, 0                           ; lines = 0; //行数
    16 00000304 66BB00000000        <1>             mov     ebx, 0                          ; index = 0; //初期化
    17                              <1> .10L:                                               ; do
    18                              <1>                                                     ; {
    19 0000030A 66B820E80000        <1>             mov     eax, 0x0000E820                 ;   EAX  = 0xE820;
    20 00000310 66B914000000        <1>             mov     ecx, E820_RECORD_SIZE           ;   ECX  = 要求バイト数;
    21 00000316 66BA50414D53        <1>             mov     edx, 'PAMS'                     ;   EDX  = 'SMAP' //固定値
    22 0000031C BF[1804]            <1>             mov     di, .b0                         ;   ES:DI= 書き込み先
    23 0000031F CD15                <1>             int     0x15                            ;   BIOS(0x15, 0xE820);
    24                              <1>                                                     ; }
    25                              <1> 
    26 00000321 663D50414D53        <1>             cmp     eax, 'PAMS'                     ; コマンド未対応なら終了
    27 00000327 7402                <1>             je      .12E
    28 00000329 EB4C                <1>             jmp     .10E
    29                              <1> 
    30                              <1> .12E:
    31                              <1> 
    32                              <1> 
    33 0000032B 7302                <1>             jnc     .14E                            ; CF 0:成功 1:失敗
    34 0000032D EB48                <1>             jmp     .10E
    35                              <1> .14E:
    36                              <1> 
    37 0000032F 57E8F90083C402      <1>             cdecl   put_mem_info, di                ; 1レコード分のメモリ情報を表示
    38                              <1> 
    39                              <1>             ;ACPI data のアドレスを取得
    40 00000336 668B4510            <1>             mov     eax, [di + 16]                  ; EAX = データタイプ
    41 0000033A 6683F803            <1>             cmp     eax, 3                          ; 3:AddressRangeACPI
    42 0000033E 750F                <1>             jne     .15E
    43                              <1> 
    44 00000340 668B05              <1>             mov     eax, [di + 0]                   ; EAX = BASE address
    45 00000343 66A3[0402]          <1>             mov     [ACPI_DATA.adr], eax
    46                              <1> 
    47 00000347 668B4508            <1>             mov     eax, [di + 8]
    48 0000034B 66A3[0802]          <1>             mov     [ACPI_DATA.len], eax
    49                              <1> .15E:
    50                              <1> 
    51 0000034F 6683FB00            <1>             cmp     ebx, 0
    52 00000353 741C                <1>             jz      .16E
    53                              <1> 
    54 00000355 45                  <1>             inc     bp                              ; lines++
    55 00000356 83E507              <1>             and     bp, 0x07                        ; lines &= 0x07; //メモリ情報を8行表示するたびに
    56 00000359 7516                <1>             jnz     .16E                            ;                //ユーザーからのキー入力があるまで
    57                              <1>                                                     ;                //処理を中断
    58 0000035B 68[FF03]E861FD83C4- <1>             cdecl   puts, .s2                       ; 中断メッセージ
    58 00000363 02                  <1>
    59 00000364 B410                <1>             mov     ah, 0x10                        ; キー入力待ち
    60 00000366 CD16                <1>             int     0x16
    61                              <1> 
    62 00000368 68[0A04]E854FD83C4- <1>             cdecl   puts, .s3
    62 00000370 02                  <1>
    63                              <1> .16E:
    64                              <1> 
    65 00000371 6683FB00            <1>             cmp     ebx, 0
    66 00000375 7593                <1>             jne     .10L
    67                              <1> .10E:
    68                              <1> 
    69 00000377 68[CF03]E845FD83C4- <1>             cdecl   puts, .s1
    69 0000037F 02                  <1>
    70                              <1> 
    71                              <1>             ;レジスタの復帰
    72 00000380 5D                  <1>             pop     bp
    73 00000381 5F                  <1>             pop     di
    74 00000382 5E                  <1>             pop     si
    75 00000383 665A                <1>             pop     edx
    76 00000385 6659                <1>             pop     ecx
    77 00000387 665B                <1>             pop     ebx
    78 00000389 6658                <1>             pop     eax
    79                              <1> 
    80 0000038B C3                  <1>             ret
    81                              <1> 
    82 0000038C 2045383230204D656D- <1> .s0:	    db " E820 Memory Map:", 0x0A, 0x0D
    82 00000395 6F7279204D61703A0A- <1>
    82 0000039E 0D                  <1>
    83 0000039F 20426173655F5F5F5F- <1> 		    db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
    83 000003A8 5F5F5F5F5F5F5F5F5F- <1>
    83 000003B1 204C656E6774685F5F- <1>
    83 000003BA 5F5F5F5F5F5F5F5F5F- <1>
    83 000003C3 20547970655F5F5F5F- <1>
    83 000003CC 0A0D00              <1>
    84 000003CF 202D2D2D2D2D2D2D2D- <1> .s1:	    db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
    84 000003D8 2D2D2D2D2D2D2D2D2D- <1>
    84 000003E1 202D2D2D2D2D2D2D2D- <1>
    84 000003EA 2D2D2D2D2D2D2D2D2D- <1>
    84 000003F3 202D2D2D2D2D2D2D2D- <1>
    84 000003FC 0A0D00              <1>
    85 000003FF 203C6D6F72652E2E2E- <1> .s2:	    db " <more...>", 0
    85 00000408 3E00                <1>
    86 0000040A 0D2020202020202020- <1> .s3:	    db 0x0D, "          ", 0x0D, 0
    86 00000413 20200D00            <1>
    87                              <1> 
    88 00000417 00                  <1> ALIGN 4, db 0
    89 00000418 00<rept>            <1> .b0:    times E820_RECORD_SIZE db 0
    90                              <1> 
    91                              <1> put_mem_info:
    92                              <1> 
    93                              <1>             ;スタックフレームの構築
    94 0000042C 55                  <1>             push    bp                              ;BP +4 | メモリ情報が格納されたバッファアドレス
    95 0000042D 89E5                <1>             mov     bp, sp
    96                              <1> 
    97                              <1>             ;レジスタの保存
    98 0000042F 53                  <1>             push    bx
    99 00000430 56                  <1>             push    si
   100                              <1> 
   101                              <1>             ;引数の取得
   102 00000431 8B7604              <1>             mov     si, [bp + 4]
   103                              <1> 
   104                              <1>             ; Base(64bit)
   105 00000434 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 6], .p2 + 0, 4, 16, 0b0100
   105 0000043B [0B05]FF7406E8C9FD- <1>
   105 00000443 83C40A              <1>
   106 00000446 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 4], .p2 + 4, 4, 16, 0b0100
   106 0000044D [0F05]FF7404E8B7FD- <1>
   106 00000455 83C40A              <1>
   107 00000458 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 2], .p3 + 0, 4, 16, 0b0100
   107 0000045F [1405]FF7402E8A5FD- <1>
   107 00000467 83C40A              <1>
   108 0000046A 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 0], .p3 + 4, 4, 16, 0b0100
   108 00000471 [1805]FF34E894FD83- <1>
   108 00000479 C40A                <1>
   109                              <1> 
   110                              <1>             ; Length(64bit)
   111 0000047B 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 14], .p4 + 0, 4, 16, 0b0100
   111 00000482 [1D05]FF740EE882FD- <1>
   111 0000048A 83C40A              <1>
   112 0000048D 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 12], .p4 + 4, 4, 16, 0b0100
   112 00000494 [2105]FF740CE870FD- <1>
   112 0000049C 83C40A              <1>
   113 0000049F 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 10], .p5 + 0, 4, 16, 0b0100
   113 000004A6 [2605]FF740AE85EFD- <1>
   113 000004AE 83C40A              <1>
   114 000004B1 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 8 ], .p5 + 4, 4, 16, 0b0100
   114 000004B8 [2A05]FF7408E84CFD- <1>
   114 000004C0 83C40A              <1>
   115                              <1> 
   116                              <1>             ; Type(32bit)
   117 000004C3 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 18], .p6 + 0, 4, 16, 0b0100
   117 000004CA [2F05]FF7412E83AFD- <1>
   117 000004D2 83C40A              <1>
   118 000004D5 6A046A106A0468-     <1>             cdecl int_to_str, word [si + 16], .p6 + 4, 4, 16, 0b0100
   118 000004DC [3305]FF7410E828FD- <1>
   118 000004E4 83C40A              <1>
   119                              <1> 
   120 000004E7 68[0A05]E8D5FB83C4- <1>             cdecl   puts, .s1                       ; //レコード情報を表示
   120 000004EF 02                  <1>
   121                              <1> 
   122 000004F0 8B5C10              <1>             mov     bx, [si + 16]                   ; //タイプを文字列で表示
   123 000004F3 83E307              <1>             and     bx, 0x07                        ; BX = Type(0~5)
   124 000004F6 D1E3                <1>             shl     bx, 1                           ; BX *= 2   //要素サイズに変換
   125 000004F8 81C3[8D05]          <1>             add     bx, .t0                         ; BX += .t0 //テーブルの先頭アドレスを加算
   126 000004FC FF37E8C1FB83C402    <1>             cdecl   puts, word [bx]
   127                              <1> 
   128                              <1>             ;レジスタの復帰
   129 00000504 5E                  <1>             pop     si
   130 00000505 5B                  <1>             pop     bx
   131                              <1> 
   132                              <1>             ;スタックフレームの破棄
   133 00000506 89EC                <1>             mov     sp, bp
   134 00000508 5D                  <1>             pop     bp
   135                              <1> 
   136 00000509 C3                  <1>             ret
   137                              <1> 
   138 0000050A 20                  <1> .s1:        db  " "
   139 0000050B 5A5A5A5A5A5A5A5A5F  <1> .p2:        db  "ZZZZZZZZ_"
   140 00000514 5A5A5A5A5A5A5A5A20  <1> .p3:        db  "ZZZZZZZZ "
   141 0000051D 5A5A5A5A5A5A5A5A5F  <1> .p4:        db  "ZZZZZZZZ_"
   142 00000526 5A5A5A5A5A5A5A5A20  <1> .p5:        db  "ZZZZZZZZ "
   143 0000052F 5A5A5A5A5A5A5A5A20- <1> .p6:        db  "ZZZZZZZZ ", 0
   143 00000538 00                  <1>
   144                              <1> 
   145 00000539 2028556E6B6E6F776E- <1> .s4:        db  " (Unknown)", 0x0A, 0x0D, 0
   145 00000542 290A0D00            <1>
   146 00000546 2028757361626C6529- <1> .s5:        db  " (usable)", 0x0A, 0x0D, 0
   146 0000054F 0A0D00              <1>
   147 00000552 202872657365727665- <1> .s6:        db  " (reserved)", 0x0A, 0x0D, 0
   147 0000055B 64290A0D00          <1>
   148 00000560 202841435049206461- <1> .s7:        db  " (ACPI data)", 0x0A, 0x0D, 0
   148 00000569 7461290A0D00        <1>
   149 0000056F 202841435049204E56- <1> .s8:        db  " (ACPI NVS)", 0x0A, 0x0D, 0
   149 00000578 53290A0D00          <1>
   150 0000057D 2028626164206D656D- <1> .s9:        db  " (bad memory)", 0x0A, 0x0D, 0
   150 00000586 6F7279290A0D00      <1>
   151                              <1> 
   152 0000058D [3905][4605][5205]- <1> .t0:        dw  .s4, .s5, .s6, .s7, .s8, .s4, .s4
   152 00000593 [6005][6F05][3905]- <1>
   152 00000599 [3905]              <1>
    98                                  %include    "../modules/real/kbc.s"
     1                              <1> KBC_Data_Write:
     2                              <1> 
     3                              <1>             ;construct stack frame
     4                              <1>                                                         ; BP +4 | data
     5 0000059B 55                  <1>             push    bp
     6 0000059C 89E5                <1>             mov     bp, sp
     7                              <1> 
     8                              <1>             ;save register
     9 0000059E 51                  <1>             push    cx
    10                              <1> 
    11                              <1>             ;process
    12 0000059F B90000              <1>             mov     cx, 0                               ; CX = 0; // max count value
    13                              <1> .10L:
    14 000005A2 E464                <1>             in      al, 0x64
    15 000005A4 A802                <1>             test    al, 0x02                            ; ZF = AL & 0x02 // B1:input buffer full
    16 000005A6 E0FA                <1>             loopnz  .10L                                ; loop while 1 set at B1
    17                              <1> 
    18 000005A8 83F900              <1>             cmp     cx, 0
    19 000005AB 7405                <1>             jz      .20E                                ; timeout
    20                              <1> 
    21 000005AD 8A4604              <1>             mov     al, [bp + 4]
    22 000005B0 E660                <1>             out     0x60, al
    23                              <1> .20E:
    24                              <1> 
    25 000005B2 89C8                <1>             mov     ax, cx                              ; return CX
    26                              <1> 
    27                              <1>             ;return register
    28 000005B4 59                  <1>             pop     cx
    29                              <1> 
    30                              <1>             ;destruct stack frame
    31                              <1> 
    32 000005B5 89EC                <1>             mov     sp, bp
    33 000005B7 5D                  <1>             pop     bp
    34                              <1> 
    35 000005B8 C3                  <1>             ret
    36                              <1> 
    37                              <1> KBC_Data_Read:
    38                              <1> 
    39                              <1>             ;construct stack frame
    40                              <1> 
    41 000005B9 55                  <1>             push    bp
    42 000005BA 89E5                <1>             mov     bp, sp
    43                              <1> 
    44                              <1>             ;save register
    45 000005BC 51                  <1>             push    cx
    46 000005BD 57                  <1>             push    di
    47                              <1> 
    48                              <1>             ;process
    49 000005BE B90000              <1>             mov     cx, 0
    50                              <1> .10L:
    51 000005C1 E464                <1>             in      al, 0x64
    52 000005C3 A801                <1>             test    al, 0x01                            ; ZF = AL & 0x01 // B0:output buffer full
    53 000005C5 E1FA                <1>             loopz  .10L                                 ; loop while 0 set at B0
    54                              <1> 
    55 000005C7 83F900              <1>             cmp     cx, 0
    56 000005CA 7409                <1>             jz      .20E
    57                              <1> 
    58 000005CC B400                <1>             mov     ah, 0x00
    59 000005CE E460                <1>             in      al, 0x60
    60                              <1> 
    61 000005D0 8B7E04              <1>             mov     di, [bp + 4]                        ; DI = Address where read data will be saved
    62 000005D3 8905                <1>             mov     [di + 0], ax
    63                              <1> .20E:
    64                              <1> 
    65 000005D5 89C8                <1>             mov     ax, cx
    66                              <1> 
    67                              <1>             ;return register
    68 000005D7 5F                  <1>             pop     di
    69 000005D8 59                  <1>             pop     cx
    70                              <1> 
    71                              <1>             ;destruct stack frame
    72                              <1> 
    73 000005D9 89EC                <1>             mov     sp, bp
    74 000005DB 5D                  <1>             pop     bp
    75                              <1> 
    76 000005DC C3                  <1>             ret
    77                              <1> 
    78                              <1> KBC_Cmd_Write:
    79                              <1> 
    80                              <1>             ;construct stack frame
    81                              <1>                                                         ; BP +4 | data
    82 000005DD 55                  <1>             push    bp
    83 000005DE 89E5                <1>             mov     bp, sp
    84                              <1> 
    85                              <1>             ;save register
    86 000005E0 51                  <1>             push    cx
    87                              <1> 
    88                              <1>             ;process
    89 000005E1 B90000              <1>             mov     cx, 0                               ; CX = 0; // max count value
    90                              <1> .10L:
    91 000005E4 E464                <1>             in      al, 0x64
    92 000005E6 A802                <1>             test    al, 0x02                            ; ZF = AL & 0x02 // B1:input buffer full
    93 000005E8 E0FA                <1>             loopnz  .10L
    94                              <1> 
    95 000005EA 83F900              <1>             cmp     cx, 0
    96 000005ED 7405                <1>             jz      .20E                                ; timeout
    97                              <1> 
    98 000005EF 8A4604              <1>             mov     al, [bp + 4]
    99 000005F2 E664                <1>             out     0x64, al
   100                              <1> .20E:
   101                              <1> 
   102 000005F4 89C8                <1>             mov     ax, cx                              ; return CX
   103                              <1> 
   104                              <1>             ;return register
   105 000005F6 59                  <1>             pop     cx
   106                              <1> 
   107                              <1>             ;destruct stack frame
   108                              <1> 
   109 000005F7 89EC                <1>             mov     sp, bp
   110 000005F9 5D                  <1>             pop     bp
   111                              <1> 
   112 000005FA C3                  <1>             ret
    99                                  
   100                                  ;ブート処理の第2ステージ
   101                                  
   102                                  stage_2:
   103                                  
   104                                          ;文字列を表示
   105 000005FB 68[7506]E8C1FA83C4-             cdecl   puts, .s0
   105 00000603 02                 
   106                                  
   107                                          ;ドライブ情報を取得
   108 00000604 68[BA00]E882FC83C4-             cdecl   get_drive_params, BOOT          ;get_drive_params(DX, BOOT.CYLN);
   108 0000060C 02                 
   109 0000060D 83F800                          cmp     ax, 0                           ;if (0 == AX){
   110 00000610 750C                    .10Q:   jne     .10E                            ;       puts(.e0);
   111 00000612 68[AC06]E8AAFA83C4-     .10T:   cdecl   puts, .e0                       ;       reboot();
   111 0000061A 02                 
   112 0000061B E8C3FA                          call    reboot                          ; }
   113                                  .10E:
   114                                  
   115                                          ;ドライブ情報を表示
   116 0000061E A1[BA00]                        mov     ax, [BOOT + drive.no]           ;AX = ブートドライブ
   117 00000621 6A046A106A0268-                 cdecl   int_to_str, ax, .p1, 2, 16, 0b0100
   117 00000628 [8D06]50E8DEFB83C4-
   117 00000630 0A                 
   118 00000631 A1[BC00]                        mov     ax, [BOOT + drive.cyln]           ;
   119 00000634 6A046A106A0468-                 cdecl   int_to_str, ax, .p2, 4, 16, 0b0100
   119 0000063B [9506]50E8CBFB83C4-
   119 00000643 0A                 
   120 00000644 A1[BE00]                        mov     ax, [BOOT + drive.head]           ;AX = ヘッド数
   121 00000647 6A046A106A0268-                 cdecl   int_to_str, ax, .p3, 2, 16, 0b0100
   121 0000064E [9F06]50E8B8FB83C4-
   121 00000656 0A                 
   122 00000657 A1[C000]                        mov     ax, [BOOT + drive.sect]           ;AX = トラック当たりのセクタ数
   123 0000065A 6A046A106A0268-                 cdecl   int_to_str, ax, .p4, 2, 16, 0b0100
   123 00000661 [A706]50E8A5FB83C4-
   123 00000669 0A                 
   124 0000066A 68[8406]E852FA83C4-             cdecl   puts, .s1
   124 00000672 02                 
   125                                  
   126                                  
   127                                          ;処理の終了
   128                                  
   129 00000673 EB52                            jmp     stage_3
   130                                  
   131                                          ;データ
   132                                  
   133 00000675 326E64207374616765-     .s0     db      "2nd stage...", 0x0A, 0x0D, 0
   133 0000067E 2E2E2E0A0D00       
   134                                  
   135 00000684 2044726976653A3078      .s1     db      " Drive:0x"
   136 0000068D 20202C20433A3078        .p1     db      "  , C:0x"
   137 00000695 202020202C20483A30-     .p2     db      "    , H:0x"
   137 0000069E 78                 
   138 0000069F 20202C20533A3078        .p3     db      "  , S:0x"
   139 000006A7 20200A0D00              .p4     db      "  ", 0x0A, 0x0D, 0
   140                                  
   141 000006AC 43616E277420676574-     .e0     db      "Can't get drive Parameter.", 0
   141 000006B5 206472697665205061-
   141 000006BE 72616D657465722E00 
   142                                  
   143                                  stage_3:
   144                                  
   145                                          ;文字列を表示
   146 000006C7 68[4407]E8F5F983C4-             cdecl   puts, .s0
   146 000006CF 02                 
   147                                  
   148                                          ;プロテクトモードで使用するフォントは
   149                                          ;BIOSに内蔵されたものを流用する
   150                                  
   151 000006D0 68[0002]E8F7FB83C4-             cdecl   get_font_adr, FONT
   151 000006D8 02                 
   152                                  
   153                                          ;フォントアドレスの表示
   154 000006D9 6A046A106A0468-                 cdecl   int_to_str, word [FONT.seg], .p1, 4, 16, 0b0100
   154 000006E0 [6107]FF36[0002]E8-
   154 000006E7 23FB83C40A         
   155 000006EC 6A046A106A0468-                 cdecl   int_to_str, word [FONT.off], .p2, 4, 16, 0b0100
   155 000006F3 [6607]FF36[0202]E8-
   155 000006FA 10FB83C40A         
   156 000006FF 68[5307]E8BDF983C4-             cdecl   puts, .s1
   156 00000707 02                 
   157                                  
   158                                          ;メモリ情報の取得と表示
   159 00000708 E8E2FB                          cdecl   get_mem_info              ;get_mem_info()
   160                                  
   161 0000070B 66A1[0402]                      mov     eax, [ACPI_DATA.adr]
   162 0000070F 6683F800                        cmp     eax, 0
   163 00000713 742D                            je      .10E
   164                                  
   165 00000715 6A046A106A0468-                 cdecl   int_to_str, ax, .p4, 4, 16, 0b0100      ;下位アドレス
   165 0000071C [8007]50E8EAFA83C4-
   165 00000724 0A                 
   166 00000725 66C1E810                        shr     eax, 16                                 ;EAX >>= 16
   167 00000729 6A046A106A0468-                 cdecl   int_to_str, ax, .p3, 4, 16, 0b0100      ;上位アドレス
   167 00000730 [7C07]50E8D6FA83C4-
   167 00000738 0A                 
   168                                  
   169 00000739 68[7007]E883F983C4-             cdecl   puts, .s2
   169 00000741 02                 
   170                                  .10E:
   171                                  
   172                                          ;処理の終了
   173 00000742 EB43                            jmp     stage_4
   174                                  
   175                                          ;データ
   176 00000744 337264207374616765-     .s0:    db      "3rd stage...", 0x0A, 0x0D, 0
   176 0000074D 2E2E2E0A0D00       
   177                                  
   178 00000753 20466F6E7420416464-     .s1:    db      " Font Address="
   178 0000075C 726573733D         
   179 00000761 5A5A5A5A3A              .p1:    db      "ZZZZ:"
   180 00000766 5A5A5A5A0A0D00          .p2:    db      "ZZZZ", 0x0A, 0x0D, 0
   181 0000076D 0A0D00                          db      0x0A, 0x0D, 0
   182                                  
   183 00000770 204143504920646174-     .s2:    db      " ACPI data ="
   183 00000779 61203D             
   184 0000077C 5A5A5A5A                .p3:    db      "ZZZZ"
   185 00000780 585858580A0D00          .p4:    db      "XXXX", 0x0A, 0x0D, 0
   186                                  
   187                                  
   188                                  
   189                                  stage_4:
   190                                  
   191                                          ; put char
   192 00000787 68[D807]E835F983C4-             cdecl   puts, .s0
   192 0000078F 02                 
   193                                  
   194                                          ; enable A20 gate
   195                                  
   196 00000790 FA                              cli                                             ; disable interrupt
   197                                  
   198 00000791 68AD00E846FE83C402              cdecl   KBC_Cmd_Write, 0xAD                     ; disable Keyboard
   199                                  
   200 0000079A 68D000E83DFE83C402              cdecl   KBC_Cmd_Write, 0xD0                     ; cmd that read output port
   201 000007A3 68[FC07]E810FE83C4-             cdecl   KBC_Data_Read, .key                     ; output port data
   201 000007AB 02                 
   202                                  
   203 000007AC 8A1E[FC07]                      mov     bl, [.key]
   204 000007B0 80CB02                          or      bl, 0x02                                ; Enable A20 gate
   205                                  
   206 000007B3 68D100E824FE83C402              cdecl   KBC_Cmd_Write, 0xD1                     ; cmd that write output port
   207 000007BC 53E8DBFD83C402                  cdecl   KBC_Data_Write, bx                      ; output port data
   208                                  
   209 000007C3 68AE00E814FE83C402              cdecl   KBC_Cmd_Write, 0xAE                     ; Enable Keyboard
   210                                  
   211 000007CC FB                              sti
   212                                  
   213                                          ; put char
   214 000007CD 68[E707]E8EFF883C4-             cdecl   puts, .s1
   214 000007D5 02                 
   215                                  
   216                                          ; End of Process
   217 000007D6 EBFE                            jmp     $
   218                                  
   219                                          ; data
   220 000007D8 347468207374616765-     .s0:    db      "4th stage...", 0x0A, 0x0D, 0
   220 000007E1 2E2E2E0A0D00       
   221 000007E7 204132302047617465-     .s1:    db      " A20 Gate Enabled.", 0x0A, 0x0D, 0
   221 000007F0 20456E61626C65642E-
   221 000007F9 0A0D00             
   222                                  
   223 000007FC 0000                    .key:   dw      0
   224                                  
   225                                          ; Padding
   226                                  
   227 000007FE 00<rept>                        times   BOOT_SIZE - ($ - $$)       db  0        ;8Kバイト
