     1                                  %define     USE_SYSTEM_CALL
     2                                  %define     USE_TEST_AND_SET
     3                                  
     4                                  ;macro
     5                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1>         SP_TASK_2       equ     STACK_BASE + (STACK_SIZE * 3)
    24                              <1> 
    25                              <1> 
     6                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
    56                              <1> 
    57                              <1> %macro  set_desc 2-*
    58                              <1>             push    eax
    59                              <1>             push    edi
    60                              <1> 
    61                              <1>             mov     edi, %1                             ; descriptor address
    62                              <1>             mov     eax, %2                             ; base address
    63                              <1> 
    64                              <1>         %if 3 == %0
    65                              <1>             mov     [edi + 0], %3                       ; limit
    66                              <1>         %endif
    67                              <1> 
    68                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 4], al                       ; base([23:16])
    71                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    72                              <1> 
    73                              <1>             pop     edi
    74                              <1>             pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate 2-*
    78                              <1>             push    eax
    79                              <1>             push    edi
    80                              <1> 
    81                              <1>             mov     edi, %1                             ; descriptor address
    82                              <1>             mov     eax, %2                             ; base address
    83                              <1> 
    84                              <1>             mov     [edi + 0], ax                       ; base([15:0])
    85                              <1>             shr     eax, 16
    86                              <1>             mov     [edi + 6], ax                       ; base([31:16])
    87                              <1> 
    88                              <1>             pop     edi
    89                              <1>             pop     eax
    90                              <1> %endmacro
     7                                  
     8                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     9                                  
    10                                  [BITS 32]                                                       ; BIT 32 directive
    11                                  ; entry point
    12                                  
    13                                  kernel:
    14                                  
    15                                                  ; Get Font address
    16 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    17 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    18 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    19 0000000C C1E004                                  shl     eax, 4
    20 0000000F 01D8                                    add     eax, ebx
    21 00000011 A3[00020000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    22                                  
    23                                                  ; set up TSS descriptor
    24                                                  set_desc    GDT.tss_0, TSS_0
    24 00000016 50                  <1>  push eax
    24 00000017 57                  <1>  push edi
    24                              <1> 
    24 00000018 BF[B0040000]        <1>  mov edi, %1
    24 0000001D B8[08020000]        <1>  mov eax, %2
    24                              <1> 
    24                              <1>  %if 3 == %0
    24                              <1>  mov [edi + 0], %3
    24                              <1>  %endif
    24                              <1> 
    24 00000022 66894702            <1>  mov [edi + 2], ax
    24 00000026 C1E810              <1>  shr eax, 16
    24 00000029 884704              <1>  mov [edi + 4], al
    24 0000002C 886707              <1>  mov [edi + 7], ah
    24                              <1> 
    24 0000002F 5F                  <1>  pop edi
    24 00000030 58                  <1>  pop eax
    25                                                  set_desc    GDT.tss_1, TSS_1
    25 00000031 50                  <1>  push eax
    25 00000032 57                  <1>  push edi
    25                              <1> 
    25 00000033 BF[B8040000]        <1>  mov edi, %1
    25 00000038 B8[E0020000]        <1>  mov eax, %2
    25                              <1> 
    25                              <1>  %if 3 == %0
    25                              <1>  mov [edi + 0], %3
    25                              <1>  %endif
    25                              <1> 
    25 0000003D 66894702            <1>  mov [edi + 2], ax
    25 00000041 C1E810              <1>  shr eax, 16
    25 00000044 884704              <1>  mov [edi + 4], al
    25 00000047 886707              <1>  mov [edi + 7], ah
    25                              <1> 
    25 0000004A 5F                  <1>  pop edi
    25 0000004B 58                  <1>  pop eax
    26                                                  set_desc    GDT.tss_2, TSS_2
    26 0000004C 50                  <1>  push eax
    26 0000004D 57                  <1>  push edi
    26                              <1> 
    26 0000004E BF[C0040000]        <1>  mov edi, %1
    26 00000053 B8[B8030000]        <1>  mov eax, %2
    26                              <1> 
    26                              <1>  %if 3 == %0
    26                              <1>  mov [edi + 0], %3
    26                              <1>  %endif
    26                              <1> 
    26 00000058 66894702            <1>  mov [edi + 2], ax
    26 0000005C C1E810              <1>  shr eax, 16
    26 0000005F 884704              <1>  mov [edi + 4], al
    26 00000062 886707              <1>  mov [edi + 7], ah
    26                              <1> 
    26 00000065 5F                  <1>  pop edi
    26 00000066 58                  <1>  pop eax
    27                                  
    28                                                  ; set up Call Gate
    29                                                  set_gate    GDT.call_gate, call_gate
    29 00000067 50                  <1>  push eax
    29 00000068 57                  <1>  push edi
    29                              <1> 
    29 00000069 BF[C8040000]        <1>  mov edi, %1
    29 0000006E B8[500F0000]        <1>  mov eax, %2
    29                              <1> 
    29 00000073 668907              <1>  mov [edi + 0], ax
    29 00000076 C1E810              <1>  shr eax, 16
    29 00000079 66894706            <1>  mov [edi + 6], ax
    29                              <1> 
    29 0000007D 5F                  <1>  pop edi
    29 0000007E 58                  <1>  pop eax
    30                                  
    31                                                  ; set up LDT
    32                                                  set_desc    GDT.ldt, LDT, word LDT_LIMIT        ; descriptor address/base address/limit
    32 0000007F 50                  <1>  push eax
    32 00000080 57                  <1>  push edi
    32                              <1> 
    32 00000081 BF[A8040000]        <1>  mov edi, %1
    32 00000086 B8[D6040000]        <1>  mov eax, %2
    32                              <1> 
    32                              <1>  %if 3 == %0
    32 0000008B 66C7073700          <1>  mov [edi + 0], %3
    32                              <1>  %endif
    32                              <1> 
    32 00000090 66894702            <1>  mov [edi + 2], ax
    32 00000094 C1E810              <1>  shr eax, 16
    32 00000097 884704              <1>  mov [edi + 4], al
    32 0000009A 886707              <1>  mov [edi + 7], ah
    32                              <1> 
    32 0000009D 5F                  <1>  pop edi
    32 0000009E 58                  <1>  pop eax
    33                                  
    34                                                  ; load GDTR (resetting)
    35 0000009F 0F0115[D0040000]                        lgdt        [GDTR]
    36                                  
    37                                                  ; set up stack
    38 000000A6 BC00341000                              mov     esp, SP_TASK_0                          ; set up stack for Task0
    39                                  
    40                                                  ; recognize Kernel as Task0
    41 000000AB 66B82000                                mov     ax, SS_TASK_0
    42 000000AF 0F00D8                                  ltr     ax                                      ; initialize TR
    43                                  
    44                                                  ; initialize interrupt vector
    45 000000B2 E86B0B0000                              cdecl   init_int
    46 000000B7 E8EC0C0000                              cdecl   init_pic
    47                                  
    48                                                  set_vect    0x00, int_zero_div                  ; define interrupt process: Zero div
    48 000000BC 50                  <1>  push eax
    48 000000BD 57                  <1>  push edi
    48                              <1> 
    48 000000BE BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    48 000000C3 B8[8A0D0000]        <1>  mov eax, %2
    48                              <1> 
    48                              <1>  %if 3 == %0
    48                              <1>  mov [edi + 4], %3
    48                              <1>  %endif
    48                              <1> 
    48 000000C8 668907              <1>  mov [edi + 0], ax
    48 000000CB C1E810              <1>  shr eax, 16
    48 000000CE 66894706            <1>  mov [edi + 6], ax
    48                              <1> 
    48 000000D2 5F                  <1>  pop edi
    48 000000D3 58                  <1>  pop eax
    49                                                  set_vect    0x07, int_nm                        ; define interrupt process: device unavailable exception
    49 000000D4 50                  <1>  push eax
    49 000000D5 57                  <1>  push edi
    49                              <1> 
    49 000000D6 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    49 000000DB B8[ED0F0000]        <1>  mov eax, %2
    49                              <1> 
    49                              <1>  %if 3 == %0
    49                              <1>  mov [edi + 4], %3
    49                              <1>  %endif
    49                              <1> 
    49 000000E0 668907              <1>  mov [edi + 0], ax
    49 000000E3 C1E810              <1>  shr eax, 16
    49 000000E6 66894706            <1>  mov [edi + 6], ax
    49                              <1> 
    49 000000EA 5F                  <1>  pop edi
    49 000000EB 58                  <1>  pop eax
    50                                                  set_vect    0x20, int_timer                     ; define interrupt process: Timer
    50 000000EC 50                  <1>  push eax
    50 000000ED 57                  <1>  push edi
    50                              <1> 
    50 000000EE BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    50 000000F3 B8[0E050000]        <1>  mov eax, %2
    50                              <1> 
    50                              <1>  %if 3 == %0
    50                              <1>  mov [edi + 4], %3
    50                              <1>  %endif
    50                              <1> 
    50 000000F8 668907              <1>  mov [edi + 0], ax
    50 000000FB C1E810              <1>  shr eax, 16
    50 000000FE 66894706            <1>  mov [edi + 6], ax
    50                              <1> 
    50 00000102 5F                  <1>  pop edi
    50 00000103 58                  <1>  pop eax
    51                                                  set_vect    0x21, int_keyboard                  ; define interrupt process: KBC
    51 00000104 50                  <1>  push eax
    51 00000105 57                  <1>  push edi
    51                              <1> 
    51 00000106 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    51 0000010B B8[CA0E0000]        <1>  mov eax, %2
    51                              <1> 
    51                              <1>  %if 3 == %0
    51                              <1>  mov [edi + 4], %3
    51                              <1>  %endif
    51                              <1> 
    51 00000110 668907              <1>  mov [edi + 0], ax
    51 00000113 C1E810              <1>  shr eax, 16
    51 00000116 66894706            <1>  mov [edi + 6], ax
    51                              <1> 
    51 0000011A 5F                  <1>  pop edi
    51 0000011B 58                  <1>  pop eax
    52                                                  set_vect    0x28, int_rtc                       ; define interrupt process: RTC
    52 0000011C 50                  <1>  push eax
    52 0000011D 57                  <1>  push edi
    52                              <1> 
    52 0000011E BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    52 00000123 B8[D30D0000]        <1>  mov eax, %2
    52                              <1> 
    52                              <1>  %if 3 == %0
    52                              <1>  mov [edi + 4], %3
    52                              <1>  %endif
    52                              <1> 
    52 00000128 668907              <1>  mov [edi + 0], ax
    52 0000012B C1E810              <1>  shr eax, 16
    52 0000012E 66894706            <1>  mov [edi + 6], ax
    52                              <1> 
    52 00000132 5F                  <1>  pop edi
    52 00000133 58                  <1>  pop eax
    53                                                  set_vect    0x81, trap_gate_81, word 0xEF00     ; define trap gate        : display a char
    53 00000134 50                  <1>  push eax
    53 00000135 57                  <1>  push edi
    53                              <1> 
    53 00000136 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    53 0000013B B8[800F0000]        <1>  mov eax, %2
    53                              <1> 
    53                              <1>  %if 3 == %0
    53 00000140 66C7470400EF        <1>  mov [edi + 4], %3
    53                              <1>  %endif
    53                              <1> 
    53 00000146 668907              <1>  mov [edi + 0], ax
    53 00000149 C1E810              <1>  shr eax, 16
    53 0000014C 66894706            <1>  mov [edi + 6], ax
    53                              <1> 
    53 00000150 5F                  <1>  pop edi
    53 00000151 58                  <1>  pop eax
    54                                                  set_vect    0x82, trap_gate_82, word 0xEF00     ; define trap gate        : draw pixel
    54 00000152 50                  <1>  push eax
    54 00000153 57                  <1>  push edi
    54                              <1> 
    54 00000154 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    54 00000159 B8[8E0F0000]        <1>  mov eax, %2
    54                              <1> 
    54                              <1>  %if 3 == %0
    54 0000015E 66C7470400EF        <1>  mov [edi + 4], %3
    54                              <1>  %endif
    54                              <1> 
    54 00000164 668907              <1>  mov [edi + 0], ax
    54 00000167 C1E810              <1>  shr eax, 16
    54 0000016A 66894706            <1>  mov [edi + 6], ax
    54                              <1> 
    54 0000016E 5F                  <1>  pop edi
    54 0000016F 58                  <1>  pop eax
    55                                  
    56                                  
    57                                                  ; permit interrupt by device
    58 00000170 6A10E8850C00006683-                     cdecl   rtc_int_en, 0x10                        ; Updata-Ended Interrupt Enable
    58 00000179 C404               
    59 0000017B E8880D0000                              cdecl   int_en_timer0
    60                                  
    61                                                  ; set up IMR(Interrupt Mask Register)
    62                                                  outp    0x21, 0b1111_1000                       ; interrupt enable: slave PIC/KBC/Timer     // master
    62 00000180 B0F8                <1>  mov al, %2
    62 00000182 E621                <1>  out %1, al
    63                                                  outp    0xA1, 0b1111_1110                       ; interrupt enable: RTC                     // slave
    63 00000184 B0FE                <1>  mov al, %2
    63 00000186 E6A1                <1>  out %1, al
    64                                  
    65                                                  ; CPU interrupt enable
    66 00000188 FB                                      sti
    67                                  
    68                                                  ; display font and color_bar
    69 00000189 6A0D6A3FE866060000-                     cdecl   draw_font, 63, 13
    69 00000192 6683C408           
    70 00000196 6A046A3FE8DE060000-                     cdecl   draw_color_bar, 63, 4
    70 0000019F 6683C408           
    71                                  
    72                                                  ; display string
    73 000001A3 68[EB010000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    73 000001AB 00006A0E6A19E88706-
    73 000001B4 00006683C410       
    74                                  
    75                                  ;---------------------------------------------------------------------------
    76                                  ; default multitask
    77                                  ;---------------------------------------------------------------------------
    78                                  
    79                                  
    80                                  ;                 ; call Task
    81                                  ;                 ; call    SS_TASK_1:0
    82                                  
    83                                  ; .10L:
    84                                  
    85                                  ;                 ; display time
    86                                  ;                 mov     eax, [RTC_TIME]
    87                                  ;                 cdecl   draw_time, 72, 0, 0x0700, eax
    88                                  
    89                                  
    90                                  ;                 ; get key code
    91                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
    92                                  ;                 cmp     eax, 0
    93                                  ;                 je      .10E
    94                                  
    95                                  ;                 ; display key code
    96                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
    97                                  ; .10E:
    98                                  
    99                                  ;                 ; draw rotation bar
   100                                  ;                 cdecl   draw_rotation_bar
   101                                  
   102                                  ;                 jmp     .10L
   103                                  
   104                                  ;----------------------------------------------------------------------------
   105                                  
   106                                  
   107                                  ;----------------------------------------------------------------------------
   108                                  ; non-preemptive multitask
   109                                  ;----------------------------------------------------------------------------
   110                                  
   111                                  ; .10L:
   112                                  
   113                                  ;                 ; call task
   114                                  ;                 jmp     SS_TASK_1:0                             ; jump to Task1
   115                                  
   116                                  ;                 ; draw rotation bar
   117                                  ;                 cdecl   draw_rotation_bar
   118                                  
   119                                  ;                 ; get key code
   120                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   121                                  ;                 cmp     eax, 0
   122                                  ;                 je      .10E
   123                                  
   124                                  ;                 ; display key code
   125                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   126                                  ; .10E:
   127                                  
   128                                  ;                 jmp     .10L
   129                                  
   130                                  ;-----------------------------------------------------------------------------
   131                                  
   132                                  ;----------------------------------------------------------------------------
   133                                  ; preemptive multitask
   134                                  ;----------------------------------------------------------------------------
   135                                  
   136                                  .10L:
   137                                  
   138                                                  ; draw rotation bar
   139 000001BA E8580D0000                              cdecl   draw_rotation_bar
   140                                  
   141                                                  ; get key code
   142 000001BF 68[FC010000]68-                         cdecl   ring_rd, _KEY_BUFF, .int_key
   142 000001C5 [F00E0000]E8420C00-
   142 000001CD 006683C408         
   143 000001D2 83F800                                  cmp     eax, 0
   144 000001D5 7412                                    je      .10E
   145                                  
   146                                                  ; display key code
   147 000001D7 68[F00E0000]6A1D6A-                     cdecl   draw_key, 2, 29, _KEY_BUFF
   147 000001DF 02E8920C00006683C4-
   147 000001E8 0C                 
   148                                  .10E:
   149                                  
   150 000001E9 EBCF                                    jmp     .10L
   151                                  
   152                                  ;-----------------------------------------------------------------------------
   153                                  
   154                                  ;data
   155 000001EB 2048656C6C6F2C206B-     .s0:    db  " Hello, kernel! ", 0
   155 000001F4 65726E656C212000   
   156                                  
   157                                  ALIGN 4, db 0
   158 000001FC 00000000                .int_key:   dd 0
   159                                  
   160                                  ALIGN 4, db 0
   161 00000200 00000000                FONT_ADR:   dd 0
   162 00000204 00000000                RTC_TIME:   dd 0
   163                                  
   164                                  
   165                                  ; TASKS
   166                                  %include    "descriptor.s"
     1                              <1> ;-----------------------------------------------------------------------
     2                              <1> ; TSS
     3                              <1> ;-----------------------------------------------------------------------
     4                              <1> 
     5                              <1> TSS_0:
     6 00000208 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
     7 0000020C 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                             ;*  4: ESP0
     8 00000210 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
     9 00000214 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    10 00000218 00000000            <1> .ss1:           dd  0                                           ;* 16:
    11 0000021C 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    12 00000220 00000000            <1> .ss2:           dd  0                                           ;* 24:
    13 00000224 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    14 00000228 00000000            <1> .eip:           dd  0                                           ;  32: EIP
    15 0000022C 00000000            <1> .eflags:        dd  0                                           ;  36: EFLAGS
    16 00000230 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    17 00000234 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    18 00000238 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    19 0000023C 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    20 00000240 00000000            <1> .esp:           dd  0                                           ;  56: ESP
    21 00000244 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    22 00000248 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    23 0000024C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    24 00000250 00000000            <1> .es:            dd  0                                           ;  72: ES
    25 00000254 00000000            <1> .cs:            dd  0                                           ;  76: CS
    26 00000258 00000000            <1> .ss:            dd  0                                           ;  80: SS
    27 0000025C 00000000            <1> .ds:            dd  0                                           ;  84: DS
    28 00000260 00000000            <1> .fs:            dd  0                                           ;  88: FS
    29 00000264 00000000            <1> .gs:            dd  0                                           ;  92: GS
    30 00000268 00000000            <1> .ldt:           dd  0                                           ;* 96: LDT segment selector
    31 0000026C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    32 00000270 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    33                              <1> 
    34                              <1> TSS_1:
    35 000002E0 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    36 000002E4 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                             ;*  4: ESP0
    37 000002E8 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    38 000002EC 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    39 000002F0 00000000            <1> .ss1:           dd  0                                           ;* 16:
    40 000002F4 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    41 000002F8 00000000            <1> .ss2:           dd  0                                           ;* 24:
    42 000002FC 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    43 00000300 [5C050000]          <1> .eip:           dd  task_1                                      ;  32: EIP
    44 00000304 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    45 00000308 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    46 0000030C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    47 00000310 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    48 00000314 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    49 00000318 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56: ESP
    50 0000031C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    51 00000320 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    52 00000324 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    53 00000328 27000000            <1> .es:            dd  DS_TASK_1                                   ;  72: ES
    54 0000032C 1F000000            <1> .cs:            dd  CS_TASK_1                                   ;  76: CS
    55 00000330 27000000            <1> .ss:            dd  DS_TASK_1                                   ;  80: SS
    56 00000334 27000000            <1> .ds:            dd  DS_TASK_1                                   ;  84: DS
    57 00000338 27000000            <1> .fs:            dd  DS_TASK_1                                   ;  88: FS
    58 0000033C 27000000            <1> .gs:            dd  DS_TASK_1                                   ;  92: GS
    59 00000340 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    60 00000344 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    61 00000348 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    62                              <1> 
    63                              <1> 
    64                              <1> TSS_2:
    65 000003B8 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    66 000003BC 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                             ;*  4: ESP0
    67 000003C0 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    68 000003C4 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    69 000003C8 00000000            <1> .ss1:           dd  0                                           ;* 16:
    70 000003CC 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    71 000003D0 00000000            <1> .ss2:           dd  0                                           ;* 24:
    72 000003D4 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    73 000003D8 [91050000]          <1> .eip:           dd  task_2                                      ;  32: EIP
    74 000003DC 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    75 000003E0 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    76 000003E4 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    77 000003E8 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    78 000003EC 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    79 000003F0 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56: ESP
    80 000003F4 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    81 000003F8 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    82 000003FC 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    83 00000400 37000000            <1> .es:            dd  DS_TASK_2                                   ;  72: ES
    84 00000404 2F000000            <1> .cs:            dd  CS_TASK_2                                   ;  76: CS
    85 00000408 37000000            <1> .ss:            dd  DS_TASK_2                                   ;  80: SS
    86 0000040C 37000000            <1> .ds:            dd  DS_TASK_2                                   ;  84: DS
    87 00000410 37000000            <1> .fs:            dd  DS_TASK_2                                   ;  88: FS
    88 00000414 37000000            <1> .gs:            dd  DS_TASK_2                                   ;  92: GS
    89 00000418 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    90 0000041C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    91 00000420 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    92                              <1> 
    93                              <1> 
    94                              <1> ;-----------------------------------------------------------------------------------------------
    95                              <1> ; GDT
    96                              <1> ;-----------------------------------------------------------------------------------------------
    97                              <1> 
    98 00000490 0000000000000000    <1> GDT:            dq  0x0000000000000000
    99 00000498 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   100 000004A0 FFFF00000092CF00    <1> .ds_kernel:     dq  0x00CF92000000FFFF                          ; DATA 4G
   101 000004A8 0000000000820000    <1> .ldt            dq  0x0000820000000000                          ; LDT descriptor
   102 000004B0 6700000000890000    <1> .tss_0:         dq  0x0000890000000067                          ; TSS descriptor
   103 000004B8 6700000000890000    <1> .tss_1:         dq  0x0000890000000067                          ; TSS descriptor
   104 000004C0 6700000000890000    <1> .tss_2:         dq  0x0000890000000067                          ; TSS descriptor
   105 000004C8 0000080004EC0000    <1> .call_gate:     dq  0x0000EC0400080000                          ; 386 call gate(DPL=3, count=4, SEL=8)
   106                              <1> .end:
   107                              <1> 
   108                              <1> CS_KERNEL       equ .cs_kernel - GDT
   109                              <1> DS_KERNEL       equ .ds_kernel - GDT
   110                              <1> SS_LDT          equ .ldt       - GDT
   111                              <1> SS_TASK_0       equ .tss_0     - GDT
   112                              <1> SS_TASK_1       equ .tss_1     - GDT
   113                              <1> SS_TASK_2       equ .tss_2     - GDT
   114                              <1> SS_GATE_0       equ .call_gate - GDT
   115                              <1> 
   116 000004D0 3F00                <1> GDTR:   dw      GDT.end - GDT - 1
   117 000004D2 [90040000]          <1>         dd      GDT
   118                              <1> 
   119                              <1> ;-----------------------------------------------------------------------------------------------
   120                              <1> ; LDT
   121                              <1> ;-----------------------------------------------------------------------------------------------
   122                              <1> 
   123 000004D6 0000000000000000    <1> LDT:            dq  0x0000000000000000                          ; NULL
   124 000004DE FFFF0000009ACF00    <1> .cs_task_0:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   125 000004E6 FFFF00000092CF00    <1> .ds_task_0:     dq  0x00CF92000000FFFF                          ; DATA 4G
   126 000004EE FFFF000000FACF00    <1> .cs_task_1:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   127 000004F6 FFFF000000F2CF00    <1> .ds_task_1:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   128 000004FE FFFF000000FACF00    <1> .cs_task_2:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   129 00000506 FFFF000000F2CF00    <1> .ds_task_2:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   130                              <1> .end:
   131                              <1> 
   132                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                      ; cs selector for task0 // set bit 2(TI)
   133                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                      ; ds selector for task0 // Priviledge level 0
   134                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                  ; cs selector for task1 // Priviledge level 3
   135                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                  ; ds selector for task1
   136                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                  ; cs selector for task2 // Priviledge level 3
   137                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                  ; ds selector for task2
   138                              <1> LDT_LIMIT       equ .end        - LDT - 1
   167                                  %include    "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1> 
     3                              <1>             ; save registers
     4 0000050E 60                  <1>             pusha
     5 0000050F 1E                  <1>             push    ds
     6 00000510 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000511 66B81000            <1>             mov     ax, 0x0010
    10 00000515 8ED8                <1>             mov     ds, ax
    11 00000517 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; TICK
    14 00000519 FF05[54050000]      <1>             inc     dword [TIMER_COUNT]                                     ; TIMER_COUNT++ //update interrupt count
    15                              <1> 
    16                              <1>             ; clear interrupt flag(EOI)
    17                              <1>             outp    0x20, 0x20                                              ; master PIC:EOI command
    17 0000051F B020                <2>  mov al, %2
    17 00000521 E620                <2>  out %1, al
    18                              <1> 
    19                              <1>             ; exchange Task
    20 00000523 660F00C8            <1>             str     ax                                                      ; AX = TR // current Task Register
    21 00000527 6683F820            <1>             cmp     ax, SS_TASK_0
    22 0000052B 740F                <1>             je      .11L
    23 0000052D 6683F828            <1>             cmp     ax, SS_TASK_1
    24 00000531 7412                <1>             je      .12L
    25                              <1> 
    26 00000533 EA000000002000      <1>             jmp     SS_TASK_0:0
    27 0000053A EB12                <1>             jmp     .10E
    28                              <1> .11L:
    29 0000053C EA000000002800      <1>             jmp     SS_TASK_1:0
    30 00000543 EB09                <1>             jmp     .10E
    31                              <1> .12L:
    32 00000545 EA000000003000      <1>             jmp     SS_TASK_2:0
    33 0000054C EB00                <1>             jmp     .10E
    34                              <1> .10E:
    35                              <1> 
    36                              <1>             ; return registers
    37 0000054E 07                  <1>             pop     es
    38 0000054F 1F                  <1>             pop     ds
    39 00000550 61                  <1>             popa
    40                              <1> 
    41 00000551 CF                  <1>             iret
    42                              <1> 
    43 00000552 00<rept>            <1> ALIGN 4, db 0
    44 00000554 0000000000000000    <1> TIMER_COUNT:    dq 0
   168                                  %include    "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1> 
     3                              <1>             ; display string
     4 0000055C 68[8A050000]6A076A- <1>             cdecl   draw_str, 63, 0, 0x07, .s0              ; draw_str()
     4 00000564 006A3FE8D102000066- <1>
     4 0000056D 83C410              <1>
     5                              <1> 
     6                              <1> ;-------------------------------------------------------------
     7                              <1> ; non-preemptive multitask
     8                              <1> ;-------------------------------------------------------------
     9                              <1> 
    10                              <1> ; .10L:
    11                              <1> ;             ; display time
    12                              <1> ;             mov     eax, [RTC_TIME]                         ; get time
    13                              <1> ;             cdecl   draw_time, 72, 0, 0x0700, eax
    14                              <1> 
    15                              <1> ;             ; call Task
    16                              <1> ;             jmp    SS_TASK_0:0                             ; jump to Task0(kernel)
    17                              <1> 
    18                              <1> ;             jmp     .10L
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> 
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; preemptive multitask
    24                              <1> ;-------------------------------------------------------------
    25                              <1> 
    26                              <1> .10L:
    27                              <1>             ; display time
    28 00000570 A1[04020000]        <1>             mov     eax, [RTC_TIME]                         ; get time
    29 00000575 5068000700006A006A- <1>             cdecl   draw_time, 72, 0, 0x0700, eax
    29 0000057E 48E8200600006683C4- <1>
    29 00000587 10                  <1>
    30                              <1> 
    31                              <1> 
    32 00000588 EBE6                <1>             jmp     .10L
    33                              <1> 
    34                              <1> ;-------------------------------------------------------------
    35                              <1> 
    36                              <1>             ; data
    37 0000058A 5461736B2D3100      <1> .s0:        db  "Task-1", 0
   169                                  %include    "tasks/task_2.s"
     1                              <1> task_2:
     2                              <1> 
     3 00000591 68[56060000]6A076A- <1>             cdecl   draw_str, 63, 1, 0x07, .s0
     3 00000599 016A3FE89C02000066- <1>
     3 000005A2 83C410              <1>
     4                              <1> 
     5                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     7                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     8 000005A5 DB05[44060000]      <1>             fild    dword [.c1000]              ;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     9 000005AB D9EB                <1>             fldpi                               ;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    10 000005AD DA35[48060000]      <1>             fidiv   dword [.c180]               ;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    11 000005B3 D9EB                <1>             fldpi                               ;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    12 000005B5 DCC0                <1>             fadd    st0, st0                    ;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13 000005B7 D9EE                <1>             fldz                                ;    θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    14                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    15                              <1>                                                 ;    θ = 0 |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    16                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> 
    18                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    19                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    20                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    21                              <1> .10L:                                           ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    22                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    23 000005B9 D8C2                <1>             fadd    st0, st2                    ;    θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    24 000005BB D9F8                <1>             fprem                               ;    MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx| // fprem(ST0 %= ST1)
    25 000005BD D9C0                <1>             fld     st0                         ;        θ |       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    26 000005BF D9FE                <1>             fsin                                ;    SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    27 000005C1 D8CC                <1>             fmul    st0, st4                    ;ST4*SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    28 000005C3 DF35[4C060000]      <1>             fbstp   [.bcd]                      ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    29                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    30                              <1> 
    31                              <1>             ; convert into ASCII code
    32 000005C9 A1[4C060000]        <1>             mov     eax, [.bcd]                 ; EAX = 1000 * sin(t)
    33 000005CE 89C3                <1>             mov     ebx, eax                    ; EBX = EAX
    34                              <1> 
    35 000005D0 250F0F0000          <1>             and     eax, 0x0F0F                 ; mask upper 4 bits
    36 000005D5 0D30300000          <1>             or      eax, 0x3030                 ; set 0x3 to upper 4 bits
    37                              <1> 
    38 000005DA C1EB04              <1>             shr     ebx, 4                      ; EBX = upper 16 bits
    39 000005DD 81E30F0F0000        <1>             and     ebx, 0x0F0F
    40 000005E3 81CB30300000        <1>             or      ebx, 0x3030
    41                              <1> 
    42                              <1>             ; set the result to the buffer which is for screen display byte by byte
    43 000005E9 883D[5E060000]      <1>             mov     [.s2 + 0], bh               ; first digit
    44 000005EF 8825[60060000]      <1>             mov     [.s3 + 0], ah               ; the first decimal place
    45 000005F5 881D[61060000]      <1>             mov     [.s3 + 1], bl               ; the second decimal place
    46 000005FB A2[62060000]        <1>             mov     [.s3 + 2], al               ; the third decimal place
    47                              <1> 
    48                              <1>             ; whether displaying sign or not
    49 00000600 B807000000          <1>             mov     eax, 7
    50 00000605 0FA305[55060000]    <1>             bt      [.bcd + 9], eax             ; CF = bcd[9] & 0x80
    51 0000060C 7209                <1>             jc      .10F
    52                              <1> 
    53 0000060E C605[5D060000]2B    <1>             mov     [.s1 + 0], byte '+'
    54 00000615 EB07                <1>             jmp     .10E
    55                              <1> .10F:
    56 00000617 C605[5D060000]2D    <1>             mov     [.s1 + 0], byte '-'
    57                              <1> .10E:
    58 0000061E 68[5D060000]6A076A- <1>             cdecl   draw_str, 72, 1, 0x07, .s1
    58 00000626 016A48E80F02000066- <1>
    58 0000062F 83C410              <1>
    59                              <1> 
    60                              <1>             ; wait
    61 00000632 6A0AE80F0A00006683- <1>             cdecl   wait_tick, 10
    61 0000063B C404                <1>
    62                              <1> 
    63                              <1> ;           mov		ecx, 20							;   ECX = 20
    64                              <1> ; 		    										;   do
    65                              <1> ; 		    										;   {
    66                              <1> ; .20L:	    mov		eax, [TIMER_COUNT]				;     EAX = TIMER_COUNT;
    67                              <1> ; .21L:	    cmp		[TIMER_COUNT], eax				;     while (TIMER_COUNT != EAX)
    68                              <1> ; 		    je		.21L							;       ;
    69                              <1> ; 		    loop	.20L							;   } while (--ECX);
    70                              <1> 
    71                              <1> ; 		    jmp		.10L							; }
    72                              <1> 
    73 0000063D E977FFFFFF          <1>             jmp     .10L
    74                              <1> 
    75 00000642 00<rept>            <1> ALIGN 4, db 0
    76 00000644 E8030000            <1> .c1000:     dd  1000
    77 00000648 B4000000            <1> .c180:      dd  180
    78                              <1> 
    79 0000064C 00<rept>            <1> .bcd:       times 10 db 0x00
    80                              <1> 
    81 00000656 5461736B2D3200      <1> .s0:        db   "Task-2", 0
    82 0000065D 2D                  <1> .s1:        db  "-"
    83 0000065E 302E                <1> .s2:        db  "0."
    84 00000660 30303000            <1> .s3:        db  "000", 0
   170                                  
   171                                  
   172                                  ; MODULES
   173                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000664 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 00000665 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 00000667 50                  <1>             push    eax
    10 00000668 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 00000669 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 0000066C 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 0000066F B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 00000671 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 00000675 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 00000677 5A                  <1>             pop     edx
    21 00000678 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 00000679 89EC                <1>             mov     esp, ebp
    25 0000067B 5D                  <1>             pop     ebp
    26                              <1> 
    27 0000067C C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 0000067D 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 0000067E 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 00000680 50                  <1>             push    eax
    38 00000681 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 00000682 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 00000685 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000688 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 0000068A 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 0000068E 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 00000690 5A                  <1>             pop     edx
    49 00000691 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 00000692 89EC                <1>             mov     esp, ebp
    53 00000694 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000695 C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 00000696 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 00000697 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 00000699 50                  <1>             push    eax
    66 0000069A 53                  <1>             push    ebx
    67 0000069B 51                  <1>             push    ecx
    68 0000069C 52                  <1>             push    edx
    69 0000069D 56                  <1>             push    esi
    70 0000069E 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 0000069F 8B7508              <1>             mov     esi, [ebp + 8]
    74 000006A2 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 000006A5 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 000006A9 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 000006AD 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 000006AF 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 000006B2 FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 000006B4 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 000006B6 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 000006B9 FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 000006BB FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 000006BC B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 000006C1 AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 000006C2 88C4                <1>             mov     ah, al
    96 000006C4 F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 000006C6 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 000006C8 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 000006CE 7404                <1>             jz      .11F                                    ; {
   104 000006D0 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 000006D2 EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 000006D4 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 000006D6 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 000006D8 8807                <1>             mov     [edi], al
   116                              <1> 
   117 000006DA 83C750              <1>             add     edi, 80
   118 000006DD E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 000006DF 5F                  <1>             pop     edi
   123 000006E0 5E                  <1>             pop     esi
   124 000006E1 5A                  <1>             pop     edx
   125 000006E2 59                  <1>             pop     ecx
   126 000006E3 5B                  <1>             pop     ebx
   127 000006E4 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 000006E5 89EC                <1>             mov     esp, ebp
   131 000006E7 5D                  <1>             pop     ebp
   132                              <1> 
   133 000006E8 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 000006E9 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 000006EA 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 000006EC 50                  <1>             push    eax
   144 000006ED 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 000006EE 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 000006EF 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 000006F2 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 000006F6 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 000006FA 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 000006FC 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 000006FF FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 00000701 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 00000704 88C4                <1>             mov     ah, al
   163 00000706 F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 00000708 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 0000070A 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 0000070C 08E0                <1>             or      al, ah
   169 0000070E 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 00000710 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 00000711 5B                  <1>             pop     ebx
   177 00000712 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 00000713 89EC                <1>             mov     esp, ebp
   181 00000715 5D                  <1>             pop     ebp
   182                              <1> 
   183 00000716 C3                  <1>             ret
   174                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 00000717 55                  <1>             push    ebp                                         ;   +16 | color
     5 00000718 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 0000071A 50                  <1>             push    eax
    10 0000071B 53                  <1>             push    ebx
    11 0000071C 51                  <1>             push    ecx
    12 0000071D 52                  <1>             push    edx
    13 0000071E 56                  <1>             push    esi
    14 0000071F 57                  <1>             push    edi
    15                              <1> 
    16                              <1> %ifdef      USE_TEST_AND_SET
    17 00000720 68[F4070000]E87108- <1>             cdecl   test_and_set, IN_USE                        ; TEST_AND_SET(IN_USE) // waiting for resource to be available
    17 00000728 00006683C404        <1>
    18                              <1> %endif
    19                              <1> 
    20                              <1>             ; set copy_target font address
    21 0000072E 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    22 00000732 C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    23 00000735 0335[00020000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    24                              <1> 
    25                              <1>             ; get copy_dest VRAM address
    26                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    27                              <1>             ; y:row, x:column
    28                              <1> 
    29 0000073B 8B7D0C              <1>             mov     edi, [ebp + 12]
    30 0000073E C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    31 00000741 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    32 00000748 037D08              <1>             add     edi, [ebp + 8]
    33                              <1> 
    34                              <1>             ; output a char of font
    35 0000074B 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    36                              <1> 
    37 0000074F 6A03E80EFFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    37 00000758 C404                <1>
    38 0000075A 6A08E81CFFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    38 00000763 C404                <1>
    39 00000765 536A085756E827FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    39 0000076E FF6683C410          <1>
    40                              <1> 
    41 00000773 6A02E8EAFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    41 0000077C C404                <1>
    42 0000077E 6A04E8F8FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    42 00000787 C404                <1>
    43 00000789 536A045756E803FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    43 00000792 FF6683C410          <1>
    44                              <1> 
    45 00000797 6A01E8C6FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    45 000007A0 C404                <1>
    46 000007A2 6A02E8D4FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    46 000007AB C404                <1>
    47 000007AD 536A025756E8DFFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    47 000007B6 FF6683C410          <1>
    48                              <1> 
    49 000007BB 6A00E8A2FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    49 000007C4 C404                <1>
    50 000007C6 6A01E8B0FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    50 000007CF C404                <1>
    51 000007D1 536A015756E8BBFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    51 000007DA FF6683C410          <1>
    52                              <1> 
    53                              <1> %ifdef      USE_TEST_AND_SET
    54                              <1> 
    55 000007DF C705[F4070000]0000- <1>             mov     [IN_USE], dword 0                           ; clear global variable
    55 000007E7 0000                <1>
    56                              <1> %endif
    57                              <1> 
    58                              <1>             ; return registers
    59 000007E9 5F                  <1>             pop		edi
    60 000007EA 5E                  <1> 		    pop		esi
    61 000007EB 5A                  <1> 		    pop		edx
    62 000007EC 59                  <1> 		    pop		ecx
    63 000007ED 5B                  <1> 		    pop		ebx
    64 000007EE 58                  <1> 		    pop		eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 000007EF 89EC                <1>             mov     esp, ebp
    68 000007F1 5D                  <1>             pop     ebp
    69                              <1> 
    70 000007F2 C3                  <1>             ret
    71                              <1> 
    72                              <1> %ifdef      USE_TEST_AND_SET
    73 000007F3 00                  <1> ALIGN 4, db 0
    74 000007F4 00000000            <1> IN_USE: dd 0
    75                              <1> %endif
   175                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000007F8 55                  <1>             push    ebp                                         ;   +12 | row
     5 000007F9 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 000007FB 50                  <1>             push    eax
     9 000007FC 53                  <1>             push    ebx
    10 000007FD 51                  <1>             push    ecx
    11 000007FE 52                  <1>             push    edx
    12 000007FF 56                  <1>             push    esi
    13 00000800 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00000801 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000804 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 00000807 B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 0000080C 81F900010000        <1> .10L:       cmp     ecx, 256
    22 00000812 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 00000814 89C8                <1>             mov     eax, ecx
    26 00000816 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 00000819 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 0000081B 89CB                <1>             mov     ebx, ecx
    31 0000081D C1EB04              <1>             shr     ebx, 4
    32 00000820 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 00000822 516A075350E8EBFEFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 0000082B FF6683C410          <1>
    35                              <1> 
    36 00000830 41                  <1>             inc     ecx
    37 00000831 EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 00000833 5F                  <1>             pop     edi
    42 00000834 5E                  <1>             pop     esi
    43 00000835 5A                  <1>             pop     edx
    44 00000836 59                  <1>             pop     ecx
    45 00000837 5B                  <1>             pop     ebx
    46 00000838 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 00000839 89EC                <1>             mov     esp, ebp
    50 0000083B 5D                  <1>             pop     ebp
    51                              <1> 
    52 0000083C C3                  <1>             ret
   176                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000083D 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 0000083E 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 00000840 50                  <1>             push    eax
    11 00000841 53                  <1>             push    ebx
    12 00000842 51                  <1>             push    ecx
    13 00000843 52                  <1>             push    edx
    14 00000844 56                  <1>             push    esi
    15 00000845 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000846 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 00000849 8B550C              <1>             mov     edx, [ebp + 12]
    20 0000084C 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 00000850 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 00000853 FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 00000854 AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 00000855 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 00000857 741A                <1>             je      .10E
    29                              <1> 
    30                              <1> %ifdef      USE_SYSTEM_CALL
    31 00000859 CD81                <1>             int     0x81                                        ; sys_call(1, x, y, color, char)
    32                              <1> %else
    33                              <1>             cdecl   draw_char, ecx, edx, ebx, eax
    34                              <1> %endif
    35 0000085B 41                  <1>             inc     ecx
    36 0000085C 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    37 0000085F 7C10                <1>             jl      .12E                                        ; {
    38 00000861 B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    39 00000866 42                  <1>             inc     edx                                         ;   EDX++;
    40 00000867 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    41 0000086A 7C05                <1>             jl      .12E                                        ;   {
    42 0000086C BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    43                              <1>                                                                 ;   }
    44                              <1> .12E:                                                           ; }
    45 00000871 EBE1                <1>             jmp     .10L
    46                              <1> .10E:
    47                              <1> 
    48                              <1>             ; return registers
    49 00000873 5F                  <1>             pop     edi
    50 00000874 5E                  <1>             pop     esi
    51 00000875 5A                  <1>             pop     edx
    52 00000876 59                  <1>             pop     ecx
    53 00000877 5B                  <1>             pop     ebx
    54 00000878 58                  <1>             pop     eax
    55                              <1> 
    56                              <1>             ; destruct stack frame
    57 00000879 89EC                <1>             mov     esp, ebp
    58 0000087B 5D                  <1>             pop     ebp
    59                              <1> 
    60 0000087C C3                  <1>             ret
   177                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000087D 55                  <1>             push    ebp                                             ;   +12 | row
     5 0000087E 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000880 50                  <1>             push    eax
     9 00000881 53                  <1>             push    ebx
    10 00000882 51                  <1>             push    ecx
    11 00000883 52                  <1>             push    edx
    12 00000884 56                  <1>             push    esi
    13 00000885 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00000886 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000889 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 0000088C B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 00000891 83F910              <1> .10L:       cmp     ecx, 16
    22 00000894 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 00000896 89C8                <1>             mov     eax, ecx
    26 00000898 83E001              <1>             and     eax, 0x01
    27 0000089B C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 0000089E 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 000008A0 89CB                <1>             mov     ebx, ecx
    32 000008A2 D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 000008A4 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 000008A6 89CA                <1>             mov     edx, ecx
    37 000008A8 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 000008AA 8B92[D7080000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 000008B0 68[CE080000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 000008B8 E880FFFFFF6683C410  <1>
    41                              <1> 
    42 000008C1 41                  <1>             inc     ecx
    43 000008C2 EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 000008C4 5F                  <1>             pop     edi
    48 000008C5 5E                  <1>             pop     esi
    49 000008C6 5A                  <1>             pop     edx
    50 000008C7 59                  <1>             pop     ecx
    51 000008C8 5B                  <1>             pop     ebx
    52 000008C9 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 000008CA 89E5                <1>             mov     ebp, esp
    56 000008CC 5D                  <1>             pop     ebp
    57                              <1> 
    58 000008CD C3                  <1>             ret
    59                              <1> 
    60 000008CE 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 000008D7 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 000008DB 00010009            <1>             dw  0x0100, 0x0900
    64 000008DF 0002000A            <1>             dw  0x0200, 0x0A00
    65 000008E3 0003000B            <1>             dw  0x0300, 0x0B00
    66 000008E7 0004000C            <1>             dw  0x0400, 0x0C00
    67 000008EB 0005000D            <1>             dw  0x0500, 0x0D00
    68 000008EF 0006000E            <1>             dw  0x0600, 0x0E00
    69 000008F3 0007000F            <1>             dw  0x0700, 0x0F00
   178                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 000008F7 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 000008F8 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 000008FA 50                  <1>             push    eax
     9 000008FB 53                  <1>             push    ebx
    10 000008FC 51                  <1>             push    ecx
    11 000008FD 52                  <1>             push    edx
    12 000008FE 56                  <1>             push    esi
    13 000008FF 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 00000900 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 00000903 C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 00000906 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 0000090D 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 00000910 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 00000912 C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 00000915 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 00000917 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 0000091A BB80000000          <1>             mov     ebx, 0x80
    35 0000091F D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 00000921 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 00000924 6A03E839FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 0000092D C404                <1>
    43 0000092F 6A08E847FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 00000938 C404                <1>
    44 0000093A 516A085753E8A5FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 00000943 FF6683C410          <1>
    45                              <1> 
    46 00000948 6A02E815FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 00000951 C404                <1>
    47 00000953 6A04E823FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 0000095C C404                <1>
    48 0000095E 516A045753E881FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 00000967 FF6683C410          <1>
    49                              <1> 
    50 0000096C 6A01E8F1FCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 00000975 C404                <1>
    51 00000977 6A02E8FFFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 00000980 C404                <1>
    52 00000982 516A025753E85DFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 0000098B FF6683C410          <1>
    53                              <1> 
    54 00000990 6A00E8CDFCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 00000999 C404                <1>
    55 0000099B 6A01E8DBFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 000009A4 C404                <1>
    56 000009A6 516A015753E839FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 000009AF FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 000009B4 5F                  <1>             pop     edi
    60 000009B5 5E                  <1>             pop     esi
    61 000009B6 5A                  <1>             pop     edx
    62 000009B7 59                  <1>             pop     ecx
    63 000009B8 5B                  <1>             pop     ebx
    64 000009B9 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 000009BA 89EC                <1>             mov     esp, ebp
    68 000009BC 5D                  <1>             pop     ebp
    69                              <1> 
    70 000009BD C3                  <1>             ret
   179                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 000009BE 55                  <1>             push    ebp
    22 000009BF 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 000009C1 6A00                <1>             push    dword 0
    25 000009C3 6A00                <1>             push    dword 0
    26 000009C5 6A00                <1>             push    dword 0
    27 000009C7 6A00                <1>             push    dword 0
    28 000009C9 6A00                <1>             push    dword 0
    29 000009CB 6A00                <1>             push    dword 0
    30 000009CD 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 000009CF 50                  <1>             push    eax
    34 000009D0 53                  <1>             push    ebx
    35 000009D1 51                  <1>             push    ecx
    36 000009D2 52                  <1>             push    edx
    37 000009D3 56                  <1>             push    esi
    38 000009D4 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 000009D5 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 000009D8 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 000009DB 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 000009DD 7D09                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 000009DF F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 000009E1 BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 000009E6 EB05                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    50 000009E8 BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 000009ED 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 000009F0 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 000009F3 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 000009F5 7D09                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 000009F7 F7DA                <1>             neg     edx                                             ;   height *= -1
    60 000009F9 BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 000009FE EB05                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    63 00000A00 BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 00000A05 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 00000A08 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 00000A0B 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 00000A0E 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 00000A11 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 00000A14 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 00000A17 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 00000A19 7F08                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 00000A1B 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 00000A1E 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 00000A21 EB06                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    93                              <1>                                                                     ;   // y axis is base one.
    94 00000A23 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 00000A26 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 00000A29 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 00000A2C 83F900              <1>             cmp     ecx, 0
   101 00000A2F 7505                <1>             jnz     .30E
   102 00000A31 B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   109 00000A36 FF7518FF75ECFF75F8- <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   109 00000A3F E8B3FEFFFF6683C40C  <1>
   110                              <1> 
   111                              <1>             ; update base axis(1 dot)
   112 00000A48 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   113 00000A4B 0106                <1>             add     [esi - 0], eax
   114                              <1> 
   115                              <1>             ; update relative axis
   116 00000A4D 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   117 00000A50 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   118                              <1> 
   119 00000A53 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   120                              <1> 
   121 00000A56 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   122 00000A58 7C07                <1>             jl      .52E                                            ; {
   123 00000A5A 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   124                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   125 00000A5C 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   126 00000A5F 011F                <1>             add     [edi - 0], ebx
   127                              <1> .52E:                                                               ; }
   128                              <1> 
   129 00000A61 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   130                              <1> 
   131 00000A64 E2D0                <1>             loop    .50L
   132                              <1> .50E:
   133                              <1> 
   134                              <1>             ; return registers
   135 00000A66 5F                  <1>             pop     edi
   136 00000A67 5E                  <1>             pop     esi
   137 00000A68 5A                  <1>             pop     edx
   138 00000A69 59                  <1>             pop     ecx
   139 00000A6A 5B                  <1>             pop     ebx
   140 00000A6B 58                  <1>             pop     eax
   141                              <1> 
   142                              <1>             ; destruct stack frame
   143 00000A6C 89EC                <1>             mov     esp, ebp
   144 00000A6E 5D                  <1>             pop     ebp
   145                              <1> 
   146 00000A6F C3                  <1>             ret
   180                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 00000A70 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 00000A71 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 00000A73 50                  <1>             push    eax
    11 00000A74 53                  <1>             push    ebx
    12 00000A75 51                  <1>             push    ecx
    13 00000A76 52                  <1>             push    edx
    14 00000A77 56                  <1>             push    esi
    15 00000A78 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000A79 8B4508              <1>             mov     eax, [ebp +  8]
    19 00000A7C 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 00000A7F 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 00000A82 8B5514              <1>             mov     edx, [ebp + 20]
    22 00000A85 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 00000A88 39C8                <1>             cmp     eax, ecx
    26 00000A8A 7C01                <1>             jl      .10E
    27 00000A8C 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    29 00000A8D 39D3                <1>             cmp     ebx, edx
    30 00000A8F 7C02                <1>             jl      .20E
    31 00000A91 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    33                              <1> 
    34                              <1>             ; draw rectangle
    35 00000A93 5653515350E821FFFF- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35 00000A9C FF6683C414          <1>
    36 00000AA1 5652505350E813FFFF- <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36 00000AAA FF6683C414          <1>
    37                              <1> 
    38 00000AAF 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39 00000AB0 5652515250E804FFFF- <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39 00000AB9 FF6683C414          <1>
    40 00000ABE 42                  <1>             inc     edx
    41                              <1> 
    42 00000ABF 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43 00000AC0 5652515351E8F4FEFF- <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43 00000AC9 FF6683C414          <1>
    44                              <1> 
    45                              <1>             ; return registers
    46 00000ACE 5F                  <1>             pop     edi
    47 00000ACF 5E                  <1>             pop     esi
    48 00000AD0 5A                  <1>             pop     edx
    49 00000AD1 59                  <1>             pop     ecx
    50 00000AD2 5B                  <1>             pop     ebx
    51 00000AD3 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000AD4 89EC                <1>             mov     esp, ebp
    55 00000AD6 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000AD7 C3                  <1>             ret
   181                                  %include    "../modules/protect/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 00000AD8 55                  <1>         push    ebp
     6 00000AD9 89E5                <1>         mov     ebp, esp                                ;   +24|flag
     7                              <1>                                                         ;   +20|radix
     8                              <1>                                                         ;   +16|dest buffer size
     9                              <1>                                                         ;   +12|dest buffer address
    10                              <1>                                                         ;   + 8|the value to be converted
    11                              <1>                                                         ;   + 4|Instruction Pointer
    12                              <1>                                                         ;EBP+ 0|EBP
    13                              <1>         ; save registers
    14                              <1> 
    15 00000ADB 50                  <1>         push    eax
    16 00000ADC 53                  <1>         push    ebx
    17 00000ADD 51                  <1>         push    ecx
    18 00000ADE 52                  <1>         push    edx
    19 00000ADF 56                  <1>         push    esi
    20 00000AE0 57                  <1>         push    edi
    21                              <1> 
    22                              <1>         ; get args
    23                              <1> 
    24 00000AE1 8B4508              <1>         mov     eax, [ebp +  8]                         ; val = value
    25 00000AE4 8B750C              <1>         mov     esi, [ebp + 12]                         ; dest= buffer address
    26 00000AE7 8B4D10              <1>         mov     ecx, [ebp + 16]                         ; size= remaining buffer size
    27                              <1> 
    28 00000AEA 89F7                <1>         mov     edi, esi                                ; end of buffer
    29 00000AEC 01CF                <1>         add     edi, ecx                                ; dest = &dest[esize - 1]
    30 00000AEE 4F                  <1>         dec     edi
    31                              <1> 
    32 00000AEF 8B5D18              <1>         mov     ebx, [ebp + 24]
    33                              <1> 
    34                              <1>         ; signing judge
    35                              <1> 
    36 00000AF2 F7C301000000        <1>         test    ebx, 0b0001                             ; if (flags & 0x01) //if signed => ZF = 0
    37 00000AF8 7408                <1> .10Q    je      .10E                                    ; {                 //if not ZF = 1 so => jmp
    38 00000AFA 83F800              <1>         cmp     eax, 0                                  ;   if (val < 0)    //CF = 1, ZF = 0
    39 00000AFD 7D03                <1> .12Q    jge     .12E                                    ;   {
    40 00000AFF 83CB02              <1>         or      ebx, 0b0010                             ;       flags |= 2; //set B1
    41                              <1>                                                         ; }}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ; sign output judge
    46                              <1> 
    47 00000B02 F7C302000000        <1>         test    ebx, 0b0010
    48 00000B08 7410                <1> .20Q    je      .20E
    49 00000B0A 83F800              <1>         cmp     eax, 0
    50 00000B0D 7D07                <1> .22Q    jge     .22F
    51 00000B0F F7D8                <1>         neg     eax                                     ; sign reverse
    52 00000B11 C6062D              <1>         mov     [esi], byte '-'                         ; sign display
    53 00000B14 EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 00000B16 C6062B              <1>         mov     [esi], byte '+'
    56                              <1> .22E:
    57 00000B19 49                  <1>         dec     ecx                                     ; subtract remaining buffer size -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ; ASCII conversion
    61                              <1> 
    62 00000B1A 8B5D14              <1>         mov     ebx, [ebp + 20]                          ; ebx = radix
    63                              <1> 
    64                              <1> .30L:                                                   ; do{
    65 00000B1D BA00000000          <1>         mov     edx, 0
    66 00000B22 F7F3                <1>         div     ebx                                    ;   edx = edx:eax % ebx;
    67                              <1>                                                         ;   eax = edx:eax / ebx;
    68                              <1> 
    69 00000B24 89D6                <1>         mov     esi, edx                                ;   //refer to coversion table
    70 00000B26 8A96[510B0000]      <1>         mov     dl, byte [.ascii + esi]                 ;   DL = ASCII[edx];
    71                              <1> 
    72 00000B2C 8817                <1>         mov     [edi], dl                               ;   *dest = DL;
    73 00000B2E 4F                  <1>         dec     edi                                     ;   dest--;
    74                              <1> 
    75 00000B2F 83F800              <1>         cmp     eax, 0
    76 00000B32 E0E9                <1>         loopnz  .30L                                    ; } while(eax);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ; padding (zero / blank)
    81                              <1> 
    82 00000B34 83F900              <1>         cmp     ecx, 0                                  ; if (esize)
    83 00000B37 740E                <1> .40Q:   je      .40E                                    ; {
    84 00000B39 B020                <1>         mov     al, ' '                                 ;   AL = ' '; // padding with blanks
    85 00000B3B 66837D1804          <1>         cmp     [ebp + 24], word 0b0100                  ;   if (flags & 0x04)
    86 00000B40 7502                <1> .42Q:   jne     .42E                                    ;   {
    87 00000B42 B030                <1>         mov     al, '0'                                 ;       AL = '0'; // padding with zero
    88                              <1> .42E:                                                   ;   }
    89 00000B44 FD                  <1>         std                                             ;   // DF = 1(dec)
    90 00000B45 F3AA                <1>         rep stosb                                       ;   while (--ecx) * edi-- = ' ';
    91                              <1> .40E:                                                   ; }
    92                              <1> 
    93                              <1>         ; return registers
    94                              <1> 
    95 00000B47 5F                  <1>         pop     edi
    96 00000B48 5E                  <1>         pop     esi
    97 00000B49 5A                  <1>         pop     edx
    98 00000B4A 59                  <1>         pop     ecx
    99 00000B4B 5B                  <1>         pop     ebx
   100 00000B4C 58                  <1>         pop     eax
   101                              <1> 
   102                              <1>         ; destruct stack frame
   103                              <1> 
   104 00000B4D 89EC                <1>         mov     esp, ebp
   105 00000B4F 5D                  <1>         pop     ebp
   106                              <1> 
   107 00000B50 C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 00000B51 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                      ; conversion table
   110 00000B5A 39414243444546      <1>
   182                                  %include    "../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000B61 55                  <1>             push    ebp                                     ; EBP+8 | destination
     5 00000B62 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 00000B64 50                  <1>             push    eax
     9 00000B65 53                  <1>             push    ebx
    10                              <1> 
    11                              <1> ; // Avoid conflicts between RTC data updates and
    12                              <1> ; // on-chip RAM access by confirming UIP bit on Register A
    13                              <1> 
    14 00000B66 B00A                <1>             mov     al, 0x0A                                ; register A
    15 00000B68 E670                <1>             out     0x70, al
    16 00000B6A E471                <1>             in      al, 0x71                                ; al = register A
    17 00000B6C A880                <1>             test    al, 0x80                                ; if (UIP) // updating
    18 00000B6E 7407                <1>             je      .10F                                    ; {
    19 00000B70 B801000000          <1>             mov     eax, 1                                  ;   return = 1;
    20 00000B75 EB27                <1>             jmp     .10E                                    ; }
    21                              <1> .10F:                                                       ; else
    22                              <1>                                                             ; {        // get time process
    23                              <1> 
    24                              <1>             ; main process
    25 00000B77 B004                <1>             mov     al, 0x04                                ;   hour
    26 00000B79 E670                <1>             out     0x70, al
    27 00000B7B E471                <1>             in      al, 0x71
    28                              <1> 
    29 00000B7D C1E008              <1>             shl     eax, 8
    30                              <1> 
    31 00000B80 B002                <1>             mov     al, 0x02                                ;   minute
    32 00000B82 E670                <1>             out     0x70, al
    33 00000B84 E471                <1>             in      al, 0x71
    34                              <1> 
    35 00000B86 C1E008              <1>             shl     eax, 8
    36                              <1> 
    37 00000B89 B000                <1>             mov     al, 0x00                                ;   second
    38 00000B8B E670                <1>             out     0x70, al
    39 00000B8D E471                <1>             in      al, 0x71
    40                              <1> 
    41 00000B8F 25FFFFFF00          <1>             and     eax, 0x00_FF_FF_FF                      ;   all data are in lower 3 bytes of eax register
    42                              <1> 
    43 00000B94 8B5D08              <1>             mov     ebx, [ebp + 8]
    44 00000B97 8903                <1>             mov     [ebx], eax                              ;   [dest] = real time
    45                              <1> 
    46 00000B99 B800000000          <1>             mov     eax, 0                                  ;   return = 0;
    47                              <1> .10E:                                                       ; }
    48                              <1> 
    49                              <1>             ; return register
    50 00000B9E 5B                  <1>             pop     ebx
    51 00000B9F 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000BA0 89EC                <1>             mov     esp, ebp
    55 00000BA2 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000BA3 C3                  <1>             ret
   183                                  %include    "../modules/protect/draw_time.s"
     1                              <1> draw_time:
     2                              <1> 
     3                              <1>             ; construct stack frame                         ;   +20 | time data
     4 00000BA4 55                  <1>             push    ebp                                     ;   +16 | display color
     5 00000BA5 89E5                <1>             mov     ebp, esp                                ;   +12 | row
     6                              <1>                                                             ;EBP+ 8 | col
     7                              <1> 
     8                              <1>             ; save registers
     9 00000BA7 50                  <1>             push    eax
    10 00000BA8 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; get arg
    13 00000BA9 8B4514              <1>             mov     eax, [ebp + 20]
    14                              <1> 
    15 00000BAC 0FB6D8              <1>             movzx   ebx, al                                 ; ebx = second
    16 00000BAF 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .sec, 2, 16, 0b0100
    16 00000BB6 [160C0000]53E818FF- <1>
    16 00000BBE FFFF6683C414        <1>
    17                              <1> 
    18 00000BC4 88E3                <1>             mov     bl, ah                                  ; ebx = min
    19 00000BC6 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .min, 2, 16, 0b0100
    19 00000BCD [130C0000]53E801FF- <1>
    19 00000BD5 FFFF6683C414        <1>
    20                              <1> 
    21 00000BDB C1E810              <1>             shr     eax, 16                                 ; ax = hour
    22 00000BDE 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .hour, 2, 16, 0b0100
    22 00000BE5 [100C0000]50E8E9FE- <1>
    22 00000BED FFFF6683C414        <1>
    23                              <1> 
    24                              <1>             ; display time
    25 00000BF3 68[100C0000]FF7510- <1>             cdecl   draw_str, dword [ebp + 8], dword [ebp + 12], dword [ebp + 16], .hour
    25 00000BFB FF750CFF7508E837FC- <1>
    25 00000C04 FFFF6683C410        <1>
    26                              <1> 
    27                              <1>             ; return registers
    28 00000C0A 5B                  <1>             pop     ebx
    29 00000C0B 58                  <1>             pop     eax
    30                              <1> 
    31                              <1>             ; destruct stack frame
    32 00000C0C 89EC                <1>             mov     esp, ebp
    33 00000C0E 5D                  <1>             pop     ebp
    34                              <1> 
    35 00000C0F C3                  <1>             ret
    36                              <1> 
    37 00000C10 5A5A3A              <1> .hour:  db  "ZZ:"
    38 00000C13 5A5A3A              <1> .min:  db  "ZZ:"
    39 00000C16 5A5A00              <1> .sec:  db  "ZZ", 0
   184                                  %include    "../modules/protect/interrupt.s"
     1                              <1> ; Initialize vector of IDTR
     2                              <1> 
     3 00000C19 90<rept>            <1> ALIGN 4
     4 00000C1C FF07                <1> IDTR:       dw      8 * 256 - 1                                     ; limit of IDT
     5 00000C1E 00001000            <1>             dd      VECT_BASE                                       ; base address of IDT
     6                              <1> 
     7                              <1> ; Initialize IDT
     8                              <1> 
     9                              <1> init_int:
    10                              <1> 
    11                              <1>             ; save registers
    12 00000C22 50                  <1>             push    eax
    13 00000C23 53                  <1>             push    ebx
    14 00000C24 51                  <1>             push    ecx
    15 00000C25 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; define Interrupt Gate Descriptor and apply default process to them
    18                              <1> 
    19 00000C26 8D05[6C0D0000]      <1>             lea     eax, [int_default]                              ; EAX = the address of interrupt process
    20 00000C2C BB008E0800          <1>             mov     ebx, 0x0008_8E00                                ; EBX = segment selector & P,DPL,DT,TYPE
    21 00000C31 6693                <1>             xchg    ax, bx                                          ; exchange lower word
    22                              <1> 
    23 00000C33 B900010000          <1>             mov     ecx, 256                                        ; num of Interrupt Gate Descriptor
    24 00000C38 BF00001000          <1>             mov     edi, VECT_BASE                                  ; base address of Interrupt Descriptor Table
    25                              <1> 
    26                              <1> .10L:
    27 00000C3D 891F                <1>             mov     [edi + 0], ebx                                  ; interrupt descriptor(lower)
    28 00000C3F 894704              <1>             mov     [edi + 4], eax                                  ; interrupt descriptor(upper)
    29 00000C42 83C708              <1>             add     edi, 8                                          ; EDI += 8 byte
    30 00000C45 E2F6                <1>             loop    .10L
    31                              <1> 
    32                              <1>             ; set up Interrupt Descriptor
    33 00000C47 0F011D[1C0C0000]    <1>             lidt    [IDTR]
    34                              <1> 
    35                              <1>             ; return registers
    36 00000C4E 5F                  <1>             pop     edi
    37 00000C4F 59                  <1>             pop     ecx
    38 00000C50 5B                  <1>             pop     ebx
    39 00000C51 58                  <1>             pop     eax
    40                              <1> 
    41 00000C52 C3                  <1>             ret
    42                              <1> 
    43                              <1> int_stop:
    44                              <1> 
    45 00000C53 FB                  <1>             sti                                                     ; interrupt enable
    46                              <1> 
    47                              <1>             ; display the string indicated in EAX
    48 00000C54 50680F0600006A0F6A- <1>             cdecl   draw_str, 25, 15, 0x060F, eax
    48 00000C5D 19E8DAFBFFFF6683C4- <1>
    48 00000C66 10                  <1>
    49                              <1> 
    50                              <1>             ; convert stack data into string
    51 00000C67 8B0424              <1>             mov     eax, [esp + 0]                                  ; EIP
    52 00000C6A 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p1, 8, 16, 0b0100
    52 00000C71 [2F0D0000]50E85DFE- <1>
    52 00000C79 FFFF6683C414        <1>
    53                              <1> 
    54 00000C7F 8B442404            <1>             mov     eax, [esp + 4]                                  ; CS
    55 00000C83 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p2, 8, 16, 0b0100
    55 00000C8A [400D0000]50E844FE- <1>
    55 00000C92 FFFF6683C414        <1>
    56                              <1> 
    57 00000C98 8B442408            <1>             mov     eax, [esp + 8]                                  ; EFLAGS
    58 00000C9C 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p3, 8, 16, 0b0100
    58 00000CA3 [510D0000]50E82BFE- <1>
    58 00000CAB FFFF6683C414        <1>
    59                              <1> 
    60 00000CB1 8B44240C            <1>             mov     eax, [esp + 12]
    61 00000CB5 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p4, 8, 16, 0b0100
    61 00000CBC [620D0000]50E812FE- <1>
    61 00000CC4 FFFF6683C414        <1>
    62                              <1> 
    63                              <1>             ; display string
    64 00000CCA 68[280D0000]68040F- <1>             cdecl   draw_str, 25, 16, 0x0F04, .s1
    64 00000CD2 00006A106A19E860FB- <1>
    64 00000CDB FFFF6683C410        <1>
    65 00000CE1 68[390D0000]68040F- <1>             cdecl   draw_str, 25, 17, 0x0F04, .s2
    65 00000CE9 00006A116A19E849FB- <1>
    65 00000CF2 FFFF6683C410        <1>
    66 00000CF8 68[4A0D0000]68040F- <1>             cdecl   draw_str, 25, 18, 0x0F04, .s3
    66 00000D00 00006A126A19E832FB- <1>
    66 00000D09 FFFF6683C410        <1>
    67 00000D0F 68[5B0D0000]68040F- <1>             cdecl   draw_str, 25, 19, 0x0F04, .s4
    67 00000D17 00006A136A19E81BFB- <1>
    67 00000D20 FFFF6683C410        <1>
    68                              <1> 
    69                              <1>             ; infinite loop
    70 00000D26 EBFE                <1>             jmp     $
    71                              <1> 
    72 00000D28 4553502B20303A      <1> .s1         db  "ESP+ 0:"
    73 00000D2F 5F5F5F5F5F5F5F5F20- <1> .p1         db  "________ ", 0
    73 00000D38 00                  <1>
    74 00000D39 2020202B20343A      <1> .s2         db  "   + 4:"
    75 00000D40 5F5F5F5F5F5F5F5F20- <1> .p2         db  "________ ", 0
    75 00000D49 00                  <1>
    76 00000D4A 2020202B20383A      <1> .s3         db  "   + 8:"
    77 00000D51 5F5F5F5F5F5F5F5F20- <1> .p3         db  "________ ", 0
    77 00000D5A 00                  <1>
    78 00000D5B 2020202B31323A      <1> .s4         db  "   +12:"
    79 00000D62 5F5F5F5F5F5F5F5F20- <1> .p4         db  "________ ", 0
    79 00000D6B 00                  <1>
    80                              <1> 
    81                              <1> int_default:
    82 00000D6C 9C                  <1>             pushf                                                   ; EFLAGS
    83 00000D6D 0E                  <1>             push    cs                                              ; CS
    84 00000D6E 68[530C0000]        <1>             push    int_stop                                        ; the process of displaying stack
    85                              <1> 
    86 00000D73 B8[790D0000]        <1>             mov     eax, .s0                                        ; interrupt type
    87 00000D78 CF                  <1>             iret
    88                              <1> 
    89 00000D79 203C2020202053544F- <1> .s0         db  " <    STOP    > ", 0
    89 00000D82 50202020203E2000    <1>
    90                              <1> 
    91                              <1> int_zero_div:
    92 00000D8A 9C                  <1>             pushf                                                   ; EFLAGS
    93 00000D8B 0E                  <1>             push    cs                                              ; CS
    94 00000D8C 68[530C0000]        <1>             push    int_stop                                        ; the process of displaying stack
    95                              <1> 
    96 00000D91 B8[970D0000]        <1>             mov     eax, .s0                                        ; interrupt type
    97 00000D96 CF                  <1>             iret
    98                              <1> 
    99 00000D97 203C20205A45524F20- <1> .s0         db  " <  ZERO DIV  > ", 0
    99 00000DA0 44495620203E2000    <1>
   100                              <1> 
   101                              <1> 
   185                                  %include    "../modules/protect/pic.s"
     1                              <1> init_pic:
     2                              <1> 
     3                              <1>             ; save register
     4 00000DA8 50                  <1>             push    eax
     5                              <1> 
     6                              <1>             ; set up Master PIC
     7                              <1>             outp    0x20, 0x11                              ; MASTER.ICW1 = 0x11
     7 00000DA9 B011                <2>  mov al, %2
     7 00000DAB E620                <2>  out %1, al
     8                              <1>             outp    0x21, 0x20                              ; MASTER.ICW2 = 0x20 // interrupt vector
     8 00000DAD B020                <2>  mov al, %2
     8 00000DAF E621                <2>  out %1, al
     9                              <1>             outp    0x21, 0x04                              ; MASTER.ICW3 = 0x04 // slave connection position : IRQ2
     9 00000DB1 B004                <2>  mov al, %2
     9 00000DB3 E621                <2>  out %1, al
    10                              <1>             outp    0x21, 0x05                              ; MASTER.ICW4 = 0x05
    10 00000DB5 B005                <2>  mov al, %2
    10 00000DB7 E621                <2>  out %1, al
    11                              <1>             outp    0x21, 0xFF                              ; master interrupt mask
    11 00000DB9 B0FF                <2>  mov al, %2
    11 00000DBB E621                <2>  out %1, al
    12                              <1> 
    13                              <1>             ; set up Slave
    14                              <1>             outp    0xA0, 0x11                              ; SLAVE.ICW1 = 0x11
    14 00000DBD B011                <2>  mov al, %2
    14 00000DBF E6A0                <2>  out %1, al
    15                              <1>             outp    0xA1, 0x28                              ; SLAVE.ICW2 = 0x28 // interrupt vector
    15 00000DC1 B028                <2>  mov al, %2
    15 00000DC3 E6A1                <2>  out %1, al
    16                              <1>             outp    0xA1, 0x02                              ; SLAVE.ICW3 = 0x02 // slave ID = 2
    16 00000DC5 B002                <2>  mov al, %2
    16 00000DC7 E6A1                <2>  out %1, al
    17                              <1>             outp    0xA1, 0x01                              ; SLAVE.ICW4 = 0x01
    17 00000DC9 B001                <2>  mov al, %2
    17 00000DCB E6A1                <2>  out %1, al
    18                              <1>             outp    0xA1, 0xFF                              ; slave interrupt mask
    18 00000DCD B0FF                <2>  mov al, %2
    18 00000DCF E6A1                <2>  out %1, al
    19                              <1> 
    20                              <1>             ; return regisiter
    21 00000DD1 58                  <1>             pop     eax
    22                              <1> 
    23 00000DD2 C3                  <1>             ret
   186                                  %include    "../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000DD3 60                  <1>             pusha
     5 00000DD4 1E                  <1>             push    ds
     6 00000DD5 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000DD6 66B81000            <1>             mov     ax, 0x0010                                      ; offset from the beginnig of GDT // second element
    10 00000DDA 8ED8                <1>             mov     ds, ax
    11 00000DDC 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; get time from RTC
    14 00000DDE 68[04020000]E879FD- <1>             cdecl   rtc_get_time, RTC_TIME
    14 00000DE6 FFFF6683C404        <1>
    15                              <1> 
    16                              <1>             ; get RTC interrupt factor
    17                              <1>             outp    0x70, 0x0C                                      ; select register C
    17 00000DEC B00C                <2>  mov al, %2
    17 00000DEE E670                <2>  out %1, al
    18 00000DF0 E471                <1>             in      al, 0x71
    19                              <1> 
    20                              <1>             ; clear interrupt flag
    21 00000DF2 B020                <1>             mov     al, 0x20                                        ; AL = EOI command
    22 00000DF4 E6A0                <1>             out     0xA0, al                                        ; slave PIC
    23 00000DF6 E620                <1>             out     0x20, al                                        ; master PIC
    24                              <1> 
    25                              <1>             ; return register
    26 00000DF8 07                  <1>             pop     es
    27 00000DF9 1F                  <1>             pop     ds
    28 00000DFA 61                  <1>             popa
    29                              <1> 
    30 00000DFB CF                  <1>             iret                                                    ; end of interrupt process
    31                              <1>                                                                     ; return including flag register => iret
    32                              <1> 
    33                              <1> ; Enable interrupt by RTC itself
    34                              <1> 
    35                              <1> rtc_int_en:
    36                              <1> 
    37                              <1>             ; construct stack frame
    38 00000DFC 55                  <1>             push    ebp
    39 00000DFD 89E5                <1>             mov     ebp, esp                                        ;EBP+8 | enable bit
    40                              <1> 
    41                              <1>             ; save register
    42 00000DFF 50                  <1>             push    eax
    43                              <1> 
    44                              <1>             ; set up Interrupt Permission
    45                              <1>             outp    0x70, 0x0B                                      ; select register B
    45 00000E00 B00B                <2>  mov al, %2
    45 00000E02 E670                <2>  out %1, al
    46                              <1> 
    47 00000E04 E471                <1>             in      al, 0x71
    48 00000E06 0A4508              <1>             or      al, [ebp + 8]                                   ; set the specified bit
    49                              <1> 
    50 00000E09 E671                <1>             out     0x71, al                                        ; write down to register B
    51                              <1> 
    52                              <1>             ; return register
    53 00000E0B 58                  <1>             pop     eax
    54                              <1> 
    55                              <1>             ; destruct stack frame
    56 00000E0C 89EC                <1>             mov     esp, ebp
    57 00000E0E 5D                  <1>             pop     ebp
    58                              <1> 
    59 00000E0F C3                  <1>             ret
   187                                  %include    "../modules/protect/ring_buff.s"
     1                              <1> ring_rd:
     2                              <1> 
     3                              <1>             ; construct stack frame                                     ;    +12 | save_dest address
     4 00000E10 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
     5 00000E11 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 00000E13 50                  <1>             push    eax
     9 00000E14 53                  <1>             push    ebx
    10 00000E15 56                  <1>             push    esi
    11 00000E16 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; get args
    14 00000E17 8B7508              <1>             mov     esi, [ebp +  8]
    15 00000E1A 8B7D0C              <1>             mov     edi, [ebp + 12]
    16                              <1> 
    17                              <1>             ; confirm the reading location
    18 00000E1D B800000000          <1>             mov     eax, 0                                              ; EAX = 0 // no data
    19 00000E22 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = rp
    20 00000E24 3B5E04              <1>             cmp     ebx, [esi + ring_buff.wp]                           ; if (EBX != wp)
    21 00000E27 7411                <1>             je      .10E                                                ; {
    22                              <1> 
    23 00000E29 8A441E08            <1>             mov     al, [esi + ring_buff.item + ebx]                    ;   AL = BUFFER[rp] // store key code(unit:byte)
    24                              <1> 
    25 00000E2D 8807                <1>             mov     [edi], al                                           ;   [EDI] = AL      // save data
    26                              <1> 
    27 00000E2F 43                  <1>             inc     ebx                                                 ;   EBX++           // next reading location
    28 00000E30 83E30F              <1>             and     ebx, RING_INDEX_MASK                                ;   EBX &= 0x0F     // limit size
    29 00000E33 891E                <1>             mov     [esi + ring_buff.rp], ebx                           ;   rp = EBX        // save the reading location
    30                              <1> 
    31 00000E35 B801000000          <1>             mov     eax, 1                                              ;   EAX = 1         // data exists
    32                              <1> .10E:                                                                   ; }
    33                              <1> 
    34                              <1>             ; return registers
    35 00000E3A 5F                  <1>             pop     edi
    36 00000E3B 5E                  <1>             pop     esi
    37 00000E3C 5B                  <1>             pop     ebx
    38 00000E3D 58                  <1>             pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 00000E3E 89EC                <1>             mov     esp, ebp
    42 00000E40 5D                  <1>             pop     ebp
    43                              <1> 
    44 00000E41 C3                  <1>             ret
    45                              <1> 
    46                              <1> ring_wr:
    47                              <1> 
    48                              <1>             ; construct stack frame                                     ;    +12 | data to write
    49 00000E42 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
    50 00000E43 89E5                <1>             mov     ebp, esp
    51                              <1> 
    52                              <1>             ; save registers
    53 00000E45 50                  <1>             push    eax
    54 00000E46 53                  <1>             push    ebx
    55 00000E47 51                  <1>             push    ecx
    56 00000E48 56                  <1>             push    esi
    57 00000E49 57                  <1>             push    edi
    58                              <1> 
    59                              <1>             ; get args
    60 00000E4A 8B7508              <1>             mov     esi, [ebp + 8]
    61                              <1> 
    62                              <1>             ; confirm the writing location
    63 00000E4D B800000000          <1>             mov     eax, 0
    64 00000E52 8B5E04              <1>             mov     ebx, [esi + ring_buff.wp]                           ; writing position
    65 00000E55 89D9                <1>             mov     ecx, ebx
    66 00000E57 41                  <1>             inc     ecx                                                 ; next writing location
    67 00000E58 83E10F              <1>             and     ecx, RING_INDEX_MASK                                ; size limit
    68                              <1> 
    69 00000E5B 3B0E                <1>             cmp     ecx, [esi + ring_buff.rp]                           ; if (ECX != rp)
    70 00000E5D 740F                <1>             je      .10E                                                ; {
    71                              <1> 
    72 00000E5F 8A450C              <1>             mov     al, [ebp + 12]                                      ;   AL = data
    73                              <1> 
    74 00000E62 88441E08            <1>             mov     [esi + ring_buff.item + ebx], al                    ;   BUFFER[wp] = AL // save key code
    75 00000E66 894E04              <1>             mov     [esi + ring_buff.wp], ecx                           ;   wp = ECX        // save the writing location
    76 00000E69 B801000000          <1>             mov     eax, 1
    77                              <1> .10E:
    78                              <1> 
    79                              <1>             ; return registers
    80 00000E6E 5F                  <1>             pop     edi
    81 00000E6F 5E                  <1>             pop     esi
    82 00000E70 59                  <1>             pop     ecx
    83 00000E71 5B                  <1>             pop     ebx
    84 00000E72 58                  <1>             pop     eax
    85                              <1> 
    86                              <1>             ; destruct stack frame
    87 00000E73 89EC                <1>             mov     esp, ebp
    88 00000E75 5D                  <1>             pop     ebp
    89                              <1> 
    90 00000E76 C3                  <1>             ret
    91                              <1> 
    92                              <1> draw_key:
    93                              <1> 
    94                              <1>             ; construct stack frame                                     ;    +16 | ring buffer
    95 00000E77 55                  <1>             push    ebp                                                 ;    +12 | row
    96 00000E78 89E5                <1>             mov     ebp, esp                                            ; EBP+ 8 | col
    97                              <1> 
    98                              <1>             ; save registers
    99 00000E7A 60                  <1>             pusha                                                       ; save EAX,EBX,ECX,EDX,EDI,ESI,EBP,ESP
   100                              <1> 
   101                              <1>             ; get args
   102 00000E7B 8B5508              <1>             mov     edx, [ebp +  8]
   103 00000E7E 8B7D0C              <1>             mov     edi, [ebp + 12]
   104 00000E81 8B7510              <1>             mov     esi, [ebp + 16]
   105                              <1> 
   106                              <1>             ; get ring buffer info
   107 00000E84 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = wp // writing location
   108 00000E86 8D7608              <1>             lea     esi, [esi + ring_buff.item]
   109 00000E89 B910000000          <1>             mov     ecx, RING_ITEM_SIZE
   110                              <1> 
   111                              <1>             ; display data
   112                              <1> .10L:
   113                              <1> 
   114 00000E8E 4B                  <1>             dec     ebx                                                 ; EBX-- == where data exists
   115 00000E8F 83E30F              <1>             and     ebx, RING_INDEX_MASK
   116 00000E92 8A041E              <1>             mov     al, [esi + ebx]                                     ; EAX = KEY_BUFF[EBX]
   117                              <1> 
   118 00000E95 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .tmp, 2, 16, 0b0100
   118 00000E9C [C60E0000]50E832FC- <1>
   118 00000EA4 FFFF6683C414        <1>
   119 00000EAA 68[C60E0000]6A0257- <1>             cdecl   draw_str, edx, edi, 0x02, .tmp
   119 00000EB2 52E885F9FFFF6683C4- <1>
   119 00000EBB 10                  <1>
   120                              <1> 
   121 00000EBC 83C203              <1>             add     edx, 3                                              ; updata display position(3 chars)
   122                              <1> 
   123 00000EBF E2CD                <1>             loop    .10L
   124                              <1> .10E:
   125                              <1> 
   126                              <1>             ; return registers
   127 00000EC1 61                  <1>             popa
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 00000EC2 89EC                <1>             mov     esp, ebp
   131 00000EC4 5D                  <1>             pop     ebp
   132                              <1> 
   133 00000EC5 C3                  <1>             ret
   134                              <1> 
   135 00000EC6 2D2D2000            <1> .tmp        db "-- ", 0
   188                                  %include    "../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000ECA 60                  <1>             pusha
     5 00000ECB 1E                  <1>             push    ds
     6 00000ECC 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment for data
     9 00000ECD 66B81000            <1>             mov     ax, 0x0010
    10 00000ED1 8ED8                <1>             mov     ds, ax
    11 00000ED3 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; read buffer of KBC
    14 00000ED5 E460                <1>             in      al, 0x60                                    ; AL = get key code
    15                              <1> 
    16                              <1>             ; save key code
    17 00000ED7 5068[F00E0000]E860- <1>             cdecl   ring_wr, _KEY_BUFF, eax
    17 00000EDF FFFFFF6683C408      <1>
    18                              <1> 
    19                              <1>             ; send interrupt end command
    20                              <1>             outp    0x20, 0x20                                  ; master PIC: EOI command
    20 00000EE6 B020                <2>  mov al, %2
    20 00000EE8 E620                <2>  out %1, al
    21                              <1> 
    22                              <1>             ; return registers
    23 00000EEA 07                  <1>             pop     es
    24 00000EEB 1F                  <1>             pop     ds
    25 00000EEC 61                  <1>             popa
    26                              <1> 
    27 00000EED CF                  <1>             iret
    28                              <1> 
    29 00000EEE 00<rept>            <1> ALIGN 4, db 0
    30 00000EF0 00<rept>            <1> _KEY_BUFF:  times ring_buff_size db 0
   189                                  %include    "../modules/protect/timer.s"
     1                              <1> int_en_timer0:
     2                              <1> 
     3                              <1>             ; save register
     4 00000F08 50                  <1>             push    eax                                     ; use eax register on outp
     5                              <1> 
     6                              <1>             outp    0x43, 0b_00_11_010_0                    ; counter 0|access way:lower/upper|mode 2|16 bit binary couner
     6 00000F09 B034                <2>  mov al, %2
     6 00000F0B E643                <2>  out %1, al
     7                              <1>             outp    0x40, 0x9C                              ; lower byte
     7 00000F0D B09C                <2>  mov al, %2
     7 00000F0F E640                <2>  out %1, al
     8                              <1>             outp    0x40, 0x2E                              ; upper byte
     8 00000F11 B02E                <2>  mov al, %2
     8 00000F13 E640                <2>  out %1, al
     9                              <1> 
    10                              <1>             ; return register
    11 00000F15 58                  <1>             pop     eax
    12                              <1> 
    13 00000F16 C3                  <1>             ret
   190                                  %include    "../modules/protect/draw_rotation_bar.s"
     1                              <1> ;--------------------------------------------------------------------------------------------
     2                              <1> ;char update cycle
     3                              <1> ;=> The value obtained by reading the value of Timer interrupt counter
     4                              <1> ;   and shifting it to the right by 4 bits
     5                              <1> ;   and if the value is different from the previous value, it's the time to update.
     6                              <1> ;--------------------------------------------------------------------------------------------
     7                              <1> 
     8                              <1> draw_rotation_bar:
     9                              <1> 
    10                              <1>             ; save register
    11 00000F17 50                  <1>             push    eax
    12                              <1> 
    13                              <1>             ; main process
    14 00000F18 A1[54050000]        <1>             mov     eax, [TIMER_COUNT]
    15 00000F1D C1E804              <1>             shr     eax, 4
    16 00000F20 3B05[480F0000]      <1>             cmp     eax, [.index]
    17 00000F26 741E                <1>             je      .10E
    18                              <1> 
    19 00000F28 A3[480F0000]        <1>             mov     [.index], eax
    20 00000F2D 83E003              <1>             and     eax, 0x03                                       ; limit to the range 0 to 3
    21                              <1> 
    22 00000F30 8A80[4C0F0000]      <1>             mov     al, [.table + eax]                              ; AL = table[index]
    23 00000F36 506A0F6A1D6A00E8D5- <1>             cdecl   draw_char, 0, 29, 0x000F, eax
    23 00000F3F F7FFFF6683C410      <1>
    24                              <1> 
    25                              <1> .10E:
    26                              <1> 
    27                              <1>             ; return register
    28 00000F46 58                  <1>             pop     eax
    29                              <1> 
    30 00000F47 C3                  <1>             ret
    31                              <1> 
    32                              <1> ALIGN 4, db 0
    33 00000F48 00000000            <1> .index      dd 0                                                    ; previous value
    34 00000F4C 7C2F2D5C            <1> .table      db "|/-\"                                               ; display bar
   191                                  %include    "../modules/protect/call_gate.s"
     1                              <1> ;--------------------------------------------------
     2                              <1> ; This is a rapper of draw_str func.
     3                              <1> ;--------------------------------------------------
     4                              <1> 
     5                              <1> call_gate:
     6                              <1> 
     7                              <1>             ; construct stack frame
     8                              <1>                                                                     ;    +24 | char
     9                              <1>                                                                     ;    +20 | display color
    10                              <1>                                                                     ;    +16 | row
    11                              <1>                                                                     ;    +12 | column
    12                              <1>                                                                     ; EBP+ 8 | CS(code segment)
    13 00000F50 55                  <1>             push    ebp
    14 00000F51 89E5                <1>             mov     ebp, esp
    15                              <1> 
    16                              <1>             ; save registers
    17 00000F53 60                  <1>             pusha
    18 00000F54 1E                  <1>             push    ds
    19 00000F55 06                  <1>             push    es
    20                              <1> 
    21                              <1>             ; set up segment for data
    22 00000F56 66B81000            <1>             mov     ax, 0x0010
    23 00000F5A 8ED8                <1>             mov     ds, ax
    24 00000F5C 8EC0                <1>             mov     es, ax
    25                              <1> 
    26                              <1>             ; display string
    27 00000F5E 8B450C              <1>             mov     eax, dword [ebp + 12]
    28 00000F61 8B5D10              <1>             mov     ebx, dword [ebp + 16]
    29 00000F64 8B4D14              <1>             mov     ecx, dword [ebp + 20]
    30 00000F67 8B5518              <1>             mov     edx, dword [ebp + 24]
    31 00000F6A 52515350E8CAF8FFFF- <1>             cdecl   draw_str, eax, ebx, ecx, edx
    31 00000F73 6683C410            <1>
    32                              <1> 
    33                              <1>             ; return registers
    34 00000F77 07                  <1>             pop     es
    35 00000F78 1F                  <1>             pop     ds
    36 00000F79 61                  <1>             popa
    37                              <1> 
    38                              <1>             ; destruct stack frame
    39 00000F7A 89EC                <1>             mov     esp, ebp
    40 00000F7C 5D                  <1>             pop     ebp
    41                              <1> 
    42 00000F7D CA1000              <1>             retf    4 * 4                                                ; end func and adjust arguments
   192                                  %include    "../modules/protect/trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1> 
     3                              <1>             ; output a char
     4 00000F80 50535251E88EF7FFFF- <1>             cdecl   draw_char,  ecx, edx, ebx, eax
     4 00000F89 6683C410            <1>
     5                              <1> 
     6 00000F8D CF                  <1>             iret
     7                              <1> 
     8                              <1> trap_gate_82:
     9                              <1> 
    10                              <1>             ; draw pixel
    11 00000F8E 535251E861F9FFFF66- <1>             cdecl   draw_pixel, ecx, edx, ebx
    11 00000F97 83C40C              <1>
    12                              <1> 
    13 00000F9A CF                  <1>             iret
   193                                  %include    "../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                                     ; EBP+8 | address of global variable
     5 00000F9B 55                  <1>             push    ebp
     6 00000F9C 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 00000F9E 50                  <1>             push    eax
    10 00000F9F 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; test and set
    13 00000FA0 B800000000          <1>             mov     eax, 0                                          ; local = 0
    14 00000FA5 8B5D08              <1>             mov     ebx, [ebp + 8]                                  ; global = address
    15                              <1> 
    16                              <1> .10L:
    17 00000FA8 F00FAB03            <1>             lock bts [ebx], eax                                     ; CF = TEST_AND_SET(IN_USE, 1)
    18 00000FAC 7307                <1>             jnc     .10E                                            ; if(0 == CF)
    19                              <1>                                                                     ;   break;
    20                              <1> 
    21                              <1> .12L:
    22 00000FAE 0FA303              <1>             bt      [ebx], eax                                      ; CF = TEST(IN_USE, 1)
    23 00000FB1 72FB                <1>             jc      .12L                                            ; if(0 == CF)
    24                              <1>                                                                     ;   break;
    25 00000FB3 EBF3                <1>             jmp     .10L
    26                              <1> .10E:
    27                              <1> 
    28                              <1>             ; return registers
    29 00000FB5 5B                  <1>             pop     ebx
    30 00000FB6 58                  <1>             pop     eax
    31                              <1> 
    32                              <1>             ; destruct stakc frame
    33 00000FB7 89EC                <1>             mov     esp, ebp
    34 00000FB9 5D                  <1>             pop     ebp
    35                              <1> 
    36 00000FBA C3                  <1>             ret
   194                                  %include    "../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 
     3                              <1>             ; EBX == TSS selector
     4                              <1> 
     5 00000FBB 8B83[92040000]      <1>             mov     eax, [GDT + ebx + 2]                            ; EAX = TSS[23:0]
     6 00000FC1 C1E008              <1>             shl     eax, 8
     7 00000FC4 8A83[97040000]      <1>             mov     al,  [GDT + ebx + 7]                            ; AL  = TSS[31:24]
     8 00000FCA C1C808              <1>             ror     eax, 8
     9                              <1> 
    10 00000FCD C3                  <1>             ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 
    14                              <1>             ; EAX == base address of TSS descriptor
    15                              <1> 
    16 00000FCE DD7068              <1>             fnsave  [eax + 104]                                     ; // save FPU context
    17 00000FD1 C780D4000000010000- <1>             mov     [eax + 104 + 108], dword 1                      ; saved = 1 // a flag which shows FPU context is saved.
    17 00000FDA 00                  <1>
    18                              <1> 
    19 00000FDB C3                  <1>             ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1> 
    23 00000FDC 83B8D400000000      <1>             cmp     [eax + 104 + 108], dword 0                      ; if (0 == saved)
    24 00000FE3 7504                <1>             jne     .10F
    25 00000FE5 DBE3                <1>             fninit                                                  ; initialize FPU
    26 00000FE7 EB03                <1>             jmp     .10E
    27                              <1> .10F:
    28 00000FE9 DD6068              <1>             frstor  [eax + 104]                                     ; return FPU context
    29                              <1> .10E:
    30 00000FEC C3                  <1>             ret
    31                              <1> 
    32                              <1> int_nm:
    33                              <1> 
    34                              <1>             ; save registers
    35 00000FED 60                  <1>             pusha
    36 00000FEE 1E                  <1>             push    ds
    37 00000FEF 06                  <1>             push    es
    38                              <1> 
    39                              <1>             ; set up selector for Kernel
    40 00000FF0 66B81000            <1>             mov     ax, DS_KERNEL
    41 00000FF4 8ED8                <1>             mov     ds, ax
    42 00000FF6 8EC0                <1>             mov     es, ax
    43                              <1> 
    44                              <1>             ; clear Task Switch flag
    45 00000FF8 0F06                <1>             clts                                                    ; CR0.TS = 0
    46                              <1>                                                                     ; // TS bit is gonna be set by CPU
    47                              <1>                                                                     ; // when Task Switching happend.
    48                              <1> 
    49                              <1>             ; get previous/this time task
    50 00000FFA 8B3D[44100000]      <1>             mov     edi, [.last_tss]                                ; TSS of the task that last used FPU
    51 00001000 0F00CE              <1>             str     esi                                             ; TSS of the task using FPU this time
    52 00001003 83E6F8              <1>             and     esi, ~0x0007                                    ; mask segment selector[2:0] // TI:RPL
    53                              <1> 
    54                              <1>             ; compare previous task with the one of this time
    55 00001006 83FF00              <1>             cmp     edi, 0                                          ; if not exist previous task
    56 00001009 7420                <1>             je      .10F
    57                              <1> 
    58 0000100B 39FE                <1>             cmp     esi, edi
    59 0000100D 741A                <1>             je      .12E
    60                              <1> 
    61 0000100F FA                  <1>             cli                                                     ; disable interrupt
    62                              <1> 
    63                              <1>             ; save previous FPU context
    64 00001010 89FB                <1>             mov     ebx, edi
    65 00001012 E8A4FFFFFF          <1>             call    get_tss_base                                    ; get TSS address
    66 00001017 E8B2FFFFFF          <1>             call    save_fpu_context
    67                              <1> 
    68                              <1>             ; return FPU context of this time
    69 0000101C 89F3                <1>             mov     ebx, esi
    70 0000101E E898FFFFFF          <1>             call    get_tss_base
    71 00001023 E8B4FFFFFF          <1>             call    load_fpu_context
    72                              <1> 
    73 00001028 FB                  <1>             sti                                                     ; enable interrupt
    74                              <1> 
    75                              <1> .12E:
    76 00001029 EB0E                <1>             jmp     .10E
    77                              <1> .10F:
    78                              <1> 
    79 0000102B FA                  <1>             cli                                                     ; disable interrupt
    80                              <1> 
    81                              <1>             ; return FPU context of this time
    82 0000102C 89F3                <1>             mov     ebx, esi
    83 0000102E E888FFFFFF          <1>             call    get_tss_base
    84 00001033 E8A4FFFFFF          <1>             call    load_fpu_context
    85                              <1> 
    86 00001038 FB                  <1>             sti                                                     ; enable interrupt
    87                              <1> 
    88                              <1> .10E:
    89 00001039 8935[44100000]      <1>             mov     [.last_tss], esi                                ; save task that used FPU
    90                              <1> 
    91                              <1>             ; return registers
    92 0000103F 07                  <1>             pop     es
    93 00001040 1F                  <1>             pop     ds
    94 00001041 61                  <1>             popa
    95                              <1> 
    96 00001042 CF                  <1>             iret
    97                              <1> 
    98 00001043 00                  <1> ALIGN 4, db 0
    99 00001044 00000000            <1> .last_tss:  dd  0
   195                                  %include    "../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                             ; EBP +8 | waif == num of system interrupt
     5 00001048 55                  <1>             push    ebp
     6 00001049 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 0000104B 50                  <1>             push    eax
    10 0000104C 51                  <1>             push    ecx
    11                              <1> 
    12                              <1>             ; wait
    13 0000104D 8B4D08              <1>             mov     ecx, [ebp + 8]
    14 00001050 A1[54050000]        <1>             mov     eax, [TIMER_COUNT]
    15                              <1> 
    16                              <1> .10L:
    17 00001055 3905[54050000]      <1>             cmp     [TIMER_COUNT], eax                      ; while(TIMER != eax)
    18 0000105B 74F8                <1>             je      .10L
    19 0000105D 40                  <1>             inc     eax                                     ; eax++
    20 0000105E E2F5                <1>             loop    .10L                                    ; while(--ecx)
    21                              <1> 
    22                              <1>             ; return registers
    23 00001060 59                  <1>             pop     ecx
    24 00001061 58                  <1>             pop     eax
    25                              <1> 
    26                              <1>             ; destruct stakc frame
    27 00001062 89EC                <1>             mov     esp, ebp
    28 00001064 5D                  <1>             pop     ebp
    29                              <1> 
    30 00001065 C3                  <1>             ret
   196                                  
   197                                  
   198                                  ; PADDING
   199                                  
   200 00001066 00<rept>                            times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
