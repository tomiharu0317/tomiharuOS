     1                                  ;macro
     2                                  
     3                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ;ブートプログラムのロード位置
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ;セクタサイズ
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ;ブートプログラムのセクタ数
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
     4                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc   drive                               ;セクタ読み出し時のパラメータを構造体で定義
    18 00000000 <res 00000002>      <1>             .no         resw    1           ;ドライブ番号
    19 00000002 <res 00000002>      <1>             .cyln       resw    1           ;シリンダ
    20 00000004 <res 00000002>      <1>             .head       resw    1           ;ヘッド
    21 00000006 <res 00000002>      <1>             .sect       resw    1           ;セクタ
    22                              <1> endstruc
     5                                  
     6                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     7                                  
     8                                  [BITS 32]                                                       ; BIT 32 directive
     9                                  ; entry point
    10                                  
    11                                  kernel:
    12                                  
    13                                                  ; Get Font address
    14 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    15 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    16 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    17 0000000C C1E004                                  shl     eax, 4
    18 0000000F 01D8                                    add     eax, ebx
    19 00000011 A3[B0000000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    20                                  
    21                                                  ; display font and color_bar
    22 00000016 6A0D6A3FE806020000-                     cdecl   draw_font, 63, 13
    22 0000001F 6683C408           
    23 00000023 6A046A3FE889020000-                     cdecl   draw_color_bar, 63, 4
    23 0000002C 6683C408           
    24                                  
    25                                                  ; display string
    26 00000030 68[9D000000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    26 00000038 00006A0E6A19E82702-
    26 00000041 00006683C410       
    27                                  
    28                                                  ; ; display line
    29                                                  ; cdecl   draw_line, 100, 100,   0,   0, 0x0F
    30                                                  ; cdecl   draw_line, 100, 100, 200,   0, 0x0F
    31                                                  ; cdecl   draw_line, 100, 100, 200, 200, 0x0F
    32                                                  ; cdecl   draw_line, 100, 100,   0, 200, 0x0F
    33                                  
    34                                                  ; cdecl   draw_line, 100, 100,  50,   0, 0x02
    35                                                  ; cdecl   draw_line, 100, 100, 150,   0, 0x03
    36                                                  ; cdecl   draw_line, 100, 100, 150, 200, 0x04
    37                                                  ; cdecl   draw_line, 100, 100,  50, 200, 0x05
    38                                  
    39                                                  ; cdecl   draw_line, 100, 100,   0,  50, 0x02
    40                                                  ; cdecl   draw_line, 100, 100, 200,  50, 0x03
    41                                                  ; cdecl   draw_line, 100, 100, 200, 150, 0x04
    42                                                  ; cdecl   draw_line, 100, 100,   0, 150, 0x05
    43                                  
    44                                                  ; cdecl   draw_line, 100, 100, 100,   0, 0x0F
    45                                                  ; cdecl   draw_line, 100, 100, 200, 100, 0x0F
    46                                                  ; cdecl   draw_line, 100, 100, 100, 200, 0x0F
    47                                                  ; cdecl   draw_line, 100, 100,   0, 100, 0x0F
    48                                  
    49                                                  ; display rectangle
    50 00000047 6A0368C800000068C8-                     cdecl   draw_rect, 100, 100, 200, 200, 0x03
    50 00000050 0000006A646A64E84C-
    50 00000059 0400006683C414     
    51 00000060 6A0568960000006896-                     cdecl   draw_rect, 400, 250, 150, 150, 0x05
    51 00000069 00000068FA00000068-
    51 00000072 90010000E82D040000-
    51 0000007B 6683C414           
    52 0000007F 6A066A64682C010000-                     cdecl   draw_rect, 350, 400, 300, 100, 0x06
    52 00000088 6890010000685E0100-
    52 00000091 00E8110400006683C4-
    52 0000009A 14                 
    53                                  
    54                                                  ; End of Process
    55 0000009B EBFE                                    jmp     $
    56                                  ;data
    57 0000009D 2048656C6C6F2C206B-     .s0    db  " Hello, kernel! ", 0
    57 000000A6 65726E656C212000   
    58                                  
    59 000000AE 00<rept>                ALIGN 4, db 0
    60 000000B0 00000000                FONT_ADR:   dd 0
    61                                  
    62                                  
    63                                  ; modules
    64                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000000B4 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 000000B5 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 000000B7 50                  <1>             push    eax
    10 000000B8 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 000000B9 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 000000BC 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 000000BF B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 000000C1 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 000000C5 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 000000C7 5A                  <1>             pop     edx
    21 000000C8 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 000000C9 89EC                <1>             mov     esp, ebp
    25 000000CB 5D                  <1>             pop     ebp
    26                              <1> 
    27 000000CC C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 000000CD 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 000000CE 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 000000D0 50                  <1>             push    eax
    38 000000D1 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 000000D2 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 000000D5 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 000000D8 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 000000DA 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 000000DE 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 000000E0 5A                  <1>             pop     edx
    49 000000E1 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 000000E2 89EC                <1>             mov     esp, ebp
    53 000000E4 5D                  <1>             pop     ebp
    54                              <1> 
    55 000000E5 C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 000000E6 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 000000E7 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 000000E9 50                  <1>             push    eax
    66 000000EA 53                  <1>             push    ebx
    67 000000EB 51                  <1>             push    ecx
    68 000000EC 52                  <1>             push    edx
    69 000000ED 56                  <1>             push    esi
    70 000000EE 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 000000EF 8B7508              <1>             mov     esi, [ebp + 8]
    74 000000F2 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 000000F5 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 000000F9 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 000000FD 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 000000FF 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 00000102 FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 00000104 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 00000106 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 00000109 FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 0000010B FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 0000010C B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 00000111 AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 00000112 88C4                <1>             mov     ah, al
    96 00000114 F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 00000116 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 00000118 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 0000011E 7404                <1>             jz      .11F                                    ; {
   104 00000120 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 00000122 EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 00000124 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 00000126 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 00000128 8807                <1>             mov     [edi], al
   116                              <1> 
   117 0000012A 83C750              <1>             add     edi, 80
   118 0000012D E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 0000012F 5F                  <1>             pop     edi
   123 00000130 5E                  <1>             pop     esi
   124 00000131 5A                  <1>             pop     edx
   125 00000132 59                  <1>             pop     ecx
   126 00000133 5B                  <1>             pop     ebx
   127 00000134 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 00000135 89EC                <1>             mov     esp, ebp
   131 00000137 5D                  <1>             pop     ebp
   132                              <1> 
   133 00000138 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 00000139 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 0000013A 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 0000013C 50                  <1>             push    eax
   144 0000013D 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 0000013E 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 0000013F 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 00000142 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 00000146 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 0000014A 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 0000014C 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 0000014F FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 00000151 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 00000154 88C4                <1>             mov     ah, al
   163 00000156 F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 00000158 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 0000015A 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 0000015C 08E0                <1>             or      al, ah
   169 0000015E 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 00000160 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 00000161 5B                  <1>             pop     ebx
   177 00000162 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 00000163 89EC                <1>             mov     esp, ebp
   181 00000165 5D                  <1>             pop     ebp
   182                              <1> 
   183 00000166 C3                  <1>             ret
    65                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 00000167 55                  <1>             push    ebp                                         ;   +16 | color
     5 00000168 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 0000016A 53                  <1>             push    ebx
    10 0000016B 56                  <1>             push    esi
    11 0000016C 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; set copy_target font address
    14 0000016D 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    15 00000171 C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    16 00000174 0335[B0000000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    17                              <1> 
    18                              <1>             ; get copy_dest VRAM address
    19                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    20                              <1>             ; y:row, x:column
    21                              <1> 
    22 0000017A 8B7D0C              <1>             mov     edi, [ebp + 12]
    23 0000017D C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    24 00000180 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    25 00000187 037D08              <1>             add     edi, [ebp + 8]
    26                              <1> 
    27                              <1>             ; output a char of font
    28 0000018A 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    29                              <1> 
    30 0000018E 6A03E81FFFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    30 00000197 C404                <1>
    31 00000199 6A08E82DFFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    31 000001A2 C404                <1>
    32 000001A4 536A085756E838FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    32 000001AD FF6683C410          <1>
    33                              <1> 
    34 000001B2 6A02E8FBFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    34 000001BB C404                <1>
    35 000001BD 6A04E809FFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    35 000001C6 C404                <1>
    36 000001C8 536A045756E814FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    36 000001D1 FF6683C410          <1>
    37                              <1> 
    38 000001D6 6A01E8D7FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    38 000001DF C404                <1>
    39 000001E1 6A02E8E5FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    39 000001EA C404                <1>
    40 000001EC 536A025756E8F0FEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    40 000001F5 FF6683C410          <1>
    41                              <1> 
    42 000001FA 6A00E8B3FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    42 00000203 C404                <1>
    43 00000205 6A01E8C1FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    43 0000020E C404                <1>
    44 00000210 536A015756E8CCFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    44 00000219 FF6683C410          <1>
    45                              <1> 
    46                              <1>             ; return registers
    47 0000021E 5F                  <1>             pop     edi
    48 0000021F 5E                  <1>             pop     esi
    49 00000220 5B                  <1>             pop     ebx
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 00000221 89EC                <1>             mov     esp, ebp
    53 00000223 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000224 C3                  <1>             ret
    66                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000225 55                  <1>             push    ebp                                         ;   +12 | row
     5 00000226 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000228 50                  <1>             push    eax
     9 00000229 53                  <1>             push    ebx
    10 0000022A 51                  <1>             push    ecx
    11 0000022B 52                  <1>             push    edx
    12 0000022C 56                  <1>             push    esi
    13 0000022D 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 0000022E 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000231 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 00000234 B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 00000239 81F900010000        <1> .10L:       cmp     ecx, 256
    22 0000023F 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 00000241 89C8                <1>             mov     eax, ecx
    26 00000243 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 00000246 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 00000248 89CB                <1>             mov     ebx, ecx
    31 0000024A C1EB04              <1>             shr     ebx, 4
    32 0000024D 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 0000024F 516A075350E80EFFFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 00000258 FF6683C410          <1>
    35                              <1> 
    36 0000025D 41                  <1>             inc     ecx
    37 0000025E EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 00000260 5F                  <1>             pop     edi
    42 00000261 5E                  <1>             pop     esi
    43 00000262 5A                  <1>             pop     edx
    44 00000263 59                  <1>             pop     ecx
    45 00000264 5B                  <1>             pop     ebx
    46 00000265 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 00000266 89EC                <1>             mov     esp, ebp
    50 00000268 5D                  <1>             pop     ebp
    51                              <1> 
    52 00000269 C3                  <1>             ret
    67                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000026A 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 0000026B 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 0000026D 50                  <1>             push    eax
    11 0000026E 53                  <1>             push    ebx
    12 0000026F 51                  <1>             push    ecx
    13 00000270 52                  <1>             push    edx
    14 00000271 56                  <1>             push    esi
    15 00000272 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000273 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 00000276 8B550C              <1>             mov     edx, [ebp + 12]
    20 00000279 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 0000027D 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 00000280 FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 00000281 AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 00000282 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 00000284 7425                <1>             je      .10E
    29                              <1> 
    30 00000286 50535251E8D8FEFFFF- <1>             cdecl   draw_char, ecx, edx, ebx, eax
    30 0000028F 6683C410            <1>
    31                              <1> 
    32 00000293 41                  <1>             inc     ecx
    33 00000294 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    34 00000297 7C10                <1>             jl      .12E                                        ; {
    35 00000299 B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    36 0000029E 42                  <1>             inc     edx                                         ;   EDX++;
    37 0000029F 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    38 000002A2 7C05                <1>             jl      .12E                                        ;   {
    39 000002A4 BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    40                              <1>                                                                 ;   }
    41                              <1> .12E:                                                           ; }
    42 000002A9 EBD6                <1>             jmp     .10L
    43                              <1> .10E:
    44                              <1> 
    45                              <1>             ; return registers
    46 000002AB 5F                  <1>             pop     edi
    47 000002AC 5E                  <1>             pop     esi
    48 000002AD 5A                  <1>             pop     edx
    49 000002AE 59                  <1>             pop     ecx
    50 000002AF 5B                  <1>             pop     ebx
    51 000002B0 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 000002B1 89EC                <1>             mov     esp, ebp
    55 000002B3 5D                  <1>             pop     ebp
    56                              <1> 
    57 000002B4 C3                  <1>             ret
    68                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000002B5 55                  <1>             push    ebp                                             ;   +12 | row
     5 000002B6 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 000002B8 50                  <1>             push    eax
     9 000002B9 53                  <1>             push    ebx
    10 000002BA 51                  <1>             push    ecx
    11 000002BB 52                  <1>             push    edx
    12 000002BC 56                  <1>             push    esi
    13 000002BD 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 000002BE 8B7508              <1>             mov     esi, [ebp + 8]
    17 000002C1 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 000002C4 B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 000002C9 83F910              <1> .10L:       cmp     ecx, 16
    22 000002CC 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 000002CE 89C8                <1>             mov     eax, ecx
    26 000002D0 83E001              <1>             and     eax, 0x01
    27 000002D3 C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 000002D6 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 000002D8 89CB                <1>             mov     ebx, ecx
    32 000002DA D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 000002DC 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 000002DE 89CA                <1>             mov     edx, ecx
    37 000002E0 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 000002E2 8B92[0F030000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 000002E8 68[06030000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 000002F0 E875FFFFFF6683C410  <1>
    41                              <1> 
    42 000002F9 41                  <1>             inc     ecx
    43 000002FA EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 000002FC 5F                  <1>             pop     edi
    48 000002FD 5E                  <1>             pop     esi
    49 000002FE 5A                  <1>             pop     edx
    50 000002FF 59                  <1>             pop     ecx
    51 00000300 5B                  <1>             pop     ebx
    52 00000301 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 00000302 89E5                <1>             mov     ebp, esp
    56 00000304 5D                  <1>             pop     ebp
    57                              <1> 
    58 00000305 C3                  <1>             ret
    59                              <1> 
    60 00000306 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 0000030F 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 00000313 00010009            <1>             dw  0x0100, 0x0900
    64 00000317 0002000A            <1>             dw  0x0200, 0x0A00
    65 0000031B 0003000B            <1>             dw  0x0300, 0x0B00
    66 0000031F 0004000C            <1>             dw  0x0400, 0x0C00
    67 00000323 0005000D            <1>             dw  0x0500, 0x0D00
    68 00000327 0006000E            <1>             dw  0x0600, 0x0E00
    69 0000032B 0007000F            <1>             dw  0x0700, 0x0F00
    69                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 0000032F 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 00000330 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 00000332 50                  <1>             push    eax
     9 00000333 53                  <1>             push    ebx
    10 00000334 51                  <1>             push    ecx
    11 00000335 52                  <1>             push    edx
    12 00000336 56                  <1>             push    esi
    13 00000337 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 00000338 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 0000033B C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 0000033E 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 00000345 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 00000348 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 0000034A C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 0000034D 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 0000034F 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 00000352 BB80000000          <1>             mov     ebx, 0x80
    35 00000357 D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 00000359 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 0000035C 6A03E851FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 00000365 C404                <1>
    43 00000367 6A08E85FFDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 00000370 C404                <1>
    44 00000372 516A085753E8BDFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 0000037B FF6683C410          <1>
    45                              <1> 
    46 00000380 6A02E82DFDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 00000389 C404                <1>
    47 0000038B 6A04E83BFDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 00000394 C404                <1>
    48 00000396 516A045753E899FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 0000039F FF6683C410          <1>
    49                              <1> 
    50 000003A4 6A01E809FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 000003AD C404                <1>
    51 000003AF 6A02E817FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 000003B8 C404                <1>
    52 000003BA 516A025753E875FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 000003C3 FF6683C410          <1>
    53                              <1> 
    54 000003C8 6A00E8E5FCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 000003D1 C404                <1>
    55 000003D3 6A01E8F3FCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 000003DC C404                <1>
    56 000003DE 516A015753E851FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 000003E7 FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 000003EC 5F                  <1>             pop     edi
    60 000003ED 5E                  <1>             pop     esi
    61 000003EE 5A                  <1>             pop     edx
    62 000003EF 59                  <1>             pop     ecx
    63 000003F0 5B                  <1>             pop     ebx
    64 000003F1 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 000003F2 89EC                <1>             mov     esp, ebp
    68 000003F4 5D                  <1>             pop     ebp
    69                              <1> 
    70 000003F5 C3                  <1>             ret
    70                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 000003F6 55                  <1>             push    ebp
    22 000003F7 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 000003F9 6A00                <1>             push    dword 0
    25 000003FB 6A00                <1>             push    dword 0
    26 000003FD 6A00                <1>             push    dword 0
    27 000003FF 6A00                <1>             push    dword 0
    28 00000401 6A00                <1>             push    dword 0
    29 00000403 6A00                <1>             push    dword 0
    30 00000405 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 00000407 50                  <1>             push    eax
    34 00000408 53                  <1>             push    ebx
    35 00000409 51                  <1>             push    ecx
    36 0000040A 52                  <1>             push    edx
    37 0000040B 56                  <1>             push    esi
    38 0000040C 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 0000040D 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 00000410 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 00000413 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 00000415 7D09                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 00000417 F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 00000419 BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 0000041E EB05                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    50 00000420 BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 00000425 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 00000428 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 0000042B 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 0000042D 7D09                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 0000042F F7DA                <1>             neg     edx                                             ;   height *= -1
    60 00000431 BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 00000436 EB05                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    63 00000438 BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 0000043D 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 00000440 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 00000443 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 00000446 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 00000449 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 0000044C 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 0000044F 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 00000451 7F08                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 00000453 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 00000456 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 00000459 EB06                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    93                              <1>                                                                     ;   // y axis is base one.
    94 0000045B 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 0000045E 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 00000461 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 00000464 83F900              <1>             cmp     ecx, 0
   101 00000467 7505                <1>             jnz     .30E
   102 00000469 B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   109 0000046E FF7518FF75ECFF75F8- <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   109 00000477 E8B3FEFFFF6683C40C  <1>
   110                              <1> 
   111                              <1>             ; update base axis(1 dot)
   112 00000480 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   113 00000483 0106                <1>             add     [esi - 0], eax
   114                              <1> 
   115                              <1>             ; update relative axis
   116 00000485 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   117 00000488 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   118                              <1> 
   119 0000048B 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   120                              <1> 
   121 0000048E 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   122 00000490 7C07                <1>             jl      .52E                                            ; {
   123 00000492 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   124                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   125 00000494 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   126 00000497 011F                <1>             add     [edi - 0], ebx
   127                              <1> .52E:                                                               ; }
   128                              <1> 
   129 00000499 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   130                              <1> 
   131 0000049C E2D0                <1>             loop    .50L
   132                              <1> .50E:
   133                              <1> 
   134                              <1>             ; return registers
   135 0000049E 5F                  <1>             pop     edi
   136 0000049F 5E                  <1>             pop     esi
   137 000004A0 5A                  <1>             pop     edx
   138 000004A1 59                  <1>             pop     ecx
   139 000004A2 5B                  <1>             pop     ebx
   140 000004A3 58                  <1>             pop     eax
   141                              <1> 
   142                              <1>             ; destruct stack frame
   143 000004A4 89EC                <1>             mov     esp, ebp
   144 000004A6 5D                  <1>             pop     ebp
   145                              <1> 
   146 000004A7 C3                  <1>             ret
    71                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 000004A8 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 000004A9 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 000004AB 50                  <1>             push    eax
    11 000004AC 53                  <1>             push    ebx
    12 000004AD 51                  <1>             push    ecx
    13 000004AE 52                  <1>             push    edx
    14 000004AF 56                  <1>             push    esi
    15 000004B0 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 000004B1 8B4508              <1>             mov     eax, [ebp +  8]
    19 000004B4 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 000004B7 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 000004BA 8B5514              <1>             mov     edx, [ebp + 20]
    22 000004BD 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 000004C0 39C8                <1>             cmp     eax, ecx
    26 000004C2 7C01                <1>             jl      .10E
    27 000004C4 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    29 000004C5 39D3                <1>             cmp     ebx, edx
    30 000004C7 7C02                <1>             jl      .20E
    31 000004C9 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    33                              <1> 
    34                              <1>             ; draw rectangle
    35 000004CB 5653515350E821FFFF- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35 000004D4 FF6683C414          <1>
    36 000004D9 5652505350E813FFFF- <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36 000004E2 FF6683C414          <1>
    37                              <1> 
    38 000004E7 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39 000004E8 5652515250E804FFFF- <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39 000004F1 FF6683C414          <1>
    40 000004F6 42                  <1>             inc     edx
    41                              <1> 
    42 000004F7 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43 000004F8 5652515351E8F4FEFF- <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43 00000501 FF6683C414          <1>
    44                              <1> 
    45                              <1>             ; return registers
    46 00000506 5F                  <1>             pop     edi
    47 00000507 5E                  <1>             pop     esi
    48 00000508 5A                  <1>             pop     edx
    49 00000509 59                  <1>             pop     ecx
    50 0000050A 5B                  <1>             pop     ebx
    51 0000050B 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 0000050C 89EC                <1>             mov     esp, ebp
    55 0000050E 5D                  <1>             pop     ebp
    56                              <1> 
    57 0000050F C3                  <1>             ret
    72                                  
    73                                  
    74                                                  ; Padding
    75                                  
    76 00000510 00<rept>                                times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
