     1                                  %define     USE_SYSTEM_CALL
     2                                  %define     USE_TEST_AND_SET
     3                                  
     4                                  ;macro
     5                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1>         SP_TASK_2       equ     STACK_BASE + (STACK_SIZE * 3)
    24                              <1>         SP_TASK_3       equ     STACK_BASE + (STACK_SIZE * 4)
    25                              <1> 
    26                              <1>         CR3_BASE        equ     0x0010_5000                     ; page conversion table: for task 3
     6                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
    56                              <1> 
    57                              <1> %macro  set_desc 2-*
    58                              <1>             push    eax
    59                              <1>             push    edi
    60                              <1> 
    61                              <1>             mov     edi, %1                             ; descriptor address
    62                              <1>             mov     eax, %2                             ; base address
    63                              <1> 
    64                              <1>         %if 3 == %0
    65                              <1>             mov     [edi + 0], %3                       ; limit
    66                              <1>         %endif
    67                              <1> 
    68                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 4], al                       ; base([23:16])
    71                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    72                              <1> 
    73                              <1>             pop     edi
    74                              <1>             pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate 2-*
    78                              <1>             push    eax
    79                              <1>             push    edi
    80                              <1> 
    81                              <1>             mov     edi, %1                             ; descriptor address
    82                              <1>             mov     eax, %2                             ; base address
    83                              <1> 
    84                              <1>             mov     [edi + 0], ax                       ; base([15:0])
    85                              <1>             shr     eax, 16
    86                              <1>             mov     [edi + 6], ax                       ; base([31:16])
    87                              <1> 
    88                              <1>             pop     edi
    89                              <1>             pop     eax
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> struc   rose
    93 00000000 <res 00000004>      <1>             .x0         resd    1                       ; upper left coordinate : X0
    94 00000004 <res 00000004>      <1>             .y0         resd    1                       ; upper left coordinate : Y0
    95 00000008 <res 00000004>      <1>             .x1         resd    1                       ; lower right coordinate : X1
    96 0000000C <res 00000004>      <1>             .y1         resd    1                       ; lower right coordinate : Y1
    97                              <1> 
    98 00000010 <res 00000004>      <1>             .n          resd    1                       ; variable:n
    99 00000014 <res 00000004>      <1>             .d          resd    1                       ; variable:d
   100                              <1> 
   101 00000018 <res 00000004>      <1>             .color_x    resd    1                       ; display color : X axis
   102 0000001C <res 00000004>      <1>             .color_y    resd    1                       ; display color : Y axis
   103 00000020 <res 00000004>      <1>             .color_z    resd    1                       ; display color : frame
   104 00000024 <res 00000004>      <1>             .color_s    resd    1                       ; display color : char
   105 00000028 <res 00000004>      <1>             .color_f    resd    1                       ; display color : graph display color
   106 0000002C <res 00000004>      <1>             .color_b    resd    1                       ; display color : graph erase color
   107                              <1> 
   108 00000030 <res 00000010>      <1>             .title      resb    16                      ; title
   109                              <1> endstruc
   110                              <1> 
   111                              <1> 
     7                                  
     8                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     9                                  
    10                                  [BITS 32]                                                       ; BIT 32 directive
    11                                  ; entry point
    12                                  
    13                                  kernel:
    14                                  
    15                                                  ; Get Font address
    16 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    17 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    18 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    19 0000000C C1E004                                  shl     eax, 4
    20 0000000F 01D8                                    add     eax, ebx
    21 00000011 A3[38020000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    22                                  
    23                                                  ; set up TSS descriptor
    24                                                  set_desc    GDT.tss_0, TSS_0
    24 00000016 50                  <1>  push eax
    24 00000017 57                  <1>  push edi
    24                              <1> 
    24 00000018 BF[C0050000]        <1>  mov edi, %1
    24 0000001D B8[40020000]        <1>  mov eax, %2
    24                              <1> 
    24                              <1>  %if 3 == %0
    24                              <1>  mov [edi + 0], %3
    24                              <1>  %endif
    24                              <1> 
    24 00000022 66894702            <1>  mov [edi + 2], ax
    24 00000026 C1E810              <1>  shr eax, 16
    24 00000029 884704              <1>  mov [edi + 4], al
    24 0000002C 886707              <1>  mov [edi + 7], ah
    24                              <1> 
    24 0000002F 5F                  <1>  pop edi
    24 00000030 58                  <1>  pop eax
    25                                                  set_desc    GDT.tss_1, TSS_1
    25 00000031 50                  <1>  push eax
    25 00000032 57                  <1>  push edi
    25                              <1> 
    25 00000033 BF[C8050000]        <1>  mov edi, %1
    25 00000038 B8[18030000]        <1>  mov eax, %2
    25                              <1> 
    25                              <1>  %if 3 == %0
    25                              <1>  mov [edi + 0], %3
    25                              <1>  %endif
    25                              <1> 
    25 0000003D 66894702            <1>  mov [edi + 2], ax
    25 00000041 C1E810              <1>  shr eax, 16
    25 00000044 884704              <1>  mov [edi + 4], al
    25 00000047 886707              <1>  mov [edi + 7], ah
    25                              <1> 
    25 0000004A 5F                  <1>  pop edi
    25 0000004B 58                  <1>  pop eax
    26                                                  set_desc    GDT.tss_2, TSS_2
    26 0000004C 50                  <1>  push eax
    26 0000004D 57                  <1>  push edi
    26                              <1> 
    26 0000004E BF[D0050000]        <1>  mov edi, %1
    26 00000053 B8[F0030000]        <1>  mov eax, %2
    26                              <1> 
    26                              <1>  %if 3 == %0
    26                              <1>  mov [edi + 0], %3
    26                              <1>  %endif
    26                              <1> 
    26 00000058 66894702            <1>  mov [edi + 2], ax
    26 0000005C C1E810              <1>  shr eax, 16
    26 0000005F 884704              <1>  mov [edi + 4], al
    26 00000062 886707              <1>  mov [edi + 7], ah
    26                              <1> 
    26 00000065 5F                  <1>  pop edi
    26 00000066 58                  <1>  pop eax
    27                                                  set_desc    GDT.tss_3, TSS_3
    27 00000067 50                  <1>  push eax
    27 00000068 57                  <1>  push edi
    27                              <1> 
    27 00000069 BF[D8050000]        <1>  mov edi, %1
    27 0000006E B8[C8040000]        <1>  mov eax, %2
    27                              <1> 
    27                              <1>  %if 3 == %0
    27                              <1>  mov [edi + 0], %3
    27                              <1>  %endif
    27                              <1> 
    27 00000073 66894702            <1>  mov [edi + 2], ax
    27 00000077 C1E810              <1>  shr eax, 16
    27 0000007A 884704              <1>  mov [edi + 4], al
    27 0000007D 886707              <1>  mov [edi + 7], ah
    27                              <1> 
    27 00000080 5F                  <1>  pop edi
    27 00000081 58                  <1>  pop eax
    28                                  
    29                                  
    30                                                  ; set up Call Gate
    31                                                  set_gate    GDT.call_gate, call_gate
    31 00000082 50                  <1>  push eax
    31 00000083 57                  <1>  push edi
    31                              <1> 
    31 00000084 BF[E0050000]        <1>  mov edi, %1
    31 00000089 B8[54120000]        <1>  mov eax, %2
    31                              <1> 
    31 0000008E 668907              <1>  mov [edi + 0], ax
    31 00000091 C1E810              <1>  shr eax, 16
    31 00000094 66894706            <1>  mov [edi + 6], ax
    31                              <1> 
    31 00000098 5F                  <1>  pop edi
    31 00000099 58                  <1>  pop eax
    32                                  
    33                                                  ; set up LDT
    34                                                  set_desc    GDT.ldt, LDT, word LDT_LIMIT        ; descriptor address/base address/limit
    34 0000009A 50                  <1>  push eax
    34 0000009B 57                  <1>  push edi
    34                              <1> 
    34 0000009C BF[B8050000]        <1>  mov edi, %1
    34 000000A1 B8[EE050000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if 3 == %0
    34 000000A6 66C7074700          <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 000000AB 66894702            <1>  mov [edi + 2], ax
    34 000000AF C1E810              <1>  shr eax, 16
    34 000000B2 884704              <1>  mov [edi + 4], al
    34 000000B5 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 000000B8 5F                  <1>  pop edi
    34 000000B9 58                  <1>  pop eax
    35                                  
    36                                                  ; load GDTR (resetting)
    37 000000BA 0F0115[E8050000]                        lgdt        [GDTR]
    38                                  
    39                                                  ; set up stack
    40 000000C1 BC00341000                              mov     esp, SP_TASK_0                          ; set up stack for Task0
    41                                  
    42                                                  ; recognize Kernel as Task0
    43 000000C6 66B82000                                mov     ax, SS_TASK_0
    44 000000CA 0F00D8                                  ltr     ax                                      ; initialize TR
    45                                  
    46                                                  ; initialize interrupt vector
    47 000000CD E8540E0000                              cdecl   init_int                                ; initialize Interrupt Descriptor Table
    48 000000D2 E8D50F0000                              cdecl   init_pic                                ; initialize Programmable Interrupt Controler
    49 000000D7 E894050000                              cdecl   init_page                               ; initialize Paging
    50                                  
    51                                                  set_vect    0x00, int_zero_div                  ; define interrupt process: Zero div
    51 000000DC 50                  <1>  push eax
    51 000000DD 57                  <1>  push edi
    51                              <1> 
    51 000000DE BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    51 000000E3 B8[8E100000]        <1>  mov eax, %2
    51                              <1> 
    51                              <1>  %if 3 == %0
    51                              <1>  mov [edi + 4], %3
    51                              <1>  %endif
    51                              <1> 
    51 000000E8 668907              <1>  mov [edi + 0], ax
    51 000000EB C1E810              <1>  shr eax, 16
    51 000000EE 66894706            <1>  mov [edi + 6], ax
    51                              <1> 
    51 000000F2 5F                  <1>  pop edi
    51 000000F3 58                  <1>  pop eax
    52                                                  set_vect    0x07, int_nm                        ; define interrupt process: device unavailable exception
    52 000000F4 50                  <1>  push eax
    52 000000F5 57                  <1>  push edi
    52                              <1> 
    52 000000F6 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    52 000000FB B8[F1120000]        <1>  mov eax, %2
    52                              <1> 
    52                              <1>  %if 3 == %0
    52                              <1>  mov [edi + 4], %3
    52                              <1>  %endif
    52                              <1> 
    52 00000100 668907              <1>  mov [edi + 0], ax
    52 00000103 C1E810              <1>  shr eax, 16
    52 00000106 66894706            <1>  mov [edi + 6], ax
    52                              <1> 
    52 0000010A 5F                  <1>  pop edi
    52 0000010B 58                  <1>  pop eax
    53                                                  set_vect    0x20, int_timer                     ; define interrupt process: Timer
    53 0000010C 50                  <1>  push eax
    53 0000010D 57                  <1>  push edi
    53                              <1> 
    53 0000010E BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    53 00000113 B8[81060000]        <1>  mov eax, %2
    53                              <1> 
    53                              <1>  %if 3 == %0
    53                              <1>  mov [edi + 4], %3
    53                              <1>  %endif
    53                              <1> 
    53 00000118 668907              <1>  mov [edi + 0], ax
    53 0000011B C1E810              <1>  shr eax, 16
    53 0000011E 66894706            <1>  mov [edi + 6], ax
    53                              <1> 
    53 00000122 5F                  <1>  pop edi
    53 00000123 58                  <1>  pop eax
    54                                                  set_vect    0x21, int_keyboard                  ; define interrupt process: KBC
    54 00000124 50                  <1>  push eax
    54 00000125 57                  <1>  push edi
    54                              <1> 
    54 00000126 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    54 0000012B B8[CE110000]        <1>  mov eax, %2
    54                              <1> 
    54                              <1>  %if 3 == %0
    54                              <1>  mov [edi + 4], %3
    54                              <1>  %endif
    54                              <1> 
    54 00000130 668907              <1>  mov [edi + 0], ax
    54 00000133 C1E810              <1>  shr eax, 16
    54 00000136 66894706            <1>  mov [edi + 6], ax
    54                              <1> 
    54 0000013A 5F                  <1>  pop edi
    54 0000013B 58                  <1>  pop eax
    55                                                  set_vect    0x28, int_rtc                       ; define interrupt process: RTC
    55 0000013C 50                  <1>  push eax
    55 0000013D 57                  <1>  push edi
    55                              <1> 
    55 0000013E BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    55 00000143 B8[D7100000]        <1>  mov eax, %2
    55                              <1> 
    55                              <1>  %if 3 == %0
    55                              <1>  mov [edi + 4], %3
    55                              <1>  %endif
    55                              <1> 
    55 00000148 668907              <1>  mov [edi + 0], ax
    55 0000014B C1E810              <1>  shr eax, 16
    55 0000014E 66894706            <1>  mov [edi + 6], ax
    55                              <1> 
    55 00000152 5F                  <1>  pop edi
    55 00000153 58                  <1>  pop eax
    56                                                  set_vect    0x81, trap_gate_81, word 0xEF00     ; define trap gate        : display a char
    56 00000154 50                  <1>  push eax
    56 00000155 57                  <1>  push edi
    56                              <1> 
    56 00000156 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    56 0000015B B8[84120000]        <1>  mov eax, %2
    56                              <1> 
    56                              <1>  %if 3 == %0
    56 00000160 66C7470400EF        <1>  mov [edi + 4], %3
    56                              <1>  %endif
    56                              <1> 
    56 00000166 668907              <1>  mov [edi + 0], ax
    56 00000169 C1E810              <1>  shr eax, 16
    56 0000016C 66894706            <1>  mov [edi + 6], ax
    56                              <1> 
    56 00000170 5F                  <1>  pop edi
    56 00000171 58                  <1>  pop eax
    57                                                  set_vect    0x82, trap_gate_82, word 0xEF00     ; define trap gate        : draw pixel
    57 00000172 50                  <1>  push eax
    57 00000173 57                  <1>  push edi
    57                              <1> 
    57 00000174 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    57 00000179 B8[92120000]        <1>  mov eax, %2
    57                              <1> 
    57                              <1>  %if 3 == %0
    57 0000017E 66C7470400EF        <1>  mov [edi + 4], %3
    57                              <1>  %endif
    57                              <1> 
    57 00000184 668907              <1>  mov [edi + 0], ax
    57 00000187 C1E810              <1>  shr eax, 16
    57 0000018A 66894706            <1>  mov [edi + 6], ax
    57                              <1> 
    57 0000018E 5F                  <1>  pop edi
    57 0000018F 58                  <1>  pop eax
    58                                  
    59                                                  ; permit interrupt by device
    60 00000190 6A10E8690F00006683-                     cdecl   rtc_int_en, 0x10                        ; Updata-Ended Interrupt Enable
    60 00000199 C404               
    61 0000019B E86C100000                              cdecl   int_en_timer0
    62                                  
    63                                                  ; set up IMR(Interrupt Mask Register)
    64                                                  outp    0x21, 0b1111_1000                       ; interrupt enable: slave PIC/KBC/Timer     // master
    64 000001A0 B0F8                <1>  mov al, %2
    64 000001A2 E621                <1>  out %1, al
    65                                                  outp    0xA1, 0b1111_1110                       ; interrupt enable: RTC                     // slave
    65 000001A4 B0FE                <1>  mov al, %2
    65 000001A6 E6A1                <1>  out %1, al
    66                                  
    67                                                  ; register page table
    68 000001A8 B800501000                              mov     eax, CR3_BASE
    69 000001AD 0F22D8                                  mov     cr3, eax
    70                                  
    71                                                  ; enable paging
    72 000001B0 0F20C0                                  mov     eax, cr0
    73 000001B3 0D00000080                              or      eax, (1 << 31)                          ; CR0 |= PG
    74 000001B8 0F22C0                                  mov     cr0, eax
    75 000001BB EB00                                    jmp     $ + 2                                   ; FLUSH()
    76                                  
    77                                                  ; CPU interrupt enable
    78 000001BD FB                                      sti
    79                                  
    80                                                  ; display font and color_bar
    81 000001BE 6A0D6A3FE839090000-                     cdecl   draw_font, 63, 13
    81 000001C7 6683C408           
    82 000001CB 6A046A3FE8B1090000-                     cdecl   draw_color_bar, 63, 4
    82 000001D4 6683C408           
    83                                  
    84                                                  ; display string
    85 000001D8 68[20020000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    85 000001E0 00006A0E6A19E85A09-
    85 000001E9 00006683C410       
    86                                  
    87                                  ;---------------------------------------------------------------------------
    88                                  ; default multitask
    89                                  ;---------------------------------------------------------------------------
    90                                  
    91                                  
    92                                  ;                 ; call Task
    93                                  ;                 ; call    SS_TASK_1:0
    94                                  
    95                                  ; .10L:
    96                                  
    97                                  ;                 ; display time
    98                                  ;                 mov     eax, [RTC_TIME]
    99                                  ;                 cdecl   draw_time, 72, 0, 0x0700, eax
   100                                  
   101                                  
   102                                  ;                 ; get key code
   103                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   104                                  ;                 cmp     eax, 0
   105                                  ;                 je      .10E
   106                                  
   107                                  ;                 ; display key code
   108                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   109                                  ; .10E:
   110                                  
   111                                  ;                 ; draw rotation bar
   112                                  ;                 cdecl   draw_rotation_bar
   113                                  
   114                                  ;                 jmp     .10L
   115                                  
   116                                  ;----------------------------------------------------------------------------
   117                                  
   118                                  
   119                                  ;----------------------------------------------------------------------------
   120                                  ; non-preemptive multitask
   121                                  ;----------------------------------------------------------------------------
   122                                  
   123                                  ; .10L:
   124                                  
   125                                  ;                 ; call task
   126                                  ;                 jmp     SS_TASK_1:0                             ; jump to Task1
   127                                  
   128                                  ;                 ; draw rotation bar
   129                                  ;                 cdecl   draw_rotation_bar
   130                                  
   131                                  ;                 ; get key code
   132                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   133                                  ;                 cmp     eax, 0
   134                                  ;                 je      .10E
   135                                  
   136                                  ;                 ; display key code
   137                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   138                                  ; .10E:
   139                                  
   140                                  ;                 jmp     .10L
   141                                  
   142                                  ;-----------------------------------------------------------------------------
   143                                  
   144                                  ;----------------------------------------------------------------------------
   145                                  ; preemptive multitask
   146                                  ;----------------------------------------------------------------------------
   147                                  
   148                                  .10L:
   149                                  
   150                                                  ; draw rotation bar
   151 000001EF E827100000                              cdecl   draw_rotation_bar
   152                                  
   153                                                  ; get key code
   154 000001F4 68[34020000]68-                         cdecl   ring_rd, _KEY_BUFF, .int_key
   154 000001FA [F4110000]E8110F00-
   154 00000202 006683C408         
   155 00000207 83F800                                  cmp     eax, 0
   156 0000020A 7412                                    je      .10E
   157                                  
   158                                                  ; display key code
   159 0000020C 68[F4110000]6A1D6A-                     cdecl   draw_key, 2, 29, _KEY_BUFF
   159 00000214 02E8610F00006683C4-
   159 0000021D 0C                 
   160                                  .10E:
   161                                  
   162 0000021E EBCF                                    jmp     .10L
   163                                  
   164                                  ;-----------------------------------------------------------------------------
   165                                  
   166                                  ;data
   167 00000220 2048656C6C6F2C206B-     .s0:    db  " Hello, kernel! ", 0
   167 00000229 65726E656C212000   
   168                                  
   169 00000231 00<rept>                ALIGN 4, db 0
   170 00000234 00000000                .int_key:   dd 0
   171                                  
   172                                  ALIGN 4, db 0
   173 00000238 00000000                FONT_ADR:   dd 0
   174 0000023C 00000000                RTC_TIME:   dd 0
   175                                  
   176                                  
   177                                  ; TASKS
   178                                  %include    "descriptor.s"
     1                              <1> ;-----------------------------------------------------------------------
     2                              <1> ; TSS
     3                              <1> ;-----------------------------------------------------------------------
     4                              <1> 
     5                              <1> TSS_0:
     6 00000240 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
     7 00000244 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                             ;*  4: ESP0
     8 00000248 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
     9 0000024C 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    10 00000250 00000000            <1> .ss1:           dd  0                                           ;* 16:
    11 00000254 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    12 00000258 00000000            <1> .ss2:           dd  0                                           ;* 24:
    13 0000025C 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    14 00000260 00000000            <1> .eip:           dd  0                                           ;  32: EIP
    15 00000264 00000000            <1> .eflags:        dd  0                                           ;  36: EFLAGS
    16 00000268 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    17 0000026C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    18 00000270 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    19 00000274 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    20 00000278 00000000            <1> .esp:           dd  0                                           ;  56: ESP
    21 0000027C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    22 00000280 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    23 00000284 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    24 00000288 00000000            <1> .es:            dd  0                                           ;  72: ES
    25 0000028C 00000000            <1> .cs:            dd  0                                           ;  76: CS
    26 00000290 00000000            <1> .ss:            dd  0                                           ;  80: SS
    27 00000294 00000000            <1> .ds:            dd  0                                           ;  84: DS
    28 00000298 00000000            <1> .fs:            dd  0                                           ;  88: FS
    29 0000029C 00000000            <1> .gs:            dd  0                                           ;  92: GS
    30 000002A0 00000000            <1> .ldt:           dd  0                                           ;* 96: LDT segment selector
    31 000002A4 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    32 000002A8 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    33                              <1> 
    34                              <1> TSS_1:
    35 00000318 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    36 0000031C 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                             ;*  4: ESP0
    37 00000320 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    38 00000324 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    39 00000328 00000000            <1> .ss1:           dd  0                                           ;* 16:
    40 0000032C 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    41 00000330 00000000            <1> .ss2:           dd  0                                           ;* 24:
    42 00000334 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    43 00000338 [DC060000]          <1> .eip:           dd  task_1                                      ;  32: EIP
    44 0000033C 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    45 00000340 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    46 00000344 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    47 00000348 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    48 0000034C 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    49 00000350 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56: ESP
    50 00000354 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    51 00000358 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    52 0000035C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    53 00000360 27000000            <1> .es:            dd  DS_TASK_1                                   ;  72: ES
    54 00000364 1F000000            <1> .cs:            dd  CS_TASK_1                                   ;  76: CS
    55 00000368 27000000            <1> .ss:            dd  DS_TASK_1                                   ;  80: SS
    56 0000036C 27000000            <1> .ds:            dd  DS_TASK_1                                   ;  84: DS
    57 00000370 27000000            <1> .fs:            dd  DS_TASK_1                                   ;  88: FS
    58 00000374 27000000            <1> .gs:            dd  DS_TASK_1                                   ;  92: GS
    59 00000378 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    60 0000037C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    61 00000380 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    62                              <1> 
    63                              <1> 
    64                              <1> TSS_2:
    65 000003F0 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    66 000003F4 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                             ;*  4: ESP0
    67 000003F8 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    68 000003FC 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    69 00000400 00000000            <1> .ss1:           dd  0                                           ;* 16:
    70 00000404 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    71 00000408 00000000            <1> .ss2:           dd  0                                           ;* 24:
    72 0000040C 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    73 00000410 [11070000]          <1> .eip:           dd  task_2                                      ;  32: EIP
    74 00000414 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    75 00000418 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    76 0000041C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    77 00000420 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    78 00000424 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    79 00000428 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56: ESP
    80 0000042C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    81 00000430 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    82 00000434 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    83 00000438 37000000            <1> .es:            dd  DS_TASK_2                                   ;  72: ES
    84 0000043C 2F000000            <1> .cs:            dd  CS_TASK_2                                   ;  76: CS
    85 00000440 37000000            <1> .ss:            dd  DS_TASK_2                                   ;  80: SS
    86 00000444 37000000            <1> .ds:            dd  DS_TASK_2                                   ;  84: DS
    87 00000448 37000000            <1> .fs:            dd  DS_TASK_2                                   ;  88: FS
    88 0000044C 37000000            <1> .gs:            dd  DS_TASK_2                                   ;  92: GS
    89 00000450 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    90 00000454 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    91 00000458 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    92                              <1> 
    93                              <1> TSS_3:
    94 000004C8 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    95 000004CC 003E1000            <1> .esp0:          dd  SP_TASK_3 - 512                             ;*  4: ESP0
    96 000004D0 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    97 000004D4 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    98 000004D8 00000000            <1> .ss1:           dd  0                                           ;* 16:
    99 000004DC 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   100 000004E0 00000000            <1> .ss2:           dd  0                                           ;* 24:
   101 000004E4 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
   102 000004E8 [2C080000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   103 000004EC 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   104 000004F0 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   105 000004F4 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   106 000004F8 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   107 000004FC 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   108 00000500 00401000            <1> .esp:           dd  SP_TASK_3                                           ;  56: ESP
   109 00000504 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   110 00000508 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   111 0000050C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   112 00000510 47000000            <1> .es:            dd  DS_TASK_3                                   ;  72: ES
   113 00000514 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   114 00000518 47000000            <1> .ss:            dd  DS_TASK_3                                   ;  80: SS
   115 0000051C 47000000            <1> .ds:            dd  DS_TASK_3                                   ;  84: DS
   116 00000520 47000000            <1> .fs:            dd  DS_TASK_3                                   ;  88: FS
   117 00000524 47000000            <1> .gs:            dd  DS_TASK_3                                   ;  92: GS
   118 00000528 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   119 0000052C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   120 00000530 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   121                              <1> 
   122                              <1> 
   123                              <1> ;-----------------------------------------------------------------------------------------------
   124                              <1> ; GDT
   125                              <1> ;-----------------------------------------------------------------------------------------------
   126                              <1> 
   127 000005A0 0000000000000000    <1> GDT:            dq  0x0000000000000000
   128 000005A8 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   129 000005B0 FFFF00000092CF00    <1> .ds_kernel:     dq  0x00CF92000000FFFF                          ; DATA 4G
   130 000005B8 0000000000820000    <1> .ldt            dq  0x0000820000000000                          ; LDT descriptor
   131 000005C0 6700000000890000    <1> .tss_0:         dq  0x0000890000000067                          ; TSS descriptor
   132 000005C8 6700000000890000    <1> .tss_1:         dq  0x0000890000000067                          ; TSS descriptor
   133 000005D0 6700000000890000    <1> .tss_2:         dq  0x0000890000000067                          ; TSS descriptor
   134 000005D8 6700000000890000    <1> .tss_3:         dq  0x0000890000000067                          ; TSS descriptor
   135 000005E0 0000080004EC0000    <1> .call_gate:     dq  0x0000EC0400080000                          ; 386 call gate(DPL=3, count=4, SEL=8)
   136                              <1> .end:
   137                              <1> 
   138                              <1> CS_KERNEL       equ .cs_kernel - GDT
   139                              <1> DS_KERNEL       equ .ds_kernel - GDT
   140                              <1> SS_LDT          equ .ldt       - GDT
   141                              <1> SS_TASK_0       equ .tss_0     - GDT
   142                              <1> SS_TASK_1       equ .tss_1     - GDT
   143                              <1> SS_TASK_2       equ .tss_2     - GDT
   144                              <1> SS_TASK_3       equ .tss_3     - GDT
   145                              <1> SS_GATE_0       equ .call_gate - GDT
   146                              <1> 
   147 000005E8 4700                <1> GDTR:   dw      GDT.end - GDT - 1
   148 000005EA [A0050000]          <1>         dd      GDT
   149                              <1> 
   150                              <1> ;-----------------------------------------------------------------------------------------------
   151                              <1> ; LDT
   152                              <1> ;-----------------------------------------------------------------------------------------------
   153                              <1> 
   154 000005EE 0000000000000000    <1> LDT:            dq  0x0000000000000000                          ; NULL
   155 000005F6 FFFF0000009ACF00    <1> .cs_task_0:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   156 000005FE FFFF00000092CF00    <1> .ds_task_0:     dq  0x00CF92000000FFFF                          ; DATA 4G
   157 00000606 FFFF000000FACF00    <1> .cs_task_1:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   158 0000060E FFFF000000F2CF00    <1> .ds_task_1:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   159 00000616 FFFF000000FACF00    <1> .cs_task_2:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   160 0000061E FFFF000000F2CF00    <1> .ds_task_2:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   161 00000626 FFFF000000FACF00    <1> .cs_task_3:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   162 0000062E FFFF000000F2CF00    <1> .ds_task_3:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   163                              <1> .end:
   164                              <1> 
   165                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                      ; cs selector for task0 // set bit 2(TI)
   166                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                      ; ds selector for task0 // Priviledge level 0
   167                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                  ; cs selector for task1 // Priviledge level 3
   168                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                  ; ds selector for task1
   169                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                  ; cs selector for task2 // Priviledge level 3
   170                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                  ; ds selector for task2
   171                              <1> CS_TASK_3       equ (.cs_task_3 - LDT) | 4 | 3                  ; cs selector for task3 // Priviledge level 3
   172                              <1> DS_TASK_3       equ (.ds_task_3 - LDT) | 4 | 3                  ; ds selector for task3
   173                              <1> LDT_LIMIT       equ .end        - LDT - 1
   179                                  %include    "modules/paging.s"
     1                              <1> page_set_4m:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000636 55                  <1>             push    ebp
     5 00000637 89E5                <1>             mov     ebp, esp                                        ; EBP+8 | base address of page directory
     6                              <1> 
     7                              <1>             ; save registers
     8 00000639 60                  <1>             pusha
     9                              <1> 
    10                              <1>             ; make page directory
    11 0000063A 8B7D08              <1>             mov     edi, [ebp + 8]
    12 0000063D B800000000          <1>             mov     eax, 0x00000000                                 ; // P = 0
    13 00000642 B900040000          <1>             mov     ecx, 1024
    14 00000647 F3AB                <1>             rep     stosd                                           ; while(ecx--) *edi++ = type
    15                              <1> 
    16                              <1>             ; set top entry
    17 00000649 89F8                <1>             mov     eax, edi                                        ; EAX = right after the page directory = address of page table
    18 0000064B 2500F0FFFF          <1>             and     eax, ~0x0000_0FFF                               ; specifying the physical address
    19 00000650 83C807              <1>             or      eax, 7                                          ; permit R/W
    20 00000653 898700F0FFFF        <1>             mov     [edi - (1024 * 4)], eax                         ; set top entry of page directory
    21                              <1> 
    22                              <1>             ; set page table
    23 00000659 B807000000          <1>             mov     eax, 0x000000007                                ; specifying physical address and permit R/W
    24 0000065E B900040000          <1>             mov     ecx, 1024
    25                              <1> 
    26                              <1> .10L:
    27 00000663 AB                  <1>             stosd
    28 00000664 0500100000          <1>             add     eax, 0x00001000
    29 00000669 E2F8                <1>             loop    .10L
    30                              <1> 
    31                              <1>             ; return registers
    32 0000066B 61                  <1>             popa
    33                              <1> 
    34                              <1>             ; desctruct stack frame
    35 0000066C 89EC                <1>             mov     esp, ebp
    36 0000066E 5D                  <1>             pop     ebp
    37                              <1> 
    38 0000066F C3                  <1>             ret
    39                              <1> 
    40                              <1> init_page:
    41                              <1> 
    42                              <1>              ; save registers
    43 00000670 60                  <1>              pusha
    44                              <1> 
    45                              <1>              ; make page conversion table
    46 00000671 6800501000E8BBFFFF- <1>              cdecl  page_set_4m, CR3_BASE
    46 0000067A FF6683C404          <1>
    47                              <1> 
    48                              <1>              ; return registers
    49 0000067F 61                  <1>              popa
    50                              <1> 
    51 00000680 C3                  <1>              ret
   180                                  %include    "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000681 60                  <1>             pusha
     5 00000682 1E                  <1>             push    ds
     6 00000683 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000684 66B81000            <1>             mov     ax, 0x0010
    10 00000688 8ED8                <1>             mov     ds, ax
    11 0000068A 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; TICK
    14 0000068C FF05[D4060000]      <1>             inc     dword [TIMER_COUNT]                                     ; TIMER_COUNT++ //update interrupt count
    15                              <1> 
    16                              <1>             ; clear interrupt flag(EOI)
    17                              <1>             outp    0x20, 0x20                                              ; master PIC:EOI command
    17 00000692 B020                <2>  mov al, %2
    17 00000694 E620                <2>  out %1, al
    18                              <1> 
    19                              <1>             ; exchange Task
    20 00000696 660F00C8            <1>             str     ax                                                      ; AX = TR // current Task Register
    21 0000069A 6683F820            <1>             cmp     ax, SS_TASK_0
    22 0000069E 7415                <1>             je      .11L
    23 000006A0 6683F828            <1>             cmp     ax, SS_TASK_1
    24 000006A4 7418                <1>             je      .12L
    25 000006A6 6683F830            <1>             cmp     ax, SS_TASK_2
    26 000006AA 741B                <1>             je      .13L
    27                              <1> 
    28 000006AC EA000000002000      <1>             jmp     SS_TASK_0:0
    29 000006B3 EB1B                <1>             jmp     .10E
    30                              <1> .11L:
    31 000006B5 EA000000002800      <1>             jmp     SS_TASK_1:0
    32 000006BC EB12                <1>             jmp     .10E
    33                              <1> .12L:
    34 000006BE EA000000003000      <1>             jmp     SS_TASK_2:0
    35 000006C5 EB09                <1>             jmp     .10E
    36                              <1> .13L:
    37 000006C7 EA000000003800      <1>             jmp     SS_TASK_3:0
    38 000006CE EB00                <1>             jmp     .10E
    39                              <1> .10E:
    40                              <1> 
    41                              <1>             ; return registers
    42 000006D0 07                  <1>             pop     es
    43 000006D1 1F                  <1>             pop     ds
    44 000006D2 61                  <1>             popa
    45                              <1> 
    46 000006D3 CF                  <1>             iret
    47                              <1> 
    48                              <1> ALIGN 4, db 0
    49 000006D4 0000000000000000    <1> TIMER_COUNT:    dq 0
   181                                  %include    "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1> 
     3                              <1>             ; display string
     4 000006DC 68[0A070000]6A076A- <1>             cdecl   draw_str, 63, 0, 0x07, .s0              ; draw_str()
     4 000006E4 006A3FE85904000066- <1>
     4 000006ED 83C410              <1>
     5                              <1> 
     6                              <1> ;-------------------------------------------------------------
     7                              <1> ; non-preemptive multitask
     8                              <1> ;-------------------------------------------------------------
     9                              <1> 
    10                              <1> ; .10L:
    11                              <1> ;             ; display time
    12                              <1> ;             mov     eax, [RTC_TIME]                         ; get time
    13                              <1> ;             cdecl   draw_time, 72, 0, 0x0700, eax
    14                              <1> 
    15                              <1> ;             ; call Task
    16                              <1> ;             jmp    SS_TASK_0:0                             ; jump to Task0(kernel)
    17                              <1> 
    18                              <1> ;             jmp     .10L
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> 
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; preemptive multitask
    24                              <1> ;-------------------------------------------------------------
    25                              <1> 
    26                              <1> .10L:
    27                              <1>             ; display time
    28 000006F0 A1[3C020000]        <1>             mov     eax, [RTC_TIME]                         ; get time
    29 000006F5 5068000700006A006A- <1>             cdecl   draw_time, 72, 0, 0x0700, eax
    29 000006FE 48E8A50700006683C4- <1>
    29 00000707 10                  <1>
    30                              <1> 
    31                              <1> 
    32 00000708 EBE6                <1>             jmp     .10L
    33                              <1> 
    34                              <1> ;-------------------------------------------------------------
    35                              <1> 
    36                              <1>             ; data
    37 0000070A 5461736B2D3100      <1> .s0:        db  "Task-1", 0
   182                                  %include    "tasks/task_2.s"
     1                              <1> task_2:
     2                              <1> 
     3 00000711 68[D6070000]6A076A- <1>             cdecl   draw_str, 63, 1, 0x07, .s0
     3 00000719 016A3FE82404000066- <1>
     3 00000722 83C410              <1>
     4                              <1> 
     5                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     7                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     8 00000725 DB05[C4070000]      <1>             fild    dword [.c1000]              ;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     9 0000072B D9EB                <1>             fldpi                               ;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    10 0000072D DA35[C8070000]      <1>             fidiv   dword [.c180]               ;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    11 00000733 D9EB                <1>             fldpi                               ;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    12 00000735 DCC0                <1>             fadd    st0, st0                    ;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13 00000737 D9EE                <1>             fldz                                ;    θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    14                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    15                              <1>                                                 ;    θ = 0 |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    16                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> 
    18                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    19                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    20                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    21                              <1> .10L:                                           ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    22                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    23 00000739 D8C2                <1>             fadd    st0, st2                    ;    θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    24 0000073B D9F8                <1>             fprem                               ;    MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx| // fprem(ST0 %= ST1)
    25 0000073D D9C0                <1>             fld     st0                         ;        θ |       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    26 0000073F D9FE                <1>             fsin                                ;    SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    27 00000741 D8CC                <1>             fmul    st0, st4                    ;ST4*SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    28 00000743 DF35[CC070000]      <1>             fbstp   [.bcd]                      ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    29                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    30                              <1> 
    31                              <1>             ; convert into ASCII code
    32 00000749 A1[CC070000]        <1>             mov     eax, [.bcd]                 ; EAX = 1000 * sin(t)
    33 0000074E 89C3                <1>             mov     ebx, eax                    ; EBX = EAX
    34                              <1> 
    35 00000750 250F0F0000          <1>             and     eax, 0x0F0F                 ; mask upper 4 bits
    36 00000755 0D30300000          <1>             or      eax, 0x3030                 ; set 0x3 to upper 4 bits
    37                              <1> 
    38 0000075A C1EB04              <1>             shr     ebx, 4                      ; EBX = upper 16 bits
    39 0000075D 81E30F0F0000        <1>             and     ebx, 0x0F0F
    40 00000763 81CB30300000        <1>             or      ebx, 0x3030
    41                              <1> 
    42                              <1>             ; set the result to the buffer which is for screen display byte by byte
    43 00000769 883D[DE070000]      <1>             mov     [.s2 + 0], bh               ; first digit
    44 0000076F 8825[E0070000]      <1>             mov     [.s3 + 0], ah               ; the first decimal place
    45 00000775 881D[E1070000]      <1>             mov     [.s3 + 1], bl               ; the second decimal place
    46 0000077B A2[E2070000]        <1>             mov     [.s3 + 2], al               ; the third decimal place
    47                              <1> 
    48                              <1>             ; whether displaying sign or not
    49 00000780 B807000000          <1>             mov     eax, 7
    50 00000785 0FA305[D5070000]    <1>             bt      [.bcd + 9], eax             ; CF = bcd[9] & 0x80
    51 0000078C 7209                <1>             jc      .10F
    52                              <1> 
    53 0000078E C605[DD070000]2B    <1>             mov     [.s1 + 0], byte '+'
    54 00000795 EB07                <1>             jmp     .10E
    55                              <1> .10F:
    56 00000797 C605[DD070000]2D    <1>             mov     [.s1 + 0], byte '-'
    57                              <1> .10E:
    58 0000079E 68[DD070000]6A076A- <1>             cdecl   draw_str, 72, 1, 0x07, .s1
    58 000007A6 016A48E89703000066- <1>
    58 000007AF 83C410              <1>
    59                              <1> 
    60                              <1>             ; wait
    61 000007B2 6A0AE8930B00006683- <1>             cdecl   wait_tick, 10
    61 000007BB C404                <1>
    62                              <1> 
    63                              <1> ;           mov		ecx, 20							;   ECX = 20
    64                              <1> ; 		    										;   do
    65                              <1> ; 		    										;   {
    66                              <1> ; .20L:	    mov		eax, [TIMER_COUNT]				;     EAX = TIMER_COUNT;
    67                              <1> ; .21L:	    cmp		[TIMER_COUNT], eax				;     while (TIMER_COUNT != EAX)
    68                              <1> ; 		    je		.21L							;       ;
    69                              <1> ; 		    loop	.20L							;   } while (--ECX);
    70                              <1> 
    71                              <1> ; 		    jmp		.10L							; }
    72                              <1> 
    73 000007BD E977FFFFFF          <1>             jmp     .10L
    74                              <1> 
    75 000007C2 00<rept>            <1> ALIGN 4, db 0
    76 000007C4 E8030000            <1> .c1000:     dd  1000
    77 000007C8 B4000000            <1> .c180:      dd  180
    78                              <1> 
    79 000007CC 00<rept>            <1> .bcd:       times 10 db 0x00
    80                              <1> 
    81 000007D6 5461736B2D3200      <1> .s0:        db   "Task-2", 0
    82 000007DD 2D                  <1> .s1:        db  "-"
    83 000007DE 302E                <1> .s2:        db  "0."
    84 000007E0 30303000            <1> .s3:        db  "000", 0
   183                                  %include    "tasks/task_3.s"
     1                              <1> ; fpu_rose_init:
     2                              <1> 
     3                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
     4                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     5                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1> ;             fldpi                               ;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     7                              <1> ;             fidiv   dword [.c180]               ;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     8                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
     9                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    10                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    11                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    12                              <1> ;                                                 ;        r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    14                              <1> ;             fild    dword [.n]                  ;        n |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    15                              <1> ;             fidiv   dword [.d]                  ;      n/d |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    16                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    18                              <1> ;                                                 ;        k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    19                              <1> ;             fild    dword [.A]                  ;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    20                              <1> 
    21                              <1> ; ALIGN 4, db 0
    22                              <1> ; .c1000:     dd  1000
    23                              <1> ; .c180:      dd  180
    24                              <1> 
    25                              <1> ; .n: dd 5
    26                              <1> ; .d: dd 3
    27                              <1> ; .A: dd 90
    28                              <1> 
    29                              <1> ;--------------------------------------------------------------------------------------------------------------
    30                              <1> ; PREPROCESSING
    31                              <1> 
    32                              <1> fpu_rose_init:
    33                              <1> 
    34                              <1>                                                 ;    +16 | d
    35                              <1>                                                 ;    +12 | n
    36                              <1>                                                 ; EBP+ 8 | A
    37 000007E4 55                  <1>             push    ebp
    38 000007E5 89E5                <1>             mov     ebp, esp
    39                              <1> 
    40 000007E7 68B4000000          <1>             push    dword 180                   ;    - 4 | dword i = 180
    41                              <1> 
    42 000007EC D9EB                <1>             fldpi
    43 000007EE DA75FC              <1>             fidiv   dword [ebp -  4]
    44 000007F1 DB450C              <1>             fild    dword [ebp + 12]
    45 000007F4 DA7510              <1>             fidiv   dword [ebp + 16]
    46 000007F7 DB4508              <1>             fild    dword [ebp +  8]
    47                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    48                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    49                              <1>                                                 ;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    50                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    51                              <1> 
    52 000007FA 89EC                <1>             mov     esp, ebp
    53 000007FC 5D                  <1>             pop     ebp
    54                              <1> 
    55 000007FD C3                  <1>             ret
    56                              <1> 
    57                              <1> fpu_rose_update:
    58                              <1> 
    59                              <1>             ; construct stack frame
    60                              <1>                                                 ;    +16 | t(angle)
    61                              <1>                                                 ;    +12 | Y(float)
    62                              <1>                                                 ; EBP+ 8 | X(float)
    63 000007FE 55                  <1>             push    ebp
    64 000007FF 89E5                <1>             mov     ebp, esp
    65                              <1> 
    66                              <1>             ; save registers
    67 00000801 50                  <1>             push    eax
    68 00000802 53                  <1>             push    ebx
    69                              <1> 
    70                              <1>             ; set save_dest of X/Y coordinate
    71 00000803 8B4508              <1>             mov     eax, [ebp +  8]
    72 00000806 8B5D0C              <1>             mov     ebx, [ebp + 12]
    73                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    74                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    75 00000809 DB4510              <1>             fild    dword [ebp + 16]            ;       t  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
    76 0000080C D8CB                <1>             fmul    st0, st3                    ;      rt  |         |         |         |         |         |
    77 0000080E D9C0                <1>             fld     st0                         ;      rt  |     rt  |      A  |      k  |      r  |xxxxxxxxx|
    78                              <1>                                                 ;   θ=(rt) |  θ=(rt) |      A  |      k  |      r  |xxxxxxxxx|
    79                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    80 00000810 D9FB                <1>             fsincos                             ;   cos(θ) |  sin(θ) |      θ  |      A  |      k  |      r  |
    81                              <1> 
    82 00000812 D9CA                <1>             fxch    st2                         ;       θ  |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    83 00000814 D8CC                <1>             fmul    st0, st4                    ;      kθ  |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    84 00000816 D9FE                <1>             fsin                                ;  sin(kθ) |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    85 00000818 D8CB                <1>             fmul    st0, st3                    ; Asin(kθ) |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    86                              <1> 
    87 0000081A D9CA                <1>             fxch    st2                         ;   cos(θ) |  sin(θ) | Asin(kθ)|      A  |      k  |      r  |
    88 0000081C D8CA                <1>             fmul    st0, st2                    ;       X  |  sin(θ) | Asin(kθ)|      A  |      k  |      r  |
    89 0000081E DB18                <1>             fistp   dword [eax]                 ;   sin(θ) | Asin(kθ)|      A  |      k  |      r  |xxxxxxxxx|
    90                              <1> 
    91 00000820 DEC9                <1>             fmulp   st1, st0                    ;       Y  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
    92 00000822 D9E0                <1>             fchs                                ;      -Y  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
    93 00000824 DB1B                <1>             fistp   dword [ebx]                 ;       A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    94                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    95                              <1> 
    96                              <1>             ; return registers
    97 00000826 5B                  <1>             pop     ebx
    98 00000827 58                  <1>             pop     eax
    99                              <1> 
   100                              <1>             ; destruct stack frame
   101 00000828 89EC                <1>             mov     esp, ebp
   102 0000082A 5D                  <1>             pop     ebp
   103                              <1> 
   104 0000082B C3                  <1>             ret
   105                              <1> 
   106                              <1> task_3:
   107                              <1>             ; construct stack frame
   108 0000082C 89E5                <1>             mov     ebp, esp
   109                              <1> 
   110 0000082E 6A00                <1>             push    dword 0                     ; EBP- 4 | x0 = 0 // x coordinate origin
   111 00000830 6A00                <1>             push    dword 0                     ;    - 8 | y0 = 0 // y coordinate origin
   112 00000832 6A00                <1>             push    dword 0                     ;    -12 | x  = 0 // x coordinate drawing
   113 00000834 6A00                <1>             push    dword 0                     ;    -16 | y  = 0 // y coordinate drawing
   114 00000836 6A00                <1>             push    dword 0                     ;    -20 | r  = 0 // angle
   115                              <1> 
   116                              <1>             ; initialization
   117 00000838 BE[2C090000]        <1>             mov     esi, DRAW_PARAM
   118                              <1> 
   119                              <1>             ; display title
   120 0000083D 8B06                <1>             mov     eax, [esi + rose.x0]
   121 0000083F 8B5E04              <1>             mov     ebx, [esi + rose.y0]
   122                              <1> 
   123 00000842 C1E803              <1>             shr     eax, 3                              ; EAX /= 8    // convert x coordinate into char position
   124 00000845 C1EB04              <1>             shr     ebx, 4                              ; EBX /= 16   // convert y coordinate into char position
   125 00000848 4B                  <1>             dec     ebx                                 ; move up one char
   126 00000849 8B4E24              <1>             mov     ecx, [esi + rose.color_s]           ; char color
   127 0000084C 8D5630              <1>             lea     edx, [esi + rose.title]
   128                              <1> 
   129 0000084F 52515350E8ED020000- <1>             cdecl   draw_str, eax, ebx, ecx, edx
   129 00000858 6683C410            <1>
   130                              <1> 
   131                              <1>             ; midpoint of X axis
   132 0000085C 8B06                <1>             mov     eax, [esi + rose.x0]
   133 0000085E 8B5E08              <1>             mov     ebx, [esi + rose.x1]
   134 00000861 29C3                <1>             sub     ebx, eax
   135 00000863 D1EB                <1>             shr     ebx, 1                              ; EBX /= 2
   136 00000865 01C3                <1>             add     ebx, eax
   137 00000867 895DFC              <1>             mov     [ebp - 4], ebx                      ; x0 = EBX // x coordinate origin
   138                              <1> 
   139                              <1>             ; midpoint of Y axis
   140 0000086A 8B4604              <1>             mov     eax, [esi + rose.y0]
   141 0000086D 8B5E0C              <1>             mov     ebx, [esi + rose.y1]
   142 00000870 29C3                <1>             sub     ebx, eax
   143 00000872 D1EB                <1>             shr     ebx, 1                              ; EBX /= 2
   144 00000874 01C3                <1>             add     ebx, eax
   145 00000876 895DF8              <1>             mov     [ebp - 8], ebx                      ; y0 = EBX // y coordinate origin
   146                              <1> 
   147                              <1>             ; draw X axis
   148 00000879 8B06                <1>             mov     eax, [esi + rose.x0]
   149 0000087B 8B5DF8              <1>             mov     ebx, [ebp - 8]                      ; midpoint of y axis
   150 0000087E 8B4E08              <1>             mov     ecx, [esi + rose.x1]
   151                              <1> 
   152 00000881 FF761853515350E839- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
   152 0000088A 0400006683C414      <1>
   153                              <1> 
   154                              <1>             ; draw Y axis
   155 00000891 8B4604              <1>             mov     eax, [esi + rose.y0]
   156 00000894 8B5DFC              <1>             mov     ebx, [ebp - 4]                      ; midpoint of x axis
   157 00000897 8B4E0C              <1>             mov     ecx, [esi + rose.y1]
   158                              <1> 
   159 0000089A FF761C51535053E820- <1>             cdecl   draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
   159 000008A3 0400006683C414      <1>
   160                              <1> 
   161                              <1>             ; draw frame
   162 000008AA 8B06                <1>             mov     eax, [esi + rose.x0]
   163 000008AC 8B5E04              <1>             mov     ebx, [esi + rose.y0]
   164 000008AF 8B4E08              <1>             mov     ecx, [esi + rose.x1]
   165 000008B2 8B560C              <1>             mov     edx, [esi + rose.y1]
   166                              <1> 
   167 000008B5 FF762052515350E8B4- <1>             cdecl   draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
   167 000008BE 0400006683C414      <1>
   168                              <1> 
   169                              <1>             ; Amplitude is about 95% of x axis
   170 000008C5 8B4608              <1>             mov     eax, [esi + rose.x1]
   171 000008C8 2B06                <1>             sub     eax, [esi + rose.x0]
   172 000008CA D1E8                <1>             shr     eax, 1                              ; EAX /= 2
   173 000008CC 89C3                <1>             mov     ebx, eax
   174 000008CE C1EB04              <1>             shr     ebx, 4                              ; EAX /= 16
   175 000008D1 29D8                <1>             sub     eax, ebx
   176                              <1> 
   177                              <1>             ; initialize FPU (initialize rose curve)
   178 000008D3 FF7614FF761050E805- <1>             cdecl   fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
   178 000008DC FFFFFF6683C40C      <1>
   179                              <1> 
   180                              <1> .10L:
   181                              <1> 
   182                              <1>             ; coordinate culculation
   183 000008E3 8D5DF4              <1>             lea     ebx, [ebp - 12]                     ; x
   184 000008E6 8D4DF0              <1>             lea     ecx, [ebp - 16]                     ; y
   185 000008E9 8B45EC              <1>             mov     eax, [ebp - 20]                     ; r
   186                              <1> 
   187 000008EC 505153E80AFFFFFF66- <1>             cdecl   fpu_rose_update, ebx, ecx, eax
   187 000008F5 83C40C              <1>
   188                              <1> 
   189                              <1>             ; update angle(r = r % 36000)
   190 000008F8 BA00000000          <1>             mov     edx, 0
   191 000008FD 40                  <1>             inc     eax
   192 000008FE BBA08C0000          <1>             mov     ebx, 360 * 100
   193 00000903 F7F3                <1>             div     ebx                                 ; EDX = EDX:EAX % EBX
   194 00000905 8955EC              <1>             mov     [ebp - 20], edx
   195                              <1> 
   196                              <1>             ; draw dot
   197 00000908 8B4DF4              <1>             mov     ecx, [ebp - 12]                     ; x
   198 0000090B 8B55F0              <1>             mov     edx, [ebp - 16]                     ; y
   199                              <1> 
   200 0000090E 034DFC              <1>             add     ecx, [ebp - 4]                      ; ECX += x coordinate origin
   201 00000911 0355F8              <1>             add     edx, [ebp - 8]                      ; EDX += y coordinate origin
   202                              <1> 
   203 00000914 8B5E28              <1>             mov     ebx, [esi + rose.color_f]           ; EBX = display color
   204 00000917 CD82                <1>             int     0x82                                ; syscall_82(display color, x, y)
   205                              <1> 
   206                              <1>             ; wait
   207 00000919 6A02E82C0A00006683- <1>             cdecl   wait_tick, 2
   207 00000922 C404                <1>
   208                              <1> 
   209                              <1>             ; draw dot(erase)
   210 00000924 8B5E2C              <1>             mov     ebx, [esi + rose.color_b]           ; EBX = background color
   211 00000927 CD82                <1>             int     0x82                                ; syscall_82(display color, x, y)
   212                              <1> 
   213 00000929 EBB8                <1>             jmp     .10L
   214                              <1> 
   215 0000092B 00                  <1> ALIGN 4, db 0
   216                              <1> DRAW_PARAM:
   217                              <1>     istruc  rose
   218 0000092C 10000000            <1>         at  rose.x0,            dd          16          ; upper left coordinate : X0
   219 00000930 20000000            <1>         at  rose.y0,            dd          32          ; upper left coordinate : Y0
   220 00000934 A0010000            <1>         at  rose.x1,            dd         416          ; lower right coordinate : X1
   221 00000938 B0010000            <1>         at  rose.y1,            dd         432          ; lower right coordinate : Y1
   222                              <1> 
   223 0000093C 02000000            <1>         at  rose.n,             dd           2          ; variable : n
   224 00000940 01000000            <1>         at  rose.d,             dd           1          ; variable : d
   225                              <1> 
   226 00000944 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   227 00000948 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   228 0000094C 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   229 00000950 0F030000            <1>         at  rose.color_s,       dd         0x030F       ; display color : char
   230 00000954 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   231 00000958 03000000            <1>         at  rose.color_b,       dd         0x0003       ; display color : graph erase color
   232                              <1> 
   233 0000095C 5461736B2D3300      <1>         at  rose.title,         db         "Task-3", 0  ; title
   234 00000963 00<rept>            <1>     iend
   235                              <1> 
   184                                  
   185                                  
   186                                  ; MODULES
   187                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000096C 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 0000096D 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 0000096F 50                  <1>             push    eax
    10 00000970 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 00000971 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 00000974 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 00000977 B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 00000979 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 0000097D 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 0000097F 5A                  <1>             pop     edx
    21 00000980 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 00000981 89EC                <1>             mov     esp, ebp
    25 00000983 5D                  <1>             pop     ebp
    26                              <1> 
    27 00000984 C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 00000985 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 00000986 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 00000988 50                  <1>             push    eax
    38 00000989 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 0000098A 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 0000098D 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000990 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 00000992 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 00000996 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 00000998 5A                  <1>             pop     edx
    49 00000999 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 0000099A 89EC                <1>             mov     esp, ebp
    53 0000099C 5D                  <1>             pop     ebp
    54                              <1> 
    55 0000099D C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 0000099E 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 0000099F 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 000009A1 50                  <1>             push    eax
    66 000009A2 53                  <1>             push    ebx
    67 000009A3 51                  <1>             push    ecx
    68 000009A4 52                  <1>             push    edx
    69 000009A5 56                  <1>             push    esi
    70 000009A6 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 000009A7 8B7508              <1>             mov     esi, [ebp + 8]
    74 000009AA 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 000009AD 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 000009B1 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 000009B5 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 000009B7 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 000009BA FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 000009BC 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 000009BE 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 000009C1 FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 000009C3 FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 000009C4 B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 000009C9 AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 000009CA 88C4                <1>             mov     ah, al
    96 000009CC F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 000009CE 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 000009D0 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 000009D6 7404                <1>             jz      .11F                                    ; {
   104 000009D8 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 000009DA EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 000009DC 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 000009DE 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 000009E0 8807                <1>             mov     [edi], al
   116                              <1> 
   117 000009E2 83C750              <1>             add     edi, 80
   118 000009E5 E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 000009E7 5F                  <1>             pop     edi
   123 000009E8 5E                  <1>             pop     esi
   124 000009E9 5A                  <1>             pop     edx
   125 000009EA 59                  <1>             pop     ecx
   126 000009EB 5B                  <1>             pop     ebx
   127 000009EC 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 000009ED 89EC                <1>             mov     esp, ebp
   131 000009EF 5D                  <1>             pop     ebp
   132                              <1> 
   133 000009F0 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 000009F1 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 000009F2 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 000009F4 50                  <1>             push    eax
   144 000009F5 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 000009F6 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 000009F7 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 000009FA 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 000009FE 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 00000A02 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 00000A04 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 00000A07 FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 00000A09 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 00000A0C 88C4                <1>             mov     ah, al
   163 00000A0E F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 00000A10 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 00000A12 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 00000A14 08E0                <1>             or      al, ah
   169 00000A16 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 00000A18 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 00000A19 5B                  <1>             pop     ebx
   177 00000A1A 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 00000A1B 89EC                <1>             mov     esp, ebp
   181 00000A1D 5D                  <1>             pop     ebp
   182                              <1> 
   183 00000A1E C3                  <1>             ret
   188                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 00000A1F 55                  <1>             push    ebp                                         ;   +16 | color
     5 00000A20 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 00000A22 50                  <1>             push    eax
    10 00000A23 53                  <1>             push    ebx
    11 00000A24 51                  <1>             push    ecx
    12 00000A25 52                  <1>             push    edx
    13 00000A26 56                  <1>             push    esi
    14 00000A27 57                  <1>             push    edi
    15                              <1> 
    16                              <1> %ifdef      USE_TEST_AND_SET
    17 00000A28 68[FC0A0000]E86D08- <1>             cdecl   test_and_set, IN_USE                        ; TEST_AND_SET(IN_USE) // waiting for resource to be available
    17 00000A30 00006683C404        <1>
    18                              <1> %endif
    19                              <1> 
    20                              <1>             ; set copy_target font address
    21 00000A36 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    22 00000A3A C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    23 00000A3D 0335[38020000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    24                              <1> 
    25                              <1>             ; get copy_dest VRAM address
    26                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    27                              <1>             ; y:row, x:column
    28                              <1> 
    29 00000A43 8B7D0C              <1>             mov     edi, [ebp + 12]
    30 00000A46 C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    31 00000A49 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    32 00000A50 037D08              <1>             add     edi, [ebp + 8]
    33                              <1> 
    34                              <1>             ; output a char of font
    35 00000A53 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    36                              <1> 
    37 00000A57 6A03E80EFFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    37 00000A60 C404                <1>
    38 00000A62 6A08E81CFFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    38 00000A6B C404                <1>
    39 00000A6D 536A085756E827FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    39 00000A76 FF6683C410          <1>
    40                              <1> 
    41 00000A7B 6A02E8EAFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    41 00000A84 C404                <1>
    42 00000A86 6A04E8F8FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    42 00000A8F C404                <1>
    43 00000A91 536A045756E803FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    43 00000A9A FF6683C410          <1>
    44                              <1> 
    45 00000A9F 6A01E8C6FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    45 00000AA8 C404                <1>
    46 00000AAA 6A02E8D4FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    46 00000AB3 C404                <1>
    47 00000AB5 536A025756E8DFFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    47 00000ABE FF6683C410          <1>
    48                              <1> 
    49 00000AC3 6A00E8A2FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    49 00000ACC C404                <1>
    50 00000ACE 6A01E8B0FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    50 00000AD7 C404                <1>
    51 00000AD9 536A015756E8BBFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    51 00000AE2 FF6683C410          <1>
    52                              <1> 
    53                              <1> %ifdef      USE_TEST_AND_SET
    54                              <1> 
    55 00000AE7 C705[FC0A0000]0000- <1>             mov     [IN_USE], dword 0                           ; clear global variable
    55 00000AEF 0000                <1>
    56                              <1> %endif
    57                              <1> 
    58                              <1>             ; return registers
    59 00000AF1 5F                  <1>             pop		edi
    60 00000AF2 5E                  <1> 		    pop		esi
    61 00000AF3 5A                  <1> 		    pop		edx
    62 00000AF4 59                  <1> 		    pop		ecx
    63 00000AF5 5B                  <1> 		    pop		ebx
    64 00000AF6 58                  <1> 		    pop		eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 00000AF7 89EC                <1>             mov     esp, ebp
    68 00000AF9 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000AFA C3                  <1>             ret
    71                              <1> 
    72                              <1> %ifdef      USE_TEST_AND_SET
    73 00000AFB 00                  <1> ALIGN 4, db 0
    74 00000AFC 00000000            <1> IN_USE: dd 0
    75                              <1> %endif
   189                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000B00 55                  <1>             push    ebp                                         ;   +12 | row
     5 00000B01 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000B03 50                  <1>             push    eax
     9 00000B04 53                  <1>             push    ebx
    10 00000B05 51                  <1>             push    ecx
    11 00000B06 52                  <1>             push    edx
    12 00000B07 56                  <1>             push    esi
    13 00000B08 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00000B09 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000B0C 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 00000B0F B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 00000B14 81F900010000        <1> .10L:       cmp     ecx, 256
    22 00000B1A 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 00000B1C 89C8                <1>             mov     eax, ecx
    26 00000B1E 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 00000B21 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 00000B23 89CB                <1>             mov     ebx, ecx
    31 00000B25 C1EB04              <1>             shr     ebx, 4
    32 00000B28 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 00000B2A 516A075350E8EBFEFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 00000B33 FF6683C410          <1>
    35                              <1> 
    36 00000B38 41                  <1>             inc     ecx
    37 00000B39 EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 00000B3B 5F                  <1>             pop     edi
    42 00000B3C 5E                  <1>             pop     esi
    43 00000B3D 5A                  <1>             pop     edx
    44 00000B3E 59                  <1>             pop     ecx
    45 00000B3F 5B                  <1>             pop     ebx
    46 00000B40 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 00000B41 89EC                <1>             mov     esp, ebp
    50 00000B43 5D                  <1>             pop     ebp
    51                              <1> 
    52 00000B44 C3                  <1>             ret
   190                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000B45 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 00000B46 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 00000B48 50                  <1>             push    eax
    11 00000B49 53                  <1>             push    ebx
    12 00000B4A 51                  <1>             push    ecx
    13 00000B4B 52                  <1>             push    edx
    14 00000B4C 56                  <1>             push    esi
    15 00000B4D 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000B4E 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 00000B51 8B550C              <1>             mov     edx, [ebp + 12]
    20 00000B54 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 00000B58 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 00000B5B FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 00000B5C AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 00000B5D 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 00000B5F 741A                <1>             je      .10E
    29                              <1> 
    30                              <1> %ifdef      USE_SYSTEM_CALL
    31 00000B61 CD81                <1>             int     0x81                                        ; sys_call(1, x, y, color, char)
    32                              <1> %else
    33                              <1>             cdecl   draw_char, ecx, edx, ebx, eax
    34                              <1> %endif
    35 00000B63 41                  <1>             inc     ecx
    36 00000B64 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    37 00000B67 7C10                <1>             jl      .12E                                        ; {
    38 00000B69 B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    39 00000B6E 42                  <1>             inc     edx                                         ;   EDX++;
    40 00000B6F 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    41 00000B72 7C05                <1>             jl      .12E                                        ;   {
    42 00000B74 BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    43                              <1>                                                                 ;   }
    44                              <1> .12E:                                                           ; }
    45 00000B79 EBE1                <1>             jmp     .10L
    46                              <1> .10E:
    47                              <1> 
    48                              <1>             ; return registers
    49 00000B7B 5F                  <1>             pop     edi
    50 00000B7C 5E                  <1>             pop     esi
    51 00000B7D 5A                  <1>             pop     edx
    52 00000B7E 59                  <1>             pop     ecx
    53 00000B7F 5B                  <1>             pop     ebx
    54 00000B80 58                  <1>             pop     eax
    55                              <1> 
    56                              <1>             ; destruct stack frame
    57 00000B81 89EC                <1>             mov     esp, ebp
    58 00000B83 5D                  <1>             pop     ebp
    59                              <1> 
    60 00000B84 C3                  <1>             ret
   191                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000B85 55                  <1>             push    ebp                                             ;   +12 | row
     5 00000B86 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000B88 50                  <1>             push    eax
     9 00000B89 53                  <1>             push    ebx
    10 00000B8A 51                  <1>             push    ecx
    11 00000B8B 52                  <1>             push    edx
    12 00000B8C 56                  <1>             push    esi
    13 00000B8D 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00000B8E 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000B91 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 00000B94 B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 00000B99 83F910              <1> .10L:       cmp     ecx, 16
    22 00000B9C 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 00000B9E 89C8                <1>             mov     eax, ecx
    26 00000BA0 83E001              <1>             and     eax, 0x01
    27 00000BA3 C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 00000BA6 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 00000BA8 89CB                <1>             mov     ebx, ecx
    32 00000BAA D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 00000BAC 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 00000BAE 89CA                <1>             mov     edx, ecx
    37 00000BB0 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 00000BB2 8B92[DF0B0000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 00000BB8 68[D60B0000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 00000BC0 E880FFFFFF6683C410  <1>
    41                              <1> 
    42 00000BC9 41                  <1>             inc     ecx
    43 00000BCA EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 00000BCC 5F                  <1>             pop     edi
    48 00000BCD 5E                  <1>             pop     esi
    49 00000BCE 5A                  <1>             pop     edx
    50 00000BCF 59                  <1>             pop     ecx
    51 00000BD0 5B                  <1>             pop     ebx
    52 00000BD1 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 00000BD2 89E5                <1>             mov     ebp, esp
    56 00000BD4 5D                  <1>             pop     ebp
    57                              <1> 
    58 00000BD5 C3                  <1>             ret
    59                              <1> 
    60 00000BD6 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 00000BDF 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 00000BE3 00010009            <1>             dw  0x0100, 0x0900
    64 00000BE7 0002000A            <1>             dw  0x0200, 0x0A00
    65 00000BEB 0003000B            <1>             dw  0x0300, 0x0B00
    66 00000BEF 0004000C            <1>             dw  0x0400, 0x0C00
    67 00000BF3 0005000D            <1>             dw  0x0500, 0x0D00
    68 00000BF7 0006000E            <1>             dw  0x0600, 0x0E00
    69 00000BFB 0007000F            <1>             dw  0x0700, 0x0F00
   192                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 00000BFF 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 00000C00 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 00000C02 50                  <1>             push    eax
     9 00000C03 53                  <1>             push    ebx
    10 00000C04 51                  <1>             push    ecx
    11 00000C05 52                  <1>             push    edx
    12 00000C06 56                  <1>             push    esi
    13 00000C07 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 00000C08 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 00000C0B C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 00000C0E 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 00000C15 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 00000C18 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 00000C1A C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 00000C1D 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 00000C1F 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 00000C22 BB80000000          <1>             mov     ebx, 0x80
    35 00000C27 D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 00000C29 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 00000C2C 6A03E839FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 00000C35 C404                <1>
    43 00000C37 6A08E847FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 00000C40 C404                <1>
    44 00000C42 516A085753E8A5FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 00000C4B FF6683C410          <1>
    45                              <1> 
    46 00000C50 6A02E815FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 00000C59 C404                <1>
    47 00000C5B 6A04E823FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 00000C64 C404                <1>
    48 00000C66 516A045753E881FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 00000C6F FF6683C410          <1>
    49                              <1> 
    50 00000C74 6A01E8F1FCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 00000C7D C404                <1>
    51 00000C7F 6A02E8FFFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 00000C88 C404                <1>
    52 00000C8A 516A025753E85DFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 00000C93 FF6683C410          <1>
    53                              <1> 
    54 00000C98 6A00E8CDFCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 00000CA1 C404                <1>
    55 00000CA3 6A01E8DBFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 00000CAC C404                <1>
    56 00000CAE 516A015753E839FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 00000CB7 FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 00000CBC 5F                  <1>             pop     edi
    60 00000CBD 5E                  <1>             pop     esi
    61 00000CBE 5A                  <1>             pop     edx
    62 00000CBF 59                  <1>             pop     ecx
    63 00000CC0 5B                  <1>             pop     ebx
    64 00000CC1 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 00000CC2 89EC                <1>             mov     esp, ebp
    68 00000CC4 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000CC5 C3                  <1>             ret
   193                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 00000CC6 55                  <1>             push    ebp
    22 00000CC7 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 00000CC9 6A00                <1>             push    dword 0
    25 00000CCB 6A00                <1>             push    dword 0
    26 00000CCD 6A00                <1>             push    dword 0
    27 00000CCF 6A00                <1>             push    dword 0
    28 00000CD1 6A00                <1>             push    dword 0
    29 00000CD3 6A00                <1>             push    dword 0
    30 00000CD5 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 00000CD7 50                  <1>             push    eax
    34 00000CD8 53                  <1>             push    ebx
    35 00000CD9 51                  <1>             push    ecx
    36 00000CDA 52                  <1>             push    edx
    37 00000CDB 56                  <1>             push    esi
    38 00000CDC 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 00000CDD 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 00000CE0 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 00000CE3 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 00000CE5 7D09                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 00000CE7 F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 00000CE9 BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 00000CEE EB05                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    50 00000CF0 BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 00000CF5 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 00000CF8 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 00000CFB 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 00000CFD 7D09                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 00000CFF F7DA                <1>             neg     edx                                             ;   height *= -1
    60 00000D01 BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 00000D06 EB05                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    63 00000D08 BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 00000D0D 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 00000D10 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 00000D13 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 00000D16 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 00000D19 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 00000D1C 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 00000D1F 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 00000D21 7F08                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 00000D23 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 00000D26 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 00000D29 EB06                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    93                              <1>                                                                     ;   // y axis is base one.
    94 00000D2B 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 00000D2E 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 00000D31 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 00000D34 83F900              <1>             cmp     ecx, 0
   101 00000D37 7505                <1>             jnz     .30E
   102 00000D39 B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   107                              <1> 
   108                              <1> %ifdef      USE_SYSTEM_CALL
   109 00000D3E 89C8                <1>             mov     eax, ecx
   110                              <1> 
   111 00000D40 8B5D18              <1>             mov     ebx, [ebp + 24]
   112 00000D43 8B4DF8              <1>             mov     ecx, [ebp -  8]
   113 00000D46 8B55EC              <1>             mov     edx, [ebp - 20]
   114 00000D49 CD82                <1>             int     0x82
   115                              <1> 
   116 00000D4B 89C1                <1>             mov     ecx, eax
   117                              <1> %else
   120                              <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   121                              <1> %endif
   122                              <1>             ; update base axis(1 dot)
   123 00000D4D 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   124 00000D50 0106                <1>             add     [esi - 0], eax
   125                              <1> 
   126                              <1>             ; update relative axis
   127 00000D52 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   128 00000D55 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   129                              <1> 
   130 00000D58 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   131                              <1> 
   132 00000D5B 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   133 00000D5D 7C07                <1>             jl      .52E                                            ; {
   134 00000D5F 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   135                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   136 00000D61 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   137 00000D64 011F                <1>             add     [edi - 0], ebx
   138                              <1> .52E:                                                               ; }
   139                              <1> 
   140 00000D66 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   141                              <1> 
   142 00000D69 E2D3                <1>             loop    .50L
   143                              <1> .50E:
   144                              <1> 
   145                              <1>             ; return registers
   146 00000D6B 5F                  <1>             pop     edi
   147 00000D6C 5E                  <1>             pop     esi
   148 00000D6D 5A                  <1>             pop     edx
   149 00000D6E 59                  <1>             pop     ecx
   150 00000D6F 5B                  <1>             pop     ebx
   151 00000D70 58                  <1>             pop     eax
   152                              <1> 
   153                              <1>             ; destruct stack frame
   154 00000D71 89EC                <1>             mov     esp, ebp
   155 00000D73 5D                  <1>             pop     ebp
   156                              <1> 
   157 00000D74 C3                  <1>             ret
   194                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 00000D75 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 00000D76 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 00000D78 50                  <1>             push    eax
    11 00000D79 53                  <1>             push    ebx
    12 00000D7A 51                  <1>             push    ecx
    13 00000D7B 52                  <1>             push    edx
    14 00000D7C 56                  <1>             push    esi
    15 00000D7D 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000D7E 8B4508              <1>             mov     eax, [ebp +  8]
    19 00000D81 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 00000D84 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 00000D87 8B5514              <1>             mov     edx, [ebp + 20]
    22 00000D8A 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 00000D8D 39C8                <1>             cmp     eax, ecx
    26 00000D8F 7C01                <1>             jl      .10E
    27 00000D91 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    29 00000D92 39D3                <1>             cmp     ebx, edx
    30 00000D94 7C02                <1>             jl      .20E
    31 00000D96 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    33                              <1> 
    34                              <1>             ; draw rectangle
    35 00000D98 5653515350E824FFFF- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35 00000DA1 FF6683C414          <1>
    36 00000DA6 5652505350E816FFFF- <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36 00000DAF FF6683C414          <1>
    37                              <1> 
    38 00000DB4 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39 00000DB5 5652515250E807FFFF- <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39 00000DBE FF6683C414          <1>
    40 00000DC3 42                  <1>             inc     edx
    41                              <1> 
    42 00000DC4 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43 00000DC5 5652515351E8F7FEFF- <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43 00000DCE FF6683C414          <1>
    44                              <1> 
    45                              <1>             ; return registers
    46 00000DD3 5F                  <1>             pop     edi
    47 00000DD4 5E                  <1>             pop     esi
    48 00000DD5 5A                  <1>             pop     edx
    49 00000DD6 59                  <1>             pop     ecx
    50 00000DD7 5B                  <1>             pop     ebx
    51 00000DD8 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000DD9 89EC                <1>             mov     esp, ebp
    55 00000DDB 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000DDC C3                  <1>             ret
   195                                  %include    "../modules/protect/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 00000DDD 55                  <1>         push    ebp
     6 00000DDE 89E5                <1>         mov     ebp, esp                                ;   +24|flag
     7                              <1>                                                         ;   +20|radix
     8                              <1>                                                         ;   +16|dest buffer size
     9                              <1>                                                         ;   +12|dest buffer address
    10                              <1>                                                         ;   + 8|the value to be converted
    11                              <1>                                                         ;   + 4|Instruction Pointer
    12                              <1>                                                         ;EBP+ 0|EBP
    13                              <1>         ; save registers
    14                              <1> 
    15 00000DE0 50                  <1>         push    eax
    16 00000DE1 53                  <1>         push    ebx
    17 00000DE2 51                  <1>         push    ecx
    18 00000DE3 52                  <1>         push    edx
    19 00000DE4 56                  <1>         push    esi
    20 00000DE5 57                  <1>         push    edi
    21                              <1> 
    22                              <1>         ; get args
    23                              <1> 
    24 00000DE6 8B4508              <1>         mov     eax, [ebp +  8]                         ; val = value
    25 00000DE9 8B750C              <1>         mov     esi, [ebp + 12]                         ; dest= buffer address
    26 00000DEC 8B4D10              <1>         mov     ecx, [ebp + 16]                         ; size= remaining buffer size
    27                              <1> 
    28 00000DEF 89F7                <1>         mov     edi, esi                                ; end of buffer
    29 00000DF1 01CF                <1>         add     edi, ecx                                ; dest = &dest[esize - 1]
    30 00000DF3 4F                  <1>         dec     edi
    31                              <1> 
    32 00000DF4 8B5D18              <1>         mov     ebx, [ebp + 24]
    33                              <1> 
    34                              <1>         ; signing judge
    35                              <1> 
    36 00000DF7 F7C301000000        <1>         test    ebx, 0b0001                             ; if (flags & 0x01) //if signed => ZF = 0
    37 00000DFD 7408                <1> .10Q    je      .10E                                    ; {                 //if not ZF = 1 so => jmp
    38 00000DFF 83F800              <1>         cmp     eax, 0                                  ;   if (val < 0)    //CF = 1, ZF = 0
    39 00000E02 7D03                <1> .12Q    jge     .12E                                    ;   {
    40 00000E04 83CB02              <1>         or      ebx, 0b0010                             ;       flags |= 2; //set B1
    41                              <1>                                                         ; }}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ; sign output judge
    46                              <1> 
    47 00000E07 F7C302000000        <1>         test    ebx, 0b0010
    48 00000E0D 7410                <1> .20Q    je      .20E
    49 00000E0F 83F800              <1>         cmp     eax, 0
    50 00000E12 7D07                <1> .22Q    jge     .22F
    51 00000E14 F7D8                <1>         neg     eax                                     ; sign reverse
    52 00000E16 C6062D              <1>         mov     [esi], byte '-'                         ; sign display
    53 00000E19 EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 00000E1B C6062B              <1>         mov     [esi], byte '+'
    56                              <1> .22E:
    57 00000E1E 49                  <1>         dec     ecx                                     ; subtract remaining buffer size -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ; ASCII conversion
    61                              <1> 
    62 00000E1F 8B5D14              <1>         mov     ebx, [ebp + 20]                          ; ebx = radix
    63                              <1> 
    64                              <1> .30L:                                                   ; do{
    65 00000E22 BA00000000          <1>         mov     edx, 0
    66 00000E27 F7F3                <1>         div     ebx                                    ;   edx = edx:eax % ebx;
    67                              <1>                                                         ;   eax = edx:eax / ebx;
    68                              <1> 
    69 00000E29 89D6                <1>         mov     esi, edx                                ;   //refer to coversion table
    70 00000E2B 8A96[560E0000]      <1>         mov     dl, byte [.ascii + esi]                 ;   DL = ASCII[edx];
    71                              <1> 
    72 00000E31 8817                <1>         mov     [edi], dl                               ;   *dest = DL;
    73 00000E33 4F                  <1>         dec     edi                                     ;   dest--;
    74                              <1> 
    75 00000E34 83F800              <1>         cmp     eax, 0
    76 00000E37 E0E9                <1>         loopnz  .30L                                    ; } while(eax);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ; padding (zero / blank)
    81                              <1> 
    82 00000E39 83F900              <1>         cmp     ecx, 0                                  ; if (esize)
    83 00000E3C 740E                <1> .40Q:   je      .40E                                    ; {
    84 00000E3E B020                <1>         mov     al, ' '                                 ;   AL = ' '; // padding with blanks
    85 00000E40 66837D1804          <1>         cmp     [ebp + 24], word 0b0100                  ;   if (flags & 0x04)
    86 00000E45 7502                <1> .42Q:   jne     .42E                                    ;   {
    87 00000E47 B030                <1>         mov     al, '0'                                 ;       AL = '0'; // padding with zero
    88                              <1> .42E:                                                   ;   }
    89 00000E49 FD                  <1>         std                                             ;   // DF = 1(dec)
    90 00000E4A F3AA                <1>         rep stosb                                       ;   while (--ecx) * edi-- = ' ';
    91                              <1> .40E:                                                   ; }
    92                              <1> 
    93                              <1>         ; return registers
    94                              <1> 
    95 00000E4C 5F                  <1>         pop     edi
    96 00000E4D 5E                  <1>         pop     esi
    97 00000E4E 5A                  <1>         pop     edx
    98 00000E4F 59                  <1>         pop     ecx
    99 00000E50 5B                  <1>         pop     ebx
   100 00000E51 58                  <1>         pop     eax
   101                              <1> 
   102                              <1>         ; destruct stack frame
   103                              <1> 
   104 00000E52 89EC                <1>         mov     esp, ebp
   105 00000E54 5D                  <1>         pop     ebp
   106                              <1> 
   107 00000E55 C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 00000E56 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                      ; conversion table
   110 00000E5F 39414243444546      <1>
   196                                  %include    "../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000E66 55                  <1>             push    ebp                                     ; EBP+8 | destination
     5 00000E67 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 00000E69 50                  <1>             push    eax
     9 00000E6A 53                  <1>             push    ebx
    10                              <1> 
    11                              <1> ; // Avoid conflicts between RTC data updates and
    12                              <1> ; // on-chip RAM access by confirming UIP bit on Register A
    13                              <1> 
    14 00000E6B B00A                <1>             mov     al, 0x0A                                ; register A
    15 00000E6D E670                <1>             out     0x70, al
    16 00000E6F E471                <1>             in      al, 0x71                                ; al = register A
    17 00000E71 A880                <1>             test    al, 0x80                                ; if (UIP) // updating
    18 00000E73 7407                <1>             je      .10F                                    ; {
    19 00000E75 B801000000          <1>             mov     eax, 1                                  ;   return = 1;
    20 00000E7A EB27                <1>             jmp     .10E                                    ; }
    21                              <1> .10F:                                                       ; else
    22                              <1>                                                             ; {        // get time process
    23                              <1> 
    24                              <1>             ; main process
    25 00000E7C B004                <1>             mov     al, 0x04                                ;   hour
    26 00000E7E E670                <1>             out     0x70, al
    27 00000E80 E471                <1>             in      al, 0x71
    28                              <1> 
    29 00000E82 C1E008              <1>             shl     eax, 8
    30                              <1> 
    31 00000E85 B002                <1>             mov     al, 0x02                                ;   minute
    32 00000E87 E670                <1>             out     0x70, al
    33 00000E89 E471                <1>             in      al, 0x71
    34                              <1> 
    35 00000E8B C1E008              <1>             shl     eax, 8
    36                              <1> 
    37 00000E8E B000                <1>             mov     al, 0x00                                ;   second
    38 00000E90 E670                <1>             out     0x70, al
    39 00000E92 E471                <1>             in      al, 0x71
    40                              <1> 
    41 00000E94 25FFFFFF00          <1>             and     eax, 0x00_FF_FF_FF                      ;   all data are in lower 3 bytes of eax register
    42                              <1> 
    43 00000E99 8B5D08              <1>             mov     ebx, [ebp + 8]
    44 00000E9C 8903                <1>             mov     [ebx], eax                              ;   [dest] = real time
    45                              <1> 
    46 00000E9E B800000000          <1>             mov     eax, 0                                  ;   return = 0;
    47                              <1> .10E:                                                       ; }
    48                              <1> 
    49                              <1>             ; return register
    50 00000EA3 5B                  <1>             pop     ebx
    51 00000EA4 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000EA5 89EC                <1>             mov     esp, ebp
    55 00000EA7 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000EA8 C3                  <1>             ret
   197                                  %include    "../modules/protect/draw_time.s"
     1                              <1> draw_time:
     2                              <1> 
     3                              <1>             ; construct stack frame                         ;   +20 | time data
     4 00000EA9 55                  <1>             push    ebp                                     ;   +16 | display color
     5 00000EAA 89E5                <1>             mov     ebp, esp                                ;   +12 | row
     6                              <1>                                                             ;EBP+ 8 | col
     7                              <1> 
     8                              <1>             ; save registers
     9 00000EAC 50                  <1>             push    eax
    10 00000EAD 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; get arg
    13 00000EAE 8B4514              <1>             mov     eax, [ebp + 20]
    14                              <1> 
    15 00000EB1 0FB6D8              <1>             movzx   ebx, al                                 ; ebx = second
    16 00000EB4 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .sec, 2, 16, 0b0100
    16 00000EBB [1B0F0000]53E818FF- <1>
    16 00000EC3 FFFF6683C414        <1>
    17                              <1> 
    18 00000EC9 88E3                <1>             mov     bl, ah                                  ; ebx = min
    19 00000ECB 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .min, 2, 16, 0b0100
    19 00000ED2 [180F0000]53E801FF- <1>
    19 00000EDA FFFF6683C414        <1>
    20                              <1> 
    21 00000EE0 C1E810              <1>             shr     eax, 16                                 ; ax = hour
    22 00000EE3 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .hour, 2, 16, 0b0100
    22 00000EEA [150F0000]50E8E9FE- <1>
    22 00000EF2 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>             ; display time
    25 00000EF8 68[150F0000]FF7510- <1>             cdecl   draw_str, dword [ebp + 8], dword [ebp + 12], dword [ebp + 16], .hour
    25 00000F00 FF750CFF7508E83AFC- <1>
    25 00000F09 FFFF6683C410        <1>
    26                              <1> 
    27                              <1>             ; return registers
    28 00000F0F 5B                  <1>             pop     ebx
    29 00000F10 58                  <1>             pop     eax
    30                              <1> 
    31                              <1>             ; destruct stack frame
    32 00000F11 89EC                <1>             mov     esp, ebp
    33 00000F13 5D                  <1>             pop     ebp
    34                              <1> 
    35 00000F14 C3                  <1>             ret
    36                              <1> 
    37 00000F15 5A5A3A              <1> .hour:  db  "ZZ:"
    38 00000F18 5A5A3A              <1> .min:  db  "ZZ:"
    39 00000F1B 5A5A00              <1> .sec:  db  "ZZ", 0
   198                                  %include    "../modules/protect/interrupt.s"
     1                              <1> ; Initialize vector of IDTR
     2                              <1> 
     3 00000F1E 90<rept>            <1> ALIGN 4
     4 00000F20 FF07                <1> IDTR:       dw      8 * 256 - 1                                     ; limit of IDT
     5 00000F22 00001000            <1>             dd      VECT_BASE                                       ; base address of IDT
     6                              <1> 
     7                              <1> ; Initialize IDT
     8                              <1> 
     9                              <1> init_int:
    10                              <1> 
    11                              <1>             ; save registers
    12 00000F26 50                  <1>             push    eax
    13 00000F27 53                  <1>             push    ebx
    14 00000F28 51                  <1>             push    ecx
    15 00000F29 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; define Interrupt Gate Descriptor and apply default process to them
    18                              <1> 
    19 00000F2A 8D05[70100000]      <1>             lea     eax, [int_default]                              ; EAX = the address of interrupt process
    20 00000F30 BB008E0800          <1>             mov     ebx, 0x0008_8E00                                ; EBX = segment selector & P,DPL,DT,TYPE
    21 00000F35 6693                <1>             xchg    ax, bx                                          ; exchange lower word
    22                              <1> 
    23 00000F37 B900010000          <1>             mov     ecx, 256                                        ; num of Interrupt Gate Descriptor
    24 00000F3C BF00001000          <1>             mov     edi, VECT_BASE                                  ; base address of Interrupt Descriptor Table
    25                              <1> 
    26                              <1> .10L:
    27 00000F41 891F                <1>             mov     [edi + 0], ebx                                  ; interrupt descriptor(lower)
    28 00000F43 894704              <1>             mov     [edi + 4], eax                                  ; interrupt descriptor(upper)
    29 00000F46 83C708              <1>             add     edi, 8                                          ; EDI += 8 byte
    30 00000F49 E2F6                <1>             loop    .10L
    31                              <1> 
    32                              <1>             ; set up Interrupt Descriptor
    33 00000F4B 0F011D[200F0000]    <1>             lidt    [IDTR]
    34                              <1> 
    35                              <1>             ; return registers
    36 00000F52 5F                  <1>             pop     edi
    37 00000F53 59                  <1>             pop     ecx
    38 00000F54 5B                  <1>             pop     ebx
    39 00000F55 58                  <1>             pop     eax
    40                              <1> 
    41 00000F56 C3                  <1>             ret
    42                              <1> 
    43                              <1> int_stop:
    44                              <1> 
    45 00000F57 FB                  <1>             sti                                                     ; interrupt enable
    46                              <1> 
    47                              <1>             ; display the string indicated in EAX
    48 00000F58 50680F0600006A0F6A- <1>             cdecl   draw_str, 25, 15, 0x060F, eax
    48 00000F61 19E8DEFBFFFF6683C4- <1>
    48 00000F6A 10                  <1>
    49                              <1> 
    50                              <1>             ; convert stack data into string
    51 00000F6B 8B0424              <1>             mov     eax, [esp + 0]                                  ; EIP
    52 00000F6E 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p1, 8, 16, 0b0100
    52 00000F75 [33100000]50E85EFE- <1>
    52 00000F7D FFFF6683C414        <1>
    53                              <1> 
    54 00000F83 8B442404            <1>             mov     eax, [esp + 4]                                  ; CS
    55 00000F87 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p2, 8, 16, 0b0100
    55 00000F8E [44100000]50E845FE- <1>
    55 00000F96 FFFF6683C414        <1>
    56                              <1> 
    57 00000F9C 8B442408            <1>             mov     eax, [esp + 8]                                  ; EFLAGS
    58 00000FA0 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p3, 8, 16, 0b0100
    58 00000FA7 [55100000]50E82CFE- <1>
    58 00000FAF FFFF6683C414        <1>
    59                              <1> 
    60 00000FB5 8B44240C            <1>             mov     eax, [esp + 12]
    61 00000FB9 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p4, 8, 16, 0b0100
    61 00000FC0 [66100000]50E813FE- <1>
    61 00000FC8 FFFF6683C414        <1>
    62                              <1> 
    63                              <1>             ; display string
    64 00000FCE 68[2C100000]68040F- <1>             cdecl   draw_str, 25, 16, 0x0F04, .s1
    64 00000FD6 00006A106A19E864FB- <1>
    64 00000FDF FFFF6683C410        <1>
    65 00000FE5 68[3D100000]68040F- <1>             cdecl   draw_str, 25, 17, 0x0F04, .s2
    65 00000FED 00006A116A19E84DFB- <1>
    65 00000FF6 FFFF6683C410        <1>
    66 00000FFC 68[4E100000]68040F- <1>             cdecl   draw_str, 25, 18, 0x0F04, .s3
    66 00001004 00006A126A19E836FB- <1>
    66 0000100D FFFF6683C410        <1>
    67 00001013 68[5F100000]68040F- <1>             cdecl   draw_str, 25, 19, 0x0F04, .s4
    67 0000101B 00006A136A19E81FFB- <1>
    67 00001024 FFFF6683C410        <1>
    68                              <1> 
    69                              <1>             ; infinite loop
    70 0000102A EBFE                <1>             jmp     $
    71                              <1> 
    72 0000102C 4553502B20303A      <1> .s1         db  "ESP+ 0:"
    73 00001033 5F5F5F5F5F5F5F5F20- <1> .p1         db  "________ ", 0
    73 0000103C 00                  <1>
    74 0000103D 2020202B20343A      <1> .s2         db  "   + 4:"
    75 00001044 5F5F5F5F5F5F5F5F20- <1> .p2         db  "________ ", 0
    75 0000104D 00                  <1>
    76 0000104E 2020202B20383A      <1> .s3         db  "   + 8:"
    77 00001055 5F5F5F5F5F5F5F5F20- <1> .p3         db  "________ ", 0
    77 0000105E 00                  <1>
    78 0000105F 2020202B31323A      <1> .s4         db  "   +12:"
    79 00001066 5F5F5F5F5F5F5F5F20- <1> .p4         db  "________ ", 0
    79 0000106F 00                  <1>
    80                              <1> 
    81                              <1> int_default:
    82 00001070 9C                  <1>             pushf                                                   ; EFLAGS
    83 00001071 0E                  <1>             push    cs                                              ; CS
    84 00001072 68[570F0000]        <1>             push    int_stop                                        ; the process of displaying stack
    85                              <1> 
    86 00001077 B8[7D100000]        <1>             mov     eax, .s0                                        ; interrupt type
    87 0000107C CF                  <1>             iret
    88                              <1> 
    89 0000107D 203C2020202053544F- <1> .s0         db  " <    STOP    > ", 0
    89 00001086 50202020203E2000    <1>
    90                              <1> 
    91                              <1> int_zero_div:
    92 0000108E 9C                  <1>             pushf                                                   ; EFLAGS
    93 0000108F 0E                  <1>             push    cs                                              ; CS
    94 00001090 68[570F0000]        <1>             push    int_stop                                        ; the process of displaying stack
    95                              <1> 
    96 00001095 B8[9B100000]        <1>             mov     eax, .s0                                        ; interrupt type
    97 0000109A CF                  <1>             iret
    98                              <1> 
    99 0000109B 203C20205A45524F20- <1> .s0         db  " <  ZERO DIV  > ", 0
    99 000010A4 44495620203E2000    <1>
   100                              <1> 
   101                              <1> 
   199                                  %include    "../modules/protect/pic.s"
     1                              <1> init_pic:
     2                              <1> 
     3                              <1>             ; save register
     4 000010AC 50                  <1>             push    eax
     5                              <1> 
     6                              <1>             ; set up Master PIC
     7                              <1>             outp    0x20, 0x11                              ; MASTER.ICW1 = 0x11
     7 000010AD B011                <2>  mov al, %2
     7 000010AF E620                <2>  out %1, al
     8                              <1>             outp    0x21, 0x20                              ; MASTER.ICW2 = 0x20 // interrupt vector
     8 000010B1 B020                <2>  mov al, %2
     8 000010B3 E621                <2>  out %1, al
     9                              <1>             outp    0x21, 0x04                              ; MASTER.ICW3 = 0x04 // slave connection position : IRQ2
     9 000010B5 B004                <2>  mov al, %2
     9 000010B7 E621                <2>  out %1, al
    10                              <1>             outp    0x21, 0x05                              ; MASTER.ICW4 = 0x05
    10 000010B9 B005                <2>  mov al, %2
    10 000010BB E621                <2>  out %1, al
    11                              <1>             outp    0x21, 0xFF                              ; master interrupt mask
    11 000010BD B0FF                <2>  mov al, %2
    11 000010BF E621                <2>  out %1, al
    12                              <1> 
    13                              <1>             ; set up Slave
    14                              <1>             outp    0xA0, 0x11                              ; SLAVE.ICW1 = 0x11
    14 000010C1 B011                <2>  mov al, %2
    14 000010C3 E6A0                <2>  out %1, al
    15                              <1>             outp    0xA1, 0x28                              ; SLAVE.ICW2 = 0x28 // interrupt vector
    15 000010C5 B028                <2>  mov al, %2
    15 000010C7 E6A1                <2>  out %1, al
    16                              <1>             outp    0xA1, 0x02                              ; SLAVE.ICW3 = 0x02 // slave ID = 2
    16 000010C9 B002                <2>  mov al, %2
    16 000010CB E6A1                <2>  out %1, al
    17                              <1>             outp    0xA1, 0x01                              ; SLAVE.ICW4 = 0x01
    17 000010CD B001                <2>  mov al, %2
    17 000010CF E6A1                <2>  out %1, al
    18                              <1>             outp    0xA1, 0xFF                              ; slave interrupt mask
    18 000010D1 B0FF                <2>  mov al, %2
    18 000010D3 E6A1                <2>  out %1, al
    19                              <1> 
    20                              <1>             ; return regisiter
    21 000010D5 58                  <1>             pop     eax
    22                              <1> 
    23 000010D6 C3                  <1>             ret
   200                                  %include    "../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2                              <1> 
     3                              <1>             ; save registers
     4 000010D7 60                  <1>             pusha
     5 000010D8 1E                  <1>             push    ds
     6 000010D9 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 000010DA 66B81000            <1>             mov     ax, 0x0010                                      ; offset from the beginnig of GDT // second element
    10 000010DE 8ED8                <1>             mov     ds, ax
    11 000010E0 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; get time from RTC
    14 000010E2 68[3C020000]E87AFD- <1>             cdecl   rtc_get_time, RTC_TIME
    14 000010EA FFFF6683C404        <1>
    15                              <1> 
    16                              <1>             ; get RTC interrupt factor
    17                              <1>             outp    0x70, 0x0C                                      ; select register C
    17 000010F0 B00C                <2>  mov al, %2
    17 000010F2 E670                <2>  out %1, al
    18 000010F4 E471                <1>             in      al, 0x71
    19                              <1> 
    20                              <1>             ; clear interrupt flag
    21 000010F6 B020                <1>             mov     al, 0x20                                        ; AL = EOI command
    22 000010F8 E6A0                <1>             out     0xA0, al                                        ; slave PIC
    23 000010FA E620                <1>             out     0x20, al                                        ; master PIC
    24                              <1> 
    25                              <1>             ; return register
    26 000010FC 07                  <1>             pop     es
    27 000010FD 1F                  <1>             pop     ds
    28 000010FE 61                  <1>             popa
    29                              <1> 
    30 000010FF CF                  <1>             iret                                                    ; end of interrupt process
    31                              <1>                                                                     ; return including flag register => iret
    32                              <1> 
    33                              <1> ; Enable interrupt by RTC itself
    34                              <1> 
    35                              <1> rtc_int_en:
    36                              <1> 
    37                              <1>             ; construct stack frame
    38 00001100 55                  <1>             push    ebp
    39 00001101 89E5                <1>             mov     ebp, esp                                        ;EBP+8 | enable bit
    40                              <1> 
    41                              <1>             ; save register
    42 00001103 50                  <1>             push    eax
    43                              <1> 
    44                              <1>             ; set up Interrupt Permission
    45                              <1>             outp    0x70, 0x0B                                      ; select register B
    45 00001104 B00B                <2>  mov al, %2
    45 00001106 E670                <2>  out %1, al
    46                              <1> 
    47 00001108 E471                <1>             in      al, 0x71
    48 0000110A 0A4508              <1>             or      al, [ebp + 8]                                   ; set the specified bit
    49                              <1> 
    50 0000110D E671                <1>             out     0x71, al                                        ; write down to register B
    51                              <1> 
    52                              <1>             ; return register
    53 0000110F 58                  <1>             pop     eax
    54                              <1> 
    55                              <1>             ; destruct stack frame
    56 00001110 89EC                <1>             mov     esp, ebp
    57 00001112 5D                  <1>             pop     ebp
    58                              <1> 
    59 00001113 C3                  <1>             ret
   201                                  %include    "../modules/protect/ring_buff.s"
     1                              <1> ring_rd:
     2                              <1> 
     3                              <1>             ; construct stack frame                                     ;    +12 | save_dest address
     4 00001114 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
     5 00001115 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 00001117 50                  <1>             push    eax
     9 00001118 53                  <1>             push    ebx
    10 00001119 56                  <1>             push    esi
    11 0000111A 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; get args
    14 0000111B 8B7508              <1>             mov     esi, [ebp +  8]
    15 0000111E 8B7D0C              <1>             mov     edi, [ebp + 12]
    16                              <1> 
    17                              <1>             ; confirm the reading location
    18 00001121 B800000000          <1>             mov     eax, 0                                              ; EAX = 0 // no data
    19 00001126 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = rp
    20 00001128 3B5E04              <1>             cmp     ebx, [esi + ring_buff.wp]                           ; if (EBX != wp)
    21 0000112B 7411                <1>             je      .10E                                                ; {
    22                              <1> 
    23 0000112D 8A441E08            <1>             mov     al, [esi + ring_buff.item + ebx]                    ;   AL = BUFFER[rp] // store key code(unit:byte)
    24                              <1> 
    25 00001131 8807                <1>             mov     [edi], al                                           ;   [EDI] = AL      // save data
    26                              <1> 
    27 00001133 43                  <1>             inc     ebx                                                 ;   EBX++           // next reading location
    28 00001134 83E30F              <1>             and     ebx, RING_INDEX_MASK                                ;   EBX &= 0x0F     // limit size
    29 00001137 891E                <1>             mov     [esi + ring_buff.rp], ebx                           ;   rp = EBX        // save the reading location
    30                              <1> 
    31 00001139 B801000000          <1>             mov     eax, 1                                              ;   EAX = 1         // data exists
    32                              <1> .10E:                                                                   ; }
    33                              <1> 
    34                              <1>             ; return registers
    35 0000113E 5F                  <1>             pop     edi
    36 0000113F 5E                  <1>             pop     esi
    37 00001140 5B                  <1>             pop     ebx
    38 00001141 58                  <1>             pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 00001142 89EC                <1>             mov     esp, ebp
    42 00001144 5D                  <1>             pop     ebp
    43                              <1> 
    44 00001145 C3                  <1>             ret
    45                              <1> 
    46                              <1> ring_wr:
    47                              <1> 
    48                              <1>             ; construct stack frame                                     ;    +12 | data to write
    49 00001146 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
    50 00001147 89E5                <1>             mov     ebp, esp
    51                              <1> 
    52                              <1>             ; save registers
    53 00001149 50                  <1>             push    eax
    54 0000114A 53                  <1>             push    ebx
    55 0000114B 51                  <1>             push    ecx
    56 0000114C 56                  <1>             push    esi
    57 0000114D 57                  <1>             push    edi
    58                              <1> 
    59                              <1>             ; get args
    60 0000114E 8B7508              <1>             mov     esi, [ebp + 8]
    61                              <1> 
    62                              <1>             ; confirm the writing location
    63 00001151 B800000000          <1>             mov     eax, 0
    64 00001156 8B5E04              <1>             mov     ebx, [esi + ring_buff.wp]                           ; writing position
    65 00001159 89D9                <1>             mov     ecx, ebx
    66 0000115B 41                  <1>             inc     ecx                                                 ; next writing location
    67 0000115C 83E10F              <1>             and     ecx, RING_INDEX_MASK                                ; size limit
    68                              <1> 
    69 0000115F 3B0E                <1>             cmp     ecx, [esi + ring_buff.rp]                           ; if (ECX != rp)
    70 00001161 740F                <1>             je      .10E                                                ; {
    71                              <1> 
    72 00001163 8A450C              <1>             mov     al, [ebp + 12]                                      ;   AL = data
    73                              <1> 
    74 00001166 88441E08            <1>             mov     [esi + ring_buff.item + ebx], al                    ;   BUFFER[wp] = AL // save key code
    75 0000116A 894E04              <1>             mov     [esi + ring_buff.wp], ecx                           ;   wp = ECX        // save the writing location
    76 0000116D B801000000          <1>             mov     eax, 1
    77                              <1> .10E:
    78                              <1> 
    79                              <1>             ; return registers
    80 00001172 5F                  <1>             pop     edi
    81 00001173 5E                  <1>             pop     esi
    82 00001174 59                  <1>             pop     ecx
    83 00001175 5B                  <1>             pop     ebx
    84 00001176 58                  <1>             pop     eax
    85                              <1> 
    86                              <1>             ; destruct stack frame
    87 00001177 89EC                <1>             mov     esp, ebp
    88 00001179 5D                  <1>             pop     ebp
    89                              <1> 
    90 0000117A C3                  <1>             ret
    91                              <1> 
    92                              <1> draw_key:
    93                              <1> 
    94                              <1>             ; construct stack frame                                     ;    +16 | ring buffer
    95 0000117B 55                  <1>             push    ebp                                                 ;    +12 | row
    96 0000117C 89E5                <1>             mov     ebp, esp                                            ; EBP+ 8 | col
    97                              <1> 
    98                              <1>             ; save registers
    99 0000117E 60                  <1>             pusha                                                       ; save EAX,EBX,ECX,EDX,EDI,ESI,EBP,ESP
   100                              <1> 
   101                              <1>             ; get args
   102 0000117F 8B5508              <1>             mov     edx, [ebp +  8]
   103 00001182 8B7D0C              <1>             mov     edi, [ebp + 12]
   104 00001185 8B7510              <1>             mov     esi, [ebp + 16]
   105                              <1> 
   106                              <1>             ; get ring buffer info
   107 00001188 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = wp // writing location
   108 0000118A 8D7608              <1>             lea     esi, [esi + ring_buff.item]
   109 0000118D B910000000          <1>             mov     ecx, RING_ITEM_SIZE
   110                              <1> 
   111                              <1>             ; display data
   112                              <1> .10L:
   113                              <1> 
   114 00001192 4B                  <1>             dec     ebx                                                 ; EBX-- == where data exists
   115 00001193 83E30F              <1>             and     ebx, RING_INDEX_MASK
   116 00001196 8A041E              <1>             mov     al, [esi + ebx]                                     ; EAX = KEY_BUFF[EBX]
   117                              <1> 
   118 00001199 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .tmp, 2, 16, 0b0100
   118 000011A0 [CA110000]50E833FC- <1>
   118 000011A8 FFFF6683C414        <1>
   119 000011AE 68[CA110000]6A0257- <1>             cdecl   draw_str, edx, edi, 0x02, .tmp
   119 000011B6 52E889F9FFFF6683C4- <1>
   119 000011BF 10                  <1>
   120                              <1> 
   121 000011C0 83C203              <1>             add     edx, 3                                              ; updata display position(3 chars)
   122                              <1> 
   123 000011C3 E2CD                <1>             loop    .10L
   124                              <1> .10E:
   125                              <1> 
   126                              <1>             ; return registers
   127 000011C5 61                  <1>             popa
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 000011C6 89EC                <1>             mov     esp, ebp
   131 000011C8 5D                  <1>             pop     ebp
   132                              <1> 
   133 000011C9 C3                  <1>             ret
   134                              <1> 
   135 000011CA 2D2D2000            <1> .tmp        db "-- ", 0
   202                                  %include    "../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1> 
     3                              <1>             ; save registers
     4 000011CE 60                  <1>             pusha
     5 000011CF 1E                  <1>             push    ds
     6 000011D0 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment for data
     9 000011D1 66B81000            <1>             mov     ax, 0x0010
    10 000011D5 8ED8                <1>             mov     ds, ax
    11 000011D7 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; read buffer of KBC
    14 000011D9 E460                <1>             in      al, 0x60                                    ; AL = get key code
    15                              <1> 
    16                              <1>             ; save key code
    17 000011DB 5068[F4110000]E860- <1>             cdecl   ring_wr, _KEY_BUFF, eax
    17 000011E3 FFFFFF6683C408      <1>
    18                              <1> 
    19                              <1>             ; send interrupt end command
    20                              <1>             outp    0x20, 0x20                                  ; master PIC: EOI command
    20 000011EA B020                <2>  mov al, %2
    20 000011EC E620                <2>  out %1, al
    21                              <1> 
    22                              <1>             ; return registers
    23 000011EE 07                  <1>             pop     es
    24 000011EF 1F                  <1>             pop     ds
    25 000011F0 61                  <1>             popa
    26                              <1> 
    27 000011F1 CF                  <1>             iret
    28                              <1> 
    29 000011F2 00<rept>            <1> ALIGN 4, db 0
    30 000011F4 00<rept>            <1> _KEY_BUFF:  times ring_buff_size db 0
   203                                  %include    "../modules/protect/timer.s"
     1                              <1> int_en_timer0:
     2                              <1> 
     3                              <1>             ; save register
     4 0000120C 50                  <1>             push    eax                                     ; use eax register on outp
     5                              <1> 
     6                              <1>             outp    0x43, 0b_00_11_010_0                    ; counter 0|access way:lower/upper|mode 2|16 bit binary couner
     6 0000120D B034                <2>  mov al, %2
     6 0000120F E643                <2>  out %1, al
     7                              <1>             outp    0x40, 0x9C                              ; lower byte
     7 00001211 B09C                <2>  mov al, %2
     7 00001213 E640                <2>  out %1, al
     8                              <1>             outp    0x40, 0x2E                              ; upper byte
     8 00001215 B02E                <2>  mov al, %2
     8 00001217 E640                <2>  out %1, al
     9                              <1> 
    10                              <1>             ; return register
    11 00001219 58                  <1>             pop     eax
    12                              <1> 
    13 0000121A C3                  <1>             ret
   204                                  %include    "../modules/protect/draw_rotation_bar.s"
     1                              <1> ;--------------------------------------------------------------------------------------------
     2                              <1> ;char update cycle
     3                              <1> ;=> The value obtained by reading the value of Timer interrupt counter
     4                              <1> ;   and shifting it to the right by 4 bits
     5                              <1> ;   and if the value is different from the previous value, it's the time to update.
     6                              <1> ;--------------------------------------------------------------------------------------------
     7                              <1> 
     8                              <1> draw_rotation_bar:
     9                              <1> 
    10                              <1>             ; save register
    11 0000121B 50                  <1>             push    eax
    12                              <1> 
    13                              <1>             ; main process
    14 0000121C A1[D4060000]        <1>             mov     eax, [TIMER_COUNT]
    15 00001221 C1E804              <1>             shr     eax, 4
    16 00001224 3B05[4C120000]      <1>             cmp     eax, [.index]
    17 0000122A 741E                <1>             je      .10E
    18                              <1> 
    19 0000122C A3[4C120000]        <1>             mov     [.index], eax
    20 00001231 83E003              <1>             and     eax, 0x03                                       ; limit to the range 0 to 3
    21                              <1> 
    22 00001234 8A80[50120000]      <1>             mov     al, [.table + eax]                              ; AL = table[index]
    23 0000123A 506A0F6A1D6A00E8D9- <1>             cdecl   draw_char, 0, 29, 0x000F, eax
    23 00001243 F7FFFF6683C410      <1>
    24                              <1> 
    25                              <1> .10E:
    26                              <1> 
    27                              <1>             ; return register
    28 0000124A 58                  <1>             pop     eax
    29                              <1> 
    30 0000124B C3                  <1>             ret
    31                              <1> 
    32                              <1> ALIGN 4, db 0
    33 0000124C 00000000            <1> .index      dd 0                                                    ; previous value
    34 00001250 7C2F2D5C            <1> .table      db "|/-\"                                               ; display bar
   205                                  %include    "../modules/protect/call_gate.s"
     1                              <1> ;--------------------------------------------------
     2                              <1> ; This is a rapper of draw_str func.
     3                              <1> ;--------------------------------------------------
     4                              <1> 
     5                              <1> call_gate:
     6                              <1> 
     7                              <1>             ; construct stack frame
     8                              <1>                                                                     ;    +24 | char
     9                              <1>                                                                     ;    +20 | display color
    10                              <1>                                                                     ;    +16 | row
    11                              <1>                                                                     ;    +12 | column
    12                              <1>                                                                     ; EBP+ 8 | CS(code segment)
    13 00001254 55                  <1>             push    ebp
    14 00001255 89E5                <1>             mov     ebp, esp
    15                              <1> 
    16                              <1>             ; save registers
    17 00001257 60                  <1>             pusha
    18 00001258 1E                  <1>             push    ds
    19 00001259 06                  <1>             push    es
    20                              <1> 
    21                              <1>             ; set up segment for data
    22 0000125A 66B81000            <1>             mov     ax, 0x0010
    23 0000125E 8ED8                <1>             mov     ds, ax
    24 00001260 8EC0                <1>             mov     es, ax
    25                              <1> 
    26                              <1>             ; display string
    27 00001262 8B450C              <1>             mov     eax, dword [ebp + 12]
    28 00001265 8B5D10              <1>             mov     ebx, dword [ebp + 16]
    29 00001268 8B4D14              <1>             mov     ecx, dword [ebp + 20]
    30 0000126B 8B5518              <1>             mov     edx, dword [ebp + 24]
    31 0000126E 52515350E8CEF8FFFF- <1>             cdecl   draw_str, eax, ebx, ecx, edx
    31 00001277 6683C410            <1>
    32                              <1> 
    33                              <1>             ; return registers
    34 0000127B 07                  <1>             pop     es
    35 0000127C 1F                  <1>             pop     ds
    36 0000127D 61                  <1>             popa
    37                              <1> 
    38                              <1>             ; destruct stack frame
    39 0000127E 89EC                <1>             mov     esp, ebp
    40 00001280 5D                  <1>             pop     ebp
    41                              <1> 
    42 00001281 CA1000              <1>             retf    4 * 4                                                ; end func and adjust arguments
   206                                  %include    "../modules/protect/trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1> 
     3                              <1>             ; output a char
     4 00001284 50535251E892F7FFFF- <1>             cdecl   draw_char,  ecx, edx, ebx, eax
     4 0000128D 6683C410            <1>
     5                              <1> 
     6 00001291 CF                  <1>             iret
     7                              <1> 
     8                              <1> trap_gate_82:
     9                              <1> 
    10                              <1>             ; draw pixel
    11 00001292 535251E865F9FFFF66- <1>             cdecl   draw_pixel, ecx, edx, ebx
    11 0000129B 83C40C              <1>
    12                              <1> 
    13 0000129E CF                  <1>             iret
   207                                  %include    "../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                                     ; EBP+8 | address of global variable
     5 0000129F 55                  <1>             push    ebp
     6 000012A0 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 000012A2 50                  <1>             push    eax
    10 000012A3 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; test and set
    13 000012A4 B800000000          <1>             mov     eax, 0                                          ; local = 0
    14 000012A9 8B5D08              <1>             mov     ebx, [ebp + 8]                                  ; global = address
    15                              <1> 
    16                              <1> .10L:
    17 000012AC F00FAB03            <1>             lock bts [ebx], eax                                     ; CF = TEST_AND_SET(IN_USE, 1)
    18 000012B0 7307                <1>             jnc     .10E                                            ; if(0 == CF)
    19                              <1>                                                                     ;   break;
    20                              <1> 
    21                              <1> .12L:
    22 000012B2 0FA303              <1>             bt      [ebx], eax                                      ; CF = TEST(IN_USE, 1)
    23 000012B5 72FB                <1>             jc      .12L                                            ; if(0 == CF)
    24                              <1>                                                                     ;   break;
    25 000012B7 EBF3                <1>             jmp     .10L
    26                              <1> .10E:
    27                              <1> 
    28                              <1>             ; return registers
    29 000012B9 5B                  <1>             pop     ebx
    30 000012BA 58                  <1>             pop     eax
    31                              <1> 
    32                              <1>             ; destruct stakc frame
    33 000012BB 89EC                <1>             mov     esp, ebp
    34 000012BD 5D                  <1>             pop     ebp
    35                              <1> 
    36 000012BE C3                  <1>             ret
   208                                  %include    "../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 
     3                              <1>             ; EBX == TSS selector
     4                              <1> 
     5 000012BF 8B83[A2050000]      <1>             mov     eax, [GDT + ebx + 2]                            ; EAX = TSS[23:0]
     6 000012C5 C1E008              <1>             shl     eax, 8
     7 000012C8 8A83[A7050000]      <1>             mov     al,  [GDT + ebx + 7]                            ; AL  = TSS[31:24]
     8 000012CE C1C808              <1>             ror     eax, 8
     9                              <1> 
    10 000012D1 C3                  <1>             ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 
    14                              <1>             ; EAX == base address of TSS descriptor
    15                              <1> 
    16 000012D2 DD7068              <1>             fnsave  [eax + 104]                                     ; // save FPU context
    17 000012D5 C780D4000000010000- <1>             mov     [eax + 104 + 108], dword 1                      ; saved = 1 // a flag which shows FPU context is saved.
    17 000012DE 00                  <1>
    18                              <1> 
    19 000012DF C3                  <1>             ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1> 
    23 000012E0 83B8D400000000      <1>             cmp     [eax + 104 + 108], dword 0                      ; if (0 == saved)
    24 000012E7 7504                <1>             jne     .10F
    25 000012E9 DBE3                <1>             fninit                                                  ; initialize FPU
    26 000012EB EB03                <1>             jmp     .10E
    27                              <1> .10F:
    28 000012ED DD6068              <1>             frstor  [eax + 104]                                     ; return FPU context
    29                              <1> .10E:
    30 000012F0 C3                  <1>             ret
    31                              <1> 
    32                              <1> int_nm:
    33                              <1> 
    34                              <1>             ; save registers
    35 000012F1 60                  <1>             pusha
    36 000012F2 1E                  <1>             push    ds
    37 000012F3 06                  <1>             push    es
    38                              <1> 
    39                              <1>             ; set up selector for Kernel
    40 000012F4 66B81000            <1>             mov     ax, DS_KERNEL
    41 000012F8 8ED8                <1>             mov     ds, ax
    42 000012FA 8EC0                <1>             mov     es, ax
    43                              <1> 
    44                              <1>             ; clear Task Switch flag
    45 000012FC 0F06                <1>             clts                                                    ; CR0.TS = 0
    46                              <1>                                                                     ; // TS bit is gonna be set by CPU
    47                              <1>                                                                     ; // when Task Switching happend.
    48                              <1> 
    49                              <1>             ; get previous/this time task
    50 000012FE 8B3D[48130000]      <1>             mov     edi, [.last_tss]                                ; TSS of the task that last used FPU
    51 00001304 0F00CE              <1>             str     esi                                             ; TSS of the task using FPU this time
    52 00001307 83E6F8              <1>             and     esi, ~0x0007                                    ; mask segment selector[2:0] // TI:RPL
    53                              <1> 
    54                              <1>             ; compare previous task with the one of this time
    55 0000130A 83FF00              <1>             cmp     edi, 0                                          ; if not exist previous task
    56 0000130D 7420                <1>             je      .10F
    57                              <1> 
    58 0000130F 39FE                <1>             cmp     esi, edi
    59 00001311 741A                <1>             je      .12E
    60                              <1> 
    61 00001313 FA                  <1>             cli                                                     ; disable interrupt
    62                              <1> 
    63                              <1>             ; save previous FPU context
    64 00001314 89FB                <1>             mov     ebx, edi
    65 00001316 E8A4FFFFFF          <1>             call    get_tss_base                                    ; get TSS address
    66 0000131B E8B2FFFFFF          <1>             call    save_fpu_context
    67                              <1> 
    68                              <1>             ; return FPU context of this time
    69 00001320 89F3                <1>             mov     ebx, esi
    70 00001322 E898FFFFFF          <1>             call    get_tss_base
    71 00001327 E8B4FFFFFF          <1>             call    load_fpu_context
    72                              <1> 
    73 0000132C FB                  <1>             sti                                                     ; enable interrupt
    74                              <1> 
    75                              <1> .12E:
    76 0000132D EB0E                <1>             jmp     .10E
    77                              <1> .10F:
    78                              <1> 
    79 0000132F FA                  <1>             cli                                                     ; disable interrupt
    80                              <1> 
    81                              <1>             ; return FPU context of this time
    82 00001330 89F3                <1>             mov     ebx, esi
    83 00001332 E888FFFFFF          <1>             call    get_tss_base
    84 00001337 E8A4FFFFFF          <1>             call    load_fpu_context
    85                              <1> 
    86 0000133C FB                  <1>             sti                                                     ; enable interrupt
    87                              <1> 
    88                              <1> .10E:
    89 0000133D 8935[48130000]      <1>             mov     [.last_tss], esi                                ; save task that used FPU
    90                              <1> 
    91                              <1>             ; return registers
    92 00001343 07                  <1>             pop     es
    93 00001344 1F                  <1>             pop     ds
    94 00001345 61                  <1>             popa
    95                              <1> 
    96 00001346 CF                  <1>             iret
    97                              <1> 
    98 00001347 00                  <1> ALIGN 4, db 0
    99 00001348 00000000            <1> .last_tss:  dd  0
   209                                  %include    "../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                             ; EBP +8 | waif == num of system interrupt
     5 0000134C 55                  <1>             push    ebp
     6 0000134D 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 0000134F 50                  <1>             push    eax
    10 00001350 51                  <1>             push    ecx
    11                              <1> 
    12                              <1>             ; wait
    13 00001351 8B4D08              <1>             mov     ecx, [ebp + 8]
    14 00001354 A1[D4060000]        <1>             mov     eax, [TIMER_COUNT]
    15                              <1> 
    16                              <1> .10L:
    17 00001359 3905[D4060000]      <1>             cmp     [TIMER_COUNT], eax                      ; while(TIMER != eax)
    18 0000135F 74F8                <1>             je      .10L
    19 00001361 40                  <1>             inc     eax                                     ; eax++
    20 00001362 E2F5                <1>             loop    .10L                                    ; while(--ecx)
    21                              <1> 
    22                              <1>             ; return registers
    23 00001364 59                  <1>             pop     ecx
    24 00001365 58                  <1>             pop     eax
    25                              <1> 
    26                              <1>             ; destruct stakc frame
    27 00001366 89EC                <1>             mov     esp, ebp
    28 00001368 5D                  <1>             pop     ebp
    29                              <1> 
    30 00001369 C3                  <1>             ret
   210                                  
   211                                  
   212                                  ; PADDING
   213                                  
   214 0000136A 00<rept>                            times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
