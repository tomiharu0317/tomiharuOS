     1                                  %define     USE_SYSTEM_CALL
     2                                  
     3                                  ;macro
     4                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1> 
     5                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
    56                              <1> 
    57                              <1> %macro  set_desc 2-*
    58                              <1>             push    eax
    59                              <1>             push    edi
    60                              <1> 
    61                              <1>             mov     edi, %1                             ; descriptor address
    62                              <1>             mov     eax, %2                             ; base address
    63                              <1> 
    64                              <1>         %if 3 == %0
    65                              <1>             mov     [edi + 0], %3                       ; limit
    66                              <1>         %endif
    67                              <1> 
    68                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 4], al                       ; base([23:16])
    71                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    72                              <1> 
    73                              <1>             pop     edi
    74                              <1>             pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate 2-*
    78                              <1>             push    eax
    79                              <1>             push    edi
    80                              <1> 
    81                              <1>             mov     edi, %1                             ; descriptor address
    82                              <1>             mov     eax, %2                             ; base address
    83                              <1> 
    84                              <1>             mov     [edi + 0], ax                       ; base([15:0])
    85                              <1>             shr     eax, 16
    86                              <1>             mov     [edi + 6], ax                       ; base([31:16])
    87                              <1> 
    88                              <1>             pop     edi
    89                              <1>             pop     eax
    90                              <1> %endmacro
     6                                  
     7                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     8                                  
     9                                  [BITS 32]                                                       ; BIT 32 directive
    10                                  ; entry point
    11                                  
    12                                  kernel:
    13                                  
    14                                                  ; Get Font address
    15 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    16 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    17 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    18 0000000C C1E004                                  shl     eax, 4
    19 0000000F 01D8                                    add     eax, ebx
    20 00000011 A3[D0010000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    21                                  
    22                                                  ; set up TSS descriptor
    23                                                  set_desc    GDT.tss_0, TSS_0
    23 00000016 50                  <1>  push eax
    23 00000017 57                  <1>  push edi
    23                              <1> 
    23 00000018 BF[C8020000]        <1>  mov edi, %1
    23 0000001D B8[D8010000]        <1>  mov eax, %2
    23                              <1> 
    23                              <1>  %if 3 == %0
    23                              <1>  mov [edi + 0], %3
    23                              <1>  %endif
    23                              <1> 
    23 00000022 66894702            <1>  mov [edi + 2], ax
    23 00000026 C1E810              <1>  shr eax, 16
    23 00000029 884704              <1>  mov [edi + 4], al
    23 0000002C 886707              <1>  mov [edi + 7], ah
    23                              <1> 
    23 0000002F 5F                  <1>  pop edi
    23 00000030 58                  <1>  pop eax
    24                                                  set_desc    GDT.tss_1, TSS_1
    24 00000031 50                  <1>  push eax
    24 00000032 57                  <1>  push edi
    24                              <1> 
    24 00000033 BF[D0020000]        <1>  mov edi, %1
    24 00000038 B8[40020000]        <1>  mov eax, %2
    24                              <1> 
    24                              <1>  %if 3 == %0
    24                              <1>  mov [edi + 0], %3
    24                              <1>  %endif
    24                              <1> 
    24 0000003D 66894702            <1>  mov [edi + 2], ax
    24 00000041 C1E810              <1>  shr eax, 16
    24 00000044 884704              <1>  mov [edi + 4], al
    24 00000047 886707              <1>  mov [edi + 7], ah
    24                              <1> 
    24 0000004A 5F                  <1>  pop edi
    24 0000004B 58                  <1>  pop eax
    25                                  
    26                                                  ; set up Call Gate
    27                                                  set_gate    GDT.call_gate, call_gate
    27 0000004C 50                  <1>  push eax
    27 0000004D 57                  <1>  push edi
    27                              <1> 
    27 0000004E BF[D8020000]        <1>  mov edi, %1
    27                              <1>  mov eax, %2
    27          ******************  <1>  error: symbol `call_gate' undefined
    27                              <1> 
    27 00000053 668907              <1>  mov [edi + 0], ax
    27 00000056 C1E810              <1>  shr eax, 16
    27 00000059 66894706            <1>  mov [edi + 6], ax
    27                              <1> 
    27 0000005D 5F                  <1>  pop edi
    27 0000005E 58                  <1>  pop eax
    28                                  
    29                                                  ; set up LDT
    30                                                  set_desc    GDT.ldt, LDT, word LDT_LIMIT        ; descriptor address/base address/limit
    30 0000005F 50                  <1>  push eax
    30 00000060 57                  <1>  push edi
    30                              <1> 
    30 00000061 BF[C0020000]        <1>  mov edi, %1
    30 00000066 B8[E6020000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30 0000006B 66C7072700          <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 00000070 66894702            <1>  mov [edi + 2], ax
    30 00000074 C1E810              <1>  shr eax, 16
    30 00000077 884704              <1>  mov [edi + 4], al
    30 0000007A 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 0000007D 5F                  <1>  pop edi
    30 0000007E 58                  <1>  pop eax
    31                                  
    32                                                  ; load GDTR (resetting)
    33 0000007F 0F0115[E0020000]                        lgdt        [GDTR]
    34                                  
    35                                                  ; set up stack
    36 00000086 BC00341000                              mov     esp, SP_TASK_0                          ; set up stack for Task0
    37                                  
    38                                                  ; recognize Kernel as Task0
    39 0000008B 66B82000                                mov     ax, SS_TASK_0
    40 0000008F 0F00D8                                  ltr     ax                                      ; initialize TR
    41                                  
    42                                                  ; initialize interrupt vector
    43 00000092 E883080000                              cdecl   init_int
    44 00000097 E8040A0000                              cdecl   init_pic
    45                                  
    46                                                  set_vect    0x00, int_zero_div                  ; define interrupt process: Zero div
    46 0000009C 50                  <1>  push eax
    46 0000009D 57                  <1>  push edi
    46                              <1> 
    46 0000009E BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    46 000000A3 B8[820A0000]        <1>  mov eax, %2
    46                              <1> 
    46                              <1>  %if 3 == %0
    46                              <1>  mov [edi + 4], %3
    46                              <1>  %endif
    46                              <1> 
    46 000000A8 668907              <1>  mov [edi + 0], ax
    46 000000AB C1E810              <1>  shr eax, 16
    46 000000AE 66894706            <1>  mov [edi + 6], ax
    46                              <1> 
    46 000000B2 5F                  <1>  pop edi
    46 000000B3 58                  <1>  pop eax
    47                                                  set_vect    0x20, int_timer                     ; define interrupt process: Timer
    47 000000B4 50                  <1>  push eax
    47 000000B5 57                  <1>  push edi
    47                              <1> 
    47 000000B6 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    47 000000BB B8[0E030000]        <1>  mov eax, %2
    47                              <1> 
    47                              <1>  %if 3 == %0
    47                              <1>  mov [edi + 4], %3
    47                              <1>  %endif
    47                              <1> 
    47 000000C0 668907              <1>  mov [edi + 0], ax
    47 000000C3 C1E810              <1>  shr eax, 16
    47 000000C6 66894706            <1>  mov [edi + 6], ax
    47                              <1> 
    47 000000CA 5F                  <1>  pop edi
    47 000000CB 58                  <1>  pop eax
    48                                                  set_vect    0x21, int_keyboard                  ; define interrupt process: KBC
    48 000000CC 50                  <1>  push eax
    48 000000CD 57                  <1>  push edi
    48                              <1> 
    48 000000CE BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    48 000000D3 B8[C20B0000]        <1>  mov eax, %2
    48                              <1> 
    48                              <1>  %if 3 == %0
    48                              <1>  mov [edi + 4], %3
    48                              <1>  %endif
    48                              <1> 
    48 000000D8 668907              <1>  mov [edi + 0], ax
    48 000000DB C1E810              <1>  shr eax, 16
    48 000000DE 66894706            <1>  mov [edi + 6], ax
    48                              <1> 
    48 000000E2 5F                  <1>  pop edi
    48 000000E3 58                  <1>  pop eax
    49                                                  set_vect    0x28, int_rtc                       ; define interrupt process: RTC
    49 000000E4 50                  <1>  push eax
    49 000000E5 57                  <1>  push edi
    49                              <1> 
    49 000000E6 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    49 000000EB B8[CB0A0000]        <1>  mov eax, %2
    49                              <1> 
    49                              <1>  %if 3 == %0
    49                              <1>  mov [edi + 4], %3
    49                              <1>  %endif
    49                              <1> 
    49 000000F0 668907              <1>  mov [edi + 0], ax
    49 000000F3 C1E810              <1>  shr eax, 16
    49 000000F6 66894706            <1>  mov [edi + 6], ax
    49                              <1> 
    49 000000FA 5F                  <1>  pop edi
    49 000000FB 58                  <1>  pop eax
    50                                                  set_vect    0x81, trap_gate_81, word 0xEF00     ; define trap gate        : display a char
    50 000000FC 50                  <1>  push eax
    50 000000FD 57                  <1>  push edi
    50                              <1> 
    50 000000FE BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    50                              <1>  mov eax, %2
    50          ******************  <1>  error: symbol `trap_gate_81' undefined
    50                              <1> 
    50                              <1>  %if 3 == %0
    50 00000103 66C7470400EF        <1>  mov [edi + 4], %3
    50                              <1>  %endif
    50                              <1> 
    50 00000109 668907              <1>  mov [edi + 0], ax
    50 0000010C C1E810              <1>  shr eax, 16
    50 0000010F 66894706            <1>  mov [edi + 6], ax
    50                              <1> 
    50 00000113 5F                  <1>  pop edi
    50 00000114 58                  <1>  pop eax
    51                                                  set_vect    0x82, trap_gate_82, word 0xEF00     ; define trap gate        : draw pixel
    51 00000115 50                  <1>  push eax
    51 00000116 57                  <1>  push edi
    51                              <1> 
    51 00000117 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    51                              <1>  mov eax, %2
    51          ******************  <1>  error: symbol `trap_gate_82' undefined
    51                              <1> 
    51                              <1>  %if 3 == %0
    51 0000011C 66C7470400EF        <1>  mov [edi + 4], %3
    51                              <1>  %endif
    51                              <1> 
    51 00000122 668907              <1>  mov [edi + 0], ax
    51 00000125 C1E810              <1>  shr eax, 16
    51 00000128 66894706            <1>  mov [edi + 6], ax
    51                              <1> 
    51 0000012C 5F                  <1>  pop edi
    51 0000012D 58                  <1>  pop eax
    52                                  
    53                                  
    54                                                  ; permit interrupt by device
    55 0000012E 6A10E8BF0900006683-                     cdecl   rtc_int_en, 0x10                        ; Updata-Ended Interrupt Enable
    55 00000137 C404               
    56 00000139 E8C20A0000                              cdecl   int_en_timer0
    57                                  
    58                                                  ; set up IMR(Interrupt Mask Register)
    59                                                  outp    0x21, 0b1111_1000                       ; interrupt enable: slave PIC/KBC/Timer     // master
    59 0000013E B0F8                <1>  mov al, %2
    59 00000140 E621                <1>  out %1, al
    60                                                  outp    0xA1, 0b1111_1110                       ; interrupt enable: RTC                     // slave
    60 00000142 B0FE                <1>  mov al, %2
    60 00000144 E6A1                <1>  out %1, al
    61                                  
    62                                                  ; CPU interrupt enable
    63 00000146 FB                                      sti
    64                                  
    65                                                  ; display font and color_bar
    66 00000147 6A0D6A3FE8A2030000-                     cdecl   draw_font, 63, 13
    66 00000150 6683C408           
    67 00000154 6A046A3FE81A040000-                     cdecl   draw_color_bar, 63, 4
    67 0000015D 6683C408           
    68                                  
    69                                                  ; display string
    70 00000161 68[B8010000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    70 00000169 00006A0E6A19E8C303-
    70 00000172 00006683C410       
    71                                  
    72                                  ;---------------------------------------------------------------------------
    73                                  ; default multitask
    74                                  ;---------------------------------------------------------------------------
    75                                  
    76                                  
    77                                  ;                 ; call Task
    78                                  ;                 ; call    SS_TASK_1:0
    79                                  
    80                                  ; .10L:
    81                                  
    82                                  ;                 ; display time
    83                                  ;                 mov     eax, [RTC_TIME]
    84                                  ;                 cdecl   draw_time, 72, 0, 0x0700, eax
    85                                  
    86                                  
    87                                  ;                 ; get key code
    88                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
    89                                  ;                 cmp     eax, 0
    90                                  ;                 je      .10E
    91                                  
    92                                  ;                 ; display key code
    93                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
    94                                  ; .10E:
    95                                  
    96                                  ;                 ; draw rotation bar
    97                                  ;                 cdecl   draw_rotation_bar
    98                                  
    99                                  ;                 jmp     .10L
   100                                  
   101                                  ;----------------------------------------------------------------------------
   102                                  
   103                                  
   104                                  ;----------------------------------------------------------------------------
   105                                  ; non-preemptive multitask
   106                                  ;----------------------------------------------------------------------------
   107                                  
   108                                  ; .10L:
   109                                  
   110                                  ;                 ; call task
   111                                  ;                 jmp     SS_TASK_1:0                             ; jump to Task1
   112                                  
   113                                  ;                 ; draw rotation bar
   114                                  ;                 cdecl   draw_rotation_bar
   115                                  
   116                                  ;                 ; get key code
   117                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   118                                  ;                 cmp     eax, 0
   119                                  ;                 je      .10E
   120                                  
   121                                  ;                 ; display key code
   122                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   123                                  ; .10E:
   124                                  
   125                                  ;                 jmp     .10L
   126                                  
   127                                  ;-----------------------------------------------------------------------------
   128                                  
   129                                  ;----------------------------------------------------------------------------
   130                                  ; preemptive multitask
   131                                  ;----------------------------------------------------------------------------
   132                                  
   133                                  .10L:
   133          ******************       error: label `kernel.10L' changed during code generation [-w+error=label-redef-late]
   134                                  
   135                                                  ; draw rotation bar
   136 00000178 E8920A0000                              cdecl   draw_rotation_bar
   137                                  
   138                                                  ; get key code
   139 0000017D 68[CC010000]68-                         cdecl   ring_rd, _KEY_BUFF, .int_key
   139 00000183 [E80B0000]E87C0900-
   139 0000018B 006683C408         
   140 00000190 83F800                                  cmp     eax, 0
   141 00000193 7421                                    je      .10E
   142                                  
   143                                                  ; display key code
   144 00000195 68[E80B0000]6A1D6A-                     cdecl   draw_key, 2, 29, _KEY_BUFF
   144 0000019D 02E8CC0900006683C4-
   144 000001A6 0C                 
   145                                  .10E:
   145          ******************       error: label `kernel.10E' changed during code generation [-w+error=label-redef-late]
   146                                  
   147 000001A7 EBCF                                    jmp     .10L
   148                                  
   149                                  ;-----------------------------------------------------------------------------
   150                                  
   151                                  ;data
   152 000001A9 2048656C6C6F2C206B-     .s0:    db  " Hello, kernel! ", 0
   152          ******************       error: label `kernel.s0' changed during code generation [-w+error=label-redef-late]
   152 000001B2 65726E656C212000   
   153                                  
   154 000001BA 00<rept>                ALIGN 4, db 0
   155 000001BC 00000000                .int_key:   dd 0
   155          ******************       error: label `kernel.int_key' changed during code generation [-w+error=label-redef-late]
   156                                  
   157                                  ALIGN 4, db 0
   158 000001C0 00000000                FONT_ADR:   dd 0
   158          ******************       error: label `FONT_ADR' changed during code generation [-w+error=label-redef-late]
   159 000001C4 00000000                RTC_TIME:   dd 0
   159          ******************       error: label `RTC_TIME' changed during code generation [-w+error=label-redef-late]
   160                                  
   161                                  
   162                                  ; TASKS
   163                                  %include    "descriptor.s"
     1                              <1> ;-----------------------------------------------------------------------
     2                              <1> ; TSS
     3                              <1> ;-----------------------------------------------------------------------
     4                              <1> 
     5                              <1> TSS_0:
     5          ******************  <1>  error: label `TSS_0' changed during code generation [-w+error=label-redef-late]
     6 000001C8 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
     6          ******************  <1>  error: label `TSS_0.link' changed during code generation [-w+error=label-redef-late]
     7 000001CC 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                             ;*  4: ESP0
     7          ******************  <1>  error: label `TSS_0.esp0' changed during code generation [-w+error=label-redef-late]
     8 000001D0 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
     8          ******************  <1>  error: label `TSS_0.ss0' changed during code generation [-w+error=label-redef-late]
     9 000001D4 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
     9          ******************  <1>  error: label `TSS_0.esp1' changed during code generation [-w+error=label-redef-late]
    10 000001D8 00000000            <1> .ss1:           dd  0                                           ;* 16:
    10          ******************  <1>  error: label `TSS_0.ss1' changed during code generation [-w+error=label-redef-late]
    11 000001DC 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    11          ******************  <1>  error: label `TSS_0.esp2' changed during code generation [-w+error=label-redef-late]
    12 000001E0 00000000            <1> .ss2:           dd  0                                           ;* 24:
    12          ******************  <1>  error: label `TSS_0.ss2' changed during code generation [-w+error=label-redef-late]
    13 000001E4 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    13          ******************  <1>  error: label `TSS_0.cr3' changed during code generation [-w+error=label-redef-late]
    14 000001E8 00000000            <1> .eip:           dd  0                                           ;  32: EIP
    14          ******************  <1>  error: label `TSS_0.eip' changed during code generation [-w+error=label-redef-late]
    15 000001EC 00000000            <1> .eflags:        dd  0                                           ;  36: EFLAGS
    15          ******************  <1>  error: label `TSS_0.eflags' changed during code generation [-w+error=label-redef-late]
    16 000001F0 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    16          ******************  <1>  error: label `TSS_0.eax' changed during code generation [-w+error=label-redef-late]
    17 000001F4 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    17          ******************  <1>  error: label `TSS_0.ecx' changed during code generation [-w+error=label-redef-late]
    18 000001F8 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    18          ******************  <1>  error: label `TSS_0.edx' changed during code generation [-w+error=label-redef-late]
    19 000001FC 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    19          ******************  <1>  error: label `TSS_0.ebx' changed during code generation [-w+error=label-redef-late]
    20 00000200 00000000            <1> .esp:           dd  0                                           ;  56: ESP
    20          ******************  <1>  error: label `TSS_0.esp' changed during code generation [-w+error=label-redef-late]
    21 00000204 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    21          ******************  <1>  error: label `TSS_0.ebp' changed during code generation [-w+error=label-redef-late]
    22 00000208 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    22          ******************  <1>  error: label `TSS_0.esi' changed during code generation [-w+error=label-redef-late]
    23 0000020C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    23          ******************  <1>  error: label `TSS_0.edi' changed during code generation [-w+error=label-redef-late]
    24 00000210 00000000            <1> .es:            dd  0                                           ;  72: ES
    24          ******************  <1>  error: label `TSS_0.es' changed during code generation [-w+error=label-redef-late]
    25 00000214 00000000            <1> .cs:            dd  0                                           ;  76: CS
    25          ******************  <1>  error: label `TSS_0.cs' changed during code generation [-w+error=label-redef-late]
    26 00000218 00000000            <1> .ss:            dd  0                                           ;  80: SS
    26          ******************  <1>  error: label `TSS_0.ss' changed during code generation [-w+error=label-redef-late]
    27 0000021C 00000000            <1> .ds:            dd  0                                           ;  84: DS
    27          ******************  <1>  error: label `TSS_0.ds' changed during code generation [-w+error=label-redef-late]
    28 00000220 00000000            <1> .fs:            dd  0                                           ;  88: FS
    28          ******************  <1>  error: label `TSS_0.fs' changed during code generation [-w+error=label-redef-late]
    29 00000224 00000000            <1> .gs:            dd  0                                           ;  92: GS
    29          ******************  <1>  error: label `TSS_0.gs' changed during code generation [-w+error=label-redef-late]
    30 00000228 00000000            <1> .ldt:           dd  0                                           ;* 96: LDT segment selector
    30          ******************  <1>  error: label `TSS_0.ldt' changed during code generation [-w+error=label-redef-late]
    31 0000022C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    31          ******************  <1>  error: label `TSS_0.io' changed during code generation [-w+error=label-redef-late]
    32                              <1> 
    33                              <1> TSS_1:
    33          ******************  <1>  error: label `TSS_1' changed during code generation [-w+error=label-redef-late]
    34 00000230 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    34          ******************  <1>  error: label `TSS_1.link' changed during code generation [-w+error=label-redef-late]
    35 00000234 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                             ;*  4: ESP0
    35          ******************  <1>  error: label `TSS_1.esp0' changed during code generation [-w+error=label-redef-late]
    36 00000238 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    36          ******************  <1>  error: label `TSS_1.ss0' changed during code generation [-w+error=label-redef-late]
    37 0000023C 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    37          ******************  <1>  error: label `TSS_1.esp1' changed during code generation [-w+error=label-redef-late]
    38 00000240 00000000            <1> .ss1:           dd  0                                           ;* 16:
    38          ******************  <1>  error: label `TSS_1.ss1' changed during code generation [-w+error=label-redef-late]
    39 00000244 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    39          ******************  <1>  error: label `TSS_1.esp2' changed during code generation [-w+error=label-redef-late]
    40 00000248 00000000            <1> .ss2:           dd  0                                           ;* 24:
    40          ******************  <1>  error: label `TSS_1.ss2' changed during code generation [-w+error=label-redef-late]
    41 0000024C 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    41          ******************  <1>  error: label `TSS_1.cr3' changed during code generation [-w+error=label-redef-late]
    42 00000250 [4C030000]          <1> .eip:           dd  task_1                                      ;  32: EIP
    42          ******************  <1>  error: label `TSS_1.eip' changed during code generation [-w+error=label-redef-late]
    43 00000254 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    43          ******************  <1>  error: label `TSS_1.eflags' changed during code generation [-w+error=label-redef-late]
    44 00000258 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    44          ******************  <1>  error: label `TSS_1.eax' changed during code generation [-w+error=label-redef-late]
    45 0000025C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    45          ******************  <1>  error: label `TSS_1.ecx' changed during code generation [-w+error=label-redef-late]
    46 00000260 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    46          ******************  <1>  error: label `TSS_1.edx' changed during code generation [-w+error=label-redef-late]
    47 00000264 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    47          ******************  <1>  error: label `TSS_1.ebx' changed during code generation [-w+error=label-redef-late]
    48 00000268 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56: ESP
    48          ******************  <1>  error: label `TSS_1.esp' changed during code generation [-w+error=label-redef-late]
    49 0000026C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    49          ******************  <1>  error: label `TSS_1.ebp' changed during code generation [-w+error=label-redef-late]
    50 00000270 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    50          ******************  <1>  error: label `TSS_1.esi' changed during code generation [-w+error=label-redef-late]
    51 00000274 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    51          ******************  <1>  error: label `TSS_1.edi' changed during code generation [-w+error=label-redef-late]
    52 00000278 27000000            <1> .es:            dd  DS_TASK_1                                   ;  72: ES
    52          ******************  <1>  error: label `TSS_1.es' changed during code generation [-w+error=label-redef-late]
    53 0000027C 1F000000            <1> .cs:            dd  CS_TASK_1                                   ;  76: CS
    53          ******************  <1>  error: label `TSS_1.cs' changed during code generation [-w+error=label-redef-late]
    54 00000280 27000000            <1> .ss:            dd  DS_TASK_1                                   ;  80: SS
    54          ******************  <1>  error: label `TSS_1.ss' changed during code generation [-w+error=label-redef-late]
    55 00000284 27000000            <1> .ds:            dd  DS_TASK_1                                   ;  84: DS
    55          ******************  <1>  error: label `TSS_1.ds' changed during code generation [-w+error=label-redef-late]
    56 00000288 27000000            <1> .fs:            dd  DS_TASK_1                                   ;  88: FS
    56          ******************  <1>  error: label `TSS_1.fs' changed during code generation [-w+error=label-redef-late]
    57 0000028C 27000000            <1> .gs:            dd  DS_TASK_1                                   ;  92: GS
    57          ******************  <1>  error: label `TSS_1.gs' changed during code generation [-w+error=label-redef-late]
    58 00000290 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    58          ******************  <1>  error: label `TSS_1.ldt' changed during code generation [-w+error=label-redef-late]
    59 00000294 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    59          ******************  <1>  error: label `TSS_1.io' changed during code generation [-w+error=label-redef-late]
    60                              <1> 
    61                              <1> ;-----------------------------------------------------------------------------------------------
    62                              <1> ; GDT
    63                              <1> ;-----------------------------------------------------------------------------------------------
    64                              <1> 
    65 00000298 0000000000000000    <1> GDT:            dq  0x0000000000000000
    65          ******************  <1>  error: label `GDT' changed during code generation [-w+error=label-redef-late]
    66 000002A0 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x00CF9A000000FFFF                          ; CODE 4G
    66          ******************  <1>  error: label `GDT.cs_kernel' changed during code generation [-w+error=label-redef-late]
    67 000002A8 FFFF00000092CF00    <1> .ds_kernel:     dq  0x00CF92000000FFFF                          ; DATA 4G
    67          ******************  <1>  error: label `GDT.ds_kernel' changed during code generation [-w+error=label-redef-late]
    68 000002B0 0000000000820000    <1> .ldt            dq  0x0000820000000000                          ; LDT descriptor
    68          ******************  <1>  error: label `GDT.ldt' changed during code generation [-w+error=label-redef-late]
    69 000002B8 6700000000890000    <1> .tss_0:         dq  0x0000890000000067                          ; TSS descriptor
    69          ******************  <1>  error: label `GDT.tss_0' changed during code generation [-w+error=label-redef-late]
    70 000002C0 6700000000890000    <1> .tss_1:         dq  0x0000890000000067                          ; TSS descriptor
    70          ******************  <1>  error: label `GDT.tss_1' changed during code generation [-w+error=label-redef-late]
    71 000002C8 0000080004EC0000    <1> .call_gate:     dq  0x0000EC0400080000                          ; 386 call gate(DPL=3, count=4, SEL=8)
    71          ******************  <1>  error: label `GDT.call_gate' changed during code generation [-w+error=label-redef-late]
    72                              <1> .end:
    72          ******************  <1>  error: label `GDT.end' changed during code generation [-w+error=label-redef-late]
    73                              <1> 
    74                              <1> CS_KERNEL       equ .cs_kernel - GDT
    75                              <1> DS_KERNEL       equ .ds_kernel - GDT
    76                              <1> SS_LDT          equ .ldt       - GDT
    77                              <1> SS_TASK_0       equ .tss_0     - GDT
    78                              <1> SS_TASK_1       equ .tss_1     - GDT
    79                              <1> SS_GATE_0       equ .call_gate - GDT
    80                              <1> 
    81 000002D0 3700                <1> GDTR:   dw      GDT.end - GDT - 1
    81          ******************  <1>  error: label `GDTR' changed during code generation [-w+error=label-redef-late]
    82 000002D2 [98020000]          <1>         dd      GDT
    83                              <1> 
    84                              <1> ;-----------------------------------------------------------------------------------------------
    85                              <1> ; LDT
    86                              <1> ;-----------------------------------------------------------------------------------------------
    87                              <1> 
    88 000002D6 0000000000000000    <1> LDT:            dq  0x0000000000000000                          ; NULL
    88          ******************  <1>  error: label `LDT' changed during code generation [-w+error=label-redef-late]
    89 000002DE FFFF0000009ACF00    <1> .cs_task_0:     dq  0x00CF9A000000FFFF                          ; CODE 4G
    89          ******************  <1>  error: label `LDT.cs_task_0' changed during code generation [-w+error=label-redef-late]
    90 000002E6 FFFF00000092CF00    <1> .ds_task_0:     dq  0x00CF92000000FFFF                          ; DATA 4G
    90          ******************  <1>  error: label `LDT.ds_task_0' changed during code generation [-w+error=label-redef-late]
    91 000002EE FFFF000000FACF00    <1> .cs_task_1:     dq  0x00CFFA000000FFFF                          ; CODE 4G
    91          ******************  <1>  error: label `LDT.cs_task_1' changed during code generation [-w+error=label-redef-late]
    92 000002F6 FFFF000000F2CF00    <1> .ds_task_1:     dq  0x00CFF2000000FFFF                          ; DATA 4G
    92          ******************  <1>  error: label `LDT.ds_task_1' changed during code generation [-w+error=label-redef-late]
    93                              <1> .end:
    93          ******************  <1>  error: label `LDT.end' changed during code generation [-w+error=label-redef-late]
    94                              <1> 
    95                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                      ; cs selector for task0 // set bit 2(TI)
    96                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                      ; ds selector for task0 // Priviledge level 0
    97                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                  ; cs selector for task1 // Priviledge level 3
    98                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                  ; ds selector for task1
    99                              <1> 
   100                              <1> LDT_LIMIT       equ .end        - LDT - 1
   164                                  %include    "modules/int_timer.s"
     1                              <1> int_timer:
     1          ******************  <1>  error: label `int_timer' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; save registers
     4 000002FE 60                  <1>             pusha
     5 000002FF 1E                  <1>             push    ds
     6 00000300 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000301 66B81000            <1>             mov     ax, 0x0010
    10 00000305 8ED8                <1>             mov     ds, ax
    11 00000307 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; TICK
    14 00000309 FF05[44030000]      <1>             inc     dword [TIMER_COUNT]                                     ; TIMER_COUNT++ //update interrupt count
    15                              <1> 
    16                              <1>             ; clear interrupt flag(EOI)
    17                              <1>             outp    0x20, 0x20                                              ; master PIC:EOI command
    17 0000030F B020                <2>  mov al, %2
    17 00000311 E620                <2>  out %1, al
    18                              <1> 
    19                              <1>             ; exchange Task
    20 00000313 660F00C8            <1>             str     ax                                                      ; AX = TR // current Task Register
    21 00000317 6683F828            <1>             cmp     ax, SS_TASK_1
    22 0000031B 7419                <1>             je      .11L
    23                              <1> 
    24 0000031D EA000000002800      <1>             jmp     SS_TASK_1:0
    25 00000324 EB19                <1>             jmp     .10E
    26                              <1> .11L:
    26          ******************  <1>  error: label `int_timer.11L' changed during code generation [-w+error=label-redef-late]
    27 00000326 EA000000002000      <1>             jmp     SS_TASK_0:0
    28 0000032D EB10                <1>             jmp     .10E
    29                              <1> .10E:
    29          ******************  <1>  error: label `int_timer.10E' changed during code generation [-w+error=label-redef-late]
    30                              <1> 
    31                              <1>             ; return registers
    32 0000032F 07                  <1>             pop     es
    33 00000330 1F                  <1>             pop     ds
    34 00000331 61                  <1>             popa
    35                              <1> 
    36 00000332 CF                  <1>             iret
    37                              <1> 
    38 00000333 00                  <1> ALIGN 4, db 0
    39 00000334 0000000000000000    <1> TIMER_COUNT:    dq 0
    39          ******************  <1>  error: label `TIMER_COUNT' changed during code generation [-w+error=label-redef-late]
   165                                  %include    "tasks/task_1.s"
     1                              <1> task_1:
     1          ******************  <1>  error: label `task_1' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; display string
     4 0000033C 68[7A030000]6A076A- <1>             cdecl   draw_str, 63, 0, 0x07, .s0              ; draw_str()
     4 00000344 006A3FE8EB01000066- <1>
     4 0000034D 83C410              <1>
     5                              <1> 
     6                              <1> ;-------------------------------------------------------------
     7                              <1> ; non-preemptive multitask
     8                              <1> ;-------------------------------------------------------------
     9                              <1> 
    10                              <1> ; .10L:
    11                              <1> ;             ; display time
    12                              <1> ;             mov     eax, [RTC_TIME]                         ; get time
    13                              <1> ;             cdecl   draw_time, 72, 0, 0x0700, eax
    14                              <1> 
    15                              <1> ;             ; call Task
    16                              <1> ;             jmp    SS_TASK_0:0                             ; jump to Task0(kernel)
    17                              <1> 
    18                              <1> ;             jmp     .10L
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> 
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; preemptive multitask
    24                              <1> ;-------------------------------------------------------------
    25                              <1> 
    26                              <1> .10L:
    26          ******************  <1>  error: label `task_1.10L' changed during code generation [-w+error=label-redef-late]
    27                              <1>             ; display time
    28 00000350 A1[C4010000]        <1>             mov     eax, [RTC_TIME]                         ; get time
    29 00000355 5068000700006A006A- <1>             cdecl   draw_time, 72, 0, 0x0700, eax
    29 0000035E 48E83A0500006683C4- <1>
    29 00000367 10                  <1>
    30                              <1> 
    31                              <1> 
    32 00000368 EBE6                <1>             jmp     .10L
    33                              <1> 
    34                              <1> ;-------------------------------------------------------------
    35                              <1> 
    36                              <1>             ; data
    37 0000036A 5461736B5F3100      <1> .s0:        db  "Task_1", 0
    37          ******************  <1>  error: label `task_1.s0' changed during code generation [-w+error=label-redef-late]
   166                                  
   167                                  ; MODULES
   168                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     1          ******************  <1>  error: label `vga_set_read_plane' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000371 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 00000372 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 00000374 50                  <1>             push    eax
    10 00000375 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 00000376 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 00000379 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 0000037C B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 0000037E 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 00000382 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 00000384 5A                  <1>             pop     edx
    21 00000385 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 00000386 89EC                <1>             mov     esp, ebp
    25 00000388 5D                  <1>             pop     ebp
    26                              <1> 
    27 00000389 C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    29          ******************  <1>  error: label `vga_set_write_plane' changed during code generation [-w+error=label-redef-late]
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 0000038A 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 0000038B 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 0000038D 50                  <1>             push    eax
    38 0000038E 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 0000038F 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 00000392 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000395 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 00000397 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 0000039B 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 0000039D 5A                  <1>             pop     edx
    49 0000039E 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 0000039F 89EC                <1>             mov     esp, ebp
    53 000003A1 5D                  <1>             pop     ebp
    54                              <1> 
    55 000003A2 C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    57          ******************  <1>  error: label `vram_font_copy' changed during code generation [-w+error=label-redef-late]
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 000003A3 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 000003A4 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 000003A6 50                  <1>             push    eax
    66 000003A7 53                  <1>             push    ebx
    67 000003A8 51                  <1>             push    ecx
    68 000003A9 52                  <1>             push    edx
    69 000003AA 56                  <1>             push    esi
    70 000003AB 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 000003AC 8B7508              <1>             mov     esi, [ebp + 8]
    74 000003AF 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 000003B2 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 000003B6 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 000003BA 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 000003BC 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 000003BF FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 000003C1 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 000003C3 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 000003C6 FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 000003C8 FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 000003C9 B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    91          ******************  <1>  error: label `vram_font_copy.10L' changed during code generation [-w+error=label-redef-late]
    92                              <1> 
    93                              <1>             ; make reversed font
    94 000003CE AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 000003CF 88C4                <1>             mov     ah, al
    96 000003D1 F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 000003D3 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 000003D5 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 000003DB 7414                <1>             jz      .11F                                    ; {
   104 000003DD 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 000003DF EB12                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   106          ******************  <1>  error: label `vram_font_copy.11F' changed during code generation [-w+error=label-redef-late]
   107 000003E1 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   110          ******************  <1>  error: label `vram_font_copy.11E' changed during code generation [-w+error=label-redef-late]
   111                              <1>             ; synthesize bakcground & foreground color
   112 000003E3 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 000003E5 8807                <1>             mov     [edi], al
   116                              <1> 
   117 000003E7 83C750              <1>             add     edi, 80
   118 000003EA E2E2                <1>             loop    .10L
   119                              <1> .10E:
   119          ******************  <1>  error: label `vram_font_copy.10E' changed during code generation [-w+error=label-redef-late]
   120                              <1> 
   121                              <1>             ; return registers
   122 000003EC 5F                  <1>             pop     edi
   123 000003ED 5E                  <1>             pop     esi
   124 000003EE 5A                  <1>             pop     edx
   125 000003EF 59                  <1>             pop     ecx
   126 000003F0 5B                  <1>             pop     ebx
   127 000003F1 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 000003F2 89EC                <1>             mov     esp, ebp
   131 000003F4 5D                  <1>             pop     ebp
   132                              <1> 
   133 000003F5 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   135          ******************  <1>  error: label `vram_bit_copy' changed during code generation [-w+error=label-redef-late]
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 000003F6 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 000003F7 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 000003F9 50                  <1>             push    eax
   144 000003FA 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 000003FB 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 000003FC 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 000003FF 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 00000403 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 00000407 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 00000409 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 0000040C FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 0000040E 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 00000411 88C4                <1>             mov     ah, al
   163 00000413 F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 00000415 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 00000417 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 00000419 08E0                <1>             or      al, ah
   169 0000041B 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 0000041D 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 0000041E 5B                  <1>             pop     ebx
   177 0000041F 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 00000420 89EC                <1>             mov     esp, ebp
   181 00000422 5D                  <1>             pop     ebp
   182                              <1> 
   183 00000423 C3                  <1>             ret
   169                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     1          ******************  <1>  error: label `draw_char' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 00000424 55                  <1>             push    ebp                                         ;   +16 | color
     5 00000425 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 00000427 53                  <1>             push    ebx
    10 00000428 56                  <1>             push    esi
    11 00000429 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; set copy_target font address
    14 0000042A 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    15 0000042E C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    16 00000431 0335[C0010000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    17                              <1> 
    18                              <1>             ; get copy_dest VRAM address
    19                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    20                              <1>             ; y:row, x:column
    21                              <1> 
    22 00000437 8B7D0C              <1>             mov     edi, [ebp + 12]
    23 0000043A C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    24 0000043D 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    25 00000444 037D08              <1>             add     edi, [ebp + 8]
    26                              <1> 
    27                              <1>             ; output a char of font
    28 00000447 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    29                              <1> 
    30 0000044B 6A03E81FFFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    30 00000454 C404                <1>
    31 00000456 6A08E82DFFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    31 0000045F C404                <1>
    32 00000461 536A085756E838FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    32 0000046A FF6683C410          <1>
    33                              <1> 
    34 0000046F 6A02E8FBFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    34 00000478 C404                <1>
    35 0000047A 6A04E809FFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    35 00000483 C404                <1>
    36 00000485 536A045756E814FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    36 0000048E FF6683C410          <1>
    37                              <1> 
    38 00000493 6A01E8D7FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    38 0000049C C404                <1>
    39 0000049E 6A02E8E5FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    39 000004A7 C404                <1>
    40 000004A9 536A025756E8F0FEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    40 000004B2 FF6683C410          <1>
    41                              <1> 
    42 000004B7 6A00E8B3FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    42 000004C0 C404                <1>
    43 000004C2 6A01E8C1FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    43 000004CB C404                <1>
    44 000004CD 536A015756E8CCFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    44 000004D6 FF6683C410          <1>
    45                              <1> 
    46                              <1>             ; return registers
    47 000004DB 5F                  <1>             pop     edi
    48 000004DC 5E                  <1>             pop     esi
    49 000004DD 5B                  <1>             pop     ebx
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 000004DE 89EC                <1>             mov     esp, ebp
    53 000004E0 5D                  <1>             pop     ebp
    54                              <1> 
    55 000004E1 C3                  <1>             ret
   170                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     1          ******************  <1>  error: label `draw_font' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000004E2 55                  <1>             push    ebp                                         ;   +12 | row
     5 000004E3 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 000004E5 50                  <1>             push    eax
     9 000004E6 53                  <1>             push    ebx
    10 000004E7 51                  <1>             push    ecx
    11 000004E8 52                  <1>             push    edx
    12 000004E9 56                  <1>             push    esi
    13 000004EA 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 000004EB 8B7508              <1>             mov     esi, [ebp + 8]
    17 000004EE 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 000004F1 B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 000004F6 81F900010000        <1> .10L:       cmp     ecx, 256
    21          ******************  <1>  error: label `draw_font.10L' changed during code generation [-w+error=label-redef-late]
    22 000004FC 732F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 000004FE 89C8                <1>             mov     eax, ecx
    26 00000500 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 00000503 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 00000505 89CB                <1>             mov     ebx, ecx
    31 00000507 C1EB04              <1>             shr     ebx, 4
    32 0000050A 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 0000050C 516A075350E80EFFFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 00000515 FF6683C410          <1>
    35                              <1> 
    36 0000051A 41                  <1>             inc     ecx
    37 0000051B EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    38          ******************  <1>  error: label `draw_font.10E' changed during code generation [-w+error=label-redef-late]
    39                              <1> 
    40                              <1>             ; return registers
    41 0000051D 5F                  <1>             pop     edi
    42 0000051E 5E                  <1>             pop     esi
    43 0000051F 5A                  <1>             pop     edx
    44 00000520 59                  <1>             pop     ecx
    45 00000521 5B                  <1>             pop     ebx
    46 00000522 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 00000523 89EC                <1>             mov     esp, ebp
    50 00000525 5D                  <1>             pop     ebp
    51                              <1> 
    52 00000526 C3                  <1>             ret
   171                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     1          ******************  <1>  error: label `draw_str' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000527 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 00000528 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 0000052A 50                  <1>             push    eax
    11 0000052B 53                  <1>             push    ebx
    12 0000052C 51                  <1>             push    ecx
    13 0000052D 52                  <1>             push    edx
    14 0000052E 56                  <1>             push    esi
    15 0000052F 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000530 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 00000533 8B550C              <1>             mov     edx, [ebp + 12]
    20 00000536 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 0000053A 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 0000053D FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    25          ******************  <1>  error: label `draw_str.10L' changed during code generation [-w+error=label-redef-late]
    26 0000053E AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 0000053F 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 00000541 742A                <1>             je      .10E
    29                              <1> 
    30                              <1> %ifdef      USE_SYSTEM_CALL
    31 00000543 CD81                <1>             int     0x81                                        ; sys_call(1, x, y, color, char)
    32                              <1> %else
    33                              <1>             cdecl   draw_char, ecx, edx, ebx, eax
    34                              <1> %endif
    35 00000545 41                  <1>             inc     ecx
    36 00000546 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    37 00000549 7C20                <1>             jl      .12E                                        ; {
    38 0000054B B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    39 00000550 42                  <1>             inc     edx                                         ;   EDX++;
    40 00000551 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    41 00000554 7C15                <1>             jl      .12E                                        ;   {
    42 00000556 BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    43                              <1>                                                                 ;   }
    44                              <1> .12E:                                                           ; }
    44          ******************  <1>  error: label `draw_str.12E' changed during code generation [-w+error=label-redef-late]
    45 0000055B EBE1                <1>             jmp     .10L
    46                              <1> .10E:
    46          ******************  <1>  error: label `draw_str.10E' changed during code generation [-w+error=label-redef-late]
    47                              <1> 
    48                              <1>             ; return registers
    49 0000055D 5F                  <1>             pop     edi
    50 0000055E 5E                  <1>             pop     esi
    51 0000055F 5A                  <1>             pop     edx
    52 00000560 59                  <1>             pop     ecx
    53 00000561 5B                  <1>             pop     ebx
    54 00000562 58                  <1>             pop     eax
    55                              <1> 
    56                              <1>             ; destruct stack frame
    57 00000563 89EC                <1>             mov     esp, ebp
    58 00000565 5D                  <1>             pop     ebp
    59                              <1> 
    60 00000566 C3                  <1>             ret
   172                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     1          ******************  <1>  error: label `draw_color_bar' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000567 55                  <1>             push    ebp                                             ;   +12 | row
     5 00000568 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 0000056A 50                  <1>             push    eax
     9 0000056B 53                  <1>             push    ebx
    10 0000056C 51                  <1>             push    ecx
    11 0000056D 52                  <1>             push    edx
    12 0000056E 56                  <1>             push    esi
    13 0000056F 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00000570 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000573 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 00000576 B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 0000057B 83F910              <1> .10L:       cmp     ecx, 16
    21          ******************  <1>  error: label `draw_color_bar.10L' changed during code generation [-w+error=label-redef-late]
    22 0000057E 733E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 00000580 89C8                <1>             mov     eax, ecx
    26 00000582 83E001              <1>             and     eax, 0x01
    27 00000585 C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 00000588 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 0000058A 89CB                <1>             mov     ebx, ecx
    32 0000058C D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 0000058E 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 00000590 89CA                <1>             mov     edx, ecx
    37 00000592 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 00000594 8B92[D1050000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 0000059A 68[C8050000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 000005A2 E880FFFFFF6683C410  <1>
    41                              <1> 
    42 000005AB 41                  <1>             inc     ecx
    43 000005AC EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    44          ******************  <1>  error: label `draw_color_bar.10E' changed during code generation [-w+error=label-redef-late]
    45                              <1> 
    46                              <1>             ; return registers
    47 000005AE 5F                  <1>             pop     edi
    48 000005AF 5E                  <1>             pop     esi
    49 000005B0 5A                  <1>             pop     edx
    50 000005B1 59                  <1>             pop     ecx
    51 000005B2 5B                  <1>             pop     ebx
    52 000005B3 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 000005B4 89E5                <1>             mov     ebp, esp
    56 000005B6 5D                  <1>             pop     ebp
    57                              <1> 
    58 000005B7 C3                  <1>             ret
    59                              <1> 
    60 000005B8 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    60          ******************  <1>  error: label `draw_color_bar.s0' changed during code generation [-w+error=label-redef-late]
    61                              <1> 
    62 000005C1 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    62          ******************  <1>  error: label `draw_color_bar.t0' changed during code generation [-w+error=label-redef-late]
    63 000005C5 00010009            <1>             dw  0x0100, 0x0900
    64 000005C9 0002000A            <1>             dw  0x0200, 0x0A00
    65 000005CD 0003000B            <1>             dw  0x0300, 0x0B00
    66 000005D1 0004000C            <1>             dw  0x0400, 0x0C00
    67 000005D5 0005000D            <1>             dw  0x0500, 0x0D00
    68 000005D9 0006000E            <1>             dw  0x0600, 0x0E00
    69 000005DD 0007000F            <1>             dw  0x0700, 0x0F00
   173                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     1          ******************  <1>  error: label `draw_pixel' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 000005E1 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 000005E2 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 000005E4 50                  <1>             push    eax
     9 000005E5 53                  <1>             push    ebx
    10 000005E6 51                  <1>             push    ecx
    11 000005E7 52                  <1>             push    edx
    12 000005E8 56                  <1>             push    esi
    13 000005E9 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 000005EA 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 000005ED C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 000005F0 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 000005F7 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 000005FA 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 000005FC C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 000005FF 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 00000601 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 00000604 BB80000000          <1>             mov     ebx, 0x80
    35 00000609 D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 0000060B 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 0000060E 6A03E85CFDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 00000617 C404                <1>
    43 00000619 6A08E86AFDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 00000622 C404                <1>
    44 00000624 516A085753E8C8FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 0000062D FF6683C410          <1>
    45                              <1> 
    46 00000632 6A02E838FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 0000063B C404                <1>
    47 0000063D 6A04E846FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 00000646 C404                <1>
    48 00000648 516A045753E8A4FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 00000651 FF6683C410          <1>
    49                              <1> 
    50 00000656 6A01E814FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 0000065F C404                <1>
    51 00000661 6A02E822FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 0000066A C404                <1>
    52 0000066C 516A025753E880FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 00000675 FF6683C410          <1>
    53                              <1> 
    54 0000067A 6A00E8F0FCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 00000683 C404                <1>
    55 00000685 6A01E8FEFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 0000068E C404                <1>
    56 00000690 516A015753E85CFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 00000699 FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 0000069E 5F                  <1>             pop     edi
    60 0000069F 5E                  <1>             pop     esi
    61 000006A0 5A                  <1>             pop     edx
    62 000006A1 59                  <1>             pop     ecx
    63 000006A2 5B                  <1>             pop     ebx
    64 000006A3 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 000006A4 89EC                <1>             mov     esp, ebp
    68 000006A6 5D                  <1>             pop     ebp
    69                              <1> 
    70 000006A7 C3                  <1>             ret
   174                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     1          ******************  <1>  error: label `draw_line' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 000006A8 55                  <1>             push    ebp
    22 000006A9 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 000006AB 6A00                <1>             push    dword 0
    25 000006AD 6A00                <1>             push    dword 0
    26 000006AF 6A00                <1>             push    dword 0
    27 000006B1 6A00                <1>             push    dword 0
    28 000006B3 6A00                <1>             push    dword 0
    29 000006B5 6A00                <1>             push    dword 0
    30 000006B7 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 000006B9 50                  <1>             push    eax
    34 000006BA 53                  <1>             push    ebx
    35 000006BB 51                  <1>             push    ecx
    36 000006BC 52                  <1>             push    edx
    37 000006BD 56                  <1>             push    esi
    38 000006BE 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 000006BF 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 000006C2 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 000006C5 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 000006C7 7D19                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 000006C9 F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 000006CB BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 000006D0 EB15                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    49          ******************  <1>  error: label `draw_line.10F' changed during code generation [-w+error=label-redef-late]
    50 000006D2 BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    51          ******************  <1>  error: label `draw_line.10E' changed during code generation [-w+error=label-redef-late]
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 000006D7 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 000006DA 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 000006DD 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 000006DF 7D19                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 000006E1 F7DA                <1>             neg     edx                                             ;   height *= -1
    60 000006E3 BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 000006E8 EB15                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    62          ******************  <1>  error: label `draw_line.20F' changed during code generation [-w+error=label-redef-late]
    63 000006EA BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    64          ******************  <1>  error: label `draw_line.20E' changed during code generation [-w+error=label-redef-late]
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 000006EF 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 000006F2 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 000006F5 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 000006F8 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 000006FB 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 000006FE 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 00000701 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 00000703 7F18                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 00000705 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 00000708 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 0000070B EB16                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    92          ******************  <1>  error: label `draw_line.22F' changed during code generation [-w+error=label-redef-late]
    93                              <1>                                                                     ;   // y axis is base one.
    94 0000070D 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 00000710 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    96          ******************  <1>  error: label `draw_line.22E' changed during code generation [-w+error=label-redef-late]
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 00000713 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 00000716 83F900              <1>             cmp     ecx, 0
   101 00000719 7515                <1>             jnz     .30E
   102 0000071B B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   103          ******************  <1>  error: label `draw_line.30E' changed during code generation [-w+error=label-redef-late]
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   106          ******************  <1>  error: label `draw_line.50L' changed during code generation [-w+error=label-redef-late]
   109 00000720 FF7518FF75ECFF75F8- <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   109 00000729 E8B3FEFFFF6683C40C  <1>
   110                              <1> 
   111                              <1>             ; update base axis(1 dot)
   112 00000732 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   113 00000735 0106                <1>             add     [esi - 0], eax
   114                              <1> 
   115                              <1>             ; update relative axis
   116 00000737 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   117 0000073A 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   118                              <1> 
   119 0000073D 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   120                              <1> 
   121 00000740 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   122 00000742 7C17                <1>             jl      .52E                                            ; {
   123 00000744 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   124                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   125 00000746 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   126 00000749 011F                <1>             add     [edi - 0], ebx
   127                              <1> .52E:                                                               ; }
   127          ******************  <1>  error: label `draw_line.52E' changed during code generation [-w+error=label-redef-late]
   128                              <1> 
   129 0000074B 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   130                              <1> 
   131 0000074E E2D0                <1>             loop    .50L
   132                              <1> .50E:
   132          ******************  <1>  error: label `draw_line.50E' changed during code generation [-w+error=label-redef-late]
   133                              <1> 
   134                              <1>             ; return registers
   135 00000750 5F                  <1>             pop     edi
   136 00000751 5E                  <1>             pop     esi
   137 00000752 5A                  <1>             pop     edx
   138 00000753 59                  <1>             pop     ecx
   139 00000754 5B                  <1>             pop     ebx
   140 00000755 58                  <1>             pop     eax
   141                              <1> 
   142                              <1>             ; destruct stack frame
   143 00000756 89EC                <1>             mov     esp, ebp
   144 00000758 5D                  <1>             pop     ebp
   145                              <1> 
   146 00000759 C3                  <1>             ret
   175                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     1          ******************  <1>  error: label `draw_rect' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 0000075A 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 0000075B 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 0000075D 50                  <1>             push    eax
    11 0000075E 53                  <1>             push    ebx
    12 0000075F 51                  <1>             push    ecx
    13 00000760 52                  <1>             push    edx
    14 00000761 56                  <1>             push    esi
    15 00000762 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000763 8B4508              <1>             mov     eax, [ebp +  8]
    19 00000766 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 00000769 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 0000076C 8B5514              <1>             mov     edx, [ebp + 20]
    22 0000076F 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 00000772 39C8                <1>             cmp     eax, ecx
    26 00000774 7C11                <1>             jl      .10E
    27 00000776 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    28          ******************  <1>  error: label `draw_rect.10E' changed during code generation [-w+error=label-redef-late]
    29 00000777 39D3                <1>             cmp     ebx, edx
    30 00000779 7C12                <1>             jl      .20E
    31 0000077B 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    32          ******************  <1>  error: label `draw_rect.20E' changed during code generation [-w+error=label-redef-late]
    33                              <1> 
    34                              <1>             ; draw rectangle
    35 0000077D 5653515350E821FFFF- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35 00000786 FF6683C414          <1>
    36 0000078B 5652505350E813FFFF- <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36 00000794 FF6683C414          <1>
    37                              <1> 
    38 00000799 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39 0000079A 5652515250E804FFFF- <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39 000007A3 FF6683C414          <1>
    40 000007A8 42                  <1>             inc     edx
    41                              <1> 
    42 000007A9 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43 000007AA 5652515351E8F4FEFF- <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43 000007B3 FF6683C414          <1>
    44                              <1> 
    45                              <1>             ; return registers
    46 000007B8 5F                  <1>             pop     edi
    47 000007B9 5E                  <1>             pop     esi
    48 000007BA 5A                  <1>             pop     edx
    49 000007BB 59                  <1>             pop     ecx
    50 000007BC 5B                  <1>             pop     ebx
    51 000007BD 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 000007BE 89EC                <1>             mov     esp, ebp
    55 000007C0 5D                  <1>             pop     ebp
    56                              <1> 
    57 000007C1 C3                  <1>             ret
   176                                  %include    "../modules/protect/int_to_str.s"
     1                              <1> int_to_str:
     1          ******************  <1>  error: label `int_to_str' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 000007C2 55                  <1>         push    ebp
     6 000007C3 89E5                <1>         mov     ebp, esp                                ;   +24|flag
     7                              <1>                                                         ;   +20|radix
     8                              <1>                                                         ;   +16|dest buffer size
     9                              <1>                                                         ;   +12|dest buffer address
    10                              <1>                                                         ;   + 8|the value to be converted
    11                              <1>                                                         ;   + 4|Instruction Pointer
    12                              <1>                                                         ;EBP+ 0|EBP
    13                              <1>         ; save registers
    14                              <1> 
    15 000007C5 50                  <1>         push    eax
    16 000007C6 53                  <1>         push    ebx
    17 000007C7 51                  <1>         push    ecx
    18 000007C8 52                  <1>         push    edx
    19 000007C9 56                  <1>         push    esi
    20 000007CA 57                  <1>         push    edi
    21                              <1> 
    22                              <1>         ; get args
    23                              <1> 
    24 000007CB 8B4508              <1>         mov     eax, [ebp +  8]                         ; val = value
    25 000007CE 8B750C              <1>         mov     esi, [ebp + 12]                         ; dest= buffer address
    26 000007D1 8B4D10              <1>         mov     ecx, [ebp + 16]                         ; size= remaining buffer size
    27                              <1> 
    28 000007D4 89F7                <1>         mov     edi, esi                                ; end of buffer
    29 000007D6 01CF                <1>         add     edi, ecx                                ; dest = &dest[esize - 1]
    30 000007D8 4F                  <1>         dec     edi
    31                              <1> 
    32 000007D9 8B5D18              <1>         mov     ebx, [ebp + 24]
    33                              <1> 
    34                              <1>         ; signing judge
    35                              <1> 
    36 000007DC F7C301000000        <1>         test    ebx, 0b0001                             ; if (flags & 0x01) //if signed => ZF = 0
    37 000007E2 7418                <1> .10Q    je      .10E                                    ; {                 //if not ZF = 1 so => jmp
    37          ******************  <1>  error: label `int_to_str.10Q' changed during code generation [-w+error=label-redef-late]
    38 000007E4 83F800              <1>         cmp     eax, 0                                  ;   if (val < 0)    //CF = 1, ZF = 0
    39 000007E7 7D13                <1> .12Q    jge     .12E                                    ;   {
    39          ******************  <1>  error: label `int_to_str.12Q' changed during code generation [-w+error=label-redef-late]
    40 000007E9 83CB02              <1>         or      ebx, 0b0010                             ;       flags |= 2; //set B1
    41                              <1>                                                         ; }}
    42                              <1> .12E:
    42          ******************  <1>  error: label `int_to_str.12E' changed during code generation [-w+error=label-redef-late]
    43                              <1> .10E:
    43          ******************  <1>  error: label `int_to_str.10E' changed during code generation [-w+error=label-redef-late]
    44                              <1> 
    45                              <1>         ; sign output judge
    46                              <1> 
    47 000007EC F7C302000000        <1>         test    ebx, 0b0010
    48 000007F2 7420                <1> .20Q    je      .20E
    48          ******************  <1>  error: label `int_to_str.20Q' changed during code generation [-w+error=label-redef-late]
    49 000007F4 83F800              <1>         cmp     eax, 0
    50 000007F7 7D17                <1> .22Q    jge     .22F
    50          ******************  <1>  error: label `int_to_str.22Q' changed during code generation [-w+error=label-redef-late]
    51 000007F9 F7D8                <1>         neg     eax                                     ; sign reverse
    52 000007FB C6062D              <1>         mov     [esi], byte '-'                         ; sign display
    53 000007FE EB13                <1>         jmp     .22E
    54                              <1> .22F:
    54          ******************  <1>  error: label `int_to_str.22F' changed during code generation [-w+error=label-redef-late]
    55 00000800 C6062B              <1>         mov     [esi], byte '+'
    56                              <1> .22E:
    56          ******************  <1>  error: label `int_to_str.22E' changed during code generation [-w+error=label-redef-late]
    57 00000803 49                  <1>         dec     ecx                                     ; subtract remaining buffer size -> ?
    58                              <1> .20E:
    58          ******************  <1>  error: label `int_to_str.20E' changed during code generation [-w+error=label-redef-late]
    59                              <1> 
    60                              <1>         ; ASCII conversion
    61                              <1> 
    62 00000804 8B5D14              <1>         mov     ebx, [ebp + 20]                          ; ebx = radix
    63                              <1> 
    64                              <1> .30L:                                                   ; do{
    64          ******************  <1>  error: label `int_to_str.30L' changed during code generation [-w+error=label-redef-late]
    65 00000807 BA00000000          <1>         mov     edx, 0
    66 0000080C F7F3                <1>         div     ebx                                    ;   edx = edx:eax % ebx;
    67                              <1>                                                         ;   eax = edx:eax / ebx;
    68                              <1> 
    69 0000080E 89D6                <1>         mov     esi, edx                                ;   //refer to coversion table
    70 00000810 8A96[4B080000]      <1>         mov     dl, byte [.ascii + esi]                 ;   DL = ASCII[edx];
    71                              <1> 
    72 00000816 8817                <1>         mov     [edi], dl                               ;   *dest = DL;
    73 00000818 4F                  <1>         dec     edi                                     ;   dest--;
    74                              <1> 
    75 00000819 83F800              <1>         cmp     eax, 0
    76 0000081C E0E9                <1>         loopnz  .30L                                    ; } while(eax);
    77                              <1> 
    78                              <1> .30E:
    78          ******************  <1>  error: label `int_to_str.30E' changed during code generation [-w+error=label-redef-late]
    79                              <1> 
    80                              <1>         ; padding (zero / blank)
    81                              <1> 
    82 0000081E 83F900              <1>         cmp     ecx, 0                                  ; if (esize)
    83 00000821 741E                <1> .40Q:   je      .40E                                    ; {
    83          ******************  <1>  error: label `int_to_str.40Q' changed during code generation [-w+error=label-redef-late]
    84 00000823 B020                <1>         mov     al, ' '                                 ;   AL = ' '; // padding with blanks
    85 00000825 66837D1804          <1>         cmp     [ebp + 24], word 0b0100                  ;   if (flags & 0x04)
    86 0000082A 7512                <1> .42Q:   jne     .42E                                    ;   {
    86          ******************  <1>  error: label `int_to_str.42Q' changed during code generation [-w+error=label-redef-late]
    87 0000082C B030                <1>         mov     al, '0'                                 ;       AL = '0'; // padding with zero
    88                              <1> .42E:                                                   ;   }
    88          ******************  <1>  error: label `int_to_str.42E' changed during code generation [-w+error=label-redef-late]
    89 0000082E FD                  <1>         std                                             ;   // DF = 1(dec)
    90 0000082F F3AA                <1>         rep stosb                                       ;   while (--ecx) * edi-- = ' ';
    91                              <1> .40E:                                                   ; }
    91          ******************  <1>  error: label `int_to_str.40E' changed during code generation [-w+error=label-redef-late]
    92                              <1> 
    93                              <1>         ; return registers
    94                              <1> 
    95 00000831 5F                  <1>         pop     edi
    96 00000832 5E                  <1>         pop     esi
    97 00000833 5A                  <1>         pop     edx
    98 00000834 59                  <1>         pop     ecx
    99 00000835 5B                  <1>         pop     ebx
   100 00000836 58                  <1>         pop     eax
   101                              <1> 
   102                              <1>         ; destruct stack frame
   103                              <1> 
   104 00000837 89EC                <1>         mov     esp, ebp
   105 00000839 5D                  <1>         pop     ebp
   106                              <1> 
   107 0000083A C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 0000083B 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                      ; conversion table
   110          ******************  <1>  error: label `int_to_str.ascii' changed during code generation [-w+error=label-redef-late]
   110 00000844 39414243444546      <1>
   177                                  %include    "../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     1          ******************  <1>  error: label `rtc_get_time' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000084B 55                  <1>             push    ebp                                     ; EBP+8 | destination
     5 0000084C 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 0000084E 50                  <1>             push    eax
     9 0000084F 53                  <1>             push    ebx
    10                              <1> 
    11                              <1> ; // Avoid conflicts between RTC data updates and
    12                              <1> ; // on-chip RAM access by confirming UIP bit on Register A
    13                              <1> 
    14 00000850 B00A                <1>             mov     al, 0x0A                                ; register A
    15 00000852 E670                <1>             out     0x70, al
    16 00000854 E471                <1>             in      al, 0x71                                ; al = register A
    17 00000856 A880                <1>             test    al, 0x80                                ; if (UIP) // updating
    18 00000858 7417                <1>             je      .10F                                    ; {
    19 0000085A B801000000          <1>             mov     eax, 1                                  ;   return = 1;
    20 0000085F EB37                <1>             jmp     .10E                                    ; }
    21                              <1> .10F:                                                       ; else
    21          ******************  <1>  error: label `rtc_get_time.10F' changed during code generation [-w+error=label-redef-late]
    22                              <1>                                                             ; {        // get time process
    23                              <1> 
    24                              <1>             ; main process
    25 00000861 B004                <1>             mov     al, 0x04                                ;   hour
    26 00000863 E670                <1>             out     0x70, al
    27 00000865 E471                <1>             in      al, 0x71
    28                              <1> 
    29 00000867 C1E008              <1>             shl     eax, 8
    30                              <1> 
    31 0000086A B002                <1>             mov     al, 0x02                                ;   minute
    32 0000086C E670                <1>             out     0x70, al
    33 0000086E E471                <1>             in      al, 0x71
    34                              <1> 
    35 00000870 C1E008              <1>             shl     eax, 8
    36                              <1> 
    37 00000873 B000                <1>             mov     al, 0x00                                ;   second
    38 00000875 E670                <1>             out     0x70, al
    39 00000877 E471                <1>             in      al, 0x71
    40                              <1> 
    41 00000879 25FFFFFF00          <1>             and     eax, 0x00_FF_FF_FF                      ;   all data are in lower 3 bytes of eax register
    42                              <1> 
    43 0000087E 8B5D08              <1>             mov     ebx, [ebp + 8]
    44 00000881 8903                <1>             mov     [ebx], eax                              ;   [dest] = real time
    45                              <1> 
    46 00000883 B800000000          <1>             mov     eax, 0                                  ;   return = 0;
    47                              <1> .10E:                                                       ; }
    47          ******************  <1>  error: label `rtc_get_time.10E' changed during code generation [-w+error=label-redef-late]
    48                              <1> 
    49                              <1>             ; return register
    50 00000888 5B                  <1>             pop     ebx
    51 00000889 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 0000088A 89EC                <1>             mov     esp, ebp
    55 0000088C 5D                  <1>             pop     ebp
    56                              <1> 
    57 0000088D C3                  <1>             ret
   178                                  %include    "../modules/protect/draw_time.s"
     1                              <1> draw_time:
     1          ******************  <1>  error: label `draw_time' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame                         ;   +20 | time data
     4 0000088E 55                  <1>             push    ebp                                     ;   +16 | display color
     5 0000088F 89E5                <1>             mov     ebp, esp                                ;   +12 | row
     6                              <1>                                                             ;EBP+ 8 | col
     7                              <1> 
     8                              <1>             ; save registers
     9 00000891 50                  <1>             push    eax
    10 00000892 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; get arg
    13 00000893 8B4514              <1>             mov     eax, [ebp + 20]
    14                              <1> 
    15 00000896 0FB6D8              <1>             movzx   ebx, al                                 ; ebx = second
    16 00000899 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .sec, 2, 16, 0b0100
    16 000008A0 [10090000]53E818FF- <1>
    16 000008A8 FFFF6683C414        <1>
    17                              <1> 
    18 000008AE 88E3                <1>             mov     bl, ah                                  ; ebx = min
    19 000008B0 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .min, 2, 16, 0b0100
    19 000008B7 [0D090000]53E801FF- <1>
    19 000008BF FFFF6683C414        <1>
    20                              <1> 
    21 000008C5 C1E810              <1>             shr     eax, 16                                 ; ax = hour
    22 000008C8 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .hour, 2, 16, 0b0100
    22 000008CF [0A090000]50E8E9FE- <1>
    22 000008D7 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>             ; display time
    25 000008DD 68[0A090000]FF7510- <1>             cdecl   draw_str, dword [ebp + 8], dword [ebp + 12], dword [ebp + 16], .hour
    25 000008E5 FF750CFF7508E837FC- <1>
    25 000008EE FFFF6683C410        <1>
    26                              <1> 
    27                              <1>             ; return registers
    28 000008F4 5B                  <1>             pop     ebx
    29 000008F5 58                  <1>             pop     eax
    30                              <1> 
    31                              <1>             ; destruct stack frame
    32 000008F6 89EC                <1>             mov     esp, ebp
    33 000008F8 5D                  <1>             pop     ebp
    34                              <1> 
    35 000008F9 C3                  <1>             ret
    36                              <1> 
    37 000008FA 5A5A3A              <1> .hour:  db  "ZZ:"
    37          ******************  <1>  error: label `draw_time.hour' changed during code generation [-w+error=label-redef-late]
    38 000008FD 5A5A3A              <1> .min:  db  "ZZ:"
    38          ******************  <1>  error: label `draw_time.min' changed during code generation [-w+error=label-redef-late]
    39 00000900 5A5A00              <1> .sec:  db  "ZZ", 0
    39          ******************  <1>  error: label `draw_time.sec' changed during code generation [-w+error=label-redef-late]
   179                                  %include    "../modules/protect/interrupt.s"
     1                              <1> ; Initialize vector of IDTR
     2                              <1> 
     3 00000903 90                  <1> ALIGN 4
     4 00000904 FF07                <1> IDTR:       dw      8 * 256 - 1                                     ; limit of IDT
     4          ******************  <1>  error: label `IDTR' changed during code generation [-w+error=label-redef-late]
     5 00000906 00001000            <1>             dd      VECT_BASE                                       ; base address of IDT
     6                              <1> 
     7                              <1> ; Initialize IDT
     8                              <1> 
     9                              <1> init_int:
     9          ******************  <1>  error: label `init_int' changed during code generation [-w+error=label-redef-late]
    10                              <1> 
    11                              <1>             ; save registers
    12 0000090A 50                  <1>             push    eax
    13 0000090B 53                  <1>             push    ebx
    14 0000090C 51                  <1>             push    ecx
    15 0000090D 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; define Interrupt Gate Descriptor and apply default process to them
    18                              <1> 
    19 0000090E 8D05[640A0000]      <1>             lea     eax, [int_default]                              ; EAX = the address of interrupt process
    20 00000914 BB008E0800          <1>             mov     ebx, 0x0008_8E00                                ; EBX = segment selector & P,DPL,DT,TYPE
    21 00000919 6693                <1>             xchg    ax, bx                                          ; exchange lower word
    22                              <1> 
    23 0000091B B900010000          <1>             mov     ecx, 256                                        ; num of Interrupt Gate Descriptor
    24 00000920 BF00001000          <1>             mov     edi, VECT_BASE                                  ; base address of Interrupt Descriptor Table
    25                              <1> 
    26                              <1> .10L:
    26          ******************  <1>  error: label `init_int.10L' changed during code generation [-w+error=label-redef-late]
    27 00000925 891F                <1>             mov     [edi + 0], ebx                                  ; interrupt descriptor(lower)
    28 00000927 894704              <1>             mov     [edi + 4], eax                                  ; interrupt descriptor(upper)
    29 0000092A 83C708              <1>             add     edi, 8                                          ; EDI += 8 byte
    30 0000092D E2F6                <1>             loop    .10L
    31                              <1> 
    32                              <1>             ; set up Interrupt Descriptor
    33 0000092F 0F011D[04090000]    <1>             lidt    [IDTR]
    34                              <1> 
    35                              <1>             ; return registers
    36 00000936 5F                  <1>             pop     edi
    37 00000937 59                  <1>             pop     ecx
    38 00000938 5B                  <1>             pop     ebx
    39 00000939 58                  <1>             pop     eax
    40                              <1> 
    41 0000093A C3                  <1>             ret
    42                              <1> 
    43                              <1> int_stop:
    43          ******************  <1>  error: label `int_stop' changed during code generation [-w+error=label-redef-late]
    44                              <1> 
    45 0000093B FB                  <1>             sti                                                     ; interrupt enable
    46                              <1> 
    47                              <1>             ; display the string indicated in EAX
    48 0000093C 50680F0600006A0F6A- <1>             cdecl   draw_str, 25, 15, 0x060F, eax
    48 00000945 19E8DCFBFFFF6683C4- <1>
    48 0000094E 10                  <1>
    49                              <1> 
    50                              <1>             ; convert stack data into string
    51 0000094F 8B0424              <1>             mov     eax, [esp + 0]                                  ; EIP
    52 00000952 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p1, 8, 16, 0b0100
    52 00000959 [270A0000]50E85FFE- <1>
    52 00000961 FFFF6683C414        <1>
    53                              <1> 
    54 00000967 8B442404            <1>             mov     eax, [esp + 4]                                  ; CS
    55 0000096B 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p2, 8, 16, 0b0100
    55 00000972 [380A0000]50E846FE- <1>
    55 0000097A FFFF6683C414        <1>
    56                              <1> 
    57 00000980 8B442408            <1>             mov     eax, [esp + 8]                                  ; EFLAGS
    58 00000984 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p3, 8, 16, 0b0100
    58 0000098B [490A0000]50E82DFE- <1>
    58 00000993 FFFF6683C414        <1>
    59                              <1> 
    60 00000999 8B44240C            <1>             mov     eax, [esp + 12]
    61 0000099D 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p4, 8, 16, 0b0100
    61 000009A4 [5A0A0000]50E814FE- <1>
    61 000009AC FFFF6683C414        <1>
    62                              <1> 
    63                              <1>             ; display string
    64 000009B2 68[200A0000]68040F- <1>             cdecl   draw_str, 25, 16, 0x0F04, .s1
    64 000009BA 00006A106A19E862FB- <1>
    64 000009C3 FFFF6683C410        <1>
    65 000009C9 68[310A0000]68040F- <1>             cdecl   draw_str, 25, 17, 0x0F04, .s2
    65 000009D1 00006A116A19E84BFB- <1>
    65 000009DA FFFF6683C410        <1>
    66 000009E0 68[420A0000]68040F- <1>             cdecl   draw_str, 25, 18, 0x0F04, .s3
    66 000009E8 00006A126A19E834FB- <1>
    66 000009F1 FFFF6683C410        <1>
    67 000009F7 68[530A0000]68040F- <1>             cdecl   draw_str, 25, 19, 0x0F04, .s4
    67 000009FF 00006A136A19E81DFB- <1>
    67 00000A08 FFFF6683C410        <1>
    68                              <1> 
    69                              <1>             ; infinite loop
    70 00000A0E EBFE                <1>             jmp     $
    71                              <1> 
    72 00000A10 4553502B20303A      <1> .s1         db  "ESP+ 0:"
    72          ******************  <1>  error: label `int_stop.s1' changed during code generation [-w+error=label-redef-late]
    73 00000A17 5F5F5F5F5F5F5F5F20- <1> .p1         db  "________ ", 0
    73          ******************  <1>  error: label `int_stop.p1' changed during code generation [-w+error=label-redef-late]
    73 00000A20 00                  <1>
    74 00000A21 2020202B20343A      <1> .s2         db  "   + 4:"
    74          ******************  <1>  error: label `int_stop.s2' changed during code generation [-w+error=label-redef-late]
    75 00000A28 5F5F5F5F5F5F5F5F20- <1> .p2         db  "________ ", 0
    75          ******************  <1>  error: label `int_stop.p2' changed during code generation [-w+error=label-redef-late]
    75 00000A31 00                  <1>
    76 00000A32 2020202B20383A      <1> .s3         db  "   + 8:"
    76          ******************  <1>  error: label `int_stop.s3' changed during code generation [-w+error=label-redef-late]
    77 00000A39 5F5F5F5F5F5F5F5F20- <1> .p3         db  "________ ", 0
    77          ******************  <1>  error: label `int_stop.p3' changed during code generation [-w+error=label-redef-late]
    77 00000A42 00                  <1>
    78 00000A43 2020202B31323A      <1> .s4         db  "   +12:"
    78          ******************  <1>  error: label `int_stop.s4' changed during code generation [-w+error=label-redef-late]
    79 00000A4A 5F5F5F5F5F5F5F5F20- <1> .p4         db  "________ ", 0
    79          ******************  <1>  error: label `int_stop.p4' changed during code generation [-w+error=label-redef-late]
    79 00000A53 00                  <1>
    80                              <1> 
    81                              <1> int_default:
    81          ******************  <1>  error: label `int_default' changed during code generation [-w+error=label-redef-late]
    82 00000A54 9C                  <1>             pushf                                                   ; EFLAGS
    83 00000A55 0E                  <1>             push    cs                                              ; CS
    84 00000A56 68[3B090000]        <1>             push    int_stop                                        ; the process of displaying stack
    85                              <1> 
    86 00000A5B B8[710A0000]        <1>             mov     eax, .s0                                        ; interrupt type
    87 00000A60 CF                  <1>             iret
    88                              <1> 
    89 00000A61 203C2020202053544F- <1> .s0         db  " <    STOP    > ", 0
    89          ******************  <1>  error: label `int_default.s0' changed during code generation [-w+error=label-redef-late]
    89 00000A6A 50202020203E2000    <1>
    90                              <1> 
    91                              <1> int_zero_div:
    91          ******************  <1>  error: label `int_zero_div' changed during code generation [-w+error=label-redef-late]
    92 00000A72 9C                  <1>             pushf                                                   ; EFLAGS
    93 00000A73 0E                  <1>             push    cs                                              ; CS
    94 00000A74 68[3B090000]        <1>             push    int_stop                                        ; the process of displaying stack
    95                              <1> 
    96 00000A79 B8[8F0A0000]        <1>             mov     eax, .s0                                        ; interrupt type
    97 00000A7E CF                  <1>             iret
    98                              <1> 
    99 00000A7F 203C20205A45524F20- <1> .s0         db  " <  ZERO DIV  > ", 0
    99          ******************  <1>  error: label `int_zero_div.s0' changed during code generation [-w+error=label-redef-late]
    99 00000A88 44495620203E2000    <1>
   100                              <1> 
   101                              <1> 
   180                                  %include    "../modules/protect/pic.s"
     1                              <1> init_pic:
     1          ******************  <1>  error: label `init_pic' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; save register
     4 00000A90 50                  <1>             push    eax
     5                              <1> 
     6                              <1>             ; set up Master PIC
     7                              <1>             outp    0x20, 0x11                              ; MASTER.ICW1 = 0x11
     7 00000A91 B011                <2>  mov al, %2
     7 00000A93 E620                <2>  out %1, al
     8                              <1>             outp    0x21, 0x20                              ; MASTER.ICW2 = 0x20 // interrupt vector
     8 00000A95 B020                <2>  mov al, %2
     8 00000A97 E621                <2>  out %1, al
     9                              <1>             outp    0x21, 0x04                              ; MASTER.ICW3 = 0x04 // slave connection position : IRQ2
     9 00000A99 B004                <2>  mov al, %2
     9 00000A9B E621                <2>  out %1, al
    10                              <1>             outp    0x21, 0x05                              ; MASTER.ICW4 = 0x05
    10 00000A9D B005                <2>  mov al, %2
    10 00000A9F E621                <2>  out %1, al
    11                              <1>             outp    0x21, 0xFF                              ; master interrupt mask
    11 00000AA1 B0FF                <2>  mov al, %2
    11 00000AA3 E621                <2>  out %1, al
    12                              <1> 
    13                              <1>             ; set up Slave
    14                              <1>             outp    0xA0, 0x11                              ; SLAVE.ICW1 = 0x11
    14 00000AA5 B011                <2>  mov al, %2
    14 00000AA7 E6A0                <2>  out %1, al
    15                              <1>             outp    0xA1, 0x28                              ; SLAVE.ICW2 = 0x28 // interrupt vector
    15 00000AA9 B028                <2>  mov al, %2
    15 00000AAB E6A1                <2>  out %1, al
    16                              <1>             outp    0xA1, 0x02                              ; SLAVE.ICW3 = 0x02 // slave ID = 2
    16 00000AAD B002                <2>  mov al, %2
    16 00000AAF E6A1                <2>  out %1, al
    17                              <1>             outp    0xA1, 0x01                              ; SLAVE.ICW4 = 0x01
    17 00000AB1 B001                <2>  mov al, %2
    17 00000AB3 E6A1                <2>  out %1, al
    18                              <1>             outp    0xA1, 0xFF                              ; slave interrupt mask
    18 00000AB5 B0FF                <2>  mov al, %2
    18 00000AB7 E6A1                <2>  out %1, al
    19                              <1> 
    20                              <1>             ; return regisiter
    21 00000AB9 58                  <1>             pop     eax
    22                              <1> 
    23 00000ABA C3                  <1>             ret
   181                                  %include    "../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     1          ******************  <1>  error: label `int_rtc' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; save registers
     4 00000ABB 60                  <1>             pusha
     5 00000ABC 1E                  <1>             push    ds
     6 00000ABD 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000ABE 66B81000            <1>             mov     ax, 0x0010                                      ; offset from the beginnig of GDT // second element
    10 00000AC2 8ED8                <1>             mov     ds, ax
    11 00000AC4 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; get time from RTC
    14 00000AC6 68[C4010000]E87BFD- <1>             cdecl   rtc_get_time, RTC_TIME
    14 00000ACE FFFF6683C404        <1>
    15                              <1> 
    16                              <1>             ; get RTC interrupt factor
    17                              <1>             outp    0x70, 0x0C                                      ; select register C
    17 00000AD4 B00C                <2>  mov al, %2
    17 00000AD6 E670                <2>  out %1, al
    18 00000AD8 E471                <1>             in      al, 0x71
    19                              <1> 
    20                              <1>             ; clear interrupt flag
    21 00000ADA B020                <1>             mov     al, 0x20                                        ; AL = EOI command
    22 00000ADC E6A0                <1>             out     0xA0, al                                        ; slave PIC
    23 00000ADE E620                <1>             out     0x20, al                                        ; master PIC
    24                              <1> 
    25                              <1>             ; return register
    26 00000AE0 07                  <1>             pop     es
    27 00000AE1 1F                  <1>             pop     ds
    28 00000AE2 61                  <1>             popa
    29                              <1> 
    30 00000AE3 CF                  <1>             iret                                                    ; end of interrupt process
    31                              <1>                                                                     ; return including flag register => iret
    32                              <1> 
    33                              <1> ; Enable interrupt by RTC itself
    34                              <1> 
    35                              <1> rtc_int_en:
    35          ******************  <1>  error: label `rtc_int_en' changed during code generation [-w+error=label-redef-late]
    36                              <1> 
    37                              <1>             ; construct stack frame
    38 00000AE4 55                  <1>             push    ebp
    39 00000AE5 89E5                <1>             mov     ebp, esp                                        ;EBP+8 | enable bit
    40                              <1> 
    41                              <1>             ; save register
    42 00000AE7 50                  <1>             push    eax
    43                              <1> 
    44                              <1>             ; set up Interrupt Permission
    45                              <1>             outp    0x70, 0x0B                                      ; select register B
    45 00000AE8 B00B                <2>  mov al, %2
    45 00000AEA E670                <2>  out %1, al
    46                              <1> 
    47 00000AEC E471                <1>             in      al, 0x71
    48 00000AEE 0A4508              <1>             or      al, [ebp + 8]                                   ; set the specified bit
    49                              <1> 
    50 00000AF1 E671                <1>             out     0x71, al                                        ; write down to register B
    51                              <1> 
    52                              <1>             ; return register
    53 00000AF3 58                  <1>             pop     eax
    54                              <1> 
    55                              <1>             ; destruct stack frame
    56 00000AF4 89EC                <1>             mov     esp, ebp
    57 00000AF6 5D                  <1>             pop     ebp
    58                              <1> 
    59 00000AF7 C3                  <1>             ret
   182                                  %include    "../modules/protect/ring_buff.s"
     1                              <1> ring_rd:
     1          ******************  <1>  error: label `ring_rd' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; construct stack frame                                     ;    +12 | save_dest address
     4 00000AF8 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
     5 00000AF9 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 00000AFB 50                  <1>             push    eax
     9 00000AFC 53                  <1>             push    ebx
    10 00000AFD 56                  <1>             push    esi
    11 00000AFE 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; get args
    14 00000AFF 8B7508              <1>             mov     esi, [ebp +  8]
    15 00000B02 8B7D0C              <1>             mov     edi, [ebp + 12]
    16                              <1> 
    17                              <1>             ; confirm the reading location
    18 00000B05 B800000000          <1>             mov     eax, 0                                              ; EAX = 0 // no data
    19 00000B0A 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = rp
    20 00000B0C 3B5E04              <1>             cmp     ebx, [esi + ring_buff.wp]                           ; if (EBX != wp)
    21 00000B0F 7421                <1>             je      .10E                                                ; {
    22                              <1> 
    23 00000B11 8A441E08            <1>             mov     al, [esi + ring_buff.item + ebx]                    ;   AL = BUFFER[rp] // store key code(unit:byte)
    24                              <1> 
    25 00000B15 8807                <1>             mov     [edi], al                                           ;   [EDI] = AL      // save data
    26                              <1> 
    27 00000B17 43                  <1>             inc     ebx                                                 ;   EBX++           // next reading location
    28 00000B18 83E30F              <1>             and     ebx, RING_INDEX_MASK                                ;   EBX &= 0x0F     // limit size
    29 00000B1B 891E                <1>             mov     [esi + ring_buff.rp], ebx                           ;   rp = EBX        // save the reading location
    30                              <1> 
    31 00000B1D B801000000          <1>             mov     eax, 1                                              ;   EAX = 1         // data exists
    32                              <1> .10E:                                                                   ; }
    32          ******************  <1>  error: label `ring_rd.10E' changed during code generation [-w+error=label-redef-late]
    33                              <1> 
    34                              <1>             ; return registers
    35 00000B22 5F                  <1>             pop     edi
    36 00000B23 5E                  <1>             pop     esi
    37 00000B24 5B                  <1>             pop     ebx
    38 00000B25 58                  <1>             pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 00000B26 89EC                <1>             mov     esp, ebp
    42 00000B28 5D                  <1>             pop     ebp
    43                              <1> 
    44 00000B29 C3                  <1>             ret
    45                              <1> 
    46                              <1> ring_wr:
    46          ******************  <1>  error: label `ring_wr' changed during code generation [-w+error=label-redef-late]
    47                              <1> 
    48                              <1>             ; construct stack frame                                     ;    +12 | data to write
    49 00000B2A 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
    50 00000B2B 89E5                <1>             mov     ebp, esp
    51                              <1> 
    52                              <1>             ; save registers
    53 00000B2D 50                  <1>             push    eax
    54 00000B2E 53                  <1>             push    ebx
    55 00000B2F 51                  <1>             push    ecx
    56 00000B30 56                  <1>             push    esi
    57 00000B31 57                  <1>             push    edi
    58                              <1> 
    59                              <1>             ; get args
    60 00000B32 8B7508              <1>             mov     esi, [ebp + 8]
    61                              <1> 
    62                              <1>             ; confirm the writing location
    63 00000B35 B800000000          <1>             mov     eax, 0
    64 00000B3A 8B5E04              <1>             mov     ebx, [esi + ring_buff.wp]                           ; writing position
    65 00000B3D 89D9                <1>             mov     ecx, ebx
    66 00000B3F 41                  <1>             inc     ecx                                                 ; next writing location
    67 00000B40 83E10F              <1>             and     ecx, RING_INDEX_MASK                                ; size limit
    68                              <1> 
    69 00000B43 3B0E                <1>             cmp     ecx, [esi + ring_buff.rp]                           ; if (ECX != rp)
    70 00000B45 741F                <1>             je      .10E                                                ; {
    71                              <1> 
    72 00000B47 8A450C              <1>             mov     al, [ebp + 12]                                      ;   AL = data
    73                              <1> 
    74 00000B4A 88441E08            <1>             mov     [esi + ring_buff.item + ebx], al                    ;   BUFFER[wp] = AL // save key code
    75 00000B4E 894E04              <1>             mov     [esi + ring_buff.wp], ecx                           ;   wp = ECX        // save the writing location
    76 00000B51 B801000000          <1>             mov     eax, 1
    77                              <1> .10E:
    77          ******************  <1>  error: label `ring_wr.10E' changed during code generation [-w+error=label-redef-late]
    78                              <1> 
    79                              <1>             ; return registers
    80 00000B56 5F                  <1>             pop     edi
    81 00000B57 5E                  <1>             pop     esi
    82 00000B58 59                  <1>             pop     ecx
    83 00000B59 5B                  <1>             pop     ebx
    84 00000B5A 58                  <1>             pop     eax
    85                              <1> 
    86                              <1>             ; destruct stack frame
    87 00000B5B 89EC                <1>             mov     esp, ebp
    88 00000B5D 5D                  <1>             pop     ebp
    89                              <1> 
    90 00000B5E C3                  <1>             ret
    91                              <1> 
    92                              <1> draw_key:
    92          ******************  <1>  error: label `draw_key' changed during code generation [-w+error=label-redef-late]
    93                              <1> 
    94                              <1>             ; construct stack frame                                     ;    +16 | ring buffer
    95 00000B5F 55                  <1>             push    ebp                                                 ;    +12 | row
    96 00000B60 89E5                <1>             mov     ebp, esp                                            ; EBP+ 8 | col
    97                              <1> 
    98                              <1>             ; save registers
    99 00000B62 60                  <1>             pusha                                                       ; save EAX,EBX,ECX,EDX,EDI,ESI,EBP,ESP
   100                              <1> 
   101                              <1>             ; get args
   102 00000B63 8B5508              <1>             mov     edx, [ebp +  8]
   103 00000B66 8B7D0C              <1>             mov     edi, [ebp + 12]
   104 00000B69 8B7510              <1>             mov     esi, [ebp + 16]
   105                              <1> 
   106                              <1>             ; get ring buffer info
   107 00000B6C 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = wp // writing location
   108 00000B6E 8D7608              <1>             lea     esi, [esi + ring_buff.item]
   109 00000B71 B910000000          <1>             mov     ecx, RING_ITEM_SIZE
   110                              <1> 
   111                              <1>             ; display data
   112                              <1> .10L:
   112          ******************  <1>  error: label `draw_key.10L' changed during code generation [-w+error=label-redef-late]
   113                              <1> 
   114 00000B76 4B                  <1>             dec     ebx                                                 ; EBX-- == where data exists
   115 00000B77 83E30F              <1>             and     ebx, RING_INDEX_MASK
   116 00000B7A 8A041E              <1>             mov     al, [esi + ebx]                                     ; EAX = KEY_BUFF[EBX]
   117                              <1> 
   118 00000B7D 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .tmp, 2, 16, 0b0100
   118 00000B84 [BE0B0000]50E834FC- <1>
   118 00000B8C FFFF6683C414        <1>
   119 00000B92 68[BE0B0000]6A0257- <1>             cdecl   draw_str, edx, edi, 0x02, .tmp
   119 00000B9A 52E887F9FFFF6683C4- <1>
   119 00000BA3 10                  <1>
   120                              <1> 
   121 00000BA4 83C203              <1>             add     edx, 3                                              ; updata display position(3 chars)
   122                              <1> 
   123 00000BA7 E2CD                <1>             loop    .10L
   124                              <1> .10E:
   124          ******************  <1>  error: label `draw_key.10E' changed during code generation [-w+error=label-redef-late]
   125                              <1> 
   126                              <1>             ; return registers
   127 00000BA9 61                  <1>             popa
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 00000BAA 89EC                <1>             mov     esp, ebp
   131 00000BAC 5D                  <1>             pop     ebp
   132                              <1> 
   133 00000BAD C3                  <1>             ret
   134                              <1> 
   135 00000BAE 2D2D2000            <1> .tmp        db "-- ", 0
   135          ******************  <1>  error: label `draw_key.tmp' changed during code generation [-w+error=label-redef-late]
   183                                  %include    "../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     1          ******************  <1>  error: label `int_keyboard' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; save registers
     4 00000BB2 60                  <1>             pusha
     5 00000BB3 1E                  <1>             push    ds
     6 00000BB4 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment for data
     9 00000BB5 66B81000            <1>             mov     ax, 0x0010
    10 00000BB9 8ED8                <1>             mov     ds, ax
    11 00000BBB 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; read buffer of KBC
    14 00000BBD E460                <1>             in      al, 0x60                                    ; AL = get key code
    15                              <1> 
    16                              <1>             ; save key code
    17 00000BBF 5068[E80B0000]E860- <1>             cdecl   ring_wr, _KEY_BUFF, eax
    17 00000BC7 FFFFFF6683C408      <1>
    18                              <1> 
    19                              <1>             ; send interrupt end command
    20                              <1>             outp    0x20, 0x20                                  ; master PIC: EOI command
    20 00000BCE B020                <2>  mov al, %2
    20 00000BD0 E620                <2>  out %1, al
    21                              <1> 
    22                              <1>             ; return registers
    23 00000BD2 07                  <1>             pop     es
    24 00000BD3 1F                  <1>             pop     ds
    25 00000BD4 61                  <1>             popa
    26                              <1> 
    27 00000BD5 CF                  <1>             iret
    28                              <1> 
    29 00000BD6 00<rept>            <1> ALIGN 4, db 0
    30 00000BD8 00<rept>            <1> _KEY_BUFF:  times ring_buff_size db 0
    30          ******************  <1>  error: label `_KEY_BUFF' changed during code generation [-w+error=label-redef-late]
   184                                  %include    "../modules/protect/timer.s"
     1                              <1> int_en_timer0:
     1          ******************  <1>  error: label `int_en_timer0' changed during code generation [-w+error=label-redef-late]
     2                              <1> 
     3                              <1>             ; save register
     4 00000BF0 50                  <1>             push    eax                                     ; use eax register on outp
     5                              <1> 
     6                              <1>             outp    0x43, 0b_00_11_010_0                    ; counter 0|access way:lower/upper|mode 2|16 bit binary couner
     6 00000BF1 B034                <2>  mov al, %2
     6 00000BF3 E643                <2>  out %1, al
     7                              <1>             outp    0x40, 0x9C                              ; lower byte
     7 00000BF5 B09C                <2>  mov al, %2
     7 00000BF7 E640                <2>  out %1, al
     8                              <1>             outp    0x40, 0x2E                              ; upper byte
     8 00000BF9 B02E                <2>  mov al, %2
     8 00000BFB E640                <2>  out %1, al
     9                              <1> 
    10                              <1>             ; return register
    11 00000BFD 58                  <1>             pop     eax
    12                              <1> 
    13 00000BFE C3                  <1>             ret
   185                                  %include    "../modules/protect/draw_rotation_bar.s"
     1                              <1> ;--------------------------------------------------------------------------------------------
     2                              <1> ;char update cycle
     3                              <1> ;=> The value obtained by reading the value of Timer interrupt counter
     4                              <1> ;   and shifting it to the right by 4 bits
     5                              <1> ;   and if the value is different from the previous value, it's the time to update.
     6                              <1> ;--------------------------------------------------------------------------------------------
     7                              <1> 
     8                              <1> draw_rotation_bar:
     8          ******************  <1>  error: label `draw_rotation_bar' changed during code generation [-w+error=label-redef-late]
     9                              <1> 
    10                              <1>             ; save register
    11 00000BFF 50                  <1>             push    eax
    12                              <1> 
    13                              <1>             ; main process
    14 00000C00 A1[34030000]        <1>             mov     eax, [TIMER_COUNT]
    15 00000C05 C1E804              <1>             shr     eax, 4
    16 00000C08 3B05[400C0000]      <1>             cmp     eax, [.index]
    17 00000C0E 742E                <1>             je      .10E
    18                              <1> 
    19 00000C10 A3[400C0000]        <1>             mov     [.index], eax
    20 00000C15 83E003              <1>             and     eax, 0x03                                       ; limit to the range 0 to 3
    21                              <1> 
    22 00000C18 8A80[440C0000]      <1>             mov     al, [.table + eax]                              ; AL = table[index]
    23 00000C1E 506A0F6A1D6A00E8FA- <1>             cdecl   draw_char, 0, 29, 0x000F, eax
    23 00000C27 F7FFFF6683C410      <1>
    24                              <1> 
    25                              <1> .10E:
    25          ******************  <1>  error: label `draw_rotation_bar.10E' changed during code generation [-w+error=label-redef-late]
    26                              <1> 
    27                              <1>             ; return register
    28 00000C2E 58                  <1>             pop     eax
    29                              <1> 
    30 00000C2F C3                  <1>             ret
    31                              <1> 
    32                              <1> ALIGN 4, db 0
    33 00000C30 00000000            <1> .index      dd 0                                                    ; previous value
    33          ******************  <1>  error: label `draw_rotation_bar.index' changed during code generation [-w+error=label-redef-late]
    34 00000C34 7C2F2D5C            <1> .table      db "|/-\"                                               ; display bar
    34          ******************  <1>  error: label `draw_rotation_bar.table' changed during code generation [-w+error=label-redef-late]
   186                                  
   187                                  
   188                                  ; PADDING
   189                                  
   190 00000C38 00<rept>                            times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
