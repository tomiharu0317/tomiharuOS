     1                                  ;macro
     2                                  
     3                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1> 
     4                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
    56                              <1> 
    57                              <1> %macro  set_desc 2-*
    58                              <1>             push    eax
    59                              <1>             push    edi
    60                              <1> 
    61                              <1>             mov     edi, %1                             ; descriptor address
    62                              <1>             mov     eax, %2                             ; base address
    63                              <1> 
    64                              <1>         %if 3 == %0
    65                              <1>             mov     [edi + 0], %3                       ; limit
    66                              <1>         %endif
    67                              <1> 
    68                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 4], al                       ; base([23:16])
    71                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    72                              <1> 
    73                              <1>             pop     edi
    74                              <1>             pop     eax
    75                              <1> %endmacro
     5                                  
     6                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     7                                  
     8                                  [BITS 32]                                                       ; BIT 32 directive
     9                                  ; entry point
    10                                  
    11                                  kernel:
    12                                  
    13                                                  ; Get Font address
    14 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    15 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    16 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    17 0000000C C1E004                                  shl     eax, 4
    18 0000000F 01D8                                    add     eax, ebx
    19 00000011 A3[7C010000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    20                                  
    21                                                  ; set up TSS descriptor
    22                                                  set_desc    GDT.tss_0, TSS_0
    22 00000016 50                  <1>  push eax
    22 00000017 57                  <1>  push edi
    22                              <1> 
    22 00000018 BF[74020000]        <1>  mov edi, %1
    22 0000001D B8[84010000]        <1>  mov eax, %2
    22                              <1> 
    22                              <1>  %if 3 == %0
    22                              <1>  mov [edi + 0], %3
    22                              <1>  %endif
    22                              <1> 
    22 00000022 66894702            <1>  mov [edi + 2], ax
    22 00000026 C1E810              <1>  shr eax, 16
    22 00000029 884704              <1>  mov [edi + 4], al
    22 0000002C 886707              <1>  mov [edi + 7], ah
    22                              <1> 
    22 0000002F 5F                  <1>  pop edi
    22 00000030 58                  <1>  pop eax
    23                                                  set_desc    GDT.tss_1, TSS_1
    23 00000031 50                  <1>  push eax
    23 00000032 57                  <1>  push edi
    23                              <1> 
    23 00000033 BF[7C020000]        <1>  mov edi, %1
    23 00000038 B8[EC010000]        <1>  mov eax, %2
    23                              <1> 
    23                              <1>  %if 3 == %0
    23                              <1>  mov [edi + 0], %3
    23                              <1>  %endif
    23                              <1> 
    23 0000003D 66894702            <1>  mov [edi + 2], ax
    23 00000041 C1E810              <1>  shr eax, 16
    23 00000044 884704              <1>  mov [edi + 4], al
    23 00000047 886707              <1>  mov [edi + 7], ah
    23                              <1> 
    23 0000004A 5F                  <1>  pop edi
    23 0000004B 58                  <1>  pop eax
    24                                  
    25                                                  ; set up LDT
    26                                                  set_desc    GDT.ldt, LDT, word LDT_LIMIT        ; descriptor address/base address/limit
    26 0000004C 50                  <1>  push eax
    26 0000004D 57                  <1>  push edi
    26                              <1> 
    26 0000004E BF[6C020000]        <1>  mov edi, %1
    26 00000053 B8[8A020000]        <1>  mov eax, %2
    26                              <1> 
    26                              <1>  %if 3 == %0
    26 00000058 66C7072700          <1>  mov [edi + 0], %3
    26                              <1>  %endif
    26                              <1> 
    26 0000005D 66894702            <1>  mov [edi + 2], ax
    26 00000061 C1E810              <1>  shr eax, 16
    26 00000064 884704              <1>  mov [edi + 4], al
    26 00000067 886707              <1>  mov [edi + 7], ah
    26                              <1> 
    26 0000006A 5F                  <1>  pop edi
    26 0000006B 58                  <1>  pop eax
    27                                  
    28                                                  ; load GDTR (resetting)
    29 0000006C 0F0115[84020000]                        lgdt        [GDTR]
    30                                  
    31                                                  ; set up stack
    32 00000073 BC00341000                              mov     esp, SP_TASK_0                          ; set up stack for Task0
    33                                  
    34                                                  ; recognize Kernel as Task0
    35 00000078 66B82000                                mov     ax, SS_TASK_0
    36 0000007C 0F00D8                                  ltr     ax                                      ; initialize TR
    37                                  
    38                                                  ; initialize interrupt vector
    39 0000007F E846080000                              cdecl   init_int
    40 00000084 E8C7090000                              cdecl   init_pic
    41                                  
    42                                                  set_vect    0x00, int_zero_div                  ; define interrupt process: Zero div
    42 00000089 50                  <1>  push eax
    42 0000008A 57                  <1>  push edi
    42                              <1> 
    42 0000008B BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    42 00000090 B8[320A0000]        <1>  mov eax, %2
    42                              <1> 
    42                              <1>  %if 3 == %0
    42                              <1>  mov [edi + 4], %3
    42                              <1>  %endif
    42                              <1> 
    42 00000095 668907              <1>  mov [edi + 0], ax
    42 00000098 C1E810              <1>  shr eax, 16
    42 0000009B 66894706            <1>  mov [edi + 6], ax
    42                              <1> 
    42 0000009F 5F                  <1>  pop edi
    42 000000A0 58                  <1>  pop eax
    43                                                  set_vect    0x20, int_timer                     ; define interrupt process: Timer
    43 000000A1 50                  <1>  push eax
    43 000000A2 57                  <1>  push edi
    43                              <1> 
    43 000000A3 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    43 000000A8 B8[B2020000]        <1>  mov eax, %2
    43                              <1> 
    43                              <1>  %if 3 == %0
    43                              <1>  mov [edi + 4], %3
    43                              <1>  %endif
    43                              <1> 
    43 000000AD 668907              <1>  mov [edi + 0], ax
    43 000000B0 C1E810              <1>  shr eax, 16
    43 000000B3 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    43 000000B7 5F                  <1>  pop edi
    43 000000B8 58                  <1>  pop eax
    44                                                  set_vect    0x21, int_keyboard                  ; define interrupt process: KBC
    44 000000B9 50                  <1>  push eax
    44 000000BA 57                  <1>  push edi
    44                              <1> 
    44 000000BB BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    44 000000C0 B8[720B0000]        <1>  mov eax, %2
    44                              <1> 
    44                              <1>  %if 3 == %0
    44                              <1>  mov [edi + 4], %3
    44                              <1>  %endif
    44                              <1> 
    44 000000C5 668907              <1>  mov [edi + 0], ax
    44 000000C8 C1E810              <1>  shr eax, 16
    44 000000CB 66894706            <1>  mov [edi + 6], ax
    44                              <1> 
    44 000000CF 5F                  <1>  pop edi
    44 000000D0 58                  <1>  pop eax
    45                                                  set_vect    0x28, int_rtc                       ; define interrupt process: RTC
    45 000000D1 50                  <1>  push eax
    45 000000D2 57                  <1>  push edi
    45                              <1> 
    45 000000D3 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    45 000000D8 B8[7B0A0000]        <1>  mov eax, %2
    45                              <1> 
    45                              <1>  %if 3 == %0
    45                              <1>  mov [edi + 4], %3
    45                              <1>  %endif
    45                              <1> 
    45 000000DD 668907              <1>  mov [edi + 0], ax
    45 000000E0 C1E810              <1>  shr eax, 16
    45 000000E3 66894706            <1>  mov [edi + 6], ax
    45                              <1> 
    45 000000E7 5F                  <1>  pop edi
    45 000000E8 58                  <1>  pop eax
    46                                  
    47                                                  ; permit interrupt by device
    48 000000E9 6A10E8B40900006683-                     cdecl   rtc_int_en, 0x10                        ; Updata-Ended Interrupt Enable
    48 000000F2 C404               
    49 000000F4 E8B70A0000                              cdecl   int_en_timer0
    50                                  
    51                                                  ; set up IMR(Interrupt Mask Register)
    52                                                  outp    0x21, 0b1111_1000                       ; interrupt enable: slave PIC/KBC/Timer     // master
    52 000000F9 B0F8                <1>  mov al, %2
    52 000000FB E621                <1>  out %1, al
    53                                                  outp    0xA1, 0b1111_1110                       ; interrupt enable: RTC                     // slave
    53 000000FD B0FE                <1>  mov al, %2
    53 000000FF E6A1                <1>  out %1, al
    54                                  
    55                                                  ; CPU interrupt enable
    56 00000101 FB                                      sti
    57                                  
    58                                                  ; display font and color_bar
    59 00000102 6A0D6A3FE88B030000-                     cdecl   draw_font, 63, 13
    59 0000010B 6683C408           
    60 0000010F 6A046A3FE80E040000-                     cdecl   draw_color_bar, 63, 4
    60 00000118 6683C408           
    61                                  
    62                                                  ; display string
    63 0000011C 68[64010000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    63 00000124 00006A0E6A19E8AC03-
    63 0000012D 00006683C410       
    64                                  
    65                                  ;---------------------------------------------------------------------------
    66                                  ; default multitask
    67                                  ;---------------------------------------------------------------------------
    68                                  
    69                                  
    70                                  ;                 ; call Task
    71                                  ;                 ; call    SS_TASK_1:0
    72                                  
    73                                  ; .10L:
    74                                  
    75                                  ;                 ; display time
    76                                  ;                 mov     eax, [RTC_TIME]
    77                                  ;                 cdecl   draw_time, 72, 0, 0x0700, eax
    78                                  
    79                                  
    80                                  ;                 ; get key code
    81                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
    82                                  ;                 cmp     eax, 0
    83                                  ;                 je      .10E
    84                                  
    85                                  ;                 ; display key code
    86                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
    87                                  ; .10E:
    88                                  
    89                                  ;                 ; draw rotation bar
    90                                  ;                 cdecl   draw_rotation_bar
    91                                  
    92                                  ;                 jmp     .10L
    93                                  
    94                                  ;----------------------------------------------------------------------------
    95                                  
    96                                  
    97                                  ;----------------------------------------------------------------------------
    98                                  ; non-preemptive multitask
    99                                  ;----------------------------------------------------------------------------
   100                                  
   101                                  ; .10L:
   102                                  
   103                                  ;                 ; call task
   104                                  ;                 jmp     SS_TASK_1:0                             ; jump to Task1
   105                                  
   106                                  ;                 ; draw rotation bar
   107                                  ;                 cdecl   draw_rotation_bar
   108                                  
   109                                  ;                 ; get key code
   110                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   111                                  ;                 cmp     eax, 0
   112                                  ;                 je      .10E
   113                                  
   114                                  ;                 ; display key code
   115                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   116                                  ; .10E:
   117                                  
   118                                  ;                 jmp     .10L
   119                                  
   120                                  ;-----------------------------------------------------------------------------
   121                                  
   122                                  ;----------------------------------------------------------------------------
   123                                  ; preemptive multitask
   124                                  ;----------------------------------------------------------------------------
   125                                  
   126                                  .10L:
   127                                  
   128                                                  ; draw rotation bar
   129 00000133 E8870A0000                              cdecl   draw_rotation_bar
   130                                  
   131                                                  ; get key code
   132 00000138 68[78010000]68-                         cdecl   ring_rd, _KEY_BUFF, .int_key
   132 0000013E [980B0000]E8710900-
   132 00000146 006683C408         
   133 0000014B 83F800                                  cmp     eax, 0
   134 0000014E 7412                                    je      .10E
   135                                  
   136                                                  ; display key code
   137 00000150 68[980B0000]6A1D6A-                     cdecl   draw_key, 2, 29, _KEY_BUFF
   137 00000158 02E8C10900006683C4-
   137 00000161 0C                 
   138                                  .10E:
   139                                  
   140 00000162 EBCF                                    jmp     .10L
   141                                  
   142                                  ;-----------------------------------------------------------------------------
   143                                  
   144                                  ;data
   145 00000164 2048656C6C6F2C206B-     .s0:    db  " Hello, kernel! ", 0
   145 0000016D 65726E656C212000   
   146                                  
   147 00000175 00<rept>                ALIGN 4, db 0
   148 00000178 00000000                .int_key:   dd 0
   149                                  
   150                                  ALIGN 4, db 0
   151 0000017C 00000000                FONT_ADR:   dd 0
   152 00000180 00000000                RTC_TIME:   dd 0
   153                                  
   154                                  
   155                                  ; TASKS
   156                                  %include    "descriptor.s"
     1                              <1> ;-----------------------------------------------------------------------
     2                              <1> ; TSS
     3                              <1> ;-----------------------------------------------------------------------
     4                              <1> 
     5                              <1> TSS_0:
     6 00000184 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
     7 00000188 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                             ;*  4: ESP0
     8 0000018C 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
     9 00000190 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    10 00000194 00000000            <1> .ss1:           dd  0                                           ;* 16:
    11 00000198 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    12 0000019C 00000000            <1> .ss2:           dd  0                                           ;* 24:
    13 000001A0 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    14 000001A4 00000000            <1> .eip:           dd  0                                           ;  32: EIP
    15 000001A8 00000000            <1> .eflags:        dd  0                                           ;  36: EFLAGS
    16 000001AC 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    17 000001B0 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    18 000001B4 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    19 000001B8 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    20 000001BC 00000000            <1> .esp:           dd  0                                           ;  56: ESP
    21 000001C0 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    22 000001C4 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    23 000001C8 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    24 000001CC 00000000            <1> .es:            dd  0                                           ;  72: ES
    25 000001D0 00000000            <1> .cs:            dd  0                                           ;  76: CS
    26 000001D4 00000000            <1> .ss:            dd  0                                           ;  80: SS
    27 000001D8 00000000            <1> .ds:            dd  0                                           ;  84: DS
    28 000001DC 00000000            <1> .fs:            dd  0                                           ;  88: FS
    29 000001E0 00000000            <1> .gs:            dd  0                                           ;  92: GS
    30 000001E4 00000000            <1> .ldt:           dd  0                                           ;* 96: LDT segment selector
    31 000001E8 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    32                              <1> 
    33                              <1> TSS_1:
    34 000001EC 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    35 000001F0 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                             ;*  4: ESP0
    36 000001F4 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    37 000001F8 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    38 000001FC 00000000            <1> .ss1:           dd  0                                           ;* 16:
    39 00000200 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    40 00000204 00000000            <1> .ss2:           dd  0                                           ;* 24:
    41 00000208 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    42 0000020C [F0020000]          <1> .eip:           dd  task_1                                      ;  32: EIP
    43 00000210 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    44 00000214 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    45 00000218 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    46 0000021C 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    47 00000220 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    48 00000224 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56: ESP
    49 00000228 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    50 0000022C 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    51 00000230 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    52 00000234 27000000            <1> .es:            dd  DS_TASK_1                                   ;  72: ES
    53 00000238 1F000000            <1> .cs:            dd  CS_TASK_1                                   ;  76: CS
    54 0000023C 27000000            <1> .ss:            dd  DS_TASK_1                                   ;  80: SS
    55 00000240 27000000            <1> .ds:            dd  DS_TASK_1                                   ;  84: DS
    56 00000244 27000000            <1> .fs:            dd  DS_TASK_1                                   ;  88: FS
    57 00000248 27000000            <1> .gs:            dd  DS_TASK_1                                   ;  92: GS
    58 0000024C 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    59 00000250 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    60                              <1> 
    61                              <1> ;-----------------------------------------------------------------------------------------------
    62                              <1> ; GDT
    63                              <1> ;-----------------------------------------------------------------------------------------------
    64                              <1> 
    65 00000254 0000000000000000    <1> GDT:            dq  0x0000000000000000
    66 0000025C FFFF0000009ACF00    <1> .cs_kernel:     dq  0x00CF9A000000FFFF                          ; CODE 4G
    67 00000264 FFFF00000092CF00    <1> .ds_kernel:     dq  0x00CF92000000FFFF                          ; DATA 4G
    68 0000026C 0000000000820000    <1> .ldt            dq  0x0000820000000000                          ; LDT descriptor
    69 00000274 6700000000890000    <1> .tss_0:         dq  0x0000890000000067                          ; TSS descriptor
    70 0000027C 6700000000890000    <1> .tss_1:         dq  0x0000890000000067                          ; TSS descriptor
    71                              <1> .end:
    72                              <1> 
    73                              <1> CS_KERNEL       equ .cs_kernel - GDT
    74                              <1> DS_KERNEL       equ .ds_kernel - GDT
    75                              <1> SS_LDT          equ .ldt       - GDT
    76                              <1> SS_TASK_0       equ .tss_0     - GDT
    77                              <1> SS_TASK_1       equ .tss_1     - GDT
    78                              <1> 
    79 00000284 2F00                <1> GDTR:   dw      GDT.end - GDT - 1
    80 00000286 [54020000]          <1>         dd      GDT
    81                              <1> 
    82                              <1> ;-----------------------------------------------------------------------------------------------
    83                              <1> ; LDT
    84                              <1> ;-----------------------------------------------------------------------------------------------
    85                              <1> 
    86 0000028A 0000000000000000    <1> LDT:            dq  0x0000000000000000                          ; NULL
    87 00000292 FFFF0000009ACF00    <1> .cs_task_0:     dq  0x00CF9A000000FFFF                          ; CODE 4G
    88 0000029A FFFF00000092CF00    <1> .ds_task_0:     dq  0x00CF92000000FFFF                          ; DATA 4G
    89 000002A2 FFFF000000FACF00    <1> .cs_task_1:     dq  0x00CFFA000000FFFF                          ; CODE 4G
    90 000002AA FFFF000000F2CF00    <1> .ds_task_1:     dq  0x00CFF2000000FFFF                          ; DATA 4G
    91                              <1> .end:
    92                              <1> 
    93                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                      ; cs selector for task0 // set bit 2(TI)
    94                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                      ; ds selector for task0 // Priviledge level 0
    95                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                  ; cs selector for task1 // Priviledge level 3
    96                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                  ; ds selector for task1
    97                              <1> 
    98                              <1> LDT_LIMIT       equ .end        - LDT - 1
   157                                  %include    "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1> 
     3                              <1>             ; save registers
     4 000002B2 60                  <1>             pusha
     5 000002B3 1E                  <1>             push    ds
     6 000002B4 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 000002B5 66B81000            <1>             mov     ax, 0x0010
    10 000002B9 8ED8                <1>             mov     ds, ax
    11 000002BB 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; TICK
    14 000002BD FF05[E8020000]      <1>             inc     dword [TIMER_COUNT]                                     ; TIMER_COUNT++ //update interrupt count
    15                              <1> 
    16                              <1>             ; clear interrupt flag(EOI)
    17                              <1>             outp    0x20, 0x20                                              ; master PIC:EOI command
    17 000002C3 B020                <2>  mov al, %2
    17 000002C5 E620                <2>  out %1, al
    18                              <1> 
    19                              <1>             ; exchange Task
    20 000002C7 660F00C8            <1>             str     ax                                                      ; AX = TR // current Task Register
    21 000002CB 6683F828            <1>             cmp     ax, SS_TASK_1
    22 000002CF 7409                <1>             je      .11L
    23                              <1> 
    24 000002D1 EA000000002800      <1>             jmp     SS_TASK_1:0
    25 000002D8 EB09                <1>             jmp     .10E
    26                              <1> .11L:
    27 000002DA EA000000002000      <1>             jmp     SS_TASK_0:0
    28 000002E1 EB00                <1>             jmp     .10E
    29                              <1> .10E:
    30                              <1> 
    31                              <1>             ; return registers
    32 000002E3 07                  <1>             pop     es
    33 000002E4 1F                  <1>             pop     ds
    34 000002E5 61                  <1>             popa
    35                              <1> 
    36 000002E6 CF                  <1>             iret
    37                              <1> 
    38 000002E7 00                  <1> ALIGN 4, db 0
    39 000002E8 0000000000000000    <1> TIMER_COUNT:    dq 0
   158                                  %include    "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1> 
     3                              <1>             ; display string
     4 000002F0 68[1E030000]6A076A- <1>             cdecl   draw_str, 63, 0, 0x07, .s0
     4 000002F8 006A3FE8DB01000066- <1>
     4 00000301 83C410              <1>
     5                              <1> 
     6                              <1> ;-------------------------------------------------------------
     7                              <1> ; non-preemptive multitask
     8                              <1> ;-------------------------------------------------------------
     9                              <1> 
    10                              <1> ; .10L:
    11                              <1> ;             ; display time
    12                              <1> ;             mov     eax, [RTC_TIME]                         ; get time
    13                              <1> ;             cdecl   draw_time, 72, 0, 0x0700, eax
    14                              <1> 
    15                              <1> ;             ; call Task
    16                              <1> ;             jmp    SS_TASK_0:0                             ; jump to Task0(kernel)
    17                              <1> 
    18                              <1> ;             jmp     .10L
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> 
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; preemptive multitask
    24                              <1> ;-------------------------------------------------------------
    25                              <1> 
    26                              <1> .10L:
    27                              <1>             ; display time
    28 00000304 A1[80010000]        <1>             mov     eax, [RTC_TIME]                         ; get time
    29 00000309 5068000700006A006A- <1>             cdecl   draw_time, 72, 0, 0x0700, eax
    29 00000312 48E8350500006683C4- <1>
    29 0000031B 10                  <1>
    30                              <1> 
    31                              <1> 
    32 0000031C EBE6                <1>             jmp     .10L
    33                              <1> 
    34                              <1> ;-------------------------------------------------------------
    35                              <1> 
    36                              <1>             ; data
    37 0000031E 5461736B5F3100      <1> .s0:        db  "Task_1", 0
   159                                  
   160                                  ; MODULES
   161                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000325 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 00000326 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 00000328 50                  <1>             push    eax
    10 00000329 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 0000032A 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 0000032D 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 00000330 B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 00000332 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 00000336 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 00000338 5A                  <1>             pop     edx
    21 00000339 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 0000033A 89EC                <1>             mov     esp, ebp
    25 0000033C 5D                  <1>             pop     ebp
    26                              <1> 
    27 0000033D C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 0000033E 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 0000033F 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 00000341 50                  <1>             push    eax
    38 00000342 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 00000343 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 00000346 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000349 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 0000034B 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 0000034F 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 00000351 5A                  <1>             pop     edx
    49 00000352 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 00000353 89EC                <1>             mov     esp, ebp
    53 00000355 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000356 C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 00000357 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 00000358 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 0000035A 50                  <1>             push    eax
    66 0000035B 53                  <1>             push    ebx
    67 0000035C 51                  <1>             push    ecx
    68 0000035D 52                  <1>             push    edx
    69 0000035E 56                  <1>             push    esi
    70 0000035F 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 00000360 8B7508              <1>             mov     esi, [ebp + 8]
    74 00000363 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 00000366 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 0000036A 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 0000036E 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 00000370 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 00000373 FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 00000375 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 00000377 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 0000037A FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 0000037C FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 0000037D B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 00000382 AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 00000383 88C4                <1>             mov     ah, al
    96 00000385 F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 00000387 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 00000389 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 0000038F 7404                <1>             jz      .11F                                    ; {
   104 00000391 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 00000393 EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 00000395 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 00000397 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 00000399 8807                <1>             mov     [edi], al
   116                              <1> 
   117 0000039B 83C750              <1>             add     edi, 80
   118 0000039E E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 000003A0 5F                  <1>             pop     edi
   123 000003A1 5E                  <1>             pop     esi
   124 000003A2 5A                  <1>             pop     edx
   125 000003A3 59                  <1>             pop     ecx
   126 000003A4 5B                  <1>             pop     ebx
   127 000003A5 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 000003A6 89EC                <1>             mov     esp, ebp
   131 000003A8 5D                  <1>             pop     ebp
   132                              <1> 
   133 000003A9 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 000003AA 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 000003AB 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 000003AD 50                  <1>             push    eax
   144 000003AE 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 000003AF 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 000003B0 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 000003B3 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 000003B7 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 000003BB 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 000003BD 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 000003C0 FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 000003C2 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 000003C5 88C4                <1>             mov     ah, al
   163 000003C7 F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 000003C9 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 000003CB 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 000003CD 08E0                <1>             or      al, ah
   169 000003CF 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 000003D1 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 000003D2 5B                  <1>             pop     ebx
   177 000003D3 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 000003D4 89EC                <1>             mov     esp, ebp
   181 000003D6 5D                  <1>             pop     ebp
   182                              <1> 
   183 000003D7 C3                  <1>             ret
   162                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 000003D8 55                  <1>             push    ebp                                         ;   +16 | color
     5 000003D9 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 000003DB 53                  <1>             push    ebx
    10 000003DC 56                  <1>             push    esi
    11 000003DD 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; set copy_target font address
    14 000003DE 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    15 000003E2 C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    16 000003E5 0335[7C010000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    17                              <1> 
    18                              <1>             ; get copy_dest VRAM address
    19                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    20                              <1>             ; y:row, x:column
    21                              <1> 
    22 000003EB 8B7D0C              <1>             mov     edi, [ebp + 12]
    23 000003EE C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    24 000003F1 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    25 000003F8 037D08              <1>             add     edi, [ebp + 8]
    26                              <1> 
    27                              <1>             ; output a char of font
    28 000003FB 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    29                              <1> 
    30 000003FF 6A03E81FFFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    30 00000408 C404                <1>
    31 0000040A 6A08E82DFFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    31 00000413 C404                <1>
    32 00000415 536A085756E838FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    32 0000041E FF6683C410          <1>
    33                              <1> 
    34 00000423 6A02E8FBFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    34 0000042C C404                <1>
    35 0000042E 6A04E809FFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    35 00000437 C404                <1>
    36 00000439 536A045756E814FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    36 00000442 FF6683C410          <1>
    37                              <1> 
    38 00000447 6A01E8D7FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    38 00000450 C404                <1>
    39 00000452 6A02E8E5FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    39 0000045B C404                <1>
    40 0000045D 536A025756E8F0FEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    40 00000466 FF6683C410          <1>
    41                              <1> 
    42 0000046B 6A00E8B3FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    42 00000474 C404                <1>
    43 00000476 6A01E8C1FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    43 0000047F C404                <1>
    44 00000481 536A015756E8CCFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    44 0000048A FF6683C410          <1>
    45                              <1> 
    46                              <1>             ; return registers
    47 0000048F 5F                  <1>             pop     edi
    48 00000490 5E                  <1>             pop     esi
    49 00000491 5B                  <1>             pop     ebx
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 00000492 89EC                <1>             mov     esp, ebp
    53 00000494 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000495 C3                  <1>             ret
   163                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000496 55                  <1>             push    ebp                                         ;   +12 | row
     5 00000497 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000499 50                  <1>             push    eax
     9 0000049A 53                  <1>             push    ebx
    10 0000049B 51                  <1>             push    ecx
    11 0000049C 52                  <1>             push    edx
    12 0000049D 56                  <1>             push    esi
    13 0000049E 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 0000049F 8B7508              <1>             mov     esi, [ebp + 8]
    17 000004A2 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 000004A5 B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 000004AA 81F900010000        <1> .10L:       cmp     ecx, 256
    22 000004B0 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 000004B2 89C8                <1>             mov     eax, ecx
    26 000004B4 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 000004B7 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 000004B9 89CB                <1>             mov     ebx, ecx
    31 000004BB C1EB04              <1>             shr     ebx, 4
    32 000004BE 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 000004C0 516A075350E80EFFFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 000004C9 FF6683C410          <1>
    35                              <1> 
    36 000004CE 41                  <1>             inc     ecx
    37 000004CF EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 000004D1 5F                  <1>             pop     edi
    42 000004D2 5E                  <1>             pop     esi
    43 000004D3 5A                  <1>             pop     edx
    44 000004D4 59                  <1>             pop     ecx
    45 000004D5 5B                  <1>             pop     ebx
    46 000004D6 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 000004D7 89EC                <1>             mov     esp, ebp
    50 000004D9 5D                  <1>             pop     ebp
    51                              <1> 
    52 000004DA C3                  <1>             ret
   164                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000004DB 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 000004DC 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 000004DE 50                  <1>             push    eax
    11 000004DF 53                  <1>             push    ebx
    12 000004E0 51                  <1>             push    ecx
    13 000004E1 52                  <1>             push    edx
    14 000004E2 56                  <1>             push    esi
    15 000004E3 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 000004E4 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 000004E7 8B550C              <1>             mov     edx, [ebp + 12]
    20 000004EA 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 000004EE 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 000004F1 FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 000004F2 AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 000004F3 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 000004F5 7425                <1>             je      .10E
    29                              <1> 
    30 000004F7 50535251E8D8FEFFFF- <1>             cdecl   draw_char, ecx, edx, ebx, eax
    30 00000500 6683C410            <1>
    31                              <1> 
    32 00000504 41                  <1>             inc     ecx
    33 00000505 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    34 00000508 7C10                <1>             jl      .12E                                        ; {
    35 0000050A B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    36 0000050F 42                  <1>             inc     edx                                         ;   EDX++;
    37 00000510 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    38 00000513 7C05                <1>             jl      .12E                                        ;   {
    39 00000515 BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    40                              <1>                                                                 ;   }
    41                              <1> .12E:                                                           ; }
    42 0000051A EBD6                <1>             jmp     .10L
    43                              <1> .10E:
    44                              <1> 
    45                              <1>             ; return registers
    46 0000051C 5F                  <1>             pop     edi
    47 0000051D 5E                  <1>             pop     esi
    48 0000051E 5A                  <1>             pop     edx
    49 0000051F 59                  <1>             pop     ecx
    50 00000520 5B                  <1>             pop     ebx
    51 00000521 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000522 89EC                <1>             mov     esp, ebp
    55 00000524 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000525 C3                  <1>             ret
   165                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000526 55                  <1>             push    ebp                                             ;   +12 | row
     5 00000527 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000529 50                  <1>             push    eax
     9 0000052A 53                  <1>             push    ebx
    10 0000052B 51                  <1>             push    ecx
    11 0000052C 52                  <1>             push    edx
    12 0000052D 56                  <1>             push    esi
    13 0000052E 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 0000052F 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000532 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 00000535 B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 0000053A 83F910              <1> .10L:       cmp     ecx, 16
    22 0000053D 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 0000053F 89C8                <1>             mov     eax, ecx
    26 00000541 83E001              <1>             and     eax, 0x01
    27 00000544 C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 00000547 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 00000549 89CB                <1>             mov     ebx, ecx
    32 0000054B D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 0000054D 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 0000054F 89CA                <1>             mov     edx, ecx
    37 00000551 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 00000553 8B92[80050000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 00000559 68[77050000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 00000561 E875FFFFFF6683C410  <1>
    41                              <1> 
    42 0000056A 41                  <1>             inc     ecx
    43 0000056B EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 0000056D 5F                  <1>             pop     edi
    48 0000056E 5E                  <1>             pop     esi
    49 0000056F 5A                  <1>             pop     edx
    50 00000570 59                  <1>             pop     ecx
    51 00000571 5B                  <1>             pop     ebx
    52 00000572 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 00000573 89E5                <1>             mov     ebp, esp
    56 00000575 5D                  <1>             pop     ebp
    57                              <1> 
    58 00000576 C3                  <1>             ret
    59                              <1> 
    60 00000577 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 00000580 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 00000584 00010009            <1>             dw  0x0100, 0x0900
    64 00000588 0002000A            <1>             dw  0x0200, 0x0A00
    65 0000058C 0003000B            <1>             dw  0x0300, 0x0B00
    66 00000590 0004000C            <1>             dw  0x0400, 0x0C00
    67 00000594 0005000D            <1>             dw  0x0500, 0x0D00
    68 00000598 0006000E            <1>             dw  0x0600, 0x0E00
    69 0000059C 0007000F            <1>             dw  0x0700, 0x0F00
   166                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 000005A0 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 000005A1 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 000005A3 50                  <1>             push    eax
     9 000005A4 53                  <1>             push    ebx
    10 000005A5 51                  <1>             push    ecx
    11 000005A6 52                  <1>             push    edx
    12 000005A7 56                  <1>             push    esi
    13 000005A8 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 000005A9 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 000005AC C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 000005AF 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 000005B6 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 000005B9 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 000005BB C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 000005BE 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 000005C0 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 000005C3 BB80000000          <1>             mov     ebx, 0x80
    35 000005C8 D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 000005CA 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 000005CD 6A03E851FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 000005D6 C404                <1>
    43 000005D8 6A08E85FFDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 000005E1 C404                <1>
    44 000005E3 516A085753E8BDFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 000005EC FF6683C410          <1>
    45                              <1> 
    46 000005F1 6A02E82DFDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 000005FA C404                <1>
    47 000005FC 6A04E83BFDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 00000605 C404                <1>
    48 00000607 516A045753E899FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 00000610 FF6683C410          <1>
    49                              <1> 
    50 00000615 6A01E809FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 0000061E C404                <1>
    51 00000620 6A02E817FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 00000629 C404                <1>
    52 0000062B 516A025753E875FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 00000634 FF6683C410          <1>
    53                              <1> 
    54 00000639 6A00E8E5FCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 00000642 C404                <1>
    55 00000644 6A01E8F3FCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 0000064D C404                <1>
    56 0000064F 516A015753E851FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 00000658 FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 0000065D 5F                  <1>             pop     edi
    60 0000065E 5E                  <1>             pop     esi
    61 0000065F 5A                  <1>             pop     edx
    62 00000660 59                  <1>             pop     ecx
    63 00000661 5B                  <1>             pop     ebx
    64 00000662 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 00000663 89EC                <1>             mov     esp, ebp
    68 00000665 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000666 C3                  <1>             ret
   167                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 00000667 55                  <1>             push    ebp
    22 00000668 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 0000066A 6A00                <1>             push    dword 0
    25 0000066C 6A00                <1>             push    dword 0
    26 0000066E 6A00                <1>             push    dword 0
    27 00000670 6A00                <1>             push    dword 0
    28 00000672 6A00                <1>             push    dword 0
    29 00000674 6A00                <1>             push    dword 0
    30 00000676 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 00000678 50                  <1>             push    eax
    34 00000679 53                  <1>             push    ebx
    35 0000067A 51                  <1>             push    ecx
    36 0000067B 52                  <1>             push    edx
    37 0000067C 56                  <1>             push    esi
    38 0000067D 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 0000067E 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 00000681 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 00000684 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 00000686 7D09                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 00000688 F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 0000068A BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 0000068F EB05                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    50 00000691 BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 00000696 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 00000699 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 0000069C 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 0000069E 7D09                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 000006A0 F7DA                <1>             neg     edx                                             ;   height *= -1
    60 000006A2 BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 000006A7 EB05                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    63 000006A9 BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 000006AE 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 000006B1 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 000006B4 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 000006B7 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 000006BA 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 000006BD 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 000006C0 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 000006C2 7F08                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 000006C4 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 000006C7 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 000006CA EB06                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    93                              <1>                                                                     ;   // y axis is base one.
    94 000006CC 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 000006CF 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 000006D2 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 000006D5 83F900              <1>             cmp     ecx, 0
   101 000006D8 7505                <1>             jnz     .30E
   102 000006DA B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   109 000006DF FF7518FF75ECFF75F8- <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   109 000006E8 E8B3FEFFFF6683C40C  <1>
   110                              <1> 
   111                              <1>             ; update base axis(1 dot)
   112 000006F1 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   113 000006F4 0106                <1>             add     [esi - 0], eax
   114                              <1> 
   115                              <1>             ; update relative axis
   116 000006F6 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   117 000006F9 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   118                              <1> 
   119 000006FC 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   120                              <1> 
   121 000006FF 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   122 00000701 7C07                <1>             jl      .52E                                            ; {
   123 00000703 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   124                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   125 00000705 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   126 00000708 011F                <1>             add     [edi - 0], ebx
   127                              <1> .52E:                                                               ; }
   128                              <1> 
   129 0000070A 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   130                              <1> 
   131 0000070D E2D0                <1>             loop    .50L
   132                              <1> .50E:
   133                              <1> 
   134                              <1>             ; return registers
   135 0000070F 5F                  <1>             pop     edi
   136 00000710 5E                  <1>             pop     esi
   137 00000711 5A                  <1>             pop     edx
   138 00000712 59                  <1>             pop     ecx
   139 00000713 5B                  <1>             pop     ebx
   140 00000714 58                  <1>             pop     eax
   141                              <1> 
   142                              <1>             ; destruct stack frame
   143 00000715 89EC                <1>             mov     esp, ebp
   144 00000717 5D                  <1>             pop     ebp
   145                              <1> 
   146 00000718 C3                  <1>             ret
   168                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 00000719 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 0000071A 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 0000071C 50                  <1>             push    eax
    11 0000071D 53                  <1>             push    ebx
    12 0000071E 51                  <1>             push    ecx
    13 0000071F 52                  <1>             push    edx
    14 00000720 56                  <1>             push    esi
    15 00000721 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000722 8B4508              <1>             mov     eax, [ebp +  8]
    19 00000725 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 00000728 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 0000072B 8B5514              <1>             mov     edx, [ebp + 20]
    22 0000072E 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 00000731 39C8                <1>             cmp     eax, ecx
    26 00000733 7C01                <1>             jl      .10E
    27 00000735 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    29 00000736 39D3                <1>             cmp     ebx, edx
    30 00000738 7C02                <1>             jl      .20E
    31 0000073A 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    33                              <1> 
    34                              <1>             ; draw rectangle
    35 0000073C 5653515350E821FFFF- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35 00000745 FF6683C414          <1>
    36 0000074A 5652505350E813FFFF- <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36 00000753 FF6683C414          <1>
    37                              <1> 
    38 00000758 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39 00000759 5652515250E804FFFF- <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39 00000762 FF6683C414          <1>
    40 00000767 42                  <1>             inc     edx
    41                              <1> 
    42 00000768 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43 00000769 5652515351E8F4FEFF- <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43 00000772 FF6683C414          <1>
    44                              <1> 
    45                              <1>             ; return registers
    46 00000777 5F                  <1>             pop     edi
    47 00000778 5E                  <1>             pop     esi
    48 00000779 5A                  <1>             pop     edx
    49 0000077A 59                  <1>             pop     ecx
    50 0000077B 5B                  <1>             pop     ebx
    51 0000077C 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 0000077D 89EC                <1>             mov     esp, ebp
    55 0000077F 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000780 C3                  <1>             ret
   169                                  %include    "../modules/protect/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 00000781 55                  <1>         push    ebp
     6 00000782 89E5                <1>         mov     ebp, esp                                ;   +24|flag
     7                              <1>                                                         ;   +20|radix
     8                              <1>                                                         ;   +16|dest buffer size
     9                              <1>                                                         ;   +12|dest buffer address
    10                              <1>                                                         ;   + 8|the value to be converted
    11                              <1>                                                         ;   + 4|Instruction Pointer
    12                              <1>                                                         ;EBP+ 0|EBP
    13                              <1>         ; save registers
    14                              <1> 
    15 00000784 50                  <1>         push    eax
    16 00000785 53                  <1>         push    ebx
    17 00000786 51                  <1>         push    ecx
    18 00000787 52                  <1>         push    edx
    19 00000788 56                  <1>         push    esi
    20 00000789 57                  <1>         push    edi
    21                              <1> 
    22                              <1>         ; get args
    23                              <1> 
    24 0000078A 8B4508              <1>         mov     eax, [ebp +  8]                         ; val = value
    25 0000078D 8B750C              <1>         mov     esi, [ebp + 12]                         ; dest= buffer address
    26 00000790 8B4D10              <1>         mov     ecx, [ebp + 16]                         ; size= remaining buffer size
    27                              <1> 
    28 00000793 89F7                <1>         mov     edi, esi                                ; end of buffer
    29 00000795 01CF                <1>         add     edi, ecx                                ; dest = &dest[esize - 1]
    30 00000797 4F                  <1>         dec     edi
    31                              <1> 
    32 00000798 8B5D18              <1>         mov     ebx, [ebp + 24]
    33                              <1> 
    34                              <1>         ; signing judge
    35                              <1> 
    36 0000079B F7C301000000        <1>         test    ebx, 0b0001                             ; if (flags & 0x01) //if signed => ZF = 0
    37 000007A1 7408                <1> .10Q    je      .10E                                    ; {                 //if not ZF = 1 so => jmp
    38 000007A3 83F800              <1>         cmp     eax, 0                                  ;   if (val < 0)    //CF = 1, ZF = 0
    39 000007A6 7D03                <1> .12Q    jge     .12E                                    ;   {
    40 000007A8 83CB02              <1>         or      ebx, 0b0010                             ;       flags |= 2; //set B1
    41                              <1>                                                         ; }}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ; sign output judge
    46                              <1> 
    47 000007AB F7C302000000        <1>         test    ebx, 0b0010
    48 000007B1 7410                <1> .20Q    je      .20E
    49 000007B3 83F800              <1>         cmp     eax, 0
    50 000007B6 7D07                <1> .22Q    jge     .22F
    51 000007B8 F7D8                <1>         neg     eax                                     ; sign reverse
    52 000007BA C6062D              <1>         mov     [esi], byte '-'                         ; sign display
    53 000007BD EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 000007BF C6062B              <1>         mov     [esi], byte '+'
    56                              <1> .22E:
    57 000007C2 49                  <1>         dec     ecx                                     ; subtract remaining buffer size -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ; ASCII conversion
    61                              <1> 
    62 000007C3 8B5D14              <1>         mov     ebx, [ebp + 20]                          ; ebx = radix
    63                              <1> 
    64                              <1> .30L:                                                   ; do{
    65 000007C6 BA00000000          <1>         mov     edx, 0
    66 000007CB F7F3                <1>         div     ebx                                    ;   edx = edx:eax % ebx;
    67                              <1>                                                         ;   eax = edx:eax / ebx;
    68                              <1> 
    69 000007CD 89D6                <1>         mov     esi, edx                                ;   //refer to coversion table
    70 000007CF 8A96[FA070000]      <1>         mov     dl, byte [.ascii + esi]                 ;   DL = ASCII[edx];
    71                              <1> 
    72 000007D5 8817                <1>         mov     [edi], dl                               ;   *dest = DL;
    73 000007D7 4F                  <1>         dec     edi                                     ;   dest--;
    74                              <1> 
    75 000007D8 83F800              <1>         cmp     eax, 0
    76 000007DB E0E9                <1>         loopnz  .30L                                    ; } while(eax);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ; padding (zero / blank)
    81                              <1> 
    82 000007DD 83F900              <1>         cmp     ecx, 0                                  ; if (esize)
    83 000007E0 740E                <1> .40Q:   je      .40E                                    ; {
    84 000007E2 B020                <1>         mov     al, ' '                                 ;   AL = ' '; // padding with blanks
    85 000007E4 66837D1804          <1>         cmp     [ebp + 24], word 0b0100                  ;   if (flags & 0x04)
    86 000007E9 7502                <1> .42Q:   jne     .42E                                    ;   {
    87 000007EB B030                <1>         mov     al, '0'                                 ;       AL = '0'; // padding with zero
    88                              <1> .42E:                                                   ;   }
    89 000007ED FD                  <1>         std                                             ;   // DF = 1(dec)
    90 000007EE F3AA                <1>         rep stosb                                       ;   while (--ecx) * edi-- = ' ';
    91                              <1> .40E:                                                   ; }
    92                              <1> 
    93                              <1>         ; return registers
    94                              <1> 
    95 000007F0 5F                  <1>         pop     edi
    96 000007F1 5E                  <1>         pop     esi
    97 000007F2 5A                  <1>         pop     edx
    98 000007F3 59                  <1>         pop     ecx
    99 000007F4 5B                  <1>         pop     ebx
   100 000007F5 58                  <1>         pop     eax
   101                              <1> 
   102                              <1>         ; destruct stack frame
   103                              <1> 
   104 000007F6 89EC                <1>         mov     esp, ebp
   105 000007F8 5D                  <1>         pop     ebp
   106                              <1> 
   107 000007F9 C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 000007FA 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                      ; conversion table
   110 00000803 39414243444546      <1>
   170                                  %include    "../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000080A 55                  <1>             push    ebp                                     ; EBP+8 | destination
     5 0000080B 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 0000080D 50                  <1>             push    eax
     9 0000080E 53                  <1>             push    ebx
    10                              <1> 
    11                              <1> ; // Avoid conflicts between RTC data updates and
    12                              <1> ; // on-chip RAM access by confirming UIP bit on Register A
    13                              <1> 
    14 0000080F B00A                <1>             mov     al, 0x0A                                ; register A
    15 00000811 E670                <1>             out     0x70, al
    16 00000813 E471                <1>             in      al, 0x71                                ; al = register A
    17 00000815 A880                <1>             test    al, 0x80                                ; if (UIP) // updating
    18 00000817 7407                <1>             je      .10F                                    ; {
    19 00000819 B801000000          <1>             mov     eax, 1                                  ;   return = 1;
    20 0000081E EB27                <1>             jmp     .10E                                    ; }
    21                              <1> .10F:                                                       ; else
    22                              <1>                                                             ; {        // get time process
    23                              <1> 
    24                              <1>             ; main process
    25 00000820 B004                <1>             mov     al, 0x04                                ;   hour
    26 00000822 E670                <1>             out     0x70, al
    27 00000824 E471                <1>             in      al, 0x71
    28                              <1> 
    29 00000826 C1E008              <1>             shl     eax, 8
    30                              <1> 
    31 00000829 B002                <1>             mov     al, 0x02                                ;   minute
    32 0000082B E670                <1>             out     0x70, al
    33 0000082D E471                <1>             in      al, 0x71
    34                              <1> 
    35 0000082F C1E008              <1>             shl     eax, 8
    36                              <1> 
    37 00000832 B000                <1>             mov     al, 0x00                                ;   second
    38 00000834 E670                <1>             out     0x70, al
    39 00000836 E471                <1>             in      al, 0x71
    40                              <1> 
    41 00000838 25FFFFFF00          <1>             and     eax, 0x00_FF_FF_FF                      ;   all data are in lower 3 bytes of eax register
    42                              <1> 
    43 0000083D 8B5D08              <1>             mov     ebx, [ebp + 8]
    44 00000840 8903                <1>             mov     [ebx], eax                              ;   [dest] = real time
    45                              <1> 
    46 00000842 B800000000          <1>             mov     eax, 0                                  ;   return = 0;
    47                              <1> .10E:                                                       ; }
    48                              <1> 
    49                              <1>             ; return register
    50 00000847 5B                  <1>             pop     ebx
    51 00000848 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000849 89EC                <1>             mov     esp, ebp
    55 0000084B 5D                  <1>             pop     ebp
    56                              <1> 
    57 0000084C C3                  <1>             ret
   171                                  %include    "../modules/protect/draw_time.s"
     1                              <1> draw_time:
     2                              <1> 
     3                              <1>             ; construct stack frame                         ;   +20 | time data
     4 0000084D 55                  <1>             push    ebp                                     ;   +16 | display color
     5 0000084E 89E5                <1>             mov     ebp, esp                                ;   +12 | row
     6                              <1>                                                             ;EBP+ 8 | col
     7                              <1> 
     8                              <1>             ; save registers
     9 00000850 50                  <1>             push    eax
    10 00000851 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; get arg
    13 00000852 8B4514              <1>             mov     eax, [ebp + 20]
    14                              <1> 
    15 00000855 0FB6D8              <1>             movzx   ebx, al                                 ; ebx = second
    16 00000858 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .sec, 2, 16, 0b0100
    16 0000085F [BF080000]53E818FF- <1>
    16 00000867 FFFF6683C414        <1>
    17                              <1> 
    18 0000086D 88E3                <1>             mov     bl, ah                                  ; ebx = min
    19 0000086F 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .min, 2, 16, 0b0100
    19 00000876 [BC080000]53E801FF- <1>
    19 0000087E FFFF6683C414        <1>
    20                              <1> 
    21 00000884 C1E810              <1>             shr     eax, 16                                 ; ax = hour
    22 00000887 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .hour, 2, 16, 0b0100
    22 0000088E [B9080000]50E8E9FE- <1>
    22 00000896 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>             ; display time
    25 0000089C 68[B9080000]FF7510- <1>             cdecl   draw_str, dword [ebp + 8], dword [ebp + 12], dword [ebp + 16], .hour
    25 000008A4 FF750CFF7508E82CFC- <1>
    25 000008AD FFFF6683C410        <1>
    26                              <1> 
    27                              <1>             ; return registers
    28 000008B3 5B                  <1>             pop     ebx
    29 000008B4 58                  <1>             pop     eax
    30                              <1> 
    31                              <1>             ; destruct stack frame
    32 000008B5 89EC                <1>             mov     esp, ebp
    33 000008B7 5D                  <1>             pop     ebp
    34                              <1> 
    35 000008B8 C3                  <1>             ret
    36                              <1> 
    37 000008B9 5A5A3A              <1> .hour:  db  "ZZ:"
    38 000008BC 5A5A3A              <1> .min:  db  "ZZ:"
    39 000008BF 5A5A00              <1> .sec:  db  "ZZ", 0
   172                                  %include    "../modules/protect/interrupt.s"
     1                              <1> ; Initialize vector of IDTR
     2                              <1> 
     3 000008C2 90<rept>            <1> ALIGN 4
     4 000008C4 FF07                <1> IDTR:       dw      8 * 256 - 1                                     ; limit of IDT
     5 000008C6 00001000            <1>             dd      VECT_BASE                                       ; base address of IDT
     6                              <1> 
     7                              <1> ; Initialize IDT
     8                              <1> 
     9                              <1> init_int:
    10                              <1> 
    11                              <1>             ; save registers
    12 000008CA 50                  <1>             push    eax
    13 000008CB 53                  <1>             push    ebx
    14 000008CC 51                  <1>             push    ecx
    15 000008CD 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; define Interrupt Gate Descriptor and apply default process to them
    18                              <1> 
    19 000008CE 8D05[140A0000]      <1>             lea     eax, [int_default]                              ; EAX = the address of interrupt process
    20 000008D4 BB008E0800          <1>             mov     ebx, 0x0008_8E00                                ; EBX = segment selector & P,DPL,DT,TYPE
    21 000008D9 6693                <1>             xchg    ax, bx                                          ; exchange lower word
    22                              <1> 
    23 000008DB B900010000          <1>             mov     ecx, 256                                        ; num of Interrupt Gate Descriptor
    24 000008E0 BF00001000          <1>             mov     edi, VECT_BASE                                  ; base address of Interrupt Descriptor Table
    25                              <1> 
    26                              <1> .10L:
    27 000008E5 891F                <1>             mov     [edi + 0], ebx                                  ; interrupt descriptor(lower)
    28 000008E7 894704              <1>             mov     [edi + 4], eax                                  ; interrupt descriptor(upper)
    29 000008EA 83C708              <1>             add     edi, 8                                          ; EDI += 8 byte
    30 000008ED E2F6                <1>             loop    .10L
    31                              <1> 
    32                              <1>             ; set up Interrupt Descriptor
    33 000008EF 0F011D[C4080000]    <1>             lidt    [IDTR]
    34                              <1> 
    35                              <1>             ; return registers
    36 000008F6 5F                  <1>             pop     edi
    37 000008F7 59                  <1>             pop     ecx
    38 000008F8 5B                  <1>             pop     ebx
    39 000008F9 58                  <1>             pop     eax
    40                              <1> 
    41 000008FA C3                  <1>             ret
    42                              <1> 
    43                              <1> int_stop:
    44                              <1> 
    45 000008FB FB                  <1>             sti                                                     ; interrupt enable
    46                              <1> 
    47                              <1>             ; display the string indicated in EAX
    48 000008FC 50680F0600006A0F6A- <1>             cdecl   draw_str, 25, 15, 0x060F, eax
    48 00000905 19E8D0FBFFFF6683C4- <1>
    48 0000090E 10                  <1>
    49                              <1> 
    50                              <1>             ; convert stack data into string
    51 0000090F 8B0424              <1>             mov     eax, [esp + 0]                                  ; EIP
    52 00000912 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p1, 8, 16, 0b0100
    52 00000919 [D7090000]50E85EFE- <1>
    52 00000921 FFFF6683C414        <1>
    53                              <1> 
    54 00000927 8B442404            <1>             mov     eax, [esp + 4]                                  ; CS
    55 0000092B 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p2, 8, 16, 0b0100
    55 00000932 [E8090000]50E845FE- <1>
    55 0000093A FFFF6683C414        <1>
    56                              <1> 
    57 00000940 8B442408            <1>             mov     eax, [esp + 8]                                  ; EFLAGS
    58 00000944 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p3, 8, 16, 0b0100
    58 0000094B [F9090000]50E82CFE- <1>
    58 00000953 FFFF6683C414        <1>
    59                              <1> 
    60 00000959 8B44240C            <1>             mov     eax, [esp + 12]
    61 0000095D 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p4, 8, 16, 0b0100
    61 00000964 [0A0A0000]50E813FE- <1>
    61 0000096C FFFF6683C414        <1>
    62                              <1> 
    63                              <1>             ; display string
    64 00000972 68[D0090000]68040F- <1>             cdecl   draw_str, 25, 16, 0x0F04, .s1
    64 0000097A 00006A106A19E856FB- <1>
    64 00000983 FFFF6683C410        <1>
    65 00000989 68[E1090000]68040F- <1>             cdecl   draw_str, 25, 17, 0x0F04, .s2
    65 00000991 00006A116A19E83FFB- <1>
    65 0000099A FFFF6683C410        <1>
    66 000009A0 68[F2090000]68040F- <1>             cdecl   draw_str, 25, 18, 0x0F04, .s3
    66 000009A8 00006A126A19E828FB- <1>
    66 000009B1 FFFF6683C410        <1>
    67 000009B7 68[030A0000]68040F- <1>             cdecl   draw_str, 25, 19, 0x0F04, .s4
    67 000009BF 00006A136A19E811FB- <1>
    67 000009C8 FFFF6683C410        <1>
    68                              <1> 
    69                              <1>             ; infinite loop
    70 000009CE EBFE                <1>             jmp     $
    71                              <1> 
    72 000009D0 4553502B20303A      <1> .s1         db  "ESP+ 0:"
    73 000009D7 5F5F5F5F5F5F5F5F20- <1> .p1         db  "________ ", 0
    73 000009E0 00                  <1>
    74 000009E1 2020202B20343A      <1> .s2         db  "   + 4:"
    75 000009E8 5F5F5F5F5F5F5F5F20- <1> .p2         db  "________ ", 0
    75 000009F1 00                  <1>
    76 000009F2 2020202B20383A      <1> .s3         db  "   + 8:"
    77 000009F9 5F5F5F5F5F5F5F5F20- <1> .p3         db  "________ ", 0
    77 00000A02 00                  <1>
    78 00000A03 2020202B31323A      <1> .s4         db  "   +12:"
    79 00000A0A 5F5F5F5F5F5F5F5F20- <1> .p4         db  "________ ", 0
    79 00000A13 00                  <1>
    80                              <1> 
    81                              <1> int_default:
    82 00000A14 9C                  <1>             pushf                                                   ; EFLAGS
    83 00000A15 0E                  <1>             push    cs                                              ; CS
    84 00000A16 68[FB080000]        <1>             push    int_stop                                        ; the process of displaying stack
    85                              <1> 
    86 00000A1B B8[210A0000]        <1>             mov     eax, .s0                                        ; interrupt type
    87 00000A20 CF                  <1>             iret
    88                              <1> 
    89 00000A21 203C2020202053544F- <1> .s0         db  " <    STOP    > ", 0
    89 00000A2A 50202020203E2000    <1>
    90                              <1> 
    91                              <1> int_zero_div:
    92 00000A32 9C                  <1>             pushf                                                   ; EFLAGS
    93 00000A33 0E                  <1>             push    cs                                              ; CS
    94 00000A34 68[FB080000]        <1>             push    int_stop                                        ; the process of displaying stack
    95                              <1> 
    96 00000A39 B8[3F0A0000]        <1>             mov     eax, .s0                                        ; interrupt type
    97 00000A3E CF                  <1>             iret
    98                              <1> 
    99 00000A3F 203C20205A45524F20- <1> .s0         db  " <  ZERO DIV  > ", 0
    99 00000A48 44495620203E2000    <1>
   100                              <1> 
   101                              <1> 
   173                                  %include    "../modules/protect/pic.s"
     1                              <1> init_pic:
     2                              <1> 
     3                              <1>             ; save register
     4 00000A50 50                  <1>             push    eax
     5                              <1> 
     6                              <1>             ; set up Master PIC
     7                              <1>             outp    0x20, 0x11                              ; MASTER.ICW1 = 0x11
     7 00000A51 B011                <2>  mov al, %2
     7 00000A53 E620                <2>  out %1, al
     8                              <1>             outp    0x21, 0x20                              ; MASTER.ICW2 = 0x20 // interrupt vector
     8 00000A55 B020                <2>  mov al, %2
     8 00000A57 E621                <2>  out %1, al
     9                              <1>             outp    0x21, 0x04                              ; MASTER.ICW3 = 0x04 // slave connection position : IRQ2
     9 00000A59 B004                <2>  mov al, %2
     9 00000A5B E621                <2>  out %1, al
    10                              <1>             outp    0x21, 0x05                              ; MASTER.ICW4 = 0x05
    10 00000A5D B005                <2>  mov al, %2
    10 00000A5F E621                <2>  out %1, al
    11                              <1>             outp    0x21, 0xFF                              ; master interrupt mask
    11 00000A61 B0FF                <2>  mov al, %2
    11 00000A63 E621                <2>  out %1, al
    12                              <1> 
    13                              <1>             ; set up Slave
    14                              <1>             outp    0xA0, 0x11                              ; SLAVE.ICW1 = 0x11
    14 00000A65 B011                <2>  mov al, %2
    14 00000A67 E6A0                <2>  out %1, al
    15                              <1>             outp    0xA1, 0x28                              ; SLAVE.ICW2 = 0x28 // interrupt vector
    15 00000A69 B028                <2>  mov al, %2
    15 00000A6B E6A1                <2>  out %1, al
    16                              <1>             outp    0xA1, 0x02                              ; SLAVE.ICW3 = 0x02 // slave ID = 2
    16 00000A6D B002                <2>  mov al, %2
    16 00000A6F E6A1                <2>  out %1, al
    17                              <1>             outp    0xA1, 0x01                              ; SLAVE.ICW4 = 0x01
    17 00000A71 B001                <2>  mov al, %2
    17 00000A73 E6A1                <2>  out %1, al
    18                              <1>             outp    0xA1, 0xFF                              ; slave interrupt mask
    18 00000A75 B0FF                <2>  mov al, %2
    18 00000A77 E6A1                <2>  out %1, al
    19                              <1> 
    20                              <1>             ; return regisiter
    21 00000A79 58                  <1>             pop     eax
    22                              <1> 
    23 00000A7A C3                  <1>             ret
   174                                  %include    "../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000A7B 60                  <1>             pusha
     5 00000A7C 1E                  <1>             push    ds
     6 00000A7D 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000A7E 66B81000            <1>             mov     ax, 0x0010                                      ; offset from the beginnig of GDT // second element
    10 00000A82 8ED8                <1>             mov     ds, ax
    11 00000A84 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; get time from RTC
    14 00000A86 68[80010000]E87AFD- <1>             cdecl   rtc_get_time, RTC_TIME
    14 00000A8E FFFF6683C404        <1>
    15                              <1> 
    16                              <1>             ; get RTC interrupt factor
    17                              <1>             outp    0x70, 0x0C                                      ; select register C
    17 00000A94 B00C                <2>  mov al, %2
    17 00000A96 E670                <2>  out %1, al
    18 00000A98 E471                <1>             in      al, 0x71
    19                              <1> 
    20                              <1>             ; clear interrupt flag
    21 00000A9A B020                <1>             mov     al, 0x20                                        ; AL = EOI command
    22 00000A9C E6A0                <1>             out     0xA0, al                                        ; slave PIC
    23 00000A9E E620                <1>             out     0x20, al                                        ; master PIC
    24                              <1> 
    25                              <1>             ; return register
    26 00000AA0 07                  <1>             pop     es
    27 00000AA1 1F                  <1>             pop     ds
    28 00000AA2 61                  <1>             popa
    29                              <1> 
    30 00000AA3 CF                  <1>             iret                                                    ; end of interrupt process
    31                              <1>                                                                     ; return including flag register => iret
    32                              <1> 
    33                              <1> ; Enable interrupt by RTC itself
    34                              <1> 
    35                              <1> rtc_int_en:
    36                              <1> 
    37                              <1>             ; construct stack frame
    38 00000AA4 55                  <1>             push    ebp
    39 00000AA5 89E5                <1>             mov     ebp, esp                                        ;EBP+8 | enable bit
    40                              <1> 
    41                              <1>             ; save register
    42 00000AA7 50                  <1>             push    eax
    43                              <1> 
    44                              <1>             ; set up Interrupt Permission
    45                              <1>             outp    0x70, 0x0B                                      ; select register B
    45 00000AA8 B00B                <2>  mov al, %2
    45 00000AAA E670                <2>  out %1, al
    46                              <1> 
    47 00000AAC E471                <1>             in      al, 0x71
    48 00000AAE 0A4508              <1>             or      al, [ebp + 8]                                   ; set the specified bit
    49                              <1> 
    50 00000AB1 E671                <1>             out     0x71, al                                        ; write down to register B
    51                              <1> 
    52                              <1>             ; return register
    53 00000AB3 58                  <1>             pop     eax
    54                              <1> 
    55                              <1>             ; destruct stack frame
    56 00000AB4 89EC                <1>             mov     esp, ebp
    57 00000AB6 5D                  <1>             pop     ebp
    58                              <1> 
    59 00000AB7 C3                  <1>             ret
   175                                  %include    "../modules/protect/ring_buff.s"
     1                              <1> ring_rd:
     2                              <1> 
     3                              <1>             ; construct stack frame                                     ;    +12 | save_dest address
     4 00000AB8 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
     5 00000AB9 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 00000ABB 50                  <1>             push    eax
     9 00000ABC 53                  <1>             push    ebx
    10 00000ABD 56                  <1>             push    esi
    11 00000ABE 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; get args
    14 00000ABF 8B7508              <1>             mov     esi, [ebp +  8]
    15 00000AC2 8B7D0C              <1>             mov     edi, [ebp + 12]
    16                              <1> 
    17                              <1>             ; confirm the reading location
    18 00000AC5 B800000000          <1>             mov     eax, 0                                              ; EAX = 0 // no data
    19 00000ACA 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = rp
    20 00000ACC 3B5E04              <1>             cmp     ebx, [esi + ring_buff.wp]                           ; if (EBX != wp)
    21 00000ACF 7411                <1>             je      .10E                                                ; {
    22                              <1> 
    23 00000AD1 8A441E08            <1>             mov     al, [esi + ring_buff.item + ebx]                    ;   AL = BUFFER[rp] // store key code(unit:byte)
    24                              <1> 
    25 00000AD5 8807                <1>             mov     [edi], al                                           ;   [EDI] = AL      // save data
    26                              <1> 
    27 00000AD7 43                  <1>             inc     ebx                                                 ;   EBX++           // next reading location
    28 00000AD8 83E30F              <1>             and     ebx, RING_INDEX_MASK                                ;   EBX &= 0x0F     // limit size
    29 00000ADB 891E                <1>             mov     [esi + ring_buff.rp], ebx                           ;   rp = EBX        // save the reading location
    30                              <1> 
    31 00000ADD B801000000          <1>             mov     eax, 1                                              ;   EAX = 1         // data exists
    32                              <1> .10E:                                                                   ; }
    33                              <1> 
    34                              <1>             ; return registers
    35 00000AE2 5F                  <1>             pop     edi
    36 00000AE3 5E                  <1>             pop     esi
    37 00000AE4 5B                  <1>             pop     ebx
    38 00000AE5 58                  <1>             pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 00000AE6 89EC                <1>             mov     esp, ebp
    42 00000AE8 5D                  <1>             pop     ebp
    43                              <1> 
    44 00000AE9 C3                  <1>             ret
    45                              <1> 
    46                              <1> ring_wr:
    47                              <1> 
    48                              <1>             ; construct stack frame                                     ;    +12 | data to write
    49 00000AEA 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
    50 00000AEB 89E5                <1>             mov     ebp, esp
    51                              <1> 
    52                              <1>             ; save registers
    53 00000AED 50                  <1>             push    eax
    54 00000AEE 53                  <1>             push    ebx
    55 00000AEF 51                  <1>             push    ecx
    56 00000AF0 56                  <1>             push    esi
    57 00000AF1 57                  <1>             push    edi
    58                              <1> 
    59                              <1>             ; get args
    60 00000AF2 8B7508              <1>             mov     esi, [ebp + 8]
    61                              <1> 
    62                              <1>             ; confirm the writing location
    63 00000AF5 B800000000          <1>             mov     eax, 0
    64 00000AFA 8B5E04              <1>             mov     ebx, [esi + ring_buff.wp]                           ; writing position
    65 00000AFD 89D9                <1>             mov     ecx, ebx
    66 00000AFF 41                  <1>             inc     ecx                                                 ; next writing location
    67 00000B00 83E10F              <1>             and     ecx, RING_INDEX_MASK                                ; size limit
    68                              <1> 
    69 00000B03 3B0E                <1>             cmp     ecx, [esi + ring_buff.rp]                           ; if (ECX != rp)
    70 00000B05 740F                <1>             je      .10E                                                ; {
    71                              <1> 
    72 00000B07 8A450C              <1>             mov     al, [ebp + 12]                                      ;   AL = data
    73                              <1> 
    74 00000B0A 88441E08            <1>             mov     [esi + ring_buff.item + ebx], al                    ;   BUFFER[wp] = AL // save key code
    75 00000B0E 894E04              <1>             mov     [esi + ring_buff.wp], ecx                           ;   wp = ECX        // save the writing location
    76 00000B11 B801000000          <1>             mov     eax, 1
    77                              <1> .10E:
    78                              <1> 
    79                              <1>             ; return registers
    80 00000B16 5F                  <1>             pop     edi
    81 00000B17 5E                  <1>             pop     esi
    82 00000B18 59                  <1>             pop     ecx
    83 00000B19 5B                  <1>             pop     ebx
    84 00000B1A 58                  <1>             pop     eax
    85                              <1> 
    86                              <1>             ; destruct stack frame
    87 00000B1B 89EC                <1>             mov     esp, ebp
    88 00000B1D 5D                  <1>             pop     ebp
    89                              <1> 
    90 00000B1E C3                  <1>             ret
    91                              <1> 
    92                              <1> draw_key:
    93                              <1> 
    94                              <1>             ; construct stack frame                                     ;    +16 | ring buffer
    95 00000B1F 55                  <1>             push    ebp                                                 ;    +12 | row
    96 00000B20 89E5                <1>             mov     ebp, esp                                            ; EBP+ 8 | col
    97                              <1> 
    98                              <1>             ; save registers
    99 00000B22 60                  <1>             pusha                                                       ; save EAX,EBX,ECX,EDX,EDI,ESI,EBP,ESP
   100                              <1> 
   101                              <1>             ; get args
   102 00000B23 8B5508              <1>             mov     edx, [ebp +  8]
   103 00000B26 8B7D0C              <1>             mov     edi, [ebp + 12]
   104 00000B29 8B7510              <1>             mov     esi, [ebp + 16]
   105                              <1> 
   106                              <1>             ; get ring buffer info
   107 00000B2C 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = wp // writing location
   108 00000B2E 8D7608              <1>             lea     esi, [esi + ring_buff.item]
   109 00000B31 B910000000          <1>             mov     ecx, RING_ITEM_SIZE
   110                              <1> 
   111                              <1>             ; display data
   112                              <1> .10L:
   113                              <1> 
   114 00000B36 4B                  <1>             dec     ebx                                                 ; EBX-- == where data exists
   115 00000B37 83E30F              <1>             and     ebx, RING_INDEX_MASK
   116 00000B3A 8A041E              <1>             mov     al, [esi + ebx]                                     ; EAX = KEY_BUFF[EBX]
   117                              <1> 
   118 00000B3D 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .tmp, 2, 16, 0b0100
   118 00000B44 [6E0B0000]50E833FC- <1>
   118 00000B4C FFFF6683C414        <1>
   119 00000B52 68[6E0B0000]6A0257- <1>             cdecl   draw_str, edx, edi, 0x02, .tmp
   119 00000B5A 52E87BF9FFFF6683C4- <1>
   119 00000B63 10                  <1>
   120                              <1> 
   121 00000B64 83C203              <1>             add     edx, 3                                              ; updata display position(3 chars)
   122                              <1> 
   123 00000B67 E2CD                <1>             loop    .10L
   124                              <1> .10E:
   125                              <1> 
   126                              <1>             ; return registers
   127 00000B69 61                  <1>             popa
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 00000B6A 89EC                <1>             mov     esp, ebp
   131 00000B6C 5D                  <1>             pop     ebp
   132                              <1> 
   133 00000B6D C3                  <1>             ret
   134                              <1> 
   135 00000B6E 2D2D2000            <1> .tmp        db "-- ", 0
   176                                  %include    "../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000B72 60                  <1>             pusha
     5 00000B73 1E                  <1>             push    ds
     6 00000B74 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment for data
     9 00000B75 66B81000            <1>             mov     ax, 0x0010
    10 00000B79 8ED8                <1>             mov     ds, ax
    11 00000B7B 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; read buffer of KBC
    14 00000B7D E460                <1>             in      al, 0x60                                    ; AL = get key code
    15                              <1> 
    16                              <1>             ; save key code
    17 00000B7F 5068[980B0000]E860- <1>             cdecl   ring_wr, _KEY_BUFF, eax
    17 00000B87 FFFFFF6683C408      <1>
    18                              <1> 
    19                              <1>             ; send interrupt end command
    20                              <1>             outp    0x20, 0x20                                  ; master PIC: EOI command
    20 00000B8E B020                <2>  mov al, %2
    20 00000B90 E620                <2>  out %1, al
    21                              <1> 
    22                              <1>             ; return registers
    23 00000B92 07                  <1>             pop     es
    24 00000B93 1F                  <1>             pop     ds
    25 00000B94 61                  <1>             popa
    26                              <1> 
    27 00000B95 CF                  <1>             iret
    28                              <1> 
    29 00000B96 00<rept>            <1> ALIGN 4, db 0
    30 00000B98 00<rept>            <1> _KEY_BUFF:  times ring_buff_size db 0
   177                                  %include    "../modules/protect/timer.s"
     1                              <1> int_en_timer0:
     2                              <1> 
     3                              <1>             ; save register
     4 00000BB0 50                  <1>             push    eax                                     ; use eax register on outp
     5                              <1> 
     6                              <1>             outp    0x43, 0b_00_11_010_0                    ; counter 0|access way:lower/upper|mode 2|16 bit binary couner
     6 00000BB1 B034                <2>  mov al, %2
     6 00000BB3 E643                <2>  out %1, al
     7                              <1>             outp    0x40, 0x9C                              ; lower byte
     7 00000BB5 B09C                <2>  mov al, %2
     7 00000BB7 E640                <2>  out %1, al
     8                              <1>             outp    0x40, 0x2E                              ; upper byte
     8 00000BB9 B02E                <2>  mov al, %2
     8 00000BBB E640                <2>  out %1, al
     9                              <1> 
    10                              <1>             ; return register
    11 00000BBD 58                  <1>             pop     eax
    12                              <1> 
    13 00000BBE C3                  <1>             ret
   178                                  %include    "../modules/protect/draw_rotation_bar.s"
     1                              <1> ;--------------------------------------------------------------------------------------------
     2                              <1> ;char update cycle
     3                              <1> ;=> The value obtained by reading the value of Timer interrupt counter
     4                              <1> ;   and shifting it to the right by 4 bits
     5                              <1> ;   and if the value is different from the previous value, it's the time to update.
     6                              <1> ;--------------------------------------------------------------------------------------------
     7                              <1> 
     8                              <1> draw_rotation_bar:
     9                              <1> 
    10                              <1>             ; save register
    11 00000BBF 50                  <1>             push    eax
    12                              <1> 
    13                              <1>             ; main process
    14 00000BC0 A1[E8020000]        <1>             mov     eax, [TIMER_COUNT]
    15 00000BC5 C1E804              <1>             shr     eax, 4
    16 00000BC8 3B05[F00B0000]      <1>             cmp     eax, [.index]
    17 00000BCE 741E                <1>             je      .10E
    18                              <1> 
    19 00000BD0 A3[F00B0000]        <1>             mov     [.index], eax
    20 00000BD5 83E003              <1>             and     eax, 0x03                                       ; limit to the range 0 to 3
    21                              <1> 
    22 00000BD8 8A80[F40B0000]      <1>             mov     al, [.table + eax]                              ; AL = table[index]
    23 00000BDE 506A0F6A1D6A00E8EE- <1>             cdecl   draw_char, 0, 29, 0x000F, eax
    23 00000BE7 F7FFFF6683C410      <1>
    24                              <1> 
    25                              <1> .10E:
    26                              <1> 
    27                              <1>             ; return register
    28 00000BEE 58                  <1>             pop     eax
    29                              <1> 
    30 00000BEF C3                  <1>             ret
    31                              <1> 
    32                              <1> ALIGN 4, db 0
    33 00000BF0 00000000            <1> .index      dd 0                                                    ; previous value
    34 00000BF4 7C2F2D5C            <1> .table      db "|/-\"                                               ; display bar
   179                                  
   180                                  
   181                                  ; PADDING
   182                                  
   183 00000BF8 00<rept>                            times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
