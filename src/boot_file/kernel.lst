     1                                  ;macro
     2                                  
     3                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ;ブートプログラムのロード位置
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ;セクタサイズ
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ;ブートプログラムのセクタ数
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
     4                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc   drive                               ;セクタ読み出し時のパラメータを構造体で定義
    18 00000000 <res 00000002>      <1>             .no         resw    1           ;ドライブ番号
    19 00000002 <res 00000002>      <1>             .cyln       resw    1           ;シリンダ
    20 00000004 <res 00000002>      <1>             .head       resw    1           ;ヘッド
    21 00000006 <res 00000002>      <1>             .sect       resw    1           ;セクタ
    22                              <1> endstruc
     5                                  
     6                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     7                                  
     8                                  [BITS 32]                                                       ; BIT 32 directive
     9                                  ; entry point
    10                                  
    11                                  kernel:
    12                                  
    13                                                  ; Get Font address
    14 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    15 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    16 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    17 0000000C C1E004                                  shl     eax, 4
    18 0000000F 01D8                                    add     eax, ebx
    19 00000011 A3[4C010000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    20                                  
    21                                                  ; display font and color_bar
    22 00000016 6A0D6A3FE8A8020000-                     cdecl   draw_font, 63, 13
    22 0000001F 6683C408           
    23 00000023 6A046A3FE82B030000-                     cdecl   draw_color_bar, 63, 4
    23 0000002C 6683C408           
    24                                  
    25                                                  ; display string
    26 00000030 68[39010000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    26 00000038 00006A0E6A19E8C902-
    26 00000041 00006683C410       
    27                                  
    28                                                  ; display dots
    29 00000047 6A016A046A08E87F03-                     cdecl   draw_pixel,  8,  4, 0x01
    29 00000050 00006683C40C       
    30 00000056 6A016A056A09E87003-                     cdecl   draw_pixel,  9,  5, 0x01
    30 0000005F 00006683C40C       
    31 00000065 6A026A066A0AE86103-                     cdecl   draw_pixel, 10,  6, 0x02
    31 0000006E 00006683C40C       
    32 00000074 6A026A076A0BE85203-                     cdecl   draw_pixel, 11,  7, 0x02
    32 0000007D 00006683C40C       
    33 00000083 6A036A086A0CE84303-                     cdecl   draw_pixel, 12,  8, 0x03
    33 0000008C 00006683C40C       
    34 00000092 6A036A096A0DE83403-                     cdecl   draw_pixel, 13,  9, 0x03
    34 0000009B 00006683C40C       
    35 000000A1 6A046A0A6A0EE82503-                     cdecl   draw_pixel, 14, 10, 0x04
    35 000000AA 00006683C40C       
    36 000000B0 6A046A0B6A0FE81603-                     cdecl   draw_pixel, 15, 11, 0x04
    36 000000B9 00006683C40C       
    37                                  
    38 000000BF 6A036A046A0FE80703-                     cdecl   draw_pixel, 15,  4, 0x03
    38 000000C8 00006683C40C       
    39 000000CE 6A036A056A0EE8F802-                     cdecl   draw_pixel, 14,  5, 0x03
    39 000000D7 00006683C40C       
    40 000000DD 6A046A066A0DE8E902-                     cdecl   draw_pixel, 13,  6, 0x04
    40 000000E6 00006683C40C       
    41 000000EC 6A046A076A0CE8DA02-                     cdecl   draw_pixel, 12,  7, 0x04
    41 000000F5 00006683C40C       
    42 000000FB 6A016A086A0BE8CB02-                     cdecl   draw_pixel, 11,  8, 0x01
    42 00000104 00006683C40C       
    43 0000010A 6A016A096A0AE8BC02-                     cdecl   draw_pixel, 10,  9, 0x01
    43 00000113 00006683C40C       
    44 00000119 6A026A0A6A09E8AD02-                     cdecl   draw_pixel,  9, 10, 0x02
    44 00000122 00006683C40C       
    45 00000128 6A026A0B6A08E89E02-                     cdecl   draw_pixel,  8, 11, 0x02
    45 00000131 00006683C40C       
    46                                  
    47                                  
    48                                                  ; End of Process
    49 00000137 EBFE                                    jmp     $
    50                                  ;data
    51 00000139 2048656C6C6F2C206B-     .s0    db  " Hello, kernel! ", 0
    51 00000142 65726E656C212000   
    52                                  
    53 0000014A 00<rept>                ALIGN 4, db 0
    54 0000014C 00000000                FONT_ADR:   dd 0
    55                                  
    56                                  
    57                                  ; modules
    58                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000150 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 00000151 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 00000153 50                  <1>             push    eax
    10 00000154 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 00000155 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 00000158 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 0000015B B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 0000015D 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 00000161 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 00000163 5A                  <1>             pop     edx
    21 00000164 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 00000165 89EC                <1>             mov     esp, ebp
    25 00000167 5D                  <1>             pop     ebp
    26                              <1> 
    27 00000168 C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 00000169 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 0000016A 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 0000016C 50                  <1>             push    eax
    38 0000016D 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 0000016E 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 00000171 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000174 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 00000176 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 0000017A 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 0000017C 5A                  <1>             pop     edx
    49 0000017D 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 0000017E 89EC                <1>             mov     esp, ebp
    53 00000180 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000181 C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 00000182 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 00000183 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 00000185 50                  <1>             push    eax
    66 00000186 53                  <1>             push    ebx
    67 00000187 51                  <1>             push    ecx
    68 00000188 52                  <1>             push    edx
    69 00000189 56                  <1>             push    esi
    70 0000018A 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 0000018B 8B7508              <1>             mov     esi, [ebp + 8]
    74 0000018E 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 00000191 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 00000195 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 00000199 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 0000019B 0F94C6              <1>             setz    dh                                      ; DH = 0x01 if (ZF == 1) else DH = 0x00
    81 0000019E FECE                <1>             dec     dh                                      ; DH = 0x00 or 0xFF
    82                              <1> 
    83 000001A0 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 000001A2 0F94C2              <1>             setz    dl                                      ; DH = 0x01 if (ZF == 1) else DH = 0x00
    85 000001A5 FECA                <1>             dec     dl                                      ; DH = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 000001A7 FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 000001A8 B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 000001AD AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 000001AE 88C4                <1>             mov     ah, al
    96 000001B0 F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 000001B2 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 000001B4 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 000001BA 7404                <1>             jz      .11F                                    ; {
   104 000001BC 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 000001BE EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 000001C0 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 000001C2 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 000001C4 8807                <1>             mov     [edi], al
   116                              <1> 
   117 000001C6 83C750              <1>             add     edi, 80
   118 000001C9 E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 000001CB 5F                  <1>             pop     edi
   123 000001CC 5E                  <1>             pop     esi
   124 000001CD 5A                  <1>             pop     edx
   125 000001CE 59                  <1>             pop     ecx
   126 000001CF 5B                  <1>             pop     ebx
   127 000001D0 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 000001D1 89EC                <1>             mov     esp, ebp
   131 000001D3 5D                  <1>             pop     ebp
   132                              <1> 
   133 000001D4 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 000001D5 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 000001D6 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 000001D8 50                  <1>             push    eax
   144 000001D9 53                  <1>             push    ebx
   145 000001DA 51                  <1>             push    ecx
   146 000001DB 52                  <1>             push    edx
   147 000001DC 56                  <1>             push    esi
   148 000001DD 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 000001DE 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 000001E1 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 000001E5 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 000001E9 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 000001EB 0F94C2              <1>             setz    dl                                      ; DH = 0x01 if (ZF == 1) else DH = 0x00
   159 000001EE FECA                <1>             dec     dl                                      ; DH = 0x00 or 0xFF
   160                              <1> 
   161 000001F0 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 000001F3 88C4                <1>             mov     ah, al
   163 000001F5 F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 000001F7 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 000001F9 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 000001FB 08E0                <1>             or      al, ah
   169 000001FD 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 000001FF 5F                  <1>             pop     edi
   173 00000200 5E                  <1>             pop     esi
   174 00000201 5A                  <1>             pop     edx
   175 00000202 59                  <1>             pop     ecx
   176 00000203 5B                  <1>             pop     ebx
   177 00000204 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 00000205 89EC                <1>             mov     esp, ebp
   181 00000207 5D                  <1>             pop     ebp
   182                              <1> 
   183 00000208 C3                  <1>             ret
    59                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 00000209 55                  <1>             push    ebp                                         ;   +16 | color
     5 0000020A 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 0000020C 53                  <1>             push    ebx
    10 0000020D 56                  <1>             push    esi
    11 0000020E 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; set copy_target font address
    14 0000020F 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    15 00000213 C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    16 00000216 0335[4C010000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    17                              <1> 
    18                              <1>             ; get copy_dest VRAM address
    19                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    20                              <1>             ; y:row, x:column
    21                              <1> 
    22 0000021C 8B7D0C              <1>             mov     edi, [ebp + 12]
    23 0000021F C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    24 00000222 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    25 00000229 037D08              <1>             add     edi, [ebp + 8]
    26                              <1> 
    27                              <1>             ; output a char of font
    28 0000022C 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    29                              <1> 
    30 00000230 6A03E819FFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    30 00000239 C404                <1>
    31 0000023B 6A08E827FFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    31 00000244 C404                <1>
    32 00000246 536A085756E832FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    32 0000024F FF6683C410          <1>
    33                              <1> 
    34 00000254 6A02E8F5FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    34 0000025D C404                <1>
    35 0000025F 6A04E803FFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    35 00000268 C404                <1>
    36 0000026A 536A045756E80EFFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    36 00000273 FF6683C410          <1>
    37                              <1> 
    38 00000278 6A01E8D1FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    38 00000281 C404                <1>
    39 00000283 6A02E8DFFEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    39 0000028C C404                <1>
    40 0000028E 536A025756E8EAFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    40 00000297 FF6683C410          <1>
    41                              <1> 
    42 0000029C 6A00E8ADFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    42 000002A5 C404                <1>
    43 000002A7 6A01E8BBFEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    43 000002B0 C404                <1>
    44 000002B2 536A015756E8C6FEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    44 000002BB FF6683C410          <1>
    45                              <1> 
    46                              <1>             ; return registers
    47 000002C0 5F                  <1>             pop     edi
    48 000002C1 5E                  <1>             pop     esi
    49 000002C2 5B                  <1>             pop     ebx
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 000002C3 89EC                <1>             mov     esp, ebp
    53 000002C5 5D                  <1>             pop     ebp
    54                              <1> 
    55 000002C6 C3                  <1>             ret
    60                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000002C7 55                  <1>             push    ebp                                         ;   +12 | row
     5 000002C8 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 000002CA 50                  <1>             push    eax
     9 000002CB 53                  <1>             push    ebx
    10 000002CC 51                  <1>             push    ecx
    11 000002CD 52                  <1>             push    edx
    12 000002CE 56                  <1>             push    esi
    13 000002CF 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 000002D0 8B7508              <1>             mov     esi, [ebp + 8]
    17 000002D3 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 000002D6 B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 000002DB 81F900010000        <1> .10L:       cmp     ecx, 256
    22 000002E1 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 000002E3 89C8                <1>             mov     eax, ecx
    26 000002E5 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 000002E8 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 000002EA 89CB                <1>             mov     ebx, ecx
    31 000002EC C1EB04              <1>             shr     ebx, 4
    32 000002EF 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 000002F1 516A075350E80EFFFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 000002FA FF6683C410          <1>
    35                              <1> 
    36 000002FF 41                  <1>             inc     ecx
    37 00000300 EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 00000302 5F                  <1>             pop     edi
    42 00000303 5E                  <1>             pop     esi
    43 00000304 5A                  <1>             pop     edx
    44 00000305 59                  <1>             pop     ecx
    45 00000306 5B                  <1>             pop     ebx
    46 00000307 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 00000308 89EC                <1>             mov     esp, ebp
    50 0000030A 5D                  <1>             pop     ebp
    51                              <1> 
    52 0000030B C3                  <1>             ret
    61                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000030C 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 0000030D 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 0000030F 50                  <1>             push    eax
    11 00000310 53                  <1>             push    ebx
    12 00000311 51                  <1>             push    ecx
    13 00000312 52                  <1>             push    edx
    14 00000313 56                  <1>             push    esi
    15 00000314 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000315 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 00000318 8B550C              <1>             mov     edx, [ebp + 12]
    20 0000031B 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 0000031F 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 00000322 FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 00000323 AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 00000324 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 00000326 7425                <1>             je      .10E
    29                              <1> 
    30 00000328 50535251E8D8FEFFFF- <1>             cdecl   draw_char, ecx, edx, ebx, eax
    30 00000331 6683C410            <1>
    31                              <1> 
    32 00000335 41                  <1>             inc     ecx
    33 00000336 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    34 00000339 7C10                <1>             jl      .12E                                        ; {
    35 0000033B B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    36 00000340 42                  <1>             inc     edx                                         ;   EDX++;
    37 00000341 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    38 00000344 7C05                <1>             jl      .12E                                        ;   {
    39 00000346 BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    40                              <1>                                                                 ;   }
    41                              <1> .12E:                                                           ; }
    42 0000034B EBD6                <1>             jmp     .10L
    43                              <1> .10E:
    44                              <1> 
    45                              <1>             ; return registers
    46 0000034D 5F                  <1>             pop     edi
    47 0000034E 5E                  <1>             pop     esi
    48 0000034F 5A                  <1>             pop     edx
    49 00000350 59                  <1>             pop     ecx
    50 00000351 5B                  <1>             pop     ebx
    51 00000352 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000353 89EC                <1>             mov     esp, ebp
    55 00000355 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000356 C3                  <1>             ret
    62                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000357 55                  <1>             push    ebp                                             ;   +12 | row
     5 00000358 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 0000035A 50                  <1>             push    eax
     9 0000035B 53                  <1>             push    ebx
    10 0000035C 51                  <1>             push    ecx
    11 0000035D 52                  <1>             push    edx
    12 0000035E 56                  <1>             push    esi
    13 0000035F 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00000360 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000363 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 00000366 B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 0000036B 83F910              <1> .10L:       cmp     ecx, 16
    22 0000036E 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 00000370 89C8                <1>             mov     eax, ecx
    26 00000372 83E001              <1>             and     eax, 0x01
    27 00000375 C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 00000378 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 0000037A 89CB                <1>             mov     ebx, ecx
    32 0000037C D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 0000037E 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 00000380 89CA                <1>             mov     edx, ecx
    37 00000382 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 00000384 8B92[B1030000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 0000038A 68[A8030000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 00000392 E875FFFFFF6683C410  <1>
    41                              <1> 
    42 0000039B 41                  <1>             inc     ecx
    43 0000039C EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 0000039E 5F                  <1>             pop     edi
    48 0000039F 5E                  <1>             pop     esi
    49 000003A0 5A                  <1>             pop     edx
    50 000003A1 59                  <1>             pop     ecx
    51 000003A2 5B                  <1>             pop     ebx
    52 000003A3 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 000003A4 89E5                <1>             mov     ebp, esp
    56 000003A6 5D                  <1>             pop     ebp
    57                              <1> 
    58 000003A7 C3                  <1>             ret
    59                              <1> 
    60 000003A8 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 000003B1 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 000003B5 00010009            <1>             dw  0x0100, 0x0900
    64 000003B9 0002000A            <1>             dw  0x0200, 0x0A00
    65 000003BD 0003000B            <1>             dw  0x0300, 0x0B00
    66 000003C1 0004000C            <1>             dw  0x0400, 0x0C00
    67 000003C5 0005000D            <1>             dw  0x0500, 0x0D00
    68 000003C9 0006000E            <1>             dw  0x0600, 0x0E00
    69 000003CD 0007000F            <1>             dw  0x0700, 0x0F00
    63                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 000003D1 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 000003D2 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 000003D4 50                  <1>             push    eax
     9 000003D5 53                  <1>             push    ebx
    10 000003D6 51                  <1>             push    ecx
    11 000003D7 52                  <1>             push    edx
    12 000003D8 56                  <1>             push    esi
    13 000003D9 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 000003DA 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 000003DD C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 000003E0 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 000003E7 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 000003EA 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 000003EC C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 000003EF 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 000003F1 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 000003F4 BB80000000          <1>             mov     ebx, 0x80
    35 000003F9 D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 000003FB 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 000003FE 6A03E84BFDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 00000407 C404                <1>
    43 00000409 6A08E859FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 00000412 C404                <1>
    44 00000414 516A085753E8B7FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 0000041D FF6683C410          <1>
    45                              <1> 
    46 00000422 6A02E827FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 0000042B C404                <1>
    47 0000042D 6A04E835FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 00000436 C404                <1>
    48 00000438 516A045753E893FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 00000441 FF6683C410          <1>
    49                              <1> 
    50 00000446 6A01E803FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 0000044F C404                <1>
    51 00000451 6A02E811FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 0000045A C404                <1>
    52 0000045C 516A025753E86FFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 00000465 FF6683C410          <1>
    53                              <1> 
    54 0000046A 6A00E8DFFCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 00000473 C404                <1>
    55 00000475 6A01E8EDFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 0000047E C404                <1>
    56 00000480 516A015753E84BFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 00000489 FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 0000048E 5F                  <1>             pop     edi
    60 0000048F 5E                  <1>             pop     esi
    61 00000490 5A                  <1>             pop     edx
    62 00000491 59                  <1>             pop     ecx
    63 00000492 5B                  <1>             pop     ebx
    64 00000493 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 00000494 89EC                <1>             mov     esp, ebp
    68 00000496 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000497 C3                  <1>             ret
    64                                  
    65                                                  ; Padding
    66                                  
    67 00000498 00<rept>                                times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
