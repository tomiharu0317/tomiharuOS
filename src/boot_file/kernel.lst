     1                                  %define     USE_SYSTEM_CALL
     2                                  %define     USE_TEST_AND_SET
     3                                  
     4                                  ;macro
     5                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1>         SP_TASK_2       equ     STACK_BASE + (STACK_SIZE * 3)
    24                              <1>         SP_TASK_3       equ     STACK_BASE + (STACK_SIZE * 4)
    25                              <1>         SP_TASK_4       equ     STACK_BASE + (STACK_SIZE * 5)
    26                              <1>         SP_TASK_5       equ     STACK_BASE + (STACK_SIZE * 6)
    27                              <1>         SP_TASK_6       equ     STACK_BASE + (STACK_SIZE * 7)
    28                              <1> 
    29                              <1>         PARAM_TASK_4    equ     0x0010_8000                     ; drawing params : for task4
    30                              <1>         PARAM_TASK_5    equ     0x0010_9000                     ; drawing params : for task5
    31                              <1>         PARAM_TASK_6    equ     0x0010_A000                     ; drawing params : for task6
    32                              <1> 
    33                              <1> 
    34                              <1>         CR3_BASE        equ     0x0010_5000                     ; page conversion table: for task 3
    35                              <1> 
    36                              <1>         CR3_TASK_4      equ     0x0020_0000                     ; page conversion table: for task 4
    37                              <1>         CR3_TASK_5      equ     0x0020_2000                     ; page conversion table: for task 5
    38                              <1>         CR3_TASK_6      equ     0x0020_4000                     ; page conversion table: for task 6
     6                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
    56                              <1> 
    57                              <1> %macro  set_desc 2-*
    58                              <1>             push    eax
    59                              <1>             push    edi
    60                              <1> 
    61                              <1>             mov     edi, %1                             ; descriptor address
    62                              <1>             mov     eax, %2                             ; base address
    63                              <1> 
    64                              <1>         %if 3 == %0
    65                              <1>             mov     [edi + 0], %3                       ; limit
    66                              <1>         %endif
    67                              <1> 
    68                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 4], al                       ; base([23:16])
    71                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    72                              <1> 
    73                              <1>             pop     edi
    74                              <1>             pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate 2-*
    78                              <1>             push    eax
    79                              <1>             push    edi
    80                              <1> 
    81                              <1>             mov     edi, %1                             ; descriptor address
    82                              <1>             mov     eax, %2                             ; base address
    83                              <1> 
    84                              <1>             mov     [edi + 0], ax                       ; base([15:0])
    85                              <1>             shr     eax, 16
    86                              <1>             mov     [edi + 6], ax                       ; base([31:16])
    87                              <1> 
    88                              <1>             pop     edi
    89                              <1>             pop     eax
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> struc   rose
    93 00000000 <res 00000004>      <1>             .x0         resd    1                       ; upper left coordinate : X0
    94 00000004 <res 00000004>      <1>             .y0         resd    1                       ; upper left coordinate : Y0
    95 00000008 <res 00000004>      <1>             .x1         resd    1                       ; lower right coordinate : X1
    96 0000000C <res 00000004>      <1>             .y1         resd    1                       ; lower right coordinate : Y1
    97                              <1> 
    98 00000010 <res 00000004>      <1>             .n          resd    1                       ; variable:n
    99 00000014 <res 00000004>      <1>             .d          resd    1                       ; variable:d
   100                              <1> 
   101 00000018 <res 00000004>      <1>             .color_x    resd    1                       ; display color : X axis
   102 0000001C <res 00000004>      <1>             .color_y    resd    1                       ; display color : Y axis
   103 00000020 <res 00000004>      <1>             .color_z    resd    1                       ; display color : frame
   104 00000024 <res 00000004>      <1>             .color_s    resd    1                       ; display color : char
   105 00000028 <res 00000004>      <1>             .color_f    resd    1                       ; display color : graph display color
   106 0000002C <res 00000004>      <1>             .color_b    resd    1                       ; display color : graph erase color
   107                              <1> 
   108 00000030 <res 00000010>      <1>             .title      resb    16                      ; title
   109                              <1> endstruc
   110                              <1> 
   111                              <1> 
     7                                  
     8                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     9                                  
    10                                  [BITS 32]                                                       ; BIT 32 directive
    11                                  ; entry point
    12                                  
    13                                  kernel:
    14                                  
    15                                                  ; Get Font address
    16 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    17 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    18 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    19 0000000C C1E004                                  shl     eax, 4
    20 0000000F 01D8                                    add     eax, ebx
    21 00000011 A3[A0020000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    22                                  
    23                                                  ; set up TSS descriptor
    24                                                  set_desc    GDT.tss_0, TSS_0
    24 00000016 50                  <1>  push eax
    24 00000017 57                  <1>  push edi
    24                              <1> 
    24 00000018 BF[B0080000]        <1>  mov edi, %1
    24 0000001D B8[A8020000]        <1>  mov eax, %2
    24                              <1> 
    24                              <1>  %if 3 == %0
    24                              <1>  mov [edi + 0], %3
    24                              <1>  %endif
    24                              <1> 
    24 00000022 66894702            <1>  mov [edi + 2], ax
    24 00000026 C1E810              <1>  shr eax, 16
    24 00000029 884704              <1>  mov [edi + 4], al
    24 0000002C 886707              <1>  mov [edi + 7], ah
    24                              <1> 
    24 0000002F 5F                  <1>  pop edi
    24 00000030 58                  <1>  pop eax
    25                                                  set_desc    GDT.tss_1, TSS_1
    25 00000031 50                  <1>  push eax
    25 00000032 57                  <1>  push edi
    25                              <1> 
    25 00000033 BF[B8080000]        <1>  mov edi, %1
    25 00000038 B8[80030000]        <1>  mov eax, %2
    25                              <1> 
    25                              <1>  %if 3 == %0
    25                              <1>  mov [edi + 0], %3
    25                              <1>  %endif
    25                              <1> 
    25 0000003D 66894702            <1>  mov [edi + 2], ax
    25 00000041 C1E810              <1>  shr eax, 16
    25 00000044 884704              <1>  mov [edi + 4], al
    25 00000047 886707              <1>  mov [edi + 7], ah
    25                              <1> 
    25 0000004A 5F                  <1>  pop edi
    25 0000004B 58                  <1>  pop eax
    26                                                  set_desc    GDT.tss_2, TSS_2
    26 0000004C 50                  <1>  push eax
    26 0000004D 57                  <1>  push edi
    26                              <1> 
    26 0000004E BF[C0080000]        <1>  mov edi, %1
    26 00000053 B8[58040000]        <1>  mov eax, %2
    26                              <1> 
    26                              <1>  %if 3 == %0
    26                              <1>  mov [edi + 0], %3
    26                              <1>  %endif
    26                              <1> 
    26 00000058 66894702            <1>  mov [edi + 2], ax
    26 0000005C C1E810              <1>  shr eax, 16
    26 0000005F 884704              <1>  mov [edi + 4], al
    26 00000062 886707              <1>  mov [edi + 7], ah
    26                              <1> 
    26 00000065 5F                  <1>  pop edi
    26 00000066 58                  <1>  pop eax
    27                                                  set_desc    GDT.tss_3, TSS_3
    27 00000067 50                  <1>  push eax
    27 00000068 57                  <1>  push edi
    27                              <1> 
    27 00000069 BF[C8080000]        <1>  mov edi, %1
    27 0000006E B8[30050000]        <1>  mov eax, %2
    27                              <1> 
    27                              <1>  %if 3 == %0
    27                              <1>  mov [edi + 0], %3
    27                              <1>  %endif
    27                              <1> 
    27 00000073 66894702            <1>  mov [edi + 2], ax
    27 00000077 C1E810              <1>  shr eax, 16
    27 0000007A 884704              <1>  mov [edi + 4], al
    27 0000007D 886707              <1>  mov [edi + 7], ah
    27                              <1> 
    27 00000080 5F                  <1>  pop edi
    27 00000081 58                  <1>  pop eax
    28                                                  set_desc    GDT.tss_4, TSS_4
    28 00000082 50                  <1>  push eax
    28 00000083 57                  <1>  push edi
    28                              <1> 
    28 00000084 BF[D0080000]        <1>  mov edi, %1
    28 00000089 B8[08060000]        <1>  mov eax, %2
    28                              <1> 
    28                              <1>  %if 3 == %0
    28                              <1>  mov [edi + 0], %3
    28                              <1>  %endif
    28                              <1> 
    28 0000008E 66894702            <1>  mov [edi + 2], ax
    28 00000092 C1E810              <1>  shr eax, 16
    28 00000095 884704              <1>  mov [edi + 4], al
    28 00000098 886707              <1>  mov [edi + 7], ah
    28                              <1> 
    28 0000009B 5F                  <1>  pop edi
    28 0000009C 58                  <1>  pop eax
    29                                                  set_desc    GDT.tss_5, TSS_5
    29 0000009D 50                  <1>  push eax
    29 0000009E 57                  <1>  push edi
    29                              <1> 
    29 0000009F BF[D8080000]        <1>  mov edi, %1
    29 000000A4 B8[E0060000]        <1>  mov eax, %2
    29                              <1> 
    29                              <1>  %if 3 == %0
    29                              <1>  mov [edi + 0], %3
    29                              <1>  %endif
    29                              <1> 
    29 000000A9 66894702            <1>  mov [edi + 2], ax
    29 000000AD C1E810              <1>  shr eax, 16
    29 000000B0 884704              <1>  mov [edi + 4], al
    29 000000B3 886707              <1>  mov [edi + 7], ah
    29                              <1> 
    29 000000B6 5F                  <1>  pop edi
    29 000000B7 58                  <1>  pop eax
    30                                                  set_desc    GDT.tss_6, TSS_6
    30 000000B8 50                  <1>  push eax
    30 000000B9 57                  <1>  push edi
    30                              <1> 
    30 000000BA BF[E0080000]        <1>  mov edi, %1
    30 000000BF B8[B8070000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 000000C4 66894702            <1>  mov [edi + 2], ax
    30 000000C8 C1E810              <1>  shr eax, 16
    30 000000CB 884704              <1>  mov [edi + 4], al
    30 000000CE 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 000000D1 5F                  <1>  pop edi
    30 000000D2 58                  <1>  pop eax
    31                                  
    32                                  
    33                                                  ; set up Call Gate
    34                                                  set_gate    GDT.call_gate, call_gate
    34 000000D3 50                  <1>  push eax
    34 000000D4 57                  <1>  push edi
    34                              <1> 
    34 000000D5 BF[E8080000]        <1>  mov edi, %1
    34 000000DA B8[58170000]        <1>  mov eax, %2
    34                              <1> 
    34 000000DF 668907              <1>  mov [edi + 0], ax
    34 000000E2 C1E810              <1>  shr eax, 16
    34 000000E5 66894706            <1>  mov [edi + 6], ax
    34                              <1> 
    34 000000E9 5F                  <1>  pop edi
    34 000000EA 58                  <1>  pop eax
    35                                  
    36                                                  ; set up LDT
    37                                                  set_desc    GDT.ldt, LDT, word LDT_LIMIT        ; descriptor address/base address/limit
    37 000000EB 50                  <1>  push eax
    37 000000EC 57                  <1>  push edi
    37                              <1> 
    37 000000ED BF[A8080000]        <1>  mov edi, %1
    37 000000F2 B8[F6080000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if 3 == %0
    37 000000F7 66C7075F00          <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 000000FC 66894702            <1>  mov [edi + 2], ax
    37 00000100 C1E810              <1>  shr eax, 16
    37 00000103 884704              <1>  mov [edi + 4], al
    37 00000106 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 00000109 5F                  <1>  pop edi
    37 0000010A 58                  <1>  pop eax
    38                                  
    39                                                  ; load GDTR (resetting)
    40 0000010B 0F0115[F0080000]                        lgdt        [GDTR]
    41                                  
    42                                                  ; set up stack
    43 00000112 BC00341000                              mov     esp, SP_TASK_0                          ; set up stack for Task0
    44                                  
    45                                                  ; recognize Kernel as Task0
    46 00000117 66B82000                                mov     ax, SS_TASK_0
    47 0000011B 0F00D8                                  ltr     ax                                      ; initialize TR
    48                                  
    49                                                  ; initialize interrupt vector
    50 0000011E E807130000                              cdecl   init_int                                ; initialize Interrupt Descriptor Table
    51 00000123 E888140000                              cdecl   init_pic                                ; initialize Programmable Interrupt Controler
    52 00000128 E863080000                              cdecl   init_page                               ; initialize Paging
    53                                  
    54                                                  set_vect    0x00, int_zero_div                  ; define interrupt process: Zero div
    54 0000012D 50                  <1>  push eax
    54 0000012E 57                  <1>  push edi
    54                              <1> 
    54 0000012F BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    54 00000134 B8[92150000]        <1>  mov eax, %2
    54                              <1> 
    54                              <1>  %if 3 == %0
    54                              <1>  mov [edi + 4], %3
    54                              <1>  %endif
    54                              <1> 
    54 00000139 668907              <1>  mov [edi + 0], ax
    54 0000013C C1E810              <1>  shr eax, 16
    54 0000013F 66894706            <1>  mov [edi + 6], ax
    54                              <1> 
    54 00000143 5F                  <1>  pop edi
    54 00000144 58                  <1>  pop eax
    55                                                  set_vect    0x07, int_nm                        ; define interrupt process: device unavailable exception
    55 00000145 50                  <1>  push eax
    55 00000146 57                  <1>  push edi
    55                              <1> 
    55 00000147 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    55 0000014C B8[F5170000]        <1>  mov eax, %2
    55                              <1> 
    55                              <1>  %if 3 == %0
    55                              <1>  mov [edi + 4], %3
    55                              <1>  %endif
    55                              <1> 
    55 00000151 668907              <1>  mov [edi + 0], ax
    55 00000154 C1E810              <1>  shr eax, 16
    55 00000157 66894706            <1>  mov [edi + 6], ax
    55                              <1> 
    55 0000015B 5F                  <1>  pop edi
    55 0000015C 58                  <1>  pop eax
    56                                                  set_vect    0x0E, int_pf                        ; define interrupt process; page fault
    56 0000015D 50                  <1>  push eax
    56 0000015E 57                  <1>  push edi
    56                              <1> 
    56 0000015F BF70001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    56 00000164 B8[320A0000]        <1>  mov eax, %2
    56                              <1> 
    56                              <1>  %if 3 == %0
    56                              <1>  mov [edi + 4], %3
    56                              <1>  %endif
    56                              <1> 
    56 00000169 668907              <1>  mov [edi + 0], ax
    56 0000016C C1E810              <1>  shr eax, 16
    56 0000016F 66894706            <1>  mov [edi + 6], ax
    56                              <1> 
    56 00000173 5F                  <1>  pop edi
    56 00000174 58                  <1>  pop eax
    57                                                  set_vect    0x20, int_timer                     ; define interrupt process: Timer
    57 00000175 50                  <1>  push eax
    57 00000176 57                  <1>  push edi
    57                              <1> 
    57 00000177 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    57 0000017C B8[980A0000]        <1>  mov eax, %2
    57                              <1> 
    57                              <1>  %if 3 == %0
    57                              <1>  mov [edi + 4], %3
    57                              <1>  %endif
    57                              <1> 
    57 00000181 668907              <1>  mov [edi + 0], ax
    57 00000184 C1E810              <1>  shr eax, 16
    57 00000187 66894706            <1>  mov [edi + 6], ax
    57                              <1> 
    57 0000018B 5F                  <1>  pop edi
    57 0000018C 58                  <1>  pop eax
    58                                                  set_vect    0x21, int_keyboard                  ; define interrupt process: KBC
    58 0000018D 50                  <1>  push eax
    58 0000018E 57                  <1>  push edi
    58                              <1> 
    58 0000018F BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    58 00000194 B8[D2160000]        <1>  mov eax, %2
    58                              <1> 
    58                              <1>  %if 3 == %0
    58                              <1>  mov [edi + 4], %3
    58                              <1>  %endif
    58                              <1> 
    58 00000199 668907              <1>  mov [edi + 0], ax
    58 0000019C C1E810              <1>  shr eax, 16
    58 0000019F 66894706            <1>  mov [edi + 6], ax
    58                              <1> 
    58 000001A3 5F                  <1>  pop edi
    58 000001A4 58                  <1>  pop eax
    59                                                  set_vect    0x28, int_rtc                       ; define interrupt process: RTC
    59 000001A5 50                  <1>  push eax
    59 000001A6 57                  <1>  push edi
    59                              <1> 
    59 000001A7 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    59 000001AC B8[DB150000]        <1>  mov eax, %2
    59                              <1> 
    59                              <1>  %if 3 == %0
    59                              <1>  mov [edi + 4], %3
    59                              <1>  %endif
    59                              <1> 
    59 000001B1 668907              <1>  mov [edi + 0], ax
    59 000001B4 C1E810              <1>  shr eax, 16
    59 000001B7 66894706            <1>  mov [edi + 6], ax
    59                              <1> 
    59 000001BB 5F                  <1>  pop edi
    59 000001BC 58                  <1>  pop eax
    60                                                  set_vect    0x81, trap_gate_81, word 0xEF00     ; define trap gate        : display a char
    60 000001BD 50                  <1>  push eax
    60 000001BE 57                  <1>  push edi
    60                              <1> 
    60 000001BF BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    60 000001C4 B8[88170000]        <1>  mov eax, %2
    60                              <1> 
    60                              <1>  %if 3 == %0
    60 000001C9 66C7470400EF        <1>  mov [edi + 4], %3
    60                              <1>  %endif
    60                              <1> 
    60 000001CF 668907              <1>  mov [edi + 0], ax
    60 000001D2 C1E810              <1>  shr eax, 16
    60 000001D5 66894706            <1>  mov [edi + 6], ax
    60                              <1> 
    60 000001D9 5F                  <1>  pop edi
    60 000001DA 58                  <1>  pop eax
    61                                                  set_vect    0x82, trap_gate_82, word 0xEF00     ; define trap gate        : draw pixel
    61 000001DB 50                  <1>  push eax
    61 000001DC 57                  <1>  push edi
    61                              <1> 
    61 000001DD BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    61 000001E2 B8[96170000]        <1>  mov eax, %2
    61                              <1> 
    61                              <1>  %if 3 == %0
    61 000001E7 66C7470400EF        <1>  mov [edi + 4], %3
    61                              <1>  %endif
    61                              <1> 
    61 000001ED 668907              <1>  mov [edi + 0], ax
    61 000001F0 C1E810              <1>  shr eax, 16
    61 000001F3 66894706            <1>  mov [edi + 6], ax
    61                              <1> 
    61 000001F7 5F                  <1>  pop edi
    61 000001F8 58                  <1>  pop eax
    62                                  
    63                                                  ; permit interrupt by device
    64 000001F9 6A10E8041400006683-                     cdecl   rtc_int_en, 0x10                        ; Updata-Ended Interrupt Enable
    64 00000202 C404               
    65 00000204 E807150000                              cdecl   int_en_timer0
    66                                  
    67                                                  ; set up IMR(Interrupt Mask Register)
    68                                                  outp    0x21, 0b1111_1000                       ; interrupt enable: slave PIC/KBC/Timer     // master
    68 00000209 B0F8                <1>  mov al, %2
    68 0000020B E621                <1>  out %1, al
    69                                                  outp    0xA1, 0b1111_1110                       ; interrupt enable: RTC                     // slave
    69 0000020D B0FE                <1>  mov al, %2
    69 0000020F E6A1                <1>  out %1, al
    70                                  
    71                                                  ; register page table
    72 00000211 B800501000                              mov     eax, CR3_BASE
    73 00000216 0F22D8                                  mov     cr3, eax
    74                                  
    75                                                  ; enable paging
    76 00000219 0F20C0                                  mov     eax, cr0
    77 0000021C 0D00000080                              or      eax, (1 << 31)                          ; CR0 |= PG
    78 00000221 0F22C0                                  mov     cr0, eax
    79 00000224 EB00                                    jmp     $ + 2                                   ; FLUSH()
    80                                  
    81                                                  ; CPU interrupt enable
    82 00000226 FB                                      sti
    83                                  
    84                                                  ; display font and color_bar
    85 00000227 6A0D6A3FE8D40D0000-                     cdecl   draw_font, 63, 13
    85 00000230 6683C408           
    86 00000234 6A046A3FE84C0E0000-                     cdecl   draw_color_bar, 63, 4
    86 0000023D 6683C408           
    87                                  
    88                                                  ; display string
    89 00000241 68[89020000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    89 00000249 00006A0E6A19E8F50D-
    89 00000252 00006683C410       
    90                                  
    91                                  ;---------------------------------------------------------------------------
    92                                  ; default multitask
    93                                  ;---------------------------------------------------------------------------
    94                                  
    95                                  
    96                                  ;                 ; call Task
    97                                  ;                 ; call    SS_TASK_1:0
    98                                  
    99                                  ; .10L:
   100                                  
   101                                  ;                 ; display time
   102                                  ;                 mov     eax, [RTC_TIME]
   103                                  ;                 cdecl   draw_time, 72, 0, 0x0700, eax
   104                                  
   105                                  
   106                                  ;                 ; get key code
   107                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   108                                  ;                 cmp     eax, 0
   109                                  ;                 je      .10E
   110                                  
   111                                  ;                 ; display key code
   112                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   113                                  ; .10E:
   114                                  
   115                                  ;                 ; draw rotation bar
   116                                  ;                 cdecl   draw_rotation_bar
   117                                  
   118                                  ;                 jmp     .10L
   119                                  
   120                                  ;----------------------------------------------------------------------------
   121                                  
   122                                  
   123                                  ;----------------------------------------------------------------------------
   124                                  ; non-preemptive multitask
   125                                  ;----------------------------------------------------------------------------
   126                                  
   127                                  ; .10L:
   128                                  
   129                                  ;                 ; call task
   130                                  ;                 jmp     SS_TASK_1:0                             ; jump to Task1
   131                                  
   132                                  ;                 ; draw rotation bar
   133                                  ;                 cdecl   draw_rotation_bar
   134                                  
   135                                  ;                 ; get key code
   136                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   137                                  ;                 cmp     eax, 0
   138                                  ;                 je      .10E
   139                                  
   140                                  ;                 ; display key code
   141                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   142                                  ; .10E:
   143                                  
   144                                  ;                 jmp     .10L
   145                                  
   146                                  ;-----------------------------------------------------------------------------
   147                                  
   148                                  ;----------------------------------------------------------------------------
   149                                  ; preemptive multitask
   150                                  ;----------------------------------------------------------------------------
   151                                  
   152                                  .10L:
   153                                  
   154                                                  ; draw rotation bar
   155 00000258 E8C2140000                              cdecl   draw_rotation_bar
   156                                  
   157                                                  ; get key code
   158 0000025D 68[9C020000]68-                         cdecl   ring_rd, _KEY_BUFF, .int_key
   158 00000263 [F8160000]E8AC1300-
   158 0000026B 006683C408         
   159 00000270 83F800                                  cmp     eax, 0
   160 00000273 7412                                    je      .10E
   161                                  
   162                                                  ; display key code
   163 00000275 68[F8160000]6A1D6A-                     cdecl   draw_key, 2, 29, _KEY_BUFF
   163 0000027D 02E8FC1300006683C4-
   163 00000286 0C                 
   164                                  .10E:
   165                                  
   166 00000287 EBCF                                    jmp     .10L
   167                                  
   168                                  ;-----------------------------------------------------------------------------
   169                                  
   170                                  ;data
   171 00000289 2048656C6C6F2C206B-     .s0:    db  " Hello, kernel! ", 0
   171 00000292 65726E656C212000   
   172                                  
   173 0000029A 00<rept>                ALIGN 4, db 0
   174 0000029C 00000000                .int_key:   dd 0
   175                                  
   176                                  ALIGN 4, db 0
   177 000002A0 00000000                FONT_ADR:   dd 0
   178 000002A4 00000000                RTC_TIME:   dd 0
   179                                  
   180                                  
   181                                  ; TASKS
   182                                  %include    "descriptor.s"
     1                              <1> ;-----------------------------------------------------------------------
     2                              <1> ; TSS
     3                              <1> ;-----------------------------------------------------------------------
     4                              <1> 
     5                              <1> TSS_0:
     6 000002A8 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
     7 000002AC 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                             ;*  4: ESP0
     8 000002B0 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
     9 000002B4 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    10 000002B8 00000000            <1> .ss1:           dd  0                                           ;* 16:
    11 000002BC 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    12 000002C0 00000000            <1> .ss2:           dd  0                                           ;* 24:
    13 000002C4 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    14 000002C8 00000000            <1> .eip:           dd  0                                           ;  32: EIP
    15 000002CC 00000000            <1> .eflags:        dd  0                                           ;  36: EFLAGS
    16 000002D0 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    17 000002D4 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    18 000002D8 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    19 000002DC 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    20 000002E0 00000000            <1> .esp:           dd  0                                           ;  56: ESP
    21 000002E4 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    22 000002E8 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    23 000002EC 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    24 000002F0 00000000            <1> .es:            dd  0                                           ;  72: ES
    25 000002F4 00000000            <1> .cs:            dd  0                                           ;  76: CS
    26 000002F8 00000000            <1> .ss:            dd  0                                           ;  80: SS
    27 000002FC 00000000            <1> .ds:            dd  0                                           ;  84: DS
    28 00000300 00000000            <1> .fs:            dd  0                                           ;  88: FS
    29 00000304 00000000            <1> .gs:            dd  0                                           ;  92: GS
    30 00000308 00000000            <1> .ldt:           dd  0                                           ;* 96: LDT segment selector
    31 0000030C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    32 00000310 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    33                              <1> 
    34                              <1> TSS_1:
    35 00000380 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    36 00000384 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                             ;*  4: ESP0
    37 00000388 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    38 0000038C 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    39 00000390 00000000            <1> .ss1:           dd  0                                           ;* 16:
    40 00000394 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    41 00000398 00000000            <1> .ss2:           dd  0                                           ;* 24:
    42 0000039C 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    43 000003A0 [200B0000]          <1> .eip:           dd  task_1                                      ;  32: EIP
    44 000003A4 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    45 000003A8 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    46 000003AC 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    47 000003B0 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    48 000003B4 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    49 000003B8 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56: ESP
    50 000003BC 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    51 000003C0 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    52 000003C4 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    53 000003C8 27000000            <1> .es:            dd  DS_TASK_1                                   ;  72: ES
    54 000003CC 1F000000            <1> .cs:            dd  CS_TASK_1                                   ;  76: CS
    55 000003D0 27000000            <1> .ss:            dd  DS_TASK_1                                   ;  80: SS
    56 000003D4 27000000            <1> .ds:            dd  DS_TASK_1                                   ;  84: DS
    57 000003D8 27000000            <1> .fs:            dd  DS_TASK_1                                   ;  88: FS
    58 000003DC 27000000            <1> .gs:            dd  DS_TASK_1                                   ;  92: GS
    59 000003E0 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    60 000003E4 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    61 000003E8 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    62                              <1> 
    63                              <1> 
    64                              <1> TSS_2:
    65 00000458 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    66 0000045C 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                             ;*  4: ESP0
    67 00000460 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    68 00000464 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    69 00000468 00000000            <1> .ss1:           dd  0                                           ;* 16:
    70 0000046C 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    71 00000470 00000000            <1> .ss2:           dd  0                                           ;* 24:
    72 00000474 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    73 00000478 [550B0000]          <1> .eip:           dd  task_2                                      ;  32: EIP
    74 0000047C 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    75 00000480 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    76 00000484 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    77 00000488 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    78 0000048C 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    79 00000490 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56: ESP
    80 00000494 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    81 00000498 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    82 0000049C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    83 000004A0 37000000            <1> .es:            dd  DS_TASK_2                                   ;  72: ES
    84 000004A4 2F000000            <1> .cs:            dd  CS_TASK_2                                   ;  76: CS
    85 000004A8 37000000            <1> .ss:            dd  DS_TASK_2                                   ;  80: SS
    86 000004AC 37000000            <1> .ds:            dd  DS_TASK_2                                   ;  84: DS
    87 000004B0 37000000            <1> .fs:            dd  DS_TASK_2                                   ;  88: FS
    88 000004B4 37000000            <1> .gs:            dd  DS_TASK_2                                   ;  92: GS
    89 000004B8 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    90 000004BC 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    91 000004C0 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    92                              <1> 
    93                              <1> TSS_3:
    94 00000530 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    95 00000534 003E1000            <1> .esp0:          dd  SP_TASK_3 - 512                             ;*  4: ESP0
    96 00000538 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    97 0000053C 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    98 00000540 00000000            <1> .ss1:           dd  0                                           ;* 16:
    99 00000544 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   100 00000548 00000000            <1> .ss2:           dd  0                                           ;* 24:
   101 0000054C 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
   102 00000550 [700C0000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   103 00000554 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   104 00000558 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   105 0000055C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   106 00000560 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   107 00000564 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   108 00000568 00401000            <1> .esp:           dd  SP_TASK_3                                           ;  56: ESP
   109 0000056C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   110 00000570 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   111 00000574 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   112 00000578 47000000            <1> .es:            dd  DS_TASK_3                                   ;  72: ES
   113 0000057C 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   114 00000580 47000000            <1> .ss:            dd  DS_TASK_3                                   ;  80: SS
   115 00000584 47000000            <1> .ds:            dd  DS_TASK_3                                   ;  84: DS
   116 00000588 47000000            <1> .fs:            dd  DS_TASK_3                                   ;  88: FS
   117 0000058C 47000000            <1> .gs:            dd  DS_TASK_3                                   ;  92: GS
   118 00000590 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   119 00000594 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   120 00000598 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   121                              <1> 
   122                              <1> TSS_4:
   123 00000608 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
   124 0000060C 00421000            <1> .esp0:          dd  SP_TASK_4 - 512                             ;*  4: ESP0
   125 00000610 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
   126 00000614 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
   127 00000618 00000000            <1> .ss1:           dd  0                                           ;* 16:
   128 0000061C 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   129 00000620 00000000            <1> .ss2:           dd  0                                           ;* 24:
   130 00000624 00002000            <1> .cr3:           dd  CR3_TASK_4                                  ;  28: CR3(PDBR)
   131 00000628 [700C0000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   132 0000062C 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   133 00000630 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   134 00000634 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   135 00000638 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   136 0000063C 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   137 00000640 00441000            <1> .esp:           dd  SP_TASK_4                                   ;  56: ESP
   138 00000644 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   139 00000648 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   140 0000064C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   141 00000650 4F000000            <1> .es:            dd  DS_TASK_4                                   ;  72: ES
   142 00000654 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   143 00000658 4F000000            <1> .ss:            dd  DS_TASK_4                                   ;  80: SS
   144 0000065C 4F000000            <1> .ds:            dd  DS_TASK_4                                   ;  84: DS
   145 00000660 4F000000            <1> .fs:            dd  DS_TASK_4                                   ;  88: FS
   146 00000664 4F000000            <1> .gs:            dd  DS_TASK_4                                   ;  92: GS
   147 00000668 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   148 0000066C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   149 00000670 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   150                              <1> 
   151                              <1> TSS_5:
   152 000006E0 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
   153 000006E4 00461000            <1> .esp0:          dd  SP_TASK_5 - 512                             ;*  4: ESP0
   154 000006E8 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
   155 000006EC 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
   156 000006F0 00000000            <1> .ss1:           dd  0                                           ;* 16:
   157 000006F4 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   158 000006F8 00000000            <1> .ss2:           dd  0                                           ;* 24:
   159 000006FC 00202000            <1> .cr3:           dd  CR3_TASK_5                                  ;  28: CR3(PDBR)
   160 00000700 [700C0000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   161 00000704 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   162 00000708 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   163 0000070C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   164 00000710 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   165 00000714 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   166 00000718 00481000            <1> .esp:           dd  SP_TASK_5                                           ;  56: ESP
   167 0000071C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   168 00000720 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   169 00000724 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   170 00000728 57000000            <1> .es:            dd  DS_TASK_5                                   ;  72: ES
   171 0000072C 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   172 00000730 57000000            <1> .ss:            dd  DS_TASK_5                                   ;  80: SS
   173 00000734 57000000            <1> .ds:            dd  DS_TASK_5                                   ;  84: DS
   174 00000738 57000000            <1> .fs:            dd  DS_TASK_5                                   ;  88: FS
   175 0000073C 57000000            <1> .gs:            dd  DS_TASK_5                                   ;  92: GS
   176 00000740 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   177 00000744 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   178 00000748 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   179                              <1> 
   180                              <1> TSS_6:
   181 000007B8 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
   182 000007BC 004A1000            <1> .esp0:          dd  SP_TASK_6 - 512                             ;*  4: ESP0
   183 000007C0 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
   184 000007C4 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
   185 000007C8 00000000            <1> .ss1:           dd  0                                           ;* 16:
   186 000007CC 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   187 000007D0 00000000            <1> .ss2:           dd  0                                           ;* 24:
   188 000007D4 00402000            <1> .cr3:           dd  CR3_TASK_6                                  ;  28: CR3(PDBR)
   189 000007D8 [700C0000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   190 000007DC 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   191 000007E0 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   192 000007E4 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   193 000007E8 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   194 000007EC 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   195 000007F0 004C1000            <1> .esp:           dd  SP_TASK_6                                           ;  56: ESP
   196 000007F4 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   197 000007F8 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   198 000007FC 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   199 00000800 5F000000            <1> .es:            dd  DS_TASK_6                                   ;  72: ES
   200 00000804 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   201 00000808 5F000000            <1> .ss:            dd  DS_TASK_6                                   ;  80: SS
   202 0000080C 5F000000            <1> .ds:            dd  DS_TASK_6                                   ;  84: DS
   203 00000810 5F000000            <1> .fs:            dd  DS_TASK_6                                   ;  88: FS
   204 00000814 5F000000            <1> .gs:            dd  DS_TASK_6                                   ;  92: GS
   205 00000818 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   206 0000081C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   207 00000820 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   208                              <1> 
   209                              <1> ;-----------------------------------------------------------------------------------------------
   210                              <1> ; GDT
   211                              <1> ;-----------------------------------------------------------------------------------------------
   212                              <1> 
   213 00000890 0000000000000000    <1> GDT:            dq  0x0000000000000000
   214 00000898 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   215 000008A0 FFFF00000092CF00    <1> .ds_kernel:     dq  0x00CF92000000FFFF                          ; DATA 4G
   216 000008A8 0000000000820000    <1> .ldt            dq  0x0000820000000000                          ; LDT descriptor
   217 000008B0 6700000000890000    <1> .tss_0:         dq  0x0000890000000067                          ; TSS descriptor
   218 000008B8 6700000000890000    <1> .tss_1:         dq  0x0000890000000067                          ; TSS descriptor
   219 000008C0 6700000000890000    <1> .tss_2:         dq  0x0000890000000067                          ; TSS descriptor
   220 000008C8 6700000000890000    <1> .tss_3:         dq  0x0000890000000067                          ; TSS descriptor
   221 000008D0 6700000000890000    <1> .tss_4:         dq  0x0000890000000067                          ; TSS descriptor
   222 000008D8 6700000000890000    <1> .tss_5:         dq  0x0000890000000067                          ; TSS descriptor
   223 000008E0 6700000000890000    <1> .tss_6:         dq  0x0000890000000067                          ; TSS descriptor
   224 000008E8 0000080004EC0000    <1> .call_gate:     dq  0x0000EC0400080000                          ; 386 call gate(DPL=3, count=4, SEL=8)
   225                              <1> .end:
   226                              <1> 
   227                              <1> CS_KERNEL       equ .cs_kernel - GDT
   228                              <1> DS_KERNEL       equ .ds_kernel - GDT
   229                              <1> SS_LDT          equ .ldt       - GDT
   230                              <1> SS_TASK_0       equ .tss_0     - GDT
   231                              <1> SS_TASK_1       equ .tss_1     - GDT
   232                              <1> SS_TASK_2       equ .tss_2     - GDT
   233                              <1> SS_TASK_3       equ .tss_3     - GDT
   234                              <1> SS_TASK_4       equ .tss_4     - GDT
   235                              <1> SS_TASK_5       equ .tss_5     - GDT
   236                              <1> SS_TASK_6       equ .tss_6     - GDT
   237                              <1> SS_GATE_0       equ .call_gate - GDT
   238                              <1> 
   239 000008F0 5F00                <1> GDTR:   dw      GDT.end - GDT - 1
   240 000008F2 [90080000]          <1>         dd      GDT
   241                              <1> 
   242                              <1> ;-----------------------------------------------------------------------------------------------
   243                              <1> ; LDT
   244                              <1> ;-----------------------------------------------------------------------------------------------
   245                              <1> 
   246 000008F6 0000000000000000    <1> LDT:            dq  0x0000000000000000                          ; NULL
   247 000008FE FFFF0000009ACF00    <1> .cs_task_0:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   248 00000906 FFFF00000092CF00    <1> .ds_task_0:     dq  0x00CF92000000FFFF                          ; DATA 4G
   249 0000090E FFFF000000FACF00    <1> .cs_task_1:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   250 00000916 FFFF000000F2CF00    <1> .ds_task_1:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   251 0000091E FFFF000000FACF00    <1> .cs_task_2:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   252 00000926 FFFF000000F2CF00    <1> .ds_task_2:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   253 0000092E FFFF000000FACF00    <1> .cs_task_3:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   254 00000936 FFFF000000F2CF00    <1> .ds_task_3:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   255 0000093E FFFF000000F2CF00    <1> .ds_task_4:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   256 00000946 FFFF000000F2CF00    <1> .ds_task_5:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   257 0000094E FFFF000000F2CF00    <1> .ds_task_6:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   258                              <1> 
   259                              <1> .end:
   260                              <1> 
   261                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                      ; cs selector for task0 // set bit 2(TI)
   262                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                      ; ds selector for task0 // Priviledge level 0
   263                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                  ; cs selector for task1 // Priviledge level 3
   264                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                  ; ds selector for task1
   265                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                  ; cs selector for task2 // Priviledge level 3
   266                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                  ; ds selector for task2
   267                              <1> CS_TASK_3       equ (.cs_task_3 - LDT) | 4 | 3                  ; cs selector for task3 // Priviledge level 3
   268                              <1> DS_TASK_3       equ (.ds_task_3 - LDT) | 4 | 3                  ; ds selector for task3
   269                              <1> DS_TASK_4       equ (.ds_task_4 - LDT) | 4 | 3                  ; ds selector for task4
   270                              <1> DS_TASK_5       equ (.ds_task_5 - LDT) | 4 | 3                  ; ds selector for task5
   271                              <1> DS_TASK_6       equ (.ds_task_6 - LDT) | 4 | 3                  ; ds selector for task6
   272                              <1> 
   273                              <1> LDT_LIMIT       equ .end        - LDT - 1
   183                                  %include    "modules/paging.s"
     1                              <1> page_set_4m:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000956 55                  <1>             push    ebp
     5 00000957 89E5                <1>             mov     ebp, esp                                        ; EBP+8 | base address of page directory
     6                              <1> 
     7                              <1>             ; save registers
     8 00000959 60                  <1>             pusha
     9                              <1> 
    10                              <1>             ; make page directory
    11 0000095A 8B7D08              <1>             mov     edi, [ebp + 8]
    12 0000095D B800000000          <1>             mov     eax, 0x00000000                                 ; // P = 0
    13 00000962 B900040000          <1>             mov     ecx, 1024
    14 00000967 F3AB                <1>             rep     stosd                                           ; while(ecx--) *edi++ = type
    15                              <1> 
    16                              <1>             ; set top entry
    17 00000969 89F8                <1>             mov     eax, edi                                        ; EAX = right after the page directory = address of page table
    18 0000096B 2500F0FFFF          <1>             and     eax, ~0x0000_0FFF                               ; specifying the physical address
    19 00000970 83C807              <1>             or      eax, 7                                          ; permit R/W
    20 00000973 898700F0FFFF        <1>             mov     [edi - (1024 * 4)], eax                         ; set top entry of page directory
    21                              <1> 
    22                              <1>             ; set page table
    23 00000979 B807000000          <1>             mov     eax, 0x000000007                                ; specifying physical address and permit R/W
    24 0000097E B900040000          <1>             mov     ecx, 1024
    25                              <1> 
    26                              <1> .10L:
    27 00000983 AB                  <1>             stosd
    28 00000984 0500100000          <1>             add     eax, 0x00001000
    29 00000989 E2F8                <1>             loop    .10L
    30                              <1> 
    31                              <1>             ; return registers
    32 0000098B 61                  <1>             popa
    33                              <1> 
    34                              <1>             ; desctruct stack frame
    35 0000098C 89EC                <1>             mov     esp, ebp
    36 0000098E 5D                  <1>             pop     ebp
    37                              <1> 
    38 0000098F C3                  <1>             ret
    39                              <1> 
    40                              <1> init_page:
    41                              <1> 
    42                              <1>             ; save registers
    43 00000990 60                  <1>             pusha
    44                              <1> 
    45                              <1>             ; make page conversion table
    46 00000991 6800501000E8BBFFFF- <1>             cdecl  page_set_4m, CR3_BASE                               ; make page conversion table : for task3
    46 0000099A FF6683C404          <1>
    47 0000099F 6800002000E8ADFFFF- <1>             cdecl  page_set_4m, CR3_TASK_4                             ; make page conversion table : for task4
    47 000009A8 FF6683C404          <1>
    48 000009AD 6800202000E89FFFFF- <1>             cdecl  page_set_4m, CR3_TASK_5                             ; make page conversion table : for task5
    48 000009B6 FF6683C404          <1>
    49 000009BB 6800402000E891FFFF- <1>             cdecl  page_set_4m, CR3_TASK_6                             ; make page conversion table : for task6
    49 000009C4 FF6683C404          <1>
    50                              <1> 
    51                              <1>             ; set page table(absense)
    52 000009C9 C7051C641000000000- <1>             mov    [0x0010_6000 + 0x107 * 4], dword 0                  ; set 0x0010_7000 to the page not exist
    52 000009D2 00                  <1>
    53                              <1> 
    54                              <1>             ; set address conversion
    55 000009D3 C7051C142000078010- <1>             mov    [0x0020_1000 + 0x107 * 4], dword PARAM_TASK_4 + 7   ; address conversion : for task4
    55 000009DC 00                  <1>
    56 000009DD C7051C342000079010- <1>             mov    [0x0020_3000 + 0x107 * 4], dword PARAM_TASK_5 + 7   ; address conversion : for task5
    56 000009E6 00                  <1>
    57 000009E7 C7051C54200007A010- <1>             mov    [0x0020_5000 + 0x107 * 4], dword PARAM_TASK_6 + 7   ; address conversion : for task6
    57 000009F0 00                  <1>
    58                              <1> 
    59                              <1>             ; set drawing params
    60 000009F1 6A4068[B00D0000]68- <1>             cdecl   memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size      ; drawing params : for task4
    60 000009F9 00801000E86C0E0000- <1>
    60 00000A02 6683C40C            <1>
    61 00000A06 6A4068[F00D0000]68- <1>             cdecl   memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size      ; drawing params : for task5
    61 00000A0E 00901000E8570E0000- <1>
    61 00000A17 6683C40C            <1>
    62 00000A1B 6A4068[300E0000]68- <1>             cdecl   memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size      ; drawing params : for task6
    62 00000A23 00A01000E8420E0000- <1>
    62 00000A2C 6683C40C            <1>
    63                              <1> 
    64                              <1> 
    65                              <1> 
    66                              <1>             ; return registers
    67 00000A30 61                  <1>             popa
    68                              <1> 
    69 00000A31 C3                  <1>             ret
   184                                  %include    "modules/int_pf.s"
     1                              <1> int_pf:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000A32 55                  <1>             push    ebp
     5 00000A33 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 00000A35 60                  <1>             pusha
     9 00000A36 1E                  <1>             push    ds
    10 00000A37 06                  <1>             push    es
    11                              <1> 
    12                              <1>             ; confirm the address of what raised exception
    13 00000A38 0F20D0              <1>             mov     eax, cr2
    14 00000A3B 2500F0FFFF          <1>             and     eax, ~0xFFF                                     ; access within 4K bytes
    15 00000A40 3D00701000          <1>             cmp     eax, 0x0010_7000                                ; if (0x0010_7000 == ptr) => page activation process
    16 00000A45 7521                <1>             jne     .10F                                            ; if (0x0010_7000 != ptr) => task termination process
    17                              <1> 
    18                              <1>             ; enable page
    19 00000A47 C7051C641000077010- <1>             mov     [0x00106000 + 0x107 * 4], dword 0x00107007
    19 00000A50 00                  <1>
    20 00000A51 6A4068[700D0000]68- <1>             cdecl   memcpy, 0x0010_7000, DRAW_PARAM, rose_size
    20 00000A59 00701000E80C0E0000- <1>
    20 00000A62 6683C40C            <1>
    21                              <1> 
    22 00000A66 EB15                <1>             jmp     .10E
    23                              <1> 
    24                              <1> .10F:
    25                              <1>             ; adjust stack
    26 00000A68 83C404              <1>             add     esp, 4                                          ; pop es
    27 00000A6B 83C404              <1>             add     esp, 4                                          ; pop ds
    28 00000A6E 61                  <1>             popa
    29 00000A6F 5D                  <1>             pop     ebp
    30                              <1> 
    31                              <1>             ; task termination process
    32 00000A70 9C                  <1>             pushf                                                   ; EFLAGS
    33 00000A71 0E                  <1>             push    cs
    34 00000A72 68[5B140000]        <1>             push    int_stop                                        ; stack displaying process
    35                              <1> 
    36 00000A77 B8[870A0000]        <1>             mov     eax, .s0                                        ; interrupt type
    37 00000A7C CF                  <1>             iret
    38                              <1> 
    39                              <1> .10E:
    40                              <1> 
    41                              <1>             ; return registers
    42 00000A7D 07                  <1>             pop     es
    43 00000A7E 1F                  <1>             pop     ds
    44 00000A7F 61                  <1>             popa
    45                              <1> 
    46                              <1>             ; destruct stack frame
    47 00000A80 89EC                <1>             mov     esp, ebp
    48 00000A82 5D                  <1>             pop     ebp
    49                              <1> 
    50 00000A83 83C404              <1>             add     esp, 4                                          ; discard error code
    51 00000A86 CF                  <1>             iret
    52                              <1> 
    53 00000A87 203C20504147452046- <1> .s0:        db  " < PAGE FAULT > ", 0
    53 00000A90 41554C54203E2000    <1>
   185                                  %include    "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000A98 60                  <1>             pusha
     5 00000A99 1E                  <1>             push    ds
     6 00000A9A 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000A9B 66B81000            <1>             mov     ax, 0x0010
    10 00000A9F 8ED8                <1>             mov     ds, ax
    11 00000AA1 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; TICK
    14 00000AA3 FF05[180B0000]      <1>             inc     dword [TIMER_COUNT]                                     ; TIMER_COUNT++ //update interrupt count
    15                              <1> 
    16                              <1>             ; clear interrupt flag(EOI)
    17                              <1>             outp    0x20, 0x20                                              ; master PIC:EOI command
    17 00000AA9 B020                <2>  mov al, %2
    17 00000AAB E620                <2>  out %1, al
    18                              <1> 
    19                              <1>             ; exchange Task
    20 00000AAD 660F00C8            <1>             str     ax                                                      ; AX = TR // current Task Register
    21 00000AB1 6683F820            <1>             cmp     ax, SS_TASK_0
    22 00000AB5 7427                <1>             je      .11L
    23 00000AB7 6683F828            <1>             cmp     ax, SS_TASK_1
    24 00000ABB 742A                <1>             je      .12L
    25 00000ABD 6683F830            <1>             cmp     ax, SS_TASK_2
    26 00000AC1 742D                <1>             je      .13L
    27 00000AC3 6683F838            <1>             cmp     ax, SS_TASK_3
    28 00000AC7 7430                <1>             je      .14L
    29 00000AC9 6683F840            <1>             cmp     ax, SS_TASK_4
    30 00000ACD 7433                <1>             je      .15L
    31 00000ACF 6683F848            <1>             cmp     ax, SS_TASK_5
    32 00000AD3 7436                <1>             je      .16L
    33                              <1> 
    34 00000AD5 EA000000002000      <1>             jmp     SS_TASK_0:0
    35 00000ADC EB36                <1>             jmp     .10E
    36                              <1> .11L:
    37 00000ADE EA000000002800      <1>             jmp     SS_TASK_1:0
    38 00000AE5 EB2D                <1>             jmp     .10E
    39                              <1> .12L:
    40 00000AE7 EA000000003000      <1>             jmp     SS_TASK_2:0
    41 00000AEE EB24                <1>             jmp     .10E
    42                              <1> .13L:
    43 00000AF0 EA000000003800      <1>             jmp     SS_TASK_3:0
    44 00000AF7 EB1B                <1>             jmp     .10E
    45                              <1> .14L:
    46 00000AF9 EA000000004000      <1>             jmp     SS_TASK_4:0
    47 00000B00 EB12                <1>             jmp     .10E
    48                              <1> .15L:
    49 00000B02 EA000000004800      <1>             jmp     SS_TASK_5:0
    50 00000B09 EB09                <1>             jmp     .10E
    51                              <1> .16L:
    52 00000B0B EA000000005000      <1>             jmp     SS_TASK_6:0
    53 00000B12 EB00                <1>             jmp     .10E
    54                              <1> .10E:
    55                              <1> 
    56                              <1>             ; return registers
    57 00000B14 07                  <1>             pop     es
    58 00000B15 1F                  <1>             pop     ds
    59 00000B16 61                  <1>             popa
    60                              <1> 
    61 00000B17 CF                  <1>             iret
    62                              <1> 
    63                              <1> ALIGN 4, db 0
    64 00000B18 0000000000000000    <1> TIMER_COUNT:    dq 0
   186                                  %include    "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1> 
     3                              <1>             ; display string
     4 00000B20 68[4E0B0000]6A076A- <1>             cdecl   draw_str, 63, 0, 0x07, .s0              ; draw_str()
     4 00000B28 006A3FE81905000066- <1>
     4 00000B31 83C410              <1>
     5                              <1> 
     6                              <1> ;-------------------------------------------------------------
     7                              <1> ; non-preemptive multitask
     8                              <1> ;-------------------------------------------------------------
     9                              <1> 
    10                              <1> ; .10L:
    11                              <1> ;             ; display time
    12                              <1> ;             mov     eax, [RTC_TIME]                         ; get time
    13                              <1> ;             cdecl   draw_time, 72, 0, 0x0700, eax
    14                              <1> 
    15                              <1> ;             ; call Task
    16                              <1> ;             jmp    SS_TASK_0:0                             ; jump to Task0(kernel)
    17                              <1> 
    18                              <1> ;             jmp     .10L
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> 
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; preemptive multitask
    24                              <1> ;-------------------------------------------------------------
    25                              <1> 
    26                              <1> .10L:
    27                              <1>             ; display time
    28 00000B34 A1[A4020000]        <1>             mov     eax, [RTC_TIME]                         ; get time
    29 00000B39 5068000700006A006A- <1>             cdecl   draw_time, 72, 0, 0x0700, eax
    29 00000B42 48E8650800006683C4- <1>
    29 00000B4B 10                  <1>
    30                              <1> 
    31                              <1> 
    32 00000B4C EBE6                <1>             jmp     .10L
    33                              <1> 
    34                              <1> ;-------------------------------------------------------------
    35                              <1> 
    36                              <1>             ; data
    37 00000B4E 5461736B2D3100      <1> .s0:        db  "Task-1", 0
   187                                  %include    "tasks/task_2.s"
     1                              <1> task_2:
     2                              <1> 
     3 00000B55 68[1A0C0000]6A076A- <1>             cdecl   draw_str, 63, 1, 0x07, .s0
     3 00000B5D 016A3FE8E404000066- <1>
     3 00000B66 83C410              <1>
     4                              <1> 
     5                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     7                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     8 00000B69 DB05[080C0000]      <1>             fild    dword [.c1000]              ;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     9 00000B6F D9EB                <1>             fldpi                               ;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    10 00000B71 DA35[0C0C0000]      <1>             fidiv   dword [.c180]               ;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    11 00000B77 D9EB                <1>             fldpi                               ;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    12 00000B79 DCC0                <1>             fadd    st0, st0                    ;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13 00000B7B D9EE                <1>             fldz                                ;    θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    14                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    15                              <1>                                                 ;    θ = 0 |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    16                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> 
    18                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    19                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    20                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    21                              <1> .10L:                                           ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    22                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    23 00000B7D D8C2                <1>             fadd    st0, st2                    ;    θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    24 00000B7F D9F8                <1>             fprem                               ;    MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx| // fprem(ST0 %= ST1)
    25 00000B81 D9C0                <1>             fld     st0                         ;        θ |       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    26 00000B83 D9FE                <1>             fsin                                ;    SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    27 00000B85 D8CC                <1>             fmul    st0, st4                    ;ST4*SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    28 00000B87 DF35[100C0000]      <1>             fbstp   [.bcd]                      ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    29                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    30                              <1> 
    31                              <1>             ; convert into ASCII code
    32 00000B8D A1[100C0000]        <1>             mov     eax, [.bcd]                 ; EAX = 1000 * sin(t)
    33 00000B92 89C3                <1>             mov     ebx, eax                    ; EBX = EAX
    34                              <1> 
    35 00000B94 250F0F0000          <1>             and     eax, 0x0F0F                 ; mask upper 4 bits
    36 00000B99 0D30300000          <1>             or      eax, 0x3030                 ; set 0x3 to upper 4 bits
    37                              <1> 
    38 00000B9E C1EB04              <1>             shr     ebx, 4                      ; EBX = upper 16 bits
    39 00000BA1 81E30F0F0000        <1>             and     ebx, 0x0F0F
    40 00000BA7 81CB30300000        <1>             or      ebx, 0x3030
    41                              <1> 
    42                              <1>             ; set the result to the buffer which is for screen display byte by byte
    43 00000BAD 883D[220C0000]      <1>             mov     [.s2 + 0], bh               ; first digit
    44 00000BB3 8825[240C0000]      <1>             mov     [.s3 + 0], ah               ; the first decimal place
    45 00000BB9 881D[250C0000]      <1>             mov     [.s3 + 1], bl               ; the second decimal place
    46 00000BBF A2[260C0000]        <1>             mov     [.s3 + 2], al               ; the third decimal place
    47                              <1> 
    48                              <1>             ; whether displaying sign or not
    49 00000BC4 B807000000          <1>             mov     eax, 7
    50 00000BC9 0FA305[190C0000]    <1>             bt      [.bcd + 9], eax             ; CF = bcd[9] & 0x80
    51 00000BD0 7209                <1>             jc      .10F
    52                              <1> 
    53 00000BD2 C605[210C0000]2B    <1>             mov     [.s1 + 0], byte '+'
    54 00000BD9 EB07                <1>             jmp     .10E
    55                              <1> .10F:
    56 00000BDB C605[210C0000]2D    <1>             mov     [.s1 + 0], byte '-'
    57                              <1> .10E:
    58 00000BE2 68[210C0000]6A076A- <1>             cdecl   draw_str, 72, 1, 0x07, .s1
    58 00000BEA 016A48E85704000066- <1>
    58 00000BF3 83C410              <1>
    59                              <1> 
    60                              <1>             ; wait
    61 00000BF6 6A0AE8530C00006683- <1>             cdecl   wait_tick, 10
    61 00000BFF C404                <1>
    62                              <1> 
    63                              <1> ;           mov		ecx, 20							;   ECX = 20
    64                              <1> ; 		    										;   do
    65                              <1> ; 		    										;   {
    66                              <1> ; .20L:	    mov		eax, [TIMER_COUNT]				;     EAX = TIMER_COUNT;
    67                              <1> ; .21L:	    cmp		[TIMER_COUNT], eax				;     while (TIMER_COUNT != EAX)
    68                              <1> ; 		    je		.21L							;       ;
    69                              <1> ; 		    loop	.20L							;   } while (--ECX);
    70                              <1> 
    71                              <1> ; 		    jmp		.10L							; }
    72                              <1> 
    73 00000C01 E977FFFFFF          <1>             jmp     .10L
    74                              <1> 
    75 00000C06 00<rept>            <1> ALIGN 4, db 0
    76 00000C08 E8030000            <1> .c1000:     dd  1000
    77 00000C0C B4000000            <1> .c180:      dd  180
    78                              <1> 
    79 00000C10 00<rept>            <1> .bcd:       times 10 db 0x00
    80                              <1> 
    81 00000C1A 5461736B2D3200      <1> .s0:        db   "Task-2", 0
    82 00000C21 2D                  <1> .s1:        db  "-"
    83 00000C22 302E                <1> .s2:        db  "0."
    84 00000C24 30303000            <1> .s3:        db  "000", 0
   188                                  %include    "tasks/task_3.s"
     1                              <1> ; fpu_rose_init:
     2                              <1> 
     3                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
     4                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     5                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1> ;             fldpi                               ;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     7                              <1> ;             fidiv   dword [.c180]               ;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     8                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
     9                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    10                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    11                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    12                              <1> ;                                                 ;        r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    14                              <1> ;             fild    dword [.n]                  ;        n |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    15                              <1> ;             fidiv   dword [.d]                  ;      n/d |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    16                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    18                              <1> ;                                                 ;        k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    19                              <1> ;             fild    dword [.A]                  ;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    20                              <1> 
    21                              <1> ; ALIGN 4, db 0
    22                              <1> ; .c1000:     dd  1000
    23                              <1> ; .c180:      dd  180
    24                              <1> 
    25                              <1> ; .n: dd 5
    26                              <1> ; .d: dd 3
    27                              <1> ; .A: dd 90
    28                              <1> 
    29                              <1> ;--------------------------------------------------------------------------------------------------------------
    30                              <1> ; PREPROCESSING
    31                              <1> 
    32                              <1> fpu_rose_init:
    33                              <1> 
    34                              <1>                                                 ;    +16 | d
    35                              <1>                                                 ;    +12 | n
    36                              <1>                                                 ; EBP+ 8 | A
    37 00000C28 55                  <1>             push    ebp
    38 00000C29 89E5                <1>             mov     ebp, esp
    39                              <1> 
    40 00000C2B 68B4000000          <1>             push    dword 180                   ;    - 4 | dword i = 180
    41                              <1> 
    42 00000C30 D9EB                <1>             fldpi
    43 00000C32 DA75FC              <1>             fidiv   dword [ebp -  4]
    44 00000C35 DB450C              <1>             fild    dword [ebp + 12]
    45 00000C38 DA7510              <1>             fidiv   dword [ebp + 16]
    46 00000C3B DB4508              <1>             fild    dword [ebp +  8]
    47                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    48                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    49                              <1>                                                 ;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    50                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    51                              <1> 
    52 00000C3E 89EC                <1>             mov     esp, ebp
    53 00000C40 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000C41 C3                  <1>             ret
    56                              <1> 
    57                              <1> fpu_rose_update:
    58                              <1> 
    59                              <1>             ; construct stack frame
    60                              <1>                                                 ;    +16 | t(angle)
    61                              <1>                                                 ;    +12 | Y(float)
    62                              <1>                                                 ; EBP+ 8 | X(float)
    63 00000C42 55                  <1>             push    ebp
    64 00000C43 89E5                <1>             mov     ebp, esp
    65                              <1> 
    66                              <1>             ; save registers
    67 00000C45 50                  <1>             push    eax
    68 00000C46 53                  <1>             push    ebx
    69                              <1> 
    70                              <1>             ; set save_dest of X/Y coordinate
    71 00000C47 8B4508              <1>             mov     eax, [ebp +  8]
    72 00000C4A 8B5D0C              <1>             mov     ebx, [ebp + 12]
    73                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    74                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    75 00000C4D DB4510              <1>             fild    dword [ebp + 16]            ;       t  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
    76 00000C50 D8CB                <1>             fmul    st0, st3                    ;      rt  |         |         |         |         |         |
    77 00000C52 D9C0                <1>             fld     st0                         ;      rt  |     rt  |      A  |      k  |      r  |xxxxxxxxx|
    78                              <1>                                                 ;   θ=(rt) |  θ=(rt) |      A  |      k  |      r  |xxxxxxxxx|
    79                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    80 00000C54 D9FB                <1>             fsincos                             ;   cos(θ) |  sin(θ) |      θ  |      A  |      k  |      r  |
    81                              <1> 
    82 00000C56 D9CA                <1>             fxch    st2                         ;       θ  |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    83 00000C58 D8CC                <1>             fmul    st0, st4                    ;      kθ  |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    84 00000C5A D9FE                <1>             fsin                                ;  sin(kθ) |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    85 00000C5C D8CB                <1>             fmul    st0, st3                    ; Asin(kθ) |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    86                              <1> 
    87 00000C5E D9CA                <1>             fxch    st2                         ;   cos(θ) |  sin(θ) | Asin(kθ)|      A  |      k  |      r  |
    88 00000C60 D8CA                <1>             fmul    st0, st2                    ;       X  |  sin(θ) | Asin(kθ)|      A  |      k  |      r  |
    89 00000C62 DB18                <1>             fistp   dword [eax]                 ;   sin(θ) | Asin(kθ)|      A  |      k  |      r  |xxxxxxxxx|
    90                              <1> 
    91 00000C64 DEC9                <1>             fmulp   st1, st0                    ;       Y  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
    92 00000C66 D9E0                <1>             fchs                                ;      -Y  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
    93 00000C68 DB1B                <1>             fistp   dword [ebx]                 ;       A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    94                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    95                              <1> 
    96                              <1>             ; return registers
    97 00000C6A 5B                  <1>             pop     ebx
    98 00000C6B 58                  <1>             pop     eax
    99                              <1> 
   100                              <1>             ; destruct stack frame
   101 00000C6C 89EC                <1>             mov     esp, ebp
   102 00000C6E 5D                  <1>             pop     ebp
   103                              <1> 
   104 00000C6F C3                  <1>             ret
   105                              <1> 
   106                              <1> task_3:
   107                              <1>             ; construct stack frame
   108 00000C70 89E5                <1>             mov     ebp, esp
   109                              <1> 
   110 00000C72 6A00                <1>             push    dword 0                     ; EBP- 4 | x0 = 0 // x coordinate origin
   111 00000C74 6A00                <1>             push    dword 0                     ;    - 8 | y0 = 0 // y coordinate origin
   112 00000C76 6A00                <1>             push    dword 0                     ;    -12 | x  = 0 // x coordinate drawing
   113 00000C78 6A00                <1>             push    dword 0                     ;    -16 | y  = 0 // y coordinate drawing
   114 00000C7A 6A00                <1>             push    dword 0                     ;    -20 | r  = 0 // angle
   115                              <1> 
   116                              <1>             ; initialization
   117 00000C7C BE[700D0000]        <1>             mov     esi, DRAW_PARAM
   118                              <1>             ; mov     esi, 0x0010_7000                    ; test page fault exception
   119                              <1> 
   120                              <1>             ; display title
   121 00000C81 8B06                <1>             mov     eax, [esi + rose.x0]
   122 00000C83 8B5E04              <1>             mov     ebx, [esi + rose.y0]
   123                              <1> 
   124 00000C86 C1E803              <1>             shr     eax, 3                              ; EAX /= 8    // convert x coordinate into char position
   125 00000C89 C1EB04              <1>             shr     ebx, 4                              ; EBX /= 16   // convert y coordinate into char position
   126 00000C8C 4B                  <1>             dec     ebx                                 ; move up one char
   127 00000C8D 8B4E24              <1>             mov     ecx, [esi + rose.color_s]           ; char color
   128 00000C90 8D5630              <1>             lea     edx, [esi + rose.title]
   129                              <1> 
   130 00000C93 52515350E8AD030000- <1>             cdecl   draw_str, eax, ebx, ecx, edx
   130 00000C9C 6683C410            <1>
   131                              <1> 
   132                              <1>             ; midpoint of X axis
   133 00000CA0 8B06                <1>             mov     eax, [esi + rose.x0]
   134 00000CA2 8B5E08              <1>             mov     ebx, [esi + rose.x1]
   135 00000CA5 29C3                <1>             sub     ebx, eax
   136 00000CA7 D1EB                <1>             shr     ebx, 1                              ; EBX /= 2
   137 00000CA9 01C3                <1>             add     ebx, eax
   138 00000CAB 895DFC              <1>             mov     [ebp - 4], ebx                      ; x0 = EBX // x coordinate origin
   139                              <1> 
   140                              <1>             ; midpoint of Y axis
   141 00000CAE 8B4604              <1>             mov     eax, [esi + rose.y0]
   142 00000CB1 8B5E0C              <1>             mov     ebx, [esi + rose.y1]
   143 00000CB4 29C3                <1>             sub     ebx, eax
   144 00000CB6 D1EB                <1>             shr     ebx, 1                              ; EBX /= 2
   145 00000CB8 01C3                <1>             add     ebx, eax
   146 00000CBA 895DF8              <1>             mov     [ebp - 8], ebx                      ; y0 = EBX // y coordinate origin
   147                              <1> 
   148                              <1>             ; draw X axis
   149 00000CBD 8B06                <1>             mov     eax, [esi + rose.x0]
   150 00000CBF 8B5DF8              <1>             mov     ebx, [ebp - 8]                      ; midpoint of y axis
   151 00000CC2 8B4E08              <1>             mov     ecx, [esi + rose.x1]
   152                              <1> 
   153 00000CC5 FF761853515350E8F9- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
   153 00000CCE 0400006683C414      <1>
   154                              <1> 
   155                              <1>             ; draw Y axis
   156 00000CD5 8B4604              <1>             mov     eax, [esi + rose.y0]
   157 00000CD8 8B5DFC              <1>             mov     ebx, [ebp - 4]                      ; midpoint of x axis
   158 00000CDB 8B4E0C              <1>             mov     ecx, [esi + rose.y1]
   159                              <1> 
   160 00000CDE FF761C51535053E8E0- <1>             cdecl   draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
   160 00000CE7 0400006683C414      <1>
   161                              <1> 
   162                              <1>             ; draw frame
   163 00000CEE 8B06                <1>             mov     eax, [esi + rose.x0]
   164 00000CF0 8B5E04              <1>             mov     ebx, [esi + rose.y0]
   165 00000CF3 8B4E08              <1>             mov     ecx, [esi + rose.x1]
   166 00000CF6 8B560C              <1>             mov     edx, [esi + rose.y1]
   167                              <1> 
   168 00000CF9 FF762052515350E874- <1>             cdecl   draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
   168 00000D02 0500006683C414      <1>
   169                              <1> 
   170                              <1>             ; Amplitude is about 95% of x axis
   171 00000D09 8B4608              <1>             mov     eax, [esi + rose.x1]
   172 00000D0C 2B06                <1>             sub     eax, [esi + rose.x0]
   173 00000D0E D1E8                <1>             shr     eax, 1                              ; EAX /= 2
   174 00000D10 89C3                <1>             mov     ebx, eax
   175 00000D12 C1EB04              <1>             shr     ebx, 4                              ; EAX /= 16
   176 00000D15 29D8                <1>             sub     eax, ebx
   177                              <1> 
   178                              <1>             ; initialize FPU (initialize rose curve)
   179 00000D17 FF7614FF761050E805- <1>             cdecl   fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
   179 00000D20 FFFFFF6683C40C      <1>
   180                              <1> 
   181                              <1> .10L:
   182                              <1> 
   183                              <1>             ; coordinate culculation
   184 00000D27 8D5DF4              <1>             lea     ebx, [ebp - 12]                     ; x
   185 00000D2A 8D4DF0              <1>             lea     ecx, [ebp - 16]                     ; y
   186 00000D2D 8B45EC              <1>             mov     eax, [ebp - 20]                     ; r
   187                              <1> 
   188 00000D30 505153E80AFFFFFF66- <1>             cdecl   fpu_rose_update, ebx, ecx, eax
   188 00000D39 83C40C              <1>
   189                              <1> 
   190                              <1>             ; update angle(r = r % 36000)
   191 00000D3C BA00000000          <1>             mov     edx, 0
   192 00000D41 40                  <1>             inc     eax
   193 00000D42 BBA08C0000          <1>             mov     ebx, 360 * 100
   194 00000D47 F7F3                <1>             div     ebx                                 ; EDX = EDX:EAX % EBX
   195 00000D49 8955EC              <1>             mov     [ebp - 20], edx
   196                              <1> 
   197                              <1>             ; draw dot
   198 00000D4C 8B4DF4              <1>             mov     ecx, [ebp - 12]                     ; x
   199 00000D4F 8B55F0              <1>             mov     edx, [ebp - 16]                     ; y
   200                              <1> 
   201 00000D52 034DFC              <1>             add     ecx, [ebp - 4]                      ; ECX += x coordinate origin
   202 00000D55 0355F8              <1>             add     edx, [ebp - 8]                      ; EDX += y coordinate origin
   203                              <1> 
   204 00000D58 8B5E28              <1>             mov     ebx, [esi + rose.color_f]           ; EBX = display color
   205 00000D5B CD82                <1>             int     0x82                                ; syscall_82(display color, x, y)
   206                              <1> 
   207                              <1>             ; wait
   208 00000D5D 6A02E8EC0A00006683- <1>             cdecl   wait_tick, 2
   208 00000D66 C404                <1>
   209                              <1> 
   210                              <1>             ; draw dot(erase)
   211 00000D68 8B5E2C              <1>             mov     ebx, [esi + rose.color_b]           ; EBX = background color
   212 00000D6B CD82                <1>             int     0x82                                ; syscall_82(display color, x, y)
   213                              <1> 
   214 00000D6D EBB8                <1>             jmp     .10L
   215                              <1> 
   216 00000D6F 00                  <1> ALIGN 4, db 0
   217                              <1> DRAW_PARAM:
   218                              <1> .t3:
   219                              <1>     istruc  rose
   220 00000D70 20000000            <1>         at  rose.x0,            dd          32          ; upper left coordinate : X0
   221 00000D74 20000000            <1>         at  rose.y0,            dd          32          ; upper left coordinate : Y0
   222 00000D78 D0000000            <1>         at  rose.x1,            dd         208          ; lower right coordinate : X1
   223 00000D7C D0000000            <1>         at  rose.y1,            dd         208          ; lower right coordinate : Y1
   224                              <1> 
   225 00000D80 02000000            <1>         at  rose.n,             dd           2          ; variable : n
   226 00000D84 01000000            <1>         at  rose.d,             dd           1          ; variable : d
   227                              <1> 
   228 00000D88 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   229 00000D8C 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   230 00000D90 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   231 00000D94 0F030000            <1>         at  rose.color_s,       dd         0x030F       ; display color : char
   232 00000D98 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   233 00000D9C 03000000            <1>         at  rose.color_b,       dd         0x0003       ; display color : graph erase color
   234                              <1> 
   235 00000DA0 5461736B2D3300      <1>         at  rose.title,         db         "Task-3", 0  ; title
   236 00000DA7 00<rept>            <1>     iend
   237                              <1> 
   238                              <1> .t4:
   239                              <1>     istruc  rose
   240 00000DB0 F8000000            <1>         at  rose.x0,            dd         248          ; upper left coordinate : X0
   241 00000DB4 20000000            <1>         at  rose.y0,            dd          32          ; upper left coordinate : Y0
   242 00000DB8 A0010000            <1>         at  rose.x1,            dd         416          ; lower right coordinate : X1
   243 00000DBC D0000000            <1>         at  rose.y1,            dd         208          ; lower right coordinate : Y1
   244                              <1> 
   245 00000DC0 02000000            <1>         at  rose.n,             dd           2          ; variable : n
   246 00000DC4 01000000            <1>         at  rose.d,             dd           1          ; variable : d
   247                              <1> 
   248 00000DC8 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   249 00000DCC 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   250 00000DD0 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   251 00000DD4 0F040000            <1>         at  rose.color_s,       dd         0x040F       ; display color : char
   252 00000DD8 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   253 00000DDC 04000000            <1>         at  rose.color_b,       dd         0x0004       ; display color : graph erase color
   254                              <1> 
   255 00000DE0 5461736B2D3400      <1>         at  rose.title,         db         "Task-4", 0  ; title
   256 00000DE7 00<rept>            <1>     iend
   257                              <1> 
   258                              <1> .t5:
   259                              <1>     istruc  rose
   260 00000DF0 20000000            <1>         at  rose.x0,            dd          32          ; upper left coordinate : X0
   261 00000DF4 10010000            <1>         at  rose.y0,            dd         272          ; upper left coordinate : Y0
   262 00000DF8 D0000000            <1>         at  rose.x1,            dd         208          ; lower right coordinate : X1
   263 00000DFC C0010000            <1>         at  rose.y1,            dd         448          ; lower right coordinate : Y1
   264                              <1> 
   265 00000E00 02000000            <1>         at  rose.n,             dd           2          ; variable : n
   266 00000E04 06000000            <1>         at  rose.d,             dd           6          ; variable : d
   267                              <1> 
   268 00000E08 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   269 00000E0C 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   270 00000E10 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   271 00000E14 0F050000            <1>         at  rose.color_s,       dd         0x050F       ; display color : char
   272 00000E18 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   273 00000E1C 05000000            <1>         at  rose.color_b,       dd         0x0005       ; display color : graph erase color
   274                              <1> 
   275 00000E20 5461736B2D3500      <1>         at  rose.title,         db         "Task-5", 0  ; title
   276 00000E27 00<rept>            <1>     iend
   277                              <1> 
   278                              <1> .t6:
   279                              <1>     istruc  rose
   280 00000E30 F8000000            <1>         at  rose.x0,            dd         248          ; upper left coordinate : X0
   281 00000E34 10010000            <1>         at  rose.y0,            dd         272          ; upper left coordinate : Y0
   282 00000E38 A8010000            <1>         at  rose.x1,            dd         424          ; lower right coordinate : X1
   283 00000E3C C0010000            <1>         at  rose.y1,            dd         448          ; lower right coordinate : Y1
   284                              <1> 
   285 00000E40 04000000            <1>         at  rose.n,             dd           4          ; variable : n
   286 00000E44 06000000            <1>         at  rose.d,             dd           6          ; variable : d
   287                              <1> 
   288 00000E48 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   289 00000E4C 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   290 00000E50 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   291 00000E54 0F060000            <1>         at  rose.color_s,       dd         0x060F       ; display color : char
   292 00000E58 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   293 00000E5C 06000000            <1>         at  rose.color_b,       dd         0x0006       ; display color : graph erase color
   294                              <1> 
   295 00000E60 5461736B2D3600      <1>         at  rose.title,         db         "Task-6", 0  ; title
   296 00000E67 00<rept>            <1>     iend
   189                                  
   190                                  
   191                                  ; MODULES
   192                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000E70 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 00000E71 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 00000E73 50                  <1>             push    eax
    10 00000E74 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 00000E75 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 00000E78 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 00000E7B B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 00000E7D 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 00000E81 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 00000E83 5A                  <1>             pop     edx
    21 00000E84 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 00000E85 89EC                <1>             mov     esp, ebp
    25 00000E87 5D                  <1>             pop     ebp
    26                              <1> 
    27 00000E88 C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 00000E89 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 00000E8A 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 00000E8C 50                  <1>             push    eax
    38 00000E8D 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 00000E8E 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 00000E91 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000E94 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 00000E96 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 00000E9A 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 00000E9C 5A                  <1>             pop     edx
    49 00000E9D 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 00000E9E 89EC                <1>             mov     esp, ebp
    53 00000EA0 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000EA1 C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 00000EA2 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 00000EA3 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 00000EA5 50                  <1>             push    eax
    66 00000EA6 53                  <1>             push    ebx
    67 00000EA7 51                  <1>             push    ecx
    68 00000EA8 52                  <1>             push    edx
    69 00000EA9 56                  <1>             push    esi
    70 00000EAA 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 00000EAB 8B7508              <1>             mov     esi, [ebp + 8]
    74 00000EAE 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 00000EB1 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 00000EB5 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 00000EB9 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 00000EBB 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 00000EBE FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 00000EC0 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 00000EC2 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 00000EC5 FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 00000EC7 FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 00000EC8 B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 00000ECD AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 00000ECE 88C4                <1>             mov     ah, al
    96 00000ED0 F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 00000ED2 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 00000ED4 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 00000EDA 7404                <1>             jz      .11F                                    ; {
   104 00000EDC 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 00000EDE EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 00000EE0 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 00000EE2 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 00000EE4 8807                <1>             mov     [edi], al
   116                              <1> 
   117 00000EE6 83C750              <1>             add     edi, 80
   118 00000EE9 E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 00000EEB 5F                  <1>             pop     edi
   123 00000EEC 5E                  <1>             pop     esi
   124 00000EED 5A                  <1>             pop     edx
   125 00000EEE 59                  <1>             pop     ecx
   126 00000EEF 5B                  <1>             pop     ebx
   127 00000EF0 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 00000EF1 89EC                <1>             mov     esp, ebp
   131 00000EF3 5D                  <1>             pop     ebp
   132                              <1> 
   133 00000EF4 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 00000EF5 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 00000EF6 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 00000EF8 50                  <1>             push    eax
   144 00000EF9 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 00000EFA 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 00000EFB 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 00000EFE 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 00000F02 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 00000F06 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 00000F08 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 00000F0B FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 00000F0D 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 00000F10 88C4                <1>             mov     ah, al
   163 00000F12 F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 00000F14 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 00000F16 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 00000F18 08E0                <1>             or      al, ah
   169 00000F1A 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 00000F1C 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 00000F1D 5B                  <1>             pop     ebx
   177 00000F1E 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 00000F1F 89EC                <1>             mov     esp, ebp
   181 00000F21 5D                  <1>             pop     ebp
   182                              <1> 
   183 00000F22 C3                  <1>             ret
   193                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 00000F23 55                  <1>             push    ebp                                         ;   +16 | color
     5 00000F24 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 00000F26 50                  <1>             push    eax
    10 00000F27 53                  <1>             push    ebx
    11 00000F28 51                  <1>             push    ecx
    12 00000F29 52                  <1>             push    edx
    13 00000F2A 56                  <1>             push    esi
    14 00000F2B 57                  <1>             push    edi
    15                              <1> 
    16                              <1> %ifdef      USE_TEST_AND_SET
    17 00000F2C 68[00100000]E86D08- <1>             cdecl   test_and_set, IN_USE                        ; TEST_AND_SET(IN_USE) // waiting for resource to be available
    17 00000F34 00006683C404        <1>
    18                              <1> %endif
    19                              <1> 
    20                              <1>             ; set copy_target font address
    21 00000F3A 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    22 00000F3E C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    23 00000F41 0335[A0020000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    24                              <1> 
    25                              <1>             ; get copy_dest VRAM address
    26                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    27                              <1>             ; y:row, x:column
    28                              <1> 
    29 00000F47 8B7D0C              <1>             mov     edi, [ebp + 12]
    30 00000F4A C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    31 00000F4D 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    32 00000F54 037D08              <1>             add     edi, [ebp + 8]
    33                              <1> 
    34                              <1>             ; output a char of font
    35 00000F57 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    36                              <1> 
    37 00000F5B 6A03E80EFFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    37 00000F64 C404                <1>
    38 00000F66 6A08E81CFFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    38 00000F6F C404                <1>
    39 00000F71 536A085756E827FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    39 00000F7A FF6683C410          <1>
    40                              <1> 
    41 00000F7F 6A02E8EAFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    41 00000F88 C404                <1>
    42 00000F8A 6A04E8F8FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    42 00000F93 C404                <1>
    43 00000F95 536A045756E803FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    43 00000F9E FF6683C410          <1>
    44                              <1> 
    45 00000FA3 6A01E8C6FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    45 00000FAC C404                <1>
    46 00000FAE 6A02E8D4FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    46 00000FB7 C404                <1>
    47 00000FB9 536A025756E8DFFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    47 00000FC2 FF6683C410          <1>
    48                              <1> 
    49 00000FC7 6A00E8A2FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    49 00000FD0 C404                <1>
    50 00000FD2 6A01E8B0FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    50 00000FDB C404                <1>
    51 00000FDD 536A015756E8BBFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    51 00000FE6 FF6683C410          <1>
    52                              <1> 
    53                              <1> %ifdef      USE_TEST_AND_SET
    54                              <1> 
    55 00000FEB C705[00100000]0000- <1>             mov     [IN_USE], dword 0                           ; clear global variable
    55 00000FF3 0000                <1>
    56                              <1> %endif
    57                              <1> 
    58                              <1>             ; return registers
    59 00000FF5 5F                  <1>             pop		edi
    60 00000FF6 5E                  <1> 		    pop		esi
    61 00000FF7 5A                  <1> 		    pop		edx
    62 00000FF8 59                  <1> 		    pop		ecx
    63 00000FF9 5B                  <1> 		    pop		ebx
    64 00000FFA 58                  <1> 		    pop		eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 00000FFB 89EC                <1>             mov     esp, ebp
    68 00000FFD 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000FFE C3                  <1>             ret
    71                              <1> 
    72                              <1> %ifdef      USE_TEST_AND_SET
    73 00000FFF 00                  <1> ALIGN 4, db 0
    74 00001000 00000000            <1> IN_USE: dd 0
    75                              <1> %endif
   194                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00001004 55                  <1>             push    ebp                                         ;   +12 | row
     5 00001005 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00001007 50                  <1>             push    eax
     9 00001008 53                  <1>             push    ebx
    10 00001009 51                  <1>             push    ecx
    11 0000100A 52                  <1>             push    edx
    12 0000100B 56                  <1>             push    esi
    13 0000100C 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 0000100D 8B7508              <1>             mov     esi, [ebp + 8]
    17 00001010 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 00001013 B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 00001018 81F900010000        <1> .10L:       cmp     ecx, 256
    22 0000101E 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 00001020 89C8                <1>             mov     eax, ecx
    26 00001022 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 00001025 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 00001027 89CB                <1>             mov     ebx, ecx
    31 00001029 C1EB04              <1>             shr     ebx, 4
    32 0000102C 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 0000102E 516A075350E8EBFEFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 00001037 FF6683C410          <1>
    35                              <1> 
    36 0000103C 41                  <1>             inc     ecx
    37 0000103D EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 0000103F 5F                  <1>             pop     edi
    42 00001040 5E                  <1>             pop     esi
    43 00001041 5A                  <1>             pop     edx
    44 00001042 59                  <1>             pop     ecx
    45 00001043 5B                  <1>             pop     ebx
    46 00001044 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 00001045 89EC                <1>             mov     esp, ebp
    50 00001047 5D                  <1>             pop     ebp
    51                              <1> 
    52 00001048 C3                  <1>             ret
   195                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00001049 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 0000104A 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 0000104C 50                  <1>             push    eax
    11 0000104D 53                  <1>             push    ebx
    12 0000104E 51                  <1>             push    ecx
    13 0000104F 52                  <1>             push    edx
    14 00001050 56                  <1>             push    esi
    15 00001051 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00001052 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 00001055 8B550C              <1>             mov     edx, [ebp + 12]
    20 00001058 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 0000105C 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 0000105F FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 00001060 AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 00001061 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 00001063 741A                <1>             je      .10E
    29                              <1> 
    30                              <1> %ifdef      USE_SYSTEM_CALL
    31 00001065 CD81                <1>             int     0x81                                        ; sys_call(1, x, y, color, char)
    32                              <1> %else
    33                              <1>             cdecl   draw_char, ecx, edx, ebx, eax
    34                              <1> %endif
    35 00001067 41                  <1>             inc     ecx
    36 00001068 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    37 0000106B 7C10                <1>             jl      .12E                                        ; {
    38 0000106D B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    39 00001072 42                  <1>             inc     edx                                         ;   EDX++;
    40 00001073 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    41 00001076 7C05                <1>             jl      .12E                                        ;   {
    42 00001078 BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    43                              <1>                                                                 ;   }
    44                              <1> .12E:                                                           ; }
    45 0000107D EBE1                <1>             jmp     .10L
    46                              <1> .10E:
    47                              <1> 
    48                              <1>             ; return registers
    49 0000107F 5F                  <1>             pop     edi
    50 00001080 5E                  <1>             pop     esi
    51 00001081 5A                  <1>             pop     edx
    52 00001082 59                  <1>             pop     ecx
    53 00001083 5B                  <1>             pop     ebx
    54 00001084 58                  <1>             pop     eax
    55                              <1> 
    56                              <1>             ; destruct stack frame
    57 00001085 89EC                <1>             mov     esp, ebp
    58 00001087 5D                  <1>             pop     ebp
    59                              <1> 
    60 00001088 C3                  <1>             ret
   196                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00001089 55                  <1>             push    ebp                                             ;   +12 | row
     5 0000108A 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 0000108C 50                  <1>             push    eax
     9 0000108D 53                  <1>             push    ebx
    10 0000108E 51                  <1>             push    ecx
    11 0000108F 52                  <1>             push    edx
    12 00001090 56                  <1>             push    esi
    13 00001091 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00001092 8B7508              <1>             mov     esi, [ebp + 8]
    17 00001095 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 00001098 B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 0000109D 83F910              <1> .10L:       cmp     ecx, 16
    22 000010A0 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 000010A2 89C8                <1>             mov     eax, ecx
    26 000010A4 83E001              <1>             and     eax, 0x01
    27 000010A7 C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 000010AA 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 000010AC 89CB                <1>             mov     ebx, ecx
    32 000010AE D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 000010B0 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 000010B2 89CA                <1>             mov     edx, ecx
    37 000010B4 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 000010B6 8B92[E3100000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 000010BC 68[DA100000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 000010C4 E880FFFFFF6683C410  <1>
    41                              <1> 
    42 000010CD 41                  <1>             inc     ecx
    43 000010CE EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 000010D0 5F                  <1>             pop     edi
    48 000010D1 5E                  <1>             pop     esi
    49 000010D2 5A                  <1>             pop     edx
    50 000010D3 59                  <1>             pop     ecx
    51 000010D4 5B                  <1>             pop     ebx
    52 000010D5 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 000010D6 89E5                <1>             mov     ebp, esp
    56 000010D8 5D                  <1>             pop     ebp
    57                              <1> 
    58 000010D9 C3                  <1>             ret
    59                              <1> 
    60 000010DA 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 000010E3 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 000010E7 00010009            <1>             dw  0x0100, 0x0900
    64 000010EB 0002000A            <1>             dw  0x0200, 0x0A00
    65 000010EF 0003000B            <1>             dw  0x0300, 0x0B00
    66 000010F3 0004000C            <1>             dw  0x0400, 0x0C00
    67 000010F7 0005000D            <1>             dw  0x0500, 0x0D00
    68 000010FB 0006000E            <1>             dw  0x0600, 0x0E00
    69 000010FF 0007000F            <1>             dw  0x0700, 0x0F00
   197                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 00001103 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 00001104 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 00001106 50                  <1>             push    eax
     9 00001107 53                  <1>             push    ebx
    10 00001108 51                  <1>             push    ecx
    11 00001109 52                  <1>             push    edx
    12 0000110A 56                  <1>             push    esi
    13 0000110B 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 0000110C 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 0000110F C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 00001112 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 00001119 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 0000111C 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 0000111E C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 00001121 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 00001123 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 00001126 BB80000000          <1>             mov     ebx, 0x80
    35 0000112B D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 0000112D 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 00001130 6A03E839FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 00001139 C404                <1>
    43 0000113B 6A08E847FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 00001144 C404                <1>
    44 00001146 516A085753E8A5FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 0000114F FF6683C410          <1>
    45                              <1> 
    46 00001154 6A02E815FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 0000115D C404                <1>
    47 0000115F 6A04E823FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 00001168 C404                <1>
    48 0000116A 516A045753E881FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 00001173 FF6683C410          <1>
    49                              <1> 
    50 00001178 6A01E8F1FCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 00001181 C404                <1>
    51 00001183 6A02E8FFFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 0000118C C404                <1>
    52 0000118E 516A025753E85DFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 00001197 FF6683C410          <1>
    53                              <1> 
    54 0000119C 6A00E8CDFCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 000011A5 C404                <1>
    55 000011A7 6A01E8DBFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 000011B0 C404                <1>
    56 000011B2 516A015753E839FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 000011BB FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 000011C0 5F                  <1>             pop     edi
    60 000011C1 5E                  <1>             pop     esi
    61 000011C2 5A                  <1>             pop     edx
    62 000011C3 59                  <1>             pop     ecx
    63 000011C4 5B                  <1>             pop     ebx
    64 000011C5 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 000011C6 89EC                <1>             mov     esp, ebp
    68 000011C8 5D                  <1>             pop     ebp
    69                              <1> 
    70 000011C9 C3                  <1>             ret
   198                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 000011CA 55                  <1>             push    ebp
    22 000011CB 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 000011CD 6A00                <1>             push    dword 0
    25 000011CF 6A00                <1>             push    dword 0
    26 000011D1 6A00                <1>             push    dword 0
    27 000011D3 6A00                <1>             push    dword 0
    28 000011D5 6A00                <1>             push    dword 0
    29 000011D7 6A00                <1>             push    dword 0
    30 000011D9 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 000011DB 50                  <1>             push    eax
    34 000011DC 53                  <1>             push    ebx
    35 000011DD 51                  <1>             push    ecx
    36 000011DE 52                  <1>             push    edx
    37 000011DF 56                  <1>             push    esi
    38 000011E0 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 000011E1 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 000011E4 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 000011E7 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 000011E9 7D09                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 000011EB F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 000011ED BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 000011F2 EB05                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    50 000011F4 BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 000011F9 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 000011FC 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 000011FF 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 00001201 7D09                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 00001203 F7DA                <1>             neg     edx                                             ;   height *= -1
    60 00001205 BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 0000120A EB05                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    63 0000120C BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 00001211 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 00001214 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 00001217 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 0000121A 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 0000121D 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 00001220 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 00001223 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 00001225 7F08                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 00001227 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 0000122A 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 0000122D EB06                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    93                              <1>                                                                     ;   // y axis is base one.
    94 0000122F 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 00001232 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 00001235 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 00001238 83F900              <1>             cmp     ecx, 0
   101 0000123B 7505                <1>             jnz     .30E
   102 0000123D B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   107                              <1> 
   108                              <1> %ifdef      USE_SYSTEM_CALL
   109 00001242 89C8                <1>             mov     eax, ecx
   110                              <1> 
   111 00001244 8B5D18              <1>             mov     ebx, [ebp + 24]
   112 00001247 8B4DF8              <1>             mov     ecx, [ebp -  8]
   113 0000124A 8B55EC              <1>             mov     edx, [ebp - 20]
   114 0000124D CD82                <1>             int     0x82
   115                              <1> 
   116 0000124F 89C1                <1>             mov     ecx, eax
   117                              <1> %else
   120                              <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   121                              <1> %endif
   122                              <1>             ; update base axis(1 dot)
   123 00001251 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   124 00001254 0106                <1>             add     [esi - 0], eax
   125                              <1> 
   126                              <1>             ; update relative axis
   127 00001256 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   128 00001259 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   129                              <1> 
   130 0000125C 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   131                              <1> 
   132 0000125F 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   133 00001261 7C07                <1>             jl      .52E                                            ; {
   134 00001263 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   135                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   136 00001265 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   137 00001268 011F                <1>             add     [edi - 0], ebx
   138                              <1> .52E:                                                               ; }
   139                              <1> 
   140 0000126A 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   141                              <1> 
   142 0000126D E2D3                <1>             loop    .50L
   143                              <1> .50E:
   144                              <1> 
   145                              <1>             ; return registers
   146 0000126F 5F                  <1>             pop     edi
   147 00001270 5E                  <1>             pop     esi
   148 00001271 5A                  <1>             pop     edx
   149 00001272 59                  <1>             pop     ecx
   150 00001273 5B                  <1>             pop     ebx
   151 00001274 58                  <1>             pop     eax
   152                              <1> 
   153                              <1>             ; destruct stack frame
   154 00001275 89EC                <1>             mov     esp, ebp
   155 00001277 5D                  <1>             pop     ebp
   156                              <1> 
   157 00001278 C3                  <1>             ret
   199                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 00001279 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 0000127A 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 0000127C 50                  <1>             push    eax
    11 0000127D 53                  <1>             push    ebx
    12 0000127E 51                  <1>             push    ecx
    13 0000127F 52                  <1>             push    edx
    14 00001280 56                  <1>             push    esi
    15 00001281 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00001282 8B4508              <1>             mov     eax, [ebp +  8]
    19 00001285 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 00001288 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 0000128B 8B5514              <1>             mov     edx, [ebp + 20]
    22 0000128E 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 00001291 39C8                <1>             cmp     eax, ecx
    26 00001293 7C01                <1>             jl      .10E
    27 00001295 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    29 00001296 39D3                <1>             cmp     ebx, edx
    30 00001298 7C02                <1>             jl      .20E
    31 0000129A 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    33                              <1> 
    34                              <1>             ; draw rectangle
    35 0000129C 5653515350E824FFFF- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35 000012A5 FF6683C414          <1>
    36 000012AA 5652505350E816FFFF- <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36 000012B3 FF6683C414          <1>
    37                              <1> 
    38 000012B8 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39 000012B9 5652515250E807FFFF- <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39 000012C2 FF6683C414          <1>
    40 000012C7 42                  <1>             inc     edx
    41                              <1> 
    42 000012C8 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43 000012C9 5652515351E8F7FEFF- <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43 000012D2 FF6683C414          <1>
    44                              <1> 
    45                              <1>             ; return registers
    46 000012D7 5F                  <1>             pop     edi
    47 000012D8 5E                  <1>             pop     esi
    48 000012D9 5A                  <1>             pop     edx
    49 000012DA 59                  <1>             pop     ecx
    50 000012DB 5B                  <1>             pop     ebx
    51 000012DC 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 000012DD 89EC                <1>             mov     esp, ebp
    55 000012DF 5D                  <1>             pop     ebp
    56                              <1> 
    57 000012E0 C3                  <1>             ret
   200                                  %include    "../modules/protect/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 000012E1 55                  <1>         push    ebp
     6 000012E2 89E5                <1>         mov     ebp, esp                                ;   +24|flag
     7                              <1>                                                         ;   +20|radix
     8                              <1>                                                         ;   +16|dest buffer size
     9                              <1>                                                         ;   +12|dest buffer address
    10                              <1>                                                         ;   + 8|the value to be converted
    11                              <1>                                                         ;   + 4|Instruction Pointer
    12                              <1>                                                         ;EBP+ 0|EBP
    13                              <1>         ; save registers
    14                              <1> 
    15 000012E4 50                  <1>         push    eax
    16 000012E5 53                  <1>         push    ebx
    17 000012E6 51                  <1>         push    ecx
    18 000012E7 52                  <1>         push    edx
    19 000012E8 56                  <1>         push    esi
    20 000012E9 57                  <1>         push    edi
    21                              <1> 
    22                              <1>         ; get args
    23                              <1> 
    24 000012EA 8B4508              <1>         mov     eax, [ebp +  8]                         ; val = value
    25 000012ED 8B750C              <1>         mov     esi, [ebp + 12]                         ; dest= buffer address
    26 000012F0 8B4D10              <1>         mov     ecx, [ebp + 16]                         ; size= remaining buffer size
    27                              <1> 
    28 000012F3 89F7                <1>         mov     edi, esi                                ; end of buffer
    29 000012F5 01CF                <1>         add     edi, ecx                                ; dest = &dest[esize - 1]
    30 000012F7 4F                  <1>         dec     edi
    31                              <1> 
    32 000012F8 8B5D18              <1>         mov     ebx, [ebp + 24]
    33                              <1> 
    34                              <1>         ; signing judge
    35                              <1> 
    36 000012FB F7C301000000        <1>         test    ebx, 0b0001                             ; if (flags & 0x01) //if signed => ZF = 0
    37 00001301 7408                <1> .10Q    je      .10E                                    ; {                 //if not ZF = 1 so => jmp
    38 00001303 83F800              <1>         cmp     eax, 0                                  ;   if (val < 0)    //CF = 1, ZF = 0
    39 00001306 7D03                <1> .12Q    jge     .12E                                    ;   {
    40 00001308 83CB02              <1>         or      ebx, 0b0010                             ;       flags |= 2; //set B1
    41                              <1>                                                         ; }}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ; sign output judge
    46                              <1> 
    47 0000130B F7C302000000        <1>         test    ebx, 0b0010
    48 00001311 7410                <1> .20Q    je      .20E
    49 00001313 83F800              <1>         cmp     eax, 0
    50 00001316 7D07                <1> .22Q    jge     .22F
    51 00001318 F7D8                <1>         neg     eax                                     ; sign reverse
    52 0000131A C6062D              <1>         mov     [esi], byte '-'                         ; sign display
    53 0000131D EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 0000131F C6062B              <1>         mov     [esi], byte '+'
    56                              <1> .22E:
    57 00001322 49                  <1>         dec     ecx                                     ; subtract remaining buffer size -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ; ASCII conversion
    61                              <1> 
    62 00001323 8B5D14              <1>         mov     ebx, [ebp + 20]                          ; ebx = radix
    63                              <1> 
    64                              <1> .30L:                                                   ; do{
    65 00001326 BA00000000          <1>         mov     edx, 0
    66 0000132B F7F3                <1>         div     ebx                                    ;   edx = edx:eax % ebx;
    67                              <1>                                                         ;   eax = edx:eax / ebx;
    68                              <1> 
    69 0000132D 89D6                <1>         mov     esi, edx                                ;   //refer to coversion table
    70 0000132F 8A96[5A130000]      <1>         mov     dl, byte [.ascii + esi]                 ;   DL = ASCII[edx];
    71                              <1> 
    72 00001335 8817                <1>         mov     [edi], dl                               ;   *dest = DL;
    73 00001337 4F                  <1>         dec     edi                                     ;   dest--;
    74                              <1> 
    75 00001338 83F800              <1>         cmp     eax, 0
    76 0000133B E0E9                <1>         loopnz  .30L                                    ; } while(eax);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ; padding (zero / blank)
    81                              <1> 
    82 0000133D 83F900              <1>         cmp     ecx, 0                                  ; if (esize)
    83 00001340 740E                <1> .40Q:   je      .40E                                    ; {
    84 00001342 B020                <1>         mov     al, ' '                                 ;   AL = ' '; // padding with blanks
    85 00001344 66837D1804          <1>         cmp     [ebp + 24], word 0b0100                  ;   if (flags & 0x04)
    86 00001349 7502                <1> .42Q:   jne     .42E                                    ;   {
    87 0000134B B030                <1>         mov     al, '0'                                 ;       AL = '0'; // padding with zero
    88                              <1> .42E:                                                   ;   }
    89 0000134D FD                  <1>         std                                             ;   // DF = 1(dec)
    90 0000134E F3AA                <1>         rep stosb                                       ;   while (--ecx) * edi-- = ' ';
    91                              <1> .40E:                                                   ; }
    92                              <1> 
    93                              <1>         ; return registers
    94                              <1> 
    95 00001350 5F                  <1>         pop     edi
    96 00001351 5E                  <1>         pop     esi
    97 00001352 5A                  <1>         pop     edx
    98 00001353 59                  <1>         pop     ecx
    99 00001354 5B                  <1>         pop     ebx
   100 00001355 58                  <1>         pop     eax
   101                              <1> 
   102                              <1>         ; destruct stack frame
   103                              <1> 
   104 00001356 89EC                <1>         mov     esp, ebp
   105 00001358 5D                  <1>         pop     ebp
   106                              <1> 
   107 00001359 C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 0000135A 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                      ; conversion table
   110 00001363 39414243444546      <1>
   201                                  %include    "../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000136A 55                  <1>             push    ebp                                     ; EBP+8 | destination
     5 0000136B 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 0000136D 50                  <1>             push    eax
     9 0000136E 53                  <1>             push    ebx
    10                              <1> 
    11                              <1> ; // Avoid conflicts between RTC data updates and
    12                              <1> ; // on-chip RAM access by confirming UIP bit on Register A
    13                              <1> 
    14 0000136F B00A                <1>             mov     al, 0x0A                                ; register A
    15 00001371 E670                <1>             out     0x70, al
    16 00001373 E471                <1>             in      al, 0x71                                ; al = register A
    17 00001375 A880                <1>             test    al, 0x80                                ; if (UIP) // updating
    18 00001377 7407                <1>             je      .10F                                    ; {
    19 00001379 B801000000          <1>             mov     eax, 1                                  ;   return = 1;
    20 0000137E EB27                <1>             jmp     .10E                                    ; }
    21                              <1> .10F:                                                       ; else
    22                              <1>                                                             ; {        // get time process
    23                              <1> 
    24                              <1>             ; main process
    25 00001380 B004                <1>             mov     al, 0x04                                ;   hour
    26 00001382 E670                <1>             out     0x70, al
    27 00001384 E471                <1>             in      al, 0x71
    28                              <1> 
    29 00001386 C1E008              <1>             shl     eax, 8
    30                              <1> 
    31 00001389 B002                <1>             mov     al, 0x02                                ;   minute
    32 0000138B E670                <1>             out     0x70, al
    33 0000138D E471                <1>             in      al, 0x71
    34                              <1> 
    35 0000138F C1E008              <1>             shl     eax, 8
    36                              <1> 
    37 00001392 B000                <1>             mov     al, 0x00                                ;   second
    38 00001394 E670                <1>             out     0x70, al
    39 00001396 E471                <1>             in      al, 0x71
    40                              <1> 
    41 00001398 25FFFFFF00          <1>             and     eax, 0x00_FF_FF_FF                      ;   all data are in lower 3 bytes of eax register
    42                              <1> 
    43 0000139D 8B5D08              <1>             mov     ebx, [ebp + 8]
    44 000013A0 8903                <1>             mov     [ebx], eax                              ;   [dest] = real time
    45                              <1> 
    46 000013A2 B800000000          <1>             mov     eax, 0                                  ;   return = 0;
    47                              <1> .10E:                                                       ; }
    48                              <1> 
    49                              <1>             ; return register
    50 000013A7 5B                  <1>             pop     ebx
    51 000013A8 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 000013A9 89EC                <1>             mov     esp, ebp
    55 000013AB 5D                  <1>             pop     ebp
    56                              <1> 
    57 000013AC C3                  <1>             ret
   202                                  %include    "../modules/protect/draw_time.s"
     1                              <1> draw_time:
     2                              <1> 
     3                              <1>             ; construct stack frame                         ;   +20 | time data
     4 000013AD 55                  <1>             push    ebp                                     ;   +16 | display color
     5 000013AE 89E5                <1>             mov     ebp, esp                                ;   +12 | row
     6                              <1>                                                             ;EBP+ 8 | col
     7                              <1> 
     8                              <1>             ; save registers
     9 000013B0 50                  <1>             push    eax
    10 000013B1 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; get arg
    13 000013B2 8B4514              <1>             mov     eax, [ebp + 20]
    14                              <1> 
    15 000013B5 0FB6D8              <1>             movzx   ebx, al                                 ; ebx = second
    16 000013B8 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .sec, 2, 16, 0b0100
    16 000013BF [1F140000]53E818FF- <1>
    16 000013C7 FFFF6683C414        <1>
    17                              <1> 
    18 000013CD 88E3                <1>             mov     bl, ah                                  ; ebx = min
    19 000013CF 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .min, 2, 16, 0b0100
    19 000013D6 [1C140000]53E801FF- <1>
    19 000013DE FFFF6683C414        <1>
    20                              <1> 
    21 000013E4 C1E810              <1>             shr     eax, 16                                 ; ax = hour
    22 000013E7 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .hour, 2, 16, 0b0100
    22 000013EE [19140000]50E8E9FE- <1>
    22 000013F6 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>             ; display time
    25 000013FC 68[19140000]FF7510- <1>             cdecl   draw_str, dword [ebp + 8], dword [ebp + 12], dword [ebp + 16], .hour
    25 00001404 FF750CFF7508E83AFC- <1>
    25 0000140D FFFF6683C410        <1>
    26                              <1> 
    27                              <1>             ; return registers
    28 00001413 5B                  <1>             pop     ebx
    29 00001414 58                  <1>             pop     eax
    30                              <1> 
    31                              <1>             ; destruct stack frame
    32 00001415 89EC                <1>             mov     esp, ebp
    33 00001417 5D                  <1>             pop     ebp
    34                              <1> 
    35 00001418 C3                  <1>             ret
    36                              <1> 
    37 00001419 5A5A3A              <1> .hour:  db  "ZZ:"
    38 0000141C 5A5A3A              <1> .min:  db  "ZZ:"
    39 0000141F 5A5A00              <1> .sec:  db  "ZZ", 0
   203                                  %include    "../modules/protect/interrupt.s"
     1                              <1> ; Initialize vector of IDTR
     2                              <1> 
     3 00001422 90<rept>            <1> ALIGN 4
     4 00001424 FF07                <1> IDTR:       dw      8 * 256 - 1                                     ; limit of IDT
     5 00001426 00001000            <1>             dd      VECT_BASE                                       ; base address of IDT
     6                              <1> 
     7                              <1> ; Initialize IDT
     8                              <1> 
     9                              <1> init_int:
    10                              <1> 
    11                              <1>             ; save registers
    12 0000142A 50                  <1>             push    eax
    13 0000142B 53                  <1>             push    ebx
    14 0000142C 51                  <1>             push    ecx
    15 0000142D 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; define Interrupt Gate Descriptor and apply default process to them
    18                              <1> 
    19 0000142E 8D05[74150000]      <1>             lea     eax, [int_default]                              ; EAX = the address of interrupt process
    20 00001434 BB008E0800          <1>             mov     ebx, 0x0008_8E00                                ; EBX = segment selector & P,DPL,DT,TYPE
    21 00001439 6693                <1>             xchg    ax, bx                                          ; exchange lower word
    22                              <1> 
    23 0000143B B900010000          <1>             mov     ecx, 256                                        ; num of Interrupt Gate Descriptor
    24 00001440 BF00001000          <1>             mov     edi, VECT_BASE                                  ; base address of Interrupt Descriptor Table
    25                              <1> 
    26                              <1> .10L:
    27 00001445 891F                <1>             mov     [edi + 0], ebx                                  ; interrupt descriptor(lower)
    28 00001447 894704              <1>             mov     [edi + 4], eax                                  ; interrupt descriptor(upper)
    29 0000144A 83C708              <1>             add     edi, 8                                          ; EDI += 8 byte
    30 0000144D E2F6                <1>             loop    .10L
    31                              <1> 
    32                              <1>             ; set up Interrupt Descriptor
    33 0000144F 0F011D[24140000]    <1>             lidt    [IDTR]
    34                              <1> 
    35                              <1>             ; return registers
    36 00001456 5F                  <1>             pop     edi
    37 00001457 59                  <1>             pop     ecx
    38 00001458 5B                  <1>             pop     ebx
    39 00001459 58                  <1>             pop     eax
    40                              <1> 
    41 0000145A C3                  <1>             ret
    42                              <1> 
    43                              <1> int_stop:
    44                              <1> 
    45 0000145B FB                  <1>             sti                                                     ; interrupt enable
    46                              <1> 
    47                              <1>             ; display the string indicated in EAX
    48 0000145C 50680F0600006A0F6A- <1>             cdecl   draw_str, 25, 15, 0x060F, eax
    48 00001465 19E8DEFBFFFF6683C4- <1>
    48 0000146E 10                  <1>
    49                              <1> 
    50                              <1>             ; convert stack data into string
    51 0000146F 8B0424              <1>             mov     eax, [esp + 0]                                  ; EIP
    52 00001472 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p1, 8, 16, 0b0100
    52 00001479 [37150000]50E85EFE- <1>
    52 00001481 FFFF6683C414        <1>
    53                              <1> 
    54 00001487 8B442404            <1>             mov     eax, [esp + 4]                                  ; CS
    55 0000148B 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p2, 8, 16, 0b0100
    55 00001492 [48150000]50E845FE- <1>
    55 0000149A FFFF6683C414        <1>
    56                              <1> 
    57 000014A0 8B442408            <1>             mov     eax, [esp + 8]                                  ; EFLAGS
    58 000014A4 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p3, 8, 16, 0b0100
    58 000014AB [59150000]50E82CFE- <1>
    58 000014B3 FFFF6683C414        <1>
    59                              <1> 
    60 000014B9 8B44240C            <1>             mov     eax, [esp + 12]
    61 000014BD 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p4, 8, 16, 0b0100
    61 000014C4 [6A150000]50E813FE- <1>
    61 000014CC FFFF6683C414        <1>
    62                              <1> 
    63                              <1>             ; display string
    64 000014D2 68[30150000]68040F- <1>             cdecl   draw_str, 25, 16, 0x0F04, .s1
    64 000014DA 00006A106A19E864FB- <1>
    64 000014E3 FFFF6683C410        <1>
    65 000014E9 68[41150000]68040F- <1>             cdecl   draw_str, 25, 17, 0x0F04, .s2
    65 000014F1 00006A116A19E84DFB- <1>
    65 000014FA FFFF6683C410        <1>
    66 00001500 68[52150000]68040F- <1>             cdecl   draw_str, 25, 18, 0x0F04, .s3
    66 00001508 00006A126A19E836FB- <1>
    66 00001511 FFFF6683C410        <1>
    67 00001517 68[63150000]68040F- <1>             cdecl   draw_str, 25, 19, 0x0F04, .s4
    67 0000151F 00006A136A19E81FFB- <1>
    67 00001528 FFFF6683C410        <1>
    68                              <1> 
    69                              <1>             ; infinite loop
    70 0000152E EBFE                <1>             jmp     $
    71                              <1> 
    72 00001530 4553502B20303A      <1> .s1         db  "ESP+ 0:"
    73 00001537 5F5F5F5F5F5F5F5F20- <1> .p1         db  "________ ", 0
    73 00001540 00                  <1>
    74 00001541 2020202B20343A      <1> .s2         db  "   + 4:"
    75 00001548 5F5F5F5F5F5F5F5F20- <1> .p2         db  "________ ", 0
    75 00001551 00                  <1>
    76 00001552 2020202B20383A      <1> .s3         db  "   + 8:"
    77 00001559 5F5F5F5F5F5F5F5F20- <1> .p3         db  "________ ", 0
    77 00001562 00                  <1>
    78 00001563 2020202B31323A      <1> .s4         db  "   +12:"
    79 0000156A 5F5F5F5F5F5F5F5F20- <1> .p4         db  "________ ", 0
    79 00001573 00                  <1>
    80                              <1> 
    81                              <1> int_default:
    82 00001574 9C                  <1>             pushf                                                   ; EFLAGS
    83 00001575 0E                  <1>             push    cs                                              ; CS
    84 00001576 68[5B140000]        <1>             push    int_stop                                        ; the process of displaying stack
    85                              <1> 
    86 0000157B B8[81150000]        <1>             mov     eax, .s0                                        ; interrupt type
    87 00001580 CF                  <1>             iret
    88                              <1> 
    89 00001581 203C2020202053544F- <1> .s0         db  " <    STOP    > ", 0
    89 0000158A 50202020203E2000    <1>
    90                              <1> 
    91                              <1> int_zero_div:
    92 00001592 9C                  <1>             pushf                                                   ; EFLAGS
    93 00001593 0E                  <1>             push    cs                                              ; CS
    94 00001594 68[5B140000]        <1>             push    int_stop                                        ; the process of displaying stack
    95                              <1> 
    96 00001599 B8[9F150000]        <1>             mov     eax, .s0                                        ; interrupt type
    97 0000159E CF                  <1>             iret
    98                              <1> 
    99 0000159F 203C20205A45524F20- <1> .s0         db  " <  ZERO DIV  > ", 0
    99 000015A8 44495620203E2000    <1>
   100                              <1> 
   101                              <1> 
   204                                  %include    "../modules/protect/pic.s"
     1                              <1> init_pic:
     2                              <1> 
     3                              <1>             ; save register
     4 000015B0 50                  <1>             push    eax
     5                              <1> 
     6                              <1>             ; set up Master PIC
     7                              <1>             outp    0x20, 0x11                              ; MASTER.ICW1 = 0x11
     7 000015B1 B011                <2>  mov al, %2
     7 000015B3 E620                <2>  out %1, al
     8                              <1>             outp    0x21, 0x20                              ; MASTER.ICW2 = 0x20 // interrupt vector
     8 000015B5 B020                <2>  mov al, %2
     8 000015B7 E621                <2>  out %1, al
     9                              <1>             outp    0x21, 0x04                              ; MASTER.ICW3 = 0x04 // slave connection position : IRQ2
     9 000015B9 B004                <2>  mov al, %2
     9 000015BB E621                <2>  out %1, al
    10                              <1>             outp    0x21, 0x05                              ; MASTER.ICW4 = 0x05
    10 000015BD B005                <2>  mov al, %2
    10 000015BF E621                <2>  out %1, al
    11                              <1>             outp    0x21, 0xFF                              ; master interrupt mask
    11 000015C1 B0FF                <2>  mov al, %2
    11 000015C3 E621                <2>  out %1, al
    12                              <1> 
    13                              <1>             ; set up Slave
    14                              <1>             outp    0xA0, 0x11                              ; SLAVE.ICW1 = 0x11
    14 000015C5 B011                <2>  mov al, %2
    14 000015C7 E6A0                <2>  out %1, al
    15                              <1>             outp    0xA1, 0x28                              ; SLAVE.ICW2 = 0x28 // interrupt vector
    15 000015C9 B028                <2>  mov al, %2
    15 000015CB E6A1                <2>  out %1, al
    16                              <1>             outp    0xA1, 0x02                              ; SLAVE.ICW3 = 0x02 // slave ID = 2
    16 000015CD B002                <2>  mov al, %2
    16 000015CF E6A1                <2>  out %1, al
    17                              <1>             outp    0xA1, 0x01                              ; SLAVE.ICW4 = 0x01
    17 000015D1 B001                <2>  mov al, %2
    17 000015D3 E6A1                <2>  out %1, al
    18                              <1>             outp    0xA1, 0xFF                              ; slave interrupt mask
    18 000015D5 B0FF                <2>  mov al, %2
    18 000015D7 E6A1                <2>  out %1, al
    19                              <1> 
    20                              <1>             ; return regisiter
    21 000015D9 58                  <1>             pop     eax
    22                              <1> 
    23 000015DA C3                  <1>             ret
   205                                  %include    "../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2                              <1> 
     3                              <1>             ; save registers
     4 000015DB 60                  <1>             pusha
     5 000015DC 1E                  <1>             push    ds
     6 000015DD 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 000015DE 66B81000            <1>             mov     ax, 0x0010                                      ; offset from the beginnig of GDT // second element
    10 000015E2 8ED8                <1>             mov     ds, ax
    11 000015E4 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; get time from RTC
    14 000015E6 68[A4020000]E87AFD- <1>             cdecl   rtc_get_time, RTC_TIME
    14 000015EE FFFF6683C404        <1>
    15                              <1> 
    16                              <1>             ; get RTC interrupt factor
    17                              <1>             outp    0x70, 0x0C                                      ; select register C
    17 000015F4 B00C                <2>  mov al, %2
    17 000015F6 E670                <2>  out %1, al
    18 000015F8 E471                <1>             in      al, 0x71
    19                              <1> 
    20                              <1>             ; clear interrupt flag
    21 000015FA B020                <1>             mov     al, 0x20                                        ; AL = EOI command
    22 000015FC E6A0                <1>             out     0xA0, al                                        ; slave PIC
    23 000015FE E620                <1>             out     0x20, al                                        ; master PIC
    24                              <1> 
    25                              <1>             ; return register
    26 00001600 07                  <1>             pop     es
    27 00001601 1F                  <1>             pop     ds
    28 00001602 61                  <1>             popa
    29                              <1> 
    30 00001603 CF                  <1>             iret                                                    ; end of interrupt process
    31                              <1>                                                                     ; return including flag register => iret
    32                              <1> 
    33                              <1> ; Enable interrupt by RTC itself
    34                              <1> 
    35                              <1> rtc_int_en:
    36                              <1> 
    37                              <1>             ; construct stack frame
    38 00001604 55                  <1>             push    ebp
    39 00001605 89E5                <1>             mov     ebp, esp                                        ;EBP+8 | enable bit
    40                              <1> 
    41                              <1>             ; save register
    42 00001607 50                  <1>             push    eax
    43                              <1> 
    44                              <1>             ; set up Interrupt Permission
    45                              <1>             outp    0x70, 0x0B                                      ; select register B
    45 00001608 B00B                <2>  mov al, %2
    45 0000160A E670                <2>  out %1, al
    46                              <1> 
    47 0000160C E471                <1>             in      al, 0x71
    48 0000160E 0A4508              <1>             or      al, [ebp + 8]                                   ; set the specified bit
    49                              <1> 
    50 00001611 E671                <1>             out     0x71, al                                        ; write down to register B
    51                              <1> 
    52                              <1>             ; return register
    53 00001613 58                  <1>             pop     eax
    54                              <1> 
    55                              <1>             ; destruct stack frame
    56 00001614 89EC                <1>             mov     esp, ebp
    57 00001616 5D                  <1>             pop     ebp
    58                              <1> 
    59 00001617 C3                  <1>             ret
   206                                  %include    "../modules/protect/ring_buff.s"
     1                              <1> ring_rd:
     2                              <1> 
     3                              <1>             ; construct stack frame                                     ;    +12 | save_dest address
     4 00001618 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
     5 00001619 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 0000161B 50                  <1>             push    eax
     9 0000161C 53                  <1>             push    ebx
    10 0000161D 56                  <1>             push    esi
    11 0000161E 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; get args
    14 0000161F 8B7508              <1>             mov     esi, [ebp +  8]
    15 00001622 8B7D0C              <1>             mov     edi, [ebp + 12]
    16                              <1> 
    17                              <1>             ; confirm the reading location
    18 00001625 B800000000          <1>             mov     eax, 0                                              ; EAX = 0 // no data
    19 0000162A 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = rp
    20 0000162C 3B5E04              <1>             cmp     ebx, [esi + ring_buff.wp]                           ; if (EBX != wp)
    21 0000162F 7411                <1>             je      .10E                                                ; {
    22                              <1> 
    23 00001631 8A441E08            <1>             mov     al, [esi + ring_buff.item + ebx]                    ;   AL = BUFFER[rp] // store key code(unit:byte)
    24                              <1> 
    25 00001635 8807                <1>             mov     [edi], al                                           ;   [EDI] = AL      // save data
    26                              <1> 
    27 00001637 43                  <1>             inc     ebx                                                 ;   EBX++           // next reading location
    28 00001638 83E30F              <1>             and     ebx, RING_INDEX_MASK                                ;   EBX &= 0x0F     // limit size
    29 0000163B 891E                <1>             mov     [esi + ring_buff.rp], ebx                           ;   rp = EBX        // save the reading location
    30                              <1> 
    31 0000163D B801000000          <1>             mov     eax, 1                                              ;   EAX = 1         // data exists
    32                              <1> .10E:                                                                   ; }
    33                              <1> 
    34                              <1>             ; return registers
    35 00001642 5F                  <1>             pop     edi
    36 00001643 5E                  <1>             pop     esi
    37 00001644 5B                  <1>             pop     ebx
    38 00001645 58                  <1>             pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 00001646 89EC                <1>             mov     esp, ebp
    42 00001648 5D                  <1>             pop     ebp
    43                              <1> 
    44 00001649 C3                  <1>             ret
    45                              <1> 
    46                              <1> ring_wr:
    47                              <1> 
    48                              <1>             ; construct stack frame                                     ;    +12 | data to write
    49 0000164A 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
    50 0000164B 89E5                <1>             mov     ebp, esp
    51                              <1> 
    52                              <1>             ; save registers
    53 0000164D 50                  <1>             push    eax
    54 0000164E 53                  <1>             push    ebx
    55 0000164F 51                  <1>             push    ecx
    56 00001650 56                  <1>             push    esi
    57 00001651 57                  <1>             push    edi
    58                              <1> 
    59                              <1>             ; get args
    60 00001652 8B7508              <1>             mov     esi, [ebp + 8]
    61                              <1> 
    62                              <1>             ; confirm the writing location
    63 00001655 B800000000          <1>             mov     eax, 0
    64 0000165A 8B5E04              <1>             mov     ebx, [esi + ring_buff.wp]                           ; writing position
    65 0000165D 89D9                <1>             mov     ecx, ebx
    66 0000165F 41                  <1>             inc     ecx                                                 ; next writing location
    67 00001660 83E10F              <1>             and     ecx, RING_INDEX_MASK                                ; size limit
    68                              <1> 
    69 00001663 3B0E                <1>             cmp     ecx, [esi + ring_buff.rp]                           ; if (ECX != rp)
    70 00001665 740F                <1>             je      .10E                                                ; {
    71                              <1> 
    72 00001667 8A450C              <1>             mov     al, [ebp + 12]                                      ;   AL = data
    73                              <1> 
    74 0000166A 88441E08            <1>             mov     [esi + ring_buff.item + ebx], al                    ;   BUFFER[wp] = AL // save key code
    75 0000166E 894E04              <1>             mov     [esi + ring_buff.wp], ecx                           ;   wp = ECX        // save the writing location
    76 00001671 B801000000          <1>             mov     eax, 1
    77                              <1> .10E:
    78                              <1> 
    79                              <1>             ; return registers
    80 00001676 5F                  <1>             pop     edi
    81 00001677 5E                  <1>             pop     esi
    82 00001678 59                  <1>             pop     ecx
    83 00001679 5B                  <1>             pop     ebx
    84 0000167A 58                  <1>             pop     eax
    85                              <1> 
    86                              <1>             ; destruct stack frame
    87 0000167B 89EC                <1>             mov     esp, ebp
    88 0000167D 5D                  <1>             pop     ebp
    89                              <1> 
    90 0000167E C3                  <1>             ret
    91                              <1> 
    92                              <1> draw_key:
    93                              <1> 
    94                              <1>             ; construct stack frame                                     ;    +16 | ring buffer
    95 0000167F 55                  <1>             push    ebp                                                 ;    +12 | row
    96 00001680 89E5                <1>             mov     ebp, esp                                            ; EBP+ 8 | col
    97                              <1> 
    98                              <1>             ; save registers
    99 00001682 60                  <1>             pusha                                                       ; save EAX,EBX,ECX,EDX,EDI,ESI,EBP,ESP
   100                              <1> 
   101                              <1>             ; get args
   102 00001683 8B5508              <1>             mov     edx, [ebp +  8]
   103 00001686 8B7D0C              <1>             mov     edi, [ebp + 12]
   104 00001689 8B7510              <1>             mov     esi, [ebp + 16]
   105                              <1> 
   106                              <1>             ; get ring buffer info
   107 0000168C 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = wp // writing location
   108 0000168E 8D7608              <1>             lea     esi, [esi + ring_buff.item]
   109 00001691 B910000000          <1>             mov     ecx, RING_ITEM_SIZE
   110                              <1> 
   111                              <1>             ; display data
   112                              <1> .10L:
   113                              <1> 
   114 00001696 4B                  <1>             dec     ebx                                                 ; EBX-- == where data exists
   115 00001697 83E30F              <1>             and     ebx, RING_INDEX_MASK
   116 0000169A 8A041E              <1>             mov     al, [esi + ebx]                                     ; EAX = KEY_BUFF[EBX]
   117                              <1> 
   118 0000169D 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .tmp, 2, 16, 0b0100
   118 000016A4 [CE160000]50E833FC- <1>
   118 000016AC FFFF6683C414        <1>
   119 000016B2 68[CE160000]6A0257- <1>             cdecl   draw_str, edx, edi, 0x02, .tmp
   119 000016BA 52E889F9FFFF6683C4- <1>
   119 000016C3 10                  <1>
   120                              <1> 
   121 000016C4 83C203              <1>             add     edx, 3                                              ; updata display position(3 chars)
   122                              <1> 
   123 000016C7 E2CD                <1>             loop    .10L
   124                              <1> .10E:
   125                              <1> 
   126                              <1>             ; return registers
   127 000016C9 61                  <1>             popa
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 000016CA 89EC                <1>             mov     esp, ebp
   131 000016CC 5D                  <1>             pop     ebp
   132                              <1> 
   133 000016CD C3                  <1>             ret
   134                              <1> 
   135 000016CE 2D2D2000            <1> .tmp        db "-- ", 0
   207                                  %include    "../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1> 
     3                              <1>             ; save registers
     4 000016D2 60                  <1>             pusha
     5 000016D3 1E                  <1>             push    ds
     6 000016D4 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment for data
     9 000016D5 66B81000            <1>             mov     ax, 0x0010
    10 000016D9 8ED8                <1>             mov     ds, ax
    11 000016DB 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; read buffer of KBC
    14 000016DD E460                <1>             in      al, 0x60                                    ; AL = get key code
    15                              <1> 
    16                              <1>             ; save key code
    17 000016DF 5068[F8160000]E860- <1>             cdecl   ring_wr, _KEY_BUFF, eax
    17 000016E7 FFFFFF6683C408      <1>
    18                              <1> 
    19                              <1>             ; send interrupt end command
    20                              <1>             outp    0x20, 0x20                                  ; master PIC: EOI command
    20 000016EE B020                <2>  mov al, %2
    20 000016F0 E620                <2>  out %1, al
    21                              <1> 
    22                              <1>             ; return registers
    23 000016F2 07                  <1>             pop     es
    24 000016F3 1F                  <1>             pop     ds
    25 000016F4 61                  <1>             popa
    26                              <1> 
    27 000016F5 CF                  <1>             iret
    28                              <1> 
    29 000016F6 00<rept>            <1> ALIGN 4, db 0
    30 000016F8 00<rept>            <1> _KEY_BUFF:  times ring_buff_size db 0
   208                                  %include    "../modules/protect/timer.s"
     1                              <1> int_en_timer0:
     2                              <1> 
     3                              <1>             ; save register
     4 00001710 50                  <1>             push    eax                                     ; use eax register on outp
     5                              <1> 
     6                              <1>             outp    0x43, 0b_00_11_010_0                    ; counter 0|access way:lower/upper|mode 2|16 bit binary couner
     6 00001711 B034                <2>  mov al, %2
     6 00001713 E643                <2>  out %1, al
     7                              <1>             outp    0x40, 0x9C                              ; lower byte
     7 00001715 B09C                <2>  mov al, %2
     7 00001717 E640                <2>  out %1, al
     8                              <1>             outp    0x40, 0x2E                              ; upper byte
     8 00001719 B02E                <2>  mov al, %2
     8 0000171B E640                <2>  out %1, al
     9                              <1> 
    10                              <1>             ; return register
    11 0000171D 58                  <1>             pop     eax
    12                              <1> 
    13 0000171E C3                  <1>             ret
   209                                  %include    "../modules/protect/draw_rotation_bar.s"
     1                              <1> ;--------------------------------------------------------------------------------------------
     2                              <1> ;char update cycle
     3                              <1> ;=> The value obtained by reading the value of Timer interrupt counter
     4                              <1> ;   and shifting it to the right by 4 bits
     5                              <1> ;   and if the value is different from the previous value, it's the time to update.
     6                              <1> ;--------------------------------------------------------------------------------------------
     7                              <1> 
     8                              <1> draw_rotation_bar:
     9                              <1> 
    10                              <1>             ; save register
    11 0000171F 50                  <1>             push    eax
    12                              <1> 
    13                              <1>             ; main process
    14 00001720 A1[180B0000]        <1>             mov     eax, [TIMER_COUNT]
    15 00001725 C1E804              <1>             shr     eax, 4
    16 00001728 3B05[50170000]      <1>             cmp     eax, [.index]
    17 0000172E 741E                <1>             je      .10E
    18                              <1> 
    19 00001730 A3[50170000]        <1>             mov     [.index], eax
    20 00001735 83E003              <1>             and     eax, 0x03                                       ; limit to the range 0 to 3
    21                              <1> 
    22 00001738 8A80[54170000]      <1>             mov     al, [.table + eax]                              ; AL = table[index]
    23 0000173E 506A0F6A1D6A00E8D9- <1>             cdecl   draw_char, 0, 29, 0x000F, eax
    23 00001747 F7FFFF6683C410      <1>
    24                              <1> 
    25                              <1> .10E:
    26                              <1> 
    27                              <1>             ; return register
    28 0000174E 58                  <1>             pop     eax
    29                              <1> 
    30 0000174F C3                  <1>             ret
    31                              <1> 
    32                              <1> ALIGN 4, db 0
    33 00001750 00000000            <1> .index      dd 0                                                    ; previous value
    34 00001754 7C2F2D5C            <1> .table      db "|/-\"                                               ; display bar
   210                                  %include    "../modules/protect/call_gate.s"
     1                              <1> ;--------------------------------------------------
     2                              <1> ; This is a rapper of draw_str func.
     3                              <1> ;--------------------------------------------------
     4                              <1> 
     5                              <1> call_gate:
     6                              <1> 
     7                              <1>             ; construct stack frame
     8                              <1>                                                                     ;    +24 | char
     9                              <1>                                                                     ;    +20 | display color
    10                              <1>                                                                     ;    +16 | row
    11                              <1>                                                                     ;    +12 | column
    12                              <1>                                                                     ; EBP+ 8 | CS(code segment)
    13 00001758 55                  <1>             push    ebp
    14 00001759 89E5                <1>             mov     ebp, esp
    15                              <1> 
    16                              <1>             ; save registers
    17 0000175B 60                  <1>             pusha
    18 0000175C 1E                  <1>             push    ds
    19 0000175D 06                  <1>             push    es
    20                              <1> 
    21                              <1>             ; set up segment for data
    22 0000175E 66B81000            <1>             mov     ax, 0x0010
    23 00001762 8ED8                <1>             mov     ds, ax
    24 00001764 8EC0                <1>             mov     es, ax
    25                              <1> 
    26                              <1>             ; display string
    27 00001766 8B450C              <1>             mov     eax, dword [ebp + 12]
    28 00001769 8B5D10              <1>             mov     ebx, dword [ebp + 16]
    29 0000176C 8B4D14              <1>             mov     ecx, dword [ebp + 20]
    30 0000176F 8B5518              <1>             mov     edx, dword [ebp + 24]
    31 00001772 52515350E8CEF8FFFF- <1>             cdecl   draw_str, eax, ebx, ecx, edx
    31 0000177B 6683C410            <1>
    32                              <1> 
    33                              <1>             ; return registers
    34 0000177F 07                  <1>             pop     es
    35 00001780 1F                  <1>             pop     ds
    36 00001781 61                  <1>             popa
    37                              <1> 
    38                              <1>             ; destruct stack frame
    39 00001782 89EC                <1>             mov     esp, ebp
    40 00001784 5D                  <1>             pop     ebp
    41                              <1> 
    42 00001785 CA1000              <1>             retf    4 * 4                                                ; end func and adjust arguments
   211                                  %include    "../modules/protect/trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1> 
     3                              <1>             ; output a char
     4 00001788 50535251E892F7FFFF- <1>             cdecl   draw_char,  ecx, edx, ebx, eax
     4 00001791 6683C410            <1>
     5                              <1> 
     6 00001795 CF                  <1>             iret
     7                              <1> 
     8                              <1> trap_gate_82:
     9                              <1> 
    10                              <1>             ; draw pixel
    11 00001796 535251E865F9FFFF66- <1>             cdecl   draw_pixel, ecx, edx, ebx
    11 0000179F 83C40C              <1>
    12                              <1> 
    13 000017A2 CF                  <1>             iret
   212                                  %include    "../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                                     ; EBP+8 | address of global variable
     5 000017A3 55                  <1>             push    ebp
     6 000017A4 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 000017A6 50                  <1>             push    eax
    10 000017A7 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; test and set
    13 000017A8 B800000000          <1>             mov     eax, 0                                          ; local = 0
    14 000017AD 8B5D08              <1>             mov     ebx, [ebp + 8]                                  ; global = address
    15                              <1> 
    16                              <1> .10L:
    17 000017B0 F00FAB03            <1>             lock bts [ebx], eax                                     ; CF = TEST_AND_SET(IN_USE, 1)
    18 000017B4 7307                <1>             jnc     .10E                                            ; if(0 == CF)
    19                              <1>                                                                     ;   break;
    20                              <1> 
    21                              <1> .12L:
    22 000017B6 0FA303              <1>             bt      [ebx], eax                                      ; CF = TEST(IN_USE, 1)
    23 000017B9 72FB                <1>             jc      .12L                                            ; if(0 == CF)
    24                              <1>                                                                     ;   break;
    25 000017BB EBF3                <1>             jmp     .10L
    26                              <1> .10E:
    27                              <1> 
    28                              <1>             ; return registers
    29 000017BD 5B                  <1>             pop     ebx
    30 000017BE 58                  <1>             pop     eax
    31                              <1> 
    32                              <1>             ; destruct stakc frame
    33 000017BF 89EC                <1>             mov     esp, ebp
    34 000017C1 5D                  <1>             pop     ebp
    35                              <1> 
    36 000017C2 C3                  <1>             ret
   213                                  %include    "../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 
     3                              <1>             ; EBX == TSS selector
     4                              <1> 
     5 000017C3 8B83[92080000]      <1>             mov     eax, [GDT + ebx + 2]                            ; EAX = TSS[23:0]
     6 000017C9 C1E008              <1>             shl     eax, 8
     7 000017CC 8A83[97080000]      <1>             mov     al,  [GDT + ebx + 7]                            ; AL  = TSS[31:24]
     8 000017D2 C1C808              <1>             ror     eax, 8
     9                              <1> 
    10 000017D5 C3                  <1>             ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 
    14                              <1>             ; EAX == base address of TSS descriptor
    15                              <1> 
    16 000017D6 DD7068              <1>             fnsave  [eax + 104]                                     ; // save FPU context
    17 000017D9 C780D4000000010000- <1>             mov     [eax + 104 + 108], dword 1                      ; saved = 1 // a flag which shows FPU context is saved.
    17 000017E2 00                  <1>
    18                              <1> 
    19 000017E3 C3                  <1>             ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1> 
    23 000017E4 83B8D400000000      <1>             cmp     [eax + 104 + 108], dword 0                      ; if (0 == saved)
    24 000017EB 7504                <1>             jne     .10F
    25 000017ED DBE3                <1>             fninit                                                  ; initialize FPU
    26 000017EF EB03                <1>             jmp     .10E
    27                              <1> .10F:
    28 000017F1 DD6068              <1>             frstor  [eax + 104]                                     ; return FPU context
    29                              <1> .10E:
    30 000017F4 C3                  <1>             ret
    31                              <1> 
    32                              <1> int_nm:
    33                              <1> 
    34                              <1>             ; save registers
    35 000017F5 60                  <1>             pusha
    36 000017F6 1E                  <1>             push    ds
    37 000017F7 06                  <1>             push    es
    38                              <1> 
    39                              <1>             ; set up selector for Kernel
    40 000017F8 66B81000            <1>             mov     ax, DS_KERNEL
    41 000017FC 8ED8                <1>             mov     ds, ax
    42 000017FE 8EC0                <1>             mov     es, ax
    43                              <1> 
    44                              <1>             ; clear Task Switch flag
    45 00001800 0F06                <1>             clts                                                    ; CR0.TS = 0
    46                              <1>                                                                     ; // TS bit is gonna be set by CPU
    47                              <1>                                                                     ; // when Task Switching happend.
    48                              <1> 
    49                              <1>             ; get previous/this time task
    50 00001802 8B3D[4C180000]      <1>             mov     edi, [.last_tss]                                ; TSS of the task that last used FPU
    51 00001808 0F00CE              <1>             str     esi                                             ; TSS of the task using FPU this time
    52 0000180B 83E6F8              <1>             and     esi, ~0x0007                                    ; mask segment selector[2:0] // TI:RPL
    53                              <1> 
    54                              <1>             ; compare previous task with the one of this time
    55 0000180E 83FF00              <1>             cmp     edi, 0                                          ; if not exist previous task
    56 00001811 7420                <1>             je      .10F
    57                              <1> 
    58 00001813 39FE                <1>             cmp     esi, edi
    59 00001815 741A                <1>             je      .12E
    60                              <1> 
    61 00001817 FA                  <1>             cli                                                     ; disable interrupt
    62                              <1> 
    63                              <1>             ; save previous FPU context
    64 00001818 89FB                <1>             mov     ebx, edi
    65 0000181A E8A4FFFFFF          <1>             call    get_tss_base                                    ; get TSS address
    66 0000181F E8B2FFFFFF          <1>             call    save_fpu_context
    67                              <1> 
    68                              <1>             ; return FPU context of this time
    69 00001824 89F3                <1>             mov     ebx, esi
    70 00001826 E898FFFFFF          <1>             call    get_tss_base
    71 0000182B E8B4FFFFFF          <1>             call    load_fpu_context
    72                              <1> 
    73 00001830 FB                  <1>             sti                                                     ; enable interrupt
    74                              <1> 
    75                              <1> .12E:
    76 00001831 EB0E                <1>             jmp     .10E
    77                              <1> .10F:
    78                              <1> 
    79 00001833 FA                  <1>             cli                                                     ; disable interrupt
    80                              <1> 
    81                              <1>             ; return FPU context of this time
    82 00001834 89F3                <1>             mov     ebx, esi
    83 00001836 E888FFFFFF          <1>             call    get_tss_base
    84 0000183B E8A4FFFFFF          <1>             call    load_fpu_context
    85                              <1> 
    86 00001840 FB                  <1>             sti                                                     ; enable interrupt
    87                              <1> 
    88                              <1> .10E:
    89 00001841 8935[4C180000]      <1>             mov     [.last_tss], esi                                ; save task that used FPU
    90                              <1> 
    91                              <1>             ; return registers
    92 00001847 07                  <1>             pop     es
    93 00001848 1F                  <1>             pop     ds
    94 00001849 61                  <1>             popa
    95                              <1> 
    96 0000184A CF                  <1>             iret
    97                              <1> 
    98 0000184B 00                  <1> ALIGN 4, db 0
    99 0000184C 00000000            <1> .last_tss:  dd  0
   214                                  %include    "../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                             ; EBP +8 | waif == num of system interrupt
     5 00001850 55                  <1>             push    ebp
     6 00001851 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 00001853 50                  <1>             push    eax
    10 00001854 51                  <1>             push    ecx
    11                              <1> 
    12                              <1>             ; wait
    13 00001855 8B4D08              <1>             mov     ecx, [ebp + 8]
    14 00001858 A1[180B0000]        <1>             mov     eax, [TIMER_COUNT]
    15                              <1> 
    16                              <1> .10L:
    17 0000185D 3905[180B0000]      <1>             cmp     [TIMER_COUNT], eax                      ; while(TIMER != eax)
    18 00001863 74F8                <1>             je      .10L
    19 00001865 40                  <1>             inc     eax                                     ; eax++
    20 00001866 E2F5                <1>             loop    .10L                                    ; while(--ecx)
    21                              <1> 
    22                              <1>             ; return registers
    23 00001868 59                  <1>             pop     ecx
    24 00001869 58                  <1>             pop     eax
    25                              <1> 
    26                              <1>             ; destruct stakc frame
    27 0000186A 89EC                <1>             mov     esp, ebp
    28 0000186C 5D                  <1>             pop     ebp
    29                              <1> 
    30 0000186D C3                  <1>             ret
   215                                  %include    "../modules/protect/memcpy.s"
     1                              <1> memcpy:
     2                              <1> 
     3                              <1>         ; construct stack frame
     4                              <1> 
     5 0000186E 55                  <1>         push    ebp
     6 0000186F 89E5                <1>         mov     ebp, esp
     7                              <1> 
     8                              <1>         ; save registers
     9                              <1> 
    10 00001871 51                  <1>         push    ecx
    11 00001872 56                  <1>         push    esi
    12 00001873 57                  <1>         push    edi
    13                              <1> 
    14                              <1>         ; copy byte by byte
    15                              <1> 
    16 00001874 FC                  <1>         cld
    17 00001875 8B7D08              <1>         mov     edi, [ebp + 8]
    18 00001878 8B750C              <1>         mov     esi, [ebp + 12]
    19 0000187B 8B4D10              <1>         mov     ecx, [ebp + 16]
    20                              <1> 
    21 0000187E F3A4                <1>         rep movsb
    22                              <1> 
    23                              <1>         ; return registers
    24                              <1> 
    25 00001880 5F                  <1>         pop     edi
    26 00001881 5E                  <1>         pop     esi
    27 00001882 59                  <1>         pop     ecx
    28                              <1> 
    29                              <1>         ; destruct stack frame
    30                              <1> 
    31 00001883 89EC                <1>         mov     esp, ebp
    32 00001885 5D                  <1>         pop     ebp
    33                              <1> 
    34 00001886 C3                  <1>         ret
   216                                  
   217                                  
   218                                  ; PADDING
   219                                  
   220 00001887 00<rept>                            times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
