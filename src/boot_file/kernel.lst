     1                                  %define     USE_SYSTEM_CALL
     2                                  %define     USE_TEST_AND_SET
     3                                  
     4                                  ;macro
     5                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1>         SP_TASK_2       equ     STACK_BASE + (STACK_SIZE * 3)
    24                              <1>         SP_TASK_3       equ     STACK_BASE + (STACK_SIZE * 4)
    25                              <1> 
    26                              <1>         CR3_BASE        equ     0x0010_5000                     ; page conversion table: for task 3
     6                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
    56                              <1> 
    57                              <1> %macro  set_desc 2-*
    58                              <1>             push    eax
    59                              <1>             push    edi
    60                              <1> 
    61                              <1>             mov     edi, %1                             ; descriptor address
    62                              <1>             mov     eax, %2                             ; base address
    63                              <1> 
    64                              <1>         %if 3 == %0
    65                              <1>             mov     [edi + 0], %3                       ; limit
    66                              <1>         %endif
    67                              <1> 
    68                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 4], al                       ; base([23:16])
    71                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    72                              <1> 
    73                              <1>             pop     edi
    74                              <1>             pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate 2-*
    78                              <1>             push    eax
    79                              <1>             push    edi
    80                              <1> 
    81                              <1>             mov     edi, %1                             ; descriptor address
    82                              <1>             mov     eax, %2                             ; base address
    83                              <1> 
    84                              <1>             mov     [edi + 0], ax                       ; base([15:0])
    85                              <1>             shr     eax, 16
    86                              <1>             mov     [edi + 6], ax                       ; base([31:16])
    87                              <1> 
    88                              <1>             pop     edi
    89                              <1>             pop     eax
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> struc   rose
    93 00000000 <res 00000004>      <1>             .x0         resd    1                       ; upper left coordinate : X0
    94 00000004 <res 00000004>      <1>             .y0         resd    1                       ; upper left coordinate : Y0
    95 00000008 <res 00000004>      <1>             .x1         resd    1                       ; lower right coordinate : X1
    96 0000000C <res 00000004>      <1>             .y1         resd    1                       ; lower right coordinate : Y1
    97                              <1> 
    98 00000010 <res 00000004>      <1>             .n          resd    1                       ; variable:n
    99 00000014 <res 00000004>      <1>             .d          resd    1                       ; variable:d
   100                              <1> 
   101 00000018 <res 00000004>      <1>             .color_x    resd    1                       ; display color : X axis
   102 0000001C <res 00000004>      <1>             .color_y    resd    1                       ; display color : Y axis
   103 00000020 <res 00000004>      <1>             .color_z    resd    1                       ; display color : frame
   104 00000024 <res 00000004>      <1>             .color_s    resd    1                       ; display color : char
   105 00000028 <res 00000004>      <1>             .color_f    resd    1                       ; display color : graph display color
   106 0000002C <res 00000004>      <1>             .color_b    resd    1                       ; display color : graph erase color
   107                              <1> 
   108 00000030 <res 00000010>      <1>             .title      resb    16                      ; title
   109                              <1> endstruc
   110                              <1> 
   111                              <1> 
     7                                  
     8                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     9                                  
    10                                  [BITS 32]                                                       ; BIT 32 directive
    11                                  ; entry point
    12                                  
    13                                  kernel:
    14                                  
    15                                                  ; Get Font address
    16 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    17 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    18 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    19 0000000C C1E004                                  shl     eax, 4
    20 0000000F 01D8                                    add     eax, ebx
    21 00000011 A3[50020000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    22                                  
    23                                                  ; set up TSS descriptor
    24                                                  set_desc    GDT.tss_0, TSS_0
    24 00000016 50                  <1>  push eax
    24 00000017 57                  <1>  push edi
    24                              <1> 
    24 00000018 BF[D8050000]        <1>  mov edi, %1
    24 0000001D B8[58020000]        <1>  mov eax, %2
    24                              <1> 
    24                              <1>  %if 3 == %0
    24                              <1>  mov [edi + 0], %3
    24                              <1>  %endif
    24                              <1> 
    24 00000022 66894702            <1>  mov [edi + 2], ax
    24 00000026 C1E810              <1>  shr eax, 16
    24 00000029 884704              <1>  mov [edi + 4], al
    24 0000002C 886707              <1>  mov [edi + 7], ah
    24                              <1> 
    24 0000002F 5F                  <1>  pop edi
    24 00000030 58                  <1>  pop eax
    25                                                  set_desc    GDT.tss_1, TSS_1
    25 00000031 50                  <1>  push eax
    25 00000032 57                  <1>  push edi
    25                              <1> 
    25 00000033 BF[E0050000]        <1>  mov edi, %1
    25 00000038 B8[30030000]        <1>  mov eax, %2
    25                              <1> 
    25                              <1>  %if 3 == %0
    25                              <1>  mov [edi + 0], %3
    25                              <1>  %endif
    25                              <1> 
    25 0000003D 66894702            <1>  mov [edi + 2], ax
    25 00000041 C1E810              <1>  shr eax, 16
    25 00000044 884704              <1>  mov [edi + 4], al
    25 00000047 886707              <1>  mov [edi + 7], ah
    25                              <1> 
    25 0000004A 5F                  <1>  pop edi
    25 0000004B 58                  <1>  pop eax
    26                                                  set_desc    GDT.tss_2, TSS_2
    26 0000004C 50                  <1>  push eax
    26 0000004D 57                  <1>  push edi
    26                              <1> 
    26 0000004E BF[E8050000]        <1>  mov edi, %1
    26 00000053 B8[08040000]        <1>  mov eax, %2
    26                              <1> 
    26                              <1>  %if 3 == %0
    26                              <1>  mov [edi + 0], %3
    26                              <1>  %endif
    26                              <1> 
    26 00000058 66894702            <1>  mov [edi + 2], ax
    26 0000005C C1E810              <1>  shr eax, 16
    26 0000005F 884704              <1>  mov [edi + 4], al
    26 00000062 886707              <1>  mov [edi + 7], ah
    26                              <1> 
    26 00000065 5F                  <1>  pop edi
    26 00000066 58                  <1>  pop eax
    27                                                  set_desc    GDT.tss_3, TSS_3
    27 00000067 50                  <1>  push eax
    27 00000068 57                  <1>  push edi
    27                              <1> 
    27 00000069 BF[F0050000]        <1>  mov edi, %1
    27 0000006E B8[E0040000]        <1>  mov eax, %2
    27                              <1> 
    27                              <1>  %if 3 == %0
    27                              <1>  mov [edi + 0], %3
    27                              <1>  %endif
    27                              <1> 
    27 00000073 66894702            <1>  mov [edi + 2], ax
    27 00000077 C1E810              <1>  shr eax, 16
    27 0000007A 884704              <1>  mov [edi + 4], al
    27 0000007D 886707              <1>  mov [edi + 7], ah
    27                              <1> 
    27 00000080 5F                  <1>  pop edi
    27 00000081 58                  <1>  pop eax
    28                                  
    29                                  
    30                                                  ; set up Call Gate
    31                                                  set_gate    GDT.call_gate, call_gate
    31 00000082 50                  <1>  push eax
    31 00000083 57                  <1>  push edi
    31                              <1> 
    31 00000084 BF[F8050000]        <1>  mov edi, %1
    31 00000089 B8[DC120000]        <1>  mov eax, %2
    31                              <1> 
    31 0000008E 668907              <1>  mov [edi + 0], ax
    31 00000091 C1E810              <1>  shr eax, 16
    31 00000094 66894706            <1>  mov [edi + 6], ax
    31                              <1> 
    31 00000098 5F                  <1>  pop edi
    31 00000099 58                  <1>  pop eax
    32                                  
    33                                                  ; set up LDT
    34                                                  set_desc    GDT.ldt, LDT, word LDT_LIMIT        ; descriptor address/base address/limit
    34 0000009A 50                  <1>  push eax
    34 0000009B 57                  <1>  push edi
    34                              <1> 
    34 0000009C BF[D0050000]        <1>  mov edi, %1
    34 000000A1 B8[06060000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if 3 == %0
    34 000000A6 66C7074700          <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 000000AB 66894702            <1>  mov [edi + 2], ax
    34 000000AF C1E810              <1>  shr eax, 16
    34 000000B2 884704              <1>  mov [edi + 4], al
    34 000000B5 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 000000B8 5F                  <1>  pop edi
    34 000000B9 58                  <1>  pop eax
    35                                  
    36                                                  ; load GDTR (resetting)
    37 000000BA 0F0115[00060000]                        lgdt        [GDTR]
    38                                  
    39                                                  ; set up stack
    40 000000C1 BC00341000                              mov     esp, SP_TASK_0                          ; set up stack for Task0
    41                                  
    42                                                  ; recognize Kernel as Task0
    43 000000C6 66B82000                                mov     ax, SS_TASK_0
    44 000000CA 0F00D8                                  ltr     ax                                      ; initialize TR
    45                                  
    46                                                  ; initialize interrupt vector
    47 000000CD E8DC0E0000                              cdecl   init_int                                ; initialize Interrupt Descriptor Table
    48 000000D2 E85D100000                              cdecl   init_pic                                ; initialize Programmable Interrupt Controler
    49 000000D7 E8AC050000                              cdecl   init_page                               ; initialize Paging
    50                                  
    51                                                  set_vect    0x00, int_zero_div                  ; define interrupt process: Zero div
    51 000000DC 50                  <1>  push eax
    51 000000DD 57                  <1>  push edi
    51                              <1> 
    51 000000DE BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    51 000000E3 B8[16110000]        <1>  mov eax, %2
    51                              <1> 
    51                              <1>  %if 3 == %0
    51                              <1>  mov [edi + 4], %3
    51                              <1>  %endif
    51                              <1> 
    51 000000E8 668907              <1>  mov [edi + 0], ax
    51 000000EB C1E810              <1>  shr eax, 16
    51 000000EE 66894706            <1>  mov [edi + 6], ax
    51                              <1> 
    51 000000F2 5F                  <1>  pop edi
    51 000000F3 58                  <1>  pop eax
    52                                                  set_vect    0x07, int_nm                        ; define interrupt process: device unavailable exception
    52 000000F4 50                  <1>  push eax
    52 000000F5 57                  <1>  push edi
    52                              <1> 
    52 000000F6 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    52 000000FB B8[79130000]        <1>  mov eax, %2
    52                              <1> 
    52                              <1>  %if 3 == %0
    52                              <1>  mov [edi + 4], %3
    52                              <1>  %endif
    52                              <1> 
    52 00000100 668907              <1>  mov [edi + 0], ax
    52 00000103 C1E810              <1>  shr eax, 16
    52 00000106 66894706            <1>  mov [edi + 6], ax
    52                              <1> 
    52 0000010A 5F                  <1>  pop edi
    52 0000010B 58                  <1>  pop eax
    53                                                  set_vect    0x0E, int_pf                        ; define interrupt process; page fault
    53 0000010C 50                  <1>  push eax
    53 0000010D 57                  <1>  push edi
    53                              <1> 
    53 0000010E BF70001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    53 00000113 B8[A3060000]        <1>  mov eax, %2
    53                              <1> 
    53                              <1>  %if 3 == %0
    53                              <1>  mov [edi + 4], %3
    53                              <1>  %endif
    53                              <1> 
    53 00000118 668907              <1>  mov [edi + 0], ax
    53 0000011B C1E810              <1>  shr eax, 16
    53 0000011E 66894706            <1>  mov [edi + 6], ax
    53                              <1> 
    53 00000122 5F                  <1>  pop edi
    53 00000123 58                  <1>  pop eax
    54                                                  set_vect    0x20, int_timer                     ; define interrupt process: Timer
    54 00000124 50                  <1>  push eax
    54 00000125 57                  <1>  push edi
    54                              <1> 
    54 00000126 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    54 0000012B B8[09070000]        <1>  mov eax, %2
    54                              <1> 
    54                              <1>  %if 3 == %0
    54                              <1>  mov [edi + 4], %3
    54                              <1>  %endif
    54                              <1> 
    54 00000130 668907              <1>  mov [edi + 0], ax
    54 00000133 C1E810              <1>  shr eax, 16
    54 00000136 66894706            <1>  mov [edi + 6], ax
    54                              <1> 
    54 0000013A 5F                  <1>  pop edi
    54 0000013B 58                  <1>  pop eax
    55                                                  set_vect    0x21, int_keyboard                  ; define interrupt process: KBC
    55 0000013C 50                  <1>  push eax
    55 0000013D 57                  <1>  push edi
    55                              <1> 
    55 0000013E BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    55 00000143 B8[56120000]        <1>  mov eax, %2
    55                              <1> 
    55                              <1>  %if 3 == %0
    55                              <1>  mov [edi + 4], %3
    55                              <1>  %endif
    55                              <1> 
    55 00000148 668907              <1>  mov [edi + 0], ax
    55 0000014B C1E810              <1>  shr eax, 16
    55 0000014E 66894706            <1>  mov [edi + 6], ax
    55                              <1> 
    55 00000152 5F                  <1>  pop edi
    55 00000153 58                  <1>  pop eax
    56                                                  set_vect    0x28, int_rtc                       ; define interrupt process: RTC
    56 00000154 50                  <1>  push eax
    56 00000155 57                  <1>  push edi
    56                              <1> 
    56 00000156 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    56 0000015B B8[5F110000]        <1>  mov eax, %2
    56                              <1> 
    56                              <1>  %if 3 == %0
    56                              <1>  mov [edi + 4], %3
    56                              <1>  %endif
    56                              <1> 
    56 00000160 668907              <1>  mov [edi + 0], ax
    56 00000163 C1E810              <1>  shr eax, 16
    56 00000166 66894706            <1>  mov [edi + 6], ax
    56                              <1> 
    56 0000016A 5F                  <1>  pop edi
    56 0000016B 58                  <1>  pop eax
    57                                                  set_vect    0x81, trap_gate_81, word 0xEF00     ; define trap gate        : display a char
    57 0000016C 50                  <1>  push eax
    57 0000016D 57                  <1>  push edi
    57                              <1> 
    57 0000016E BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    57 00000173 B8[0C130000]        <1>  mov eax, %2
    57                              <1> 
    57                              <1>  %if 3 == %0
    57 00000178 66C7470400EF        <1>  mov [edi + 4], %3
    57                              <1>  %endif
    57                              <1> 
    57 0000017E 668907              <1>  mov [edi + 0], ax
    57 00000181 C1E810              <1>  shr eax, 16
    57 00000184 66894706            <1>  mov [edi + 6], ax
    57                              <1> 
    57 00000188 5F                  <1>  pop edi
    57 00000189 58                  <1>  pop eax
    58                                                  set_vect    0x82, trap_gate_82, word 0xEF00     ; define trap gate        : draw pixel
    58 0000018A 50                  <1>  push eax
    58 0000018B 57                  <1>  push edi
    58                              <1> 
    58 0000018C BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    58 00000191 B8[1A130000]        <1>  mov eax, %2
    58                              <1> 
    58                              <1>  %if 3 == %0
    58 00000196 66C7470400EF        <1>  mov [edi + 4], %3
    58                              <1>  %endif
    58                              <1> 
    58 0000019C 668907              <1>  mov [edi + 0], ax
    58 0000019F C1E810              <1>  shr eax, 16
    58 000001A2 66894706            <1>  mov [edi + 6], ax
    58                              <1> 
    58 000001A6 5F                  <1>  pop edi
    58 000001A7 58                  <1>  pop eax
    59                                  
    60                                                  ; permit interrupt by device
    61 000001A8 6A10E8D90F00006683-                     cdecl   rtc_int_en, 0x10                        ; Updata-Ended Interrupt Enable
    61 000001B1 C404               
    62 000001B3 E8DC100000                              cdecl   int_en_timer0
    63                                  
    64                                                  ; set up IMR(Interrupt Mask Register)
    65                                                  outp    0x21, 0b1111_1000                       ; interrupt enable: slave PIC/KBC/Timer     // master
    65 000001B8 B0F8                <1>  mov al, %2
    65 000001BA E621                <1>  out %1, al
    66                                                  outp    0xA1, 0b1111_1110                       ; interrupt enable: RTC                     // slave
    66 000001BC B0FE                <1>  mov al, %2
    66 000001BE E6A1                <1>  out %1, al
    67                                  
    68                                                  ; register page table
    69 000001C0 B800501000                              mov     eax, CR3_BASE
    70 000001C5 0F22D8                                  mov     cr3, eax
    71                                  
    72                                                  ; enable paging
    73 000001C8 0F20C0                                  mov     eax, cr0
    74 000001CB 0D00000080                              or      eax, (1 << 31)                          ; CR0 |= PG
    75 000001D0 0F22C0                                  mov     cr0, eax
    76 000001D3 EB00                                    jmp     $ + 2                                   ; FLUSH()
    77                                  
    78                                                  ; CPU interrupt enable
    79 000001D5 FB                                      sti
    80                                  
    81                                                  ; display font and color_bar
    82 000001D6 6A0D6A3FE8A9090000-                     cdecl   draw_font, 63, 13
    82 000001DF 6683C408           
    83 000001E3 6A046A3FE8210A0000-                     cdecl   draw_color_bar, 63, 4
    83 000001EC 6683C408           
    84                                  
    85                                                  ; display string
    86 000001F0 68[38020000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    86 000001F8 00006A0E6A19E8CA09-
    86 00000201 00006683C410       
    87                                  
    88                                  ;---------------------------------------------------------------------------
    89                                  ; default multitask
    90                                  ;---------------------------------------------------------------------------
    91                                  
    92                                  
    93                                  ;                 ; call Task
    94                                  ;                 ; call    SS_TASK_1:0
    95                                  
    96                                  ; .10L:
    97                                  
    98                                  ;                 ; display time
    99                                  ;                 mov     eax, [RTC_TIME]
   100                                  ;                 cdecl   draw_time, 72, 0, 0x0700, eax
   101                                  
   102                                  
   103                                  ;                 ; get key code
   104                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   105                                  ;                 cmp     eax, 0
   106                                  ;                 je      .10E
   107                                  
   108                                  ;                 ; display key code
   109                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   110                                  ; .10E:
   111                                  
   112                                  ;                 ; draw rotation bar
   113                                  ;                 cdecl   draw_rotation_bar
   114                                  
   115                                  ;                 jmp     .10L
   116                                  
   117                                  ;----------------------------------------------------------------------------
   118                                  
   119                                  
   120                                  ;----------------------------------------------------------------------------
   121                                  ; non-preemptive multitask
   122                                  ;----------------------------------------------------------------------------
   123                                  
   124                                  ; .10L:
   125                                  
   126                                  ;                 ; call task
   127                                  ;                 jmp     SS_TASK_1:0                             ; jump to Task1
   128                                  
   129                                  ;                 ; draw rotation bar
   130                                  ;                 cdecl   draw_rotation_bar
   131                                  
   132                                  ;                 ; get key code
   133                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   134                                  ;                 cmp     eax, 0
   135                                  ;                 je      .10E
   136                                  
   137                                  ;                 ; display key code
   138                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   139                                  ; .10E:
   140                                  
   141                                  ;                 jmp     .10L
   142                                  
   143                                  ;-----------------------------------------------------------------------------
   144                                  
   145                                  ;----------------------------------------------------------------------------
   146                                  ; preemptive multitask
   147                                  ;----------------------------------------------------------------------------
   148                                  
   149                                  .10L:
   150                                  
   151                                                  ; draw rotation bar
   152 00000207 E897100000                              cdecl   draw_rotation_bar
   153                                  
   154                                                  ; get key code
   155 0000020C 68[4C020000]68-                         cdecl   ring_rd, _KEY_BUFF, .int_key
   155 00000212 [7C120000]E8810F00-
   155 0000021A 006683C408         
   156 0000021F 83F800                                  cmp     eax, 0
   157 00000222 7412                                    je      .10E
   158                                  
   159                                                  ; display key code
   160 00000224 68[7C120000]6A1D6A-                     cdecl   draw_key, 2, 29, _KEY_BUFF
   160 0000022C 02E8D10F00006683C4-
   160 00000235 0C                 
   161                                  .10E:
   162                                  
   163 00000236 EBCF                                    jmp     .10L
   164                                  
   165                                  ;-----------------------------------------------------------------------------
   166                                  
   167                                  ;data
   168 00000238 2048656C6C6F2C206B-     .s0:    db  " Hello, kernel! ", 0
   168 00000241 65726E656C212000   
   169                                  
   170 00000249 00<rept>                ALIGN 4, db 0
   171 0000024C 00000000                .int_key:   dd 0
   172                                  
   173                                  ALIGN 4, db 0
   174 00000250 00000000                FONT_ADR:   dd 0
   175 00000254 00000000                RTC_TIME:   dd 0
   176                                  
   177                                  
   178                                  ; TASKS
   179                                  %include    "descriptor.s"
     1                              <1> ;-----------------------------------------------------------------------
     2                              <1> ; TSS
     3                              <1> ;-----------------------------------------------------------------------
     4                              <1> 
     5                              <1> TSS_0:
     6 00000258 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
     7 0000025C 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                             ;*  4: ESP0
     8 00000260 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
     9 00000264 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    10 00000268 00000000            <1> .ss1:           dd  0                                           ;* 16:
    11 0000026C 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    12 00000270 00000000            <1> .ss2:           dd  0                                           ;* 24:
    13 00000274 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    14 00000278 00000000            <1> .eip:           dd  0                                           ;  32: EIP
    15 0000027C 00000000            <1> .eflags:        dd  0                                           ;  36: EFLAGS
    16 00000280 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    17 00000284 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    18 00000288 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    19 0000028C 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    20 00000290 00000000            <1> .esp:           dd  0                                           ;  56: ESP
    21 00000294 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    22 00000298 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    23 0000029C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    24 000002A0 00000000            <1> .es:            dd  0                                           ;  72: ES
    25 000002A4 00000000            <1> .cs:            dd  0                                           ;  76: CS
    26 000002A8 00000000            <1> .ss:            dd  0                                           ;  80: SS
    27 000002AC 00000000            <1> .ds:            dd  0                                           ;  84: DS
    28 000002B0 00000000            <1> .fs:            dd  0                                           ;  88: FS
    29 000002B4 00000000            <1> .gs:            dd  0                                           ;  92: GS
    30 000002B8 00000000            <1> .ldt:           dd  0                                           ;* 96: LDT segment selector
    31 000002BC 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    32 000002C0 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    33                              <1> 
    34                              <1> TSS_1:
    35 00000330 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    36 00000334 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                             ;*  4: ESP0
    37 00000338 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    38 0000033C 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    39 00000340 00000000            <1> .ss1:           dd  0                                           ;* 16:
    40 00000344 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    41 00000348 00000000            <1> .ss2:           dd  0                                           ;* 24:
    42 0000034C 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    43 00000350 [64070000]          <1> .eip:           dd  task_1                                      ;  32: EIP
    44 00000354 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    45 00000358 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    46 0000035C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    47 00000360 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    48 00000364 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    49 00000368 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56: ESP
    50 0000036C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    51 00000370 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    52 00000374 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    53 00000378 27000000            <1> .es:            dd  DS_TASK_1                                   ;  72: ES
    54 0000037C 1F000000            <1> .cs:            dd  CS_TASK_1                                   ;  76: CS
    55 00000380 27000000            <1> .ss:            dd  DS_TASK_1                                   ;  80: SS
    56 00000384 27000000            <1> .ds:            dd  DS_TASK_1                                   ;  84: DS
    57 00000388 27000000            <1> .fs:            dd  DS_TASK_1                                   ;  88: FS
    58 0000038C 27000000            <1> .gs:            dd  DS_TASK_1                                   ;  92: GS
    59 00000390 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    60 00000394 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    61 00000398 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    62                              <1> 
    63                              <1> 
    64                              <1> TSS_2:
    65 00000408 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    66 0000040C 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                             ;*  4: ESP0
    67 00000410 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    68 00000414 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    69 00000418 00000000            <1> .ss1:           dd  0                                           ;* 16:
    70 0000041C 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    71 00000420 00000000            <1> .ss2:           dd  0                                           ;* 24:
    72 00000424 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    73 00000428 [99070000]          <1> .eip:           dd  task_2                                      ;  32: EIP
    74 0000042C 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    75 00000430 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    76 00000434 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    77 00000438 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    78 0000043C 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    79 00000440 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56: ESP
    80 00000444 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    81 00000448 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    82 0000044C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    83 00000450 37000000            <1> .es:            dd  DS_TASK_2                                   ;  72: ES
    84 00000454 2F000000            <1> .cs:            dd  CS_TASK_2                                   ;  76: CS
    85 00000458 37000000            <1> .ss:            dd  DS_TASK_2                                   ;  80: SS
    86 0000045C 37000000            <1> .ds:            dd  DS_TASK_2                                   ;  84: DS
    87 00000460 37000000            <1> .fs:            dd  DS_TASK_2                                   ;  88: FS
    88 00000464 37000000            <1> .gs:            dd  DS_TASK_2                                   ;  92: GS
    89 00000468 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    90 0000046C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    91 00000470 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    92                              <1> 
    93                              <1> TSS_3:
    94 000004E0 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    95 000004E4 003E1000            <1> .esp0:          dd  SP_TASK_3 - 512                             ;*  4: ESP0
    96 000004E8 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    97 000004EC 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    98 000004F0 00000000            <1> .ss1:           dd  0                                           ;* 16:
    99 000004F4 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   100 000004F8 00000000            <1> .ss2:           dd  0                                           ;* 24:
   101 000004FC 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
   102 00000500 [B4080000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   103 00000504 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   104 00000508 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   105 0000050C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   106 00000510 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   107 00000514 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   108 00000518 00401000            <1> .esp:           dd  SP_TASK_3                                           ;  56: ESP
   109 0000051C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   110 00000520 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   111 00000524 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   112 00000528 47000000            <1> .es:            dd  DS_TASK_3                                   ;  72: ES
   113 0000052C 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   114 00000530 47000000            <1> .ss:            dd  DS_TASK_3                                   ;  80: SS
   115 00000534 47000000            <1> .ds:            dd  DS_TASK_3                                   ;  84: DS
   116 00000538 47000000            <1> .fs:            dd  DS_TASK_3                                   ;  88: FS
   117 0000053C 47000000            <1> .gs:            dd  DS_TASK_3                                   ;  92: GS
   118 00000540 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   119 00000544 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   120 00000548 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   121                              <1> 
   122                              <1> 
   123                              <1> ;-----------------------------------------------------------------------------------------------
   124                              <1> ; GDT
   125                              <1> ;-----------------------------------------------------------------------------------------------
   126                              <1> 
   127 000005B8 0000000000000000    <1> GDT:            dq  0x0000000000000000
   128 000005C0 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   129 000005C8 FFFF00000092CF00    <1> .ds_kernel:     dq  0x00CF92000000FFFF                          ; DATA 4G
   130 000005D0 0000000000820000    <1> .ldt            dq  0x0000820000000000                          ; LDT descriptor
   131 000005D8 6700000000890000    <1> .tss_0:         dq  0x0000890000000067                          ; TSS descriptor
   132 000005E0 6700000000890000    <1> .tss_1:         dq  0x0000890000000067                          ; TSS descriptor
   133 000005E8 6700000000890000    <1> .tss_2:         dq  0x0000890000000067                          ; TSS descriptor
   134 000005F0 6700000000890000    <1> .tss_3:         dq  0x0000890000000067                          ; TSS descriptor
   135 000005F8 0000080004EC0000    <1> .call_gate:     dq  0x0000EC0400080000                          ; 386 call gate(DPL=3, count=4, SEL=8)
   136                              <1> .end:
   137                              <1> 
   138                              <1> CS_KERNEL       equ .cs_kernel - GDT
   139                              <1> DS_KERNEL       equ .ds_kernel - GDT
   140                              <1> SS_LDT          equ .ldt       - GDT
   141                              <1> SS_TASK_0       equ .tss_0     - GDT
   142                              <1> SS_TASK_1       equ .tss_1     - GDT
   143                              <1> SS_TASK_2       equ .tss_2     - GDT
   144                              <1> SS_TASK_3       equ .tss_3     - GDT
   145                              <1> SS_GATE_0       equ .call_gate - GDT
   146                              <1> 
   147 00000600 4700                <1> GDTR:   dw      GDT.end - GDT - 1
   148 00000602 [B8050000]          <1>         dd      GDT
   149                              <1> 
   150                              <1> ;-----------------------------------------------------------------------------------------------
   151                              <1> ; LDT
   152                              <1> ;-----------------------------------------------------------------------------------------------
   153                              <1> 
   154 00000606 0000000000000000    <1> LDT:            dq  0x0000000000000000                          ; NULL
   155 0000060E FFFF0000009ACF00    <1> .cs_task_0:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   156 00000616 FFFF00000092CF00    <1> .ds_task_0:     dq  0x00CF92000000FFFF                          ; DATA 4G
   157 0000061E FFFF000000FACF00    <1> .cs_task_1:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   158 00000626 FFFF000000F2CF00    <1> .ds_task_1:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   159 0000062E FFFF000000FACF00    <1> .cs_task_2:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   160 00000636 FFFF000000F2CF00    <1> .ds_task_2:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   161 0000063E FFFF000000FACF00    <1> .cs_task_3:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   162 00000646 FFFF000000F2CF00    <1> .ds_task_3:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   163                              <1> .end:
   164                              <1> 
   165                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                      ; cs selector for task0 // set bit 2(TI)
   166                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                      ; ds selector for task0 // Priviledge level 0
   167                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                  ; cs selector for task1 // Priviledge level 3
   168                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                  ; ds selector for task1
   169                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                  ; cs selector for task2 // Priviledge level 3
   170                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                  ; ds selector for task2
   171                              <1> CS_TASK_3       equ (.cs_task_3 - LDT) | 4 | 3                  ; cs selector for task3 // Priviledge level 3
   172                              <1> DS_TASK_3       equ (.ds_task_3 - LDT) | 4 | 3                  ; ds selector for task3
   173                              <1> LDT_LIMIT       equ .end        - LDT - 1
   180                                  %include    "modules/paging.s"
     1                              <1> page_set_4m:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000064E 55                  <1>             push    ebp
     5 0000064F 89E5                <1>             mov     ebp, esp                                        ; EBP+8 | base address of page directory
     6                              <1> 
     7                              <1>             ; save registers
     8 00000651 60                  <1>             pusha
     9                              <1> 
    10                              <1>             ; make page directory
    11 00000652 8B7D08              <1>             mov     edi, [ebp + 8]
    12 00000655 B800000000          <1>             mov     eax, 0x00000000                                 ; // P = 0
    13 0000065A B900040000          <1>             mov     ecx, 1024
    14 0000065F F3AB                <1>             rep     stosd                                           ; while(ecx--) *edi++ = type
    15                              <1> 
    16                              <1>             ; set top entry
    17 00000661 89F8                <1>             mov     eax, edi                                        ; EAX = right after the page directory = address of page table
    18 00000663 2500F0FFFF          <1>             and     eax, ~0x0000_0FFF                               ; specifying the physical address
    19 00000668 83C807              <1>             or      eax, 7                                          ; permit R/W
    20 0000066B 898700F0FFFF        <1>             mov     [edi - (1024 * 4)], eax                         ; set top entry of page directory
    21                              <1> 
    22                              <1>             ; set page table
    23 00000671 B807000000          <1>             mov     eax, 0x000000007                                ; specifying physical address and permit R/W
    24 00000676 B900040000          <1>             mov     ecx, 1024
    25                              <1> 
    26                              <1> .10L:
    27 0000067B AB                  <1>             stosd
    28 0000067C 0500100000          <1>             add     eax, 0x00001000
    29 00000681 E2F8                <1>             loop    .10L
    30                              <1> 
    31                              <1>             ; return registers
    32 00000683 61                  <1>             popa
    33                              <1> 
    34                              <1>             ; desctruct stack frame
    35 00000684 89EC                <1>             mov     esp, ebp
    36 00000686 5D                  <1>             pop     ebp
    37                              <1> 
    38 00000687 C3                  <1>             ret
    39                              <1> 
    40                              <1> init_page:
    41                              <1> 
    42                              <1>              ; save registers
    43 00000688 60                  <1>              pusha
    44                              <1> 
    45                              <1>              ; make page conversion table
    46 00000689 6800501000E8BBFFFF- <1>              cdecl  page_set_4m, CR3_BASE
    46 00000692 FF6683C404          <1>
    47 00000697 C70570701000000000- <1>              mov    [0x00106000 + 0x107 * 16], dword 0               ; set 0x0010_7000 to the page not exist
    47 000006A0 00                  <1>
    48                              <1> 
    49                              <1>              ; return registers
    50 000006A1 61                  <1>              popa
    51                              <1> 
    52 000006A2 C3                  <1>              ret
   181                                  %include    "modules/int_pf.s"
     1                              <1> int_pf:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000006A3 55                  <1>             push    ebp
     5 000006A4 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 000006A6 60                  <1>             pusha
     9 000006A7 1E                  <1>             push    ds
    10 000006A8 06                  <1>             push    es
    11                              <1> 
    12                              <1>             ; confirm the address of what raised exception
    13 000006A9 0F20D0              <1>             mov     eax, cr2
    14 000006AC 2500F0FFFF          <1>             and     eax, ~0xFFF                                     ; access within 4K bytes
    15 000006B1 3D00701000          <1>             cmp     eax, 0x0010_7000                                ; if (0x0010_7000 == ptr) => page activation process
    16 000006B6 7521                <1>             jne     .10F                                            ; if (0x0010_7000 != ptr) => task termination process
    17                              <1> 
    18                              <1>             ; enable page
    19 000006B8 C7051C641000077010- <1>             mov     [0x00106000 + 0x107 * 4], dword 0x00107007
    19 000006C1 00                  <1>
    20 000006C2 6A4068[B4090000]68- <1>             cdecl   memcpy, 0x0010_7000, DRAW_PARAM, rose_size
    20 000006CA 00701000E81F0D0000- <1>
    20 000006D3 6683C40C            <1>
    21                              <1> 
    22 000006D7 EB15                <1>             jmp     .10E
    23                              <1> 
    24                              <1> .10F:
    25                              <1>             ; adjust stack
    26 000006D9 83C404              <1>             add     esp, 4                                          ; pop es
    27 000006DC 83C404              <1>             add     esp, 4                                          ; pop ds
    28 000006DF 61                  <1>             popa
    29 000006E0 5D                  <1>             pop     ebp
    30                              <1> 
    31                              <1>             ; task termination process
    32 000006E1 9C                  <1>             pushf                                                   ; EFLAGS
    33 000006E2 0E                  <1>             push    cs
    34 000006E3 68[DF0F0000]        <1>             push    int_stop                                        ; stack displaying process
    35                              <1> 
    36 000006E8 B8[F8060000]        <1>             mov     eax, .s0                                        ; interrupt type
    37 000006ED CF                  <1>             iret
    38                              <1> 
    39                              <1> .10E:
    40                              <1> 
    41                              <1>             ; return registers
    42 000006EE 07                  <1>             pop     es
    43 000006EF 1F                  <1>             pop     ds
    44 000006F0 61                  <1>             popa
    45                              <1> 
    46                              <1>             ; destruct stack frame
    47 000006F1 89EC                <1>             mov     esp, ebp
    48 000006F3 5D                  <1>             pop     ebp
    49                              <1> 
    50 000006F4 83C404              <1>             add     esp, 4                                          ; discard error code
    51 000006F7 CF                  <1>             iret
    52                              <1> 
    53 000006F8 203C20504147452046- <1> .s0:        db  " < PAGE FAULT > ", 0
    53 00000701 41554C54203E2000    <1>
   182                                  %include    "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000709 60                  <1>             pusha
     5 0000070A 1E                  <1>             push    ds
     6 0000070B 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 0000070C 66B81000            <1>             mov     ax, 0x0010
    10 00000710 8ED8                <1>             mov     ds, ax
    11 00000712 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; TICK
    14 00000714 FF05[5C070000]      <1>             inc     dword [TIMER_COUNT]                                     ; TIMER_COUNT++ //update interrupt count
    15                              <1> 
    16                              <1>             ; clear interrupt flag(EOI)
    17                              <1>             outp    0x20, 0x20                                              ; master PIC:EOI command
    17 0000071A B020                <2>  mov al, %2
    17 0000071C E620                <2>  out %1, al
    18                              <1> 
    19                              <1>             ; exchange Task
    20 0000071E 660F00C8            <1>             str     ax                                                      ; AX = TR // current Task Register
    21 00000722 6683F820            <1>             cmp     ax, SS_TASK_0
    22 00000726 7415                <1>             je      .11L
    23 00000728 6683F828            <1>             cmp     ax, SS_TASK_1
    24 0000072C 7418                <1>             je      .12L
    25 0000072E 6683F830            <1>             cmp     ax, SS_TASK_2
    26 00000732 741B                <1>             je      .13L
    27                              <1> 
    28 00000734 EA000000002000      <1>             jmp     SS_TASK_0:0
    29 0000073B EB1B                <1>             jmp     .10E
    30                              <1> .11L:
    31 0000073D EA000000002800      <1>             jmp     SS_TASK_1:0
    32 00000744 EB12                <1>             jmp     .10E
    33                              <1> .12L:
    34 00000746 EA000000003000      <1>             jmp     SS_TASK_2:0
    35 0000074D EB09                <1>             jmp     .10E
    36                              <1> .13L:
    37 0000074F EA000000003800      <1>             jmp     SS_TASK_3:0
    38 00000756 EB00                <1>             jmp     .10E
    39                              <1> .10E:
    40                              <1> 
    41                              <1>             ; return registers
    42 00000758 07                  <1>             pop     es
    43 00000759 1F                  <1>             pop     ds
    44 0000075A 61                  <1>             popa
    45                              <1> 
    46 0000075B CF                  <1>             iret
    47                              <1> 
    48                              <1> ALIGN 4, db 0
    49 0000075C 0000000000000000    <1> TIMER_COUNT:    dq 0
   183                                  %include    "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1> 
     3                              <1>             ; display string
     4 00000764 68[92070000]6A076A- <1>             cdecl   draw_str, 63, 0, 0x07, .s0              ; draw_str()
     4 0000076C 006A3FE85904000066- <1>
     4 00000775 83C410              <1>
     5                              <1> 
     6                              <1> ;-------------------------------------------------------------
     7                              <1> ; non-preemptive multitask
     8                              <1> ;-------------------------------------------------------------
     9                              <1> 
    10                              <1> ; .10L:
    11                              <1> ;             ; display time
    12                              <1> ;             mov     eax, [RTC_TIME]                         ; get time
    13                              <1> ;             cdecl   draw_time, 72, 0, 0x0700, eax
    14                              <1> 
    15                              <1> ;             ; call Task
    16                              <1> ;             jmp    SS_TASK_0:0                             ; jump to Task0(kernel)
    17                              <1> 
    18                              <1> ;             jmp     .10L
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> 
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; preemptive multitask
    24                              <1> ;-------------------------------------------------------------
    25                              <1> 
    26                              <1> .10L:
    27                              <1>             ; display time
    28 00000778 A1[54020000]        <1>             mov     eax, [RTC_TIME]                         ; get time
    29 0000077D 5068000700006A006A- <1>             cdecl   draw_time, 72, 0, 0x0700, eax
    29 00000786 48E8A50700006683C4- <1>
    29 0000078F 10                  <1>
    30                              <1> 
    31                              <1> 
    32 00000790 EBE6                <1>             jmp     .10L
    33                              <1> 
    34                              <1> ;-------------------------------------------------------------
    35                              <1> 
    36                              <1>             ; data
    37 00000792 5461736B2D3100      <1> .s0:        db  "Task-1", 0
   184                                  %include    "tasks/task_2.s"
     1                              <1> task_2:
     2                              <1> 
     3 00000799 68[5E080000]6A076A- <1>             cdecl   draw_str, 63, 1, 0x07, .s0
     3 000007A1 016A3FE82404000066- <1>
     3 000007AA 83C410              <1>
     4                              <1> 
     5                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     7                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     8 000007AD DB05[4C080000]      <1>             fild    dword [.c1000]              ;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     9 000007B3 D9EB                <1>             fldpi                               ;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    10 000007B5 DA35[50080000]      <1>             fidiv   dword [.c180]               ;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    11 000007BB D9EB                <1>             fldpi                               ;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    12 000007BD DCC0                <1>             fadd    st0, st0                    ;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13 000007BF D9EE                <1>             fldz                                ;    θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    14                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    15                              <1>                                                 ;    θ = 0 |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    16                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> 
    18                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    19                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    20                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    21                              <1> .10L:                                           ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    22                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    23 000007C1 D8C2                <1>             fadd    st0, st2                    ;    θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    24 000007C3 D9F8                <1>             fprem                               ;    MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx| // fprem(ST0 %= ST1)
    25 000007C5 D9C0                <1>             fld     st0                         ;        θ |       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    26 000007C7 D9FE                <1>             fsin                                ;    SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    27 000007C9 D8CC                <1>             fmul    st0, st4                    ;ST4*SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    28 000007CB DF35[54080000]      <1>             fbstp   [.bcd]                      ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    29                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    30                              <1> 
    31                              <1>             ; convert into ASCII code
    32 000007D1 A1[54080000]        <1>             mov     eax, [.bcd]                 ; EAX = 1000 * sin(t)
    33 000007D6 89C3                <1>             mov     ebx, eax                    ; EBX = EAX
    34                              <1> 
    35 000007D8 250F0F0000          <1>             and     eax, 0x0F0F                 ; mask upper 4 bits
    36 000007DD 0D30300000          <1>             or      eax, 0x3030                 ; set 0x3 to upper 4 bits
    37                              <1> 
    38 000007E2 C1EB04              <1>             shr     ebx, 4                      ; EBX = upper 16 bits
    39 000007E5 81E30F0F0000        <1>             and     ebx, 0x0F0F
    40 000007EB 81CB30300000        <1>             or      ebx, 0x3030
    41                              <1> 
    42                              <1>             ; set the result to the buffer which is for screen display byte by byte
    43 000007F1 883D[66080000]      <1>             mov     [.s2 + 0], bh               ; first digit
    44 000007F7 8825[68080000]      <1>             mov     [.s3 + 0], ah               ; the first decimal place
    45 000007FD 881D[69080000]      <1>             mov     [.s3 + 1], bl               ; the second decimal place
    46 00000803 A2[6A080000]        <1>             mov     [.s3 + 2], al               ; the third decimal place
    47                              <1> 
    48                              <1>             ; whether displaying sign or not
    49 00000808 B807000000          <1>             mov     eax, 7
    50 0000080D 0FA305[5D080000]    <1>             bt      [.bcd + 9], eax             ; CF = bcd[9] & 0x80
    51 00000814 7209                <1>             jc      .10F
    52                              <1> 
    53 00000816 C605[65080000]2B    <1>             mov     [.s1 + 0], byte '+'
    54 0000081D EB07                <1>             jmp     .10E
    55                              <1> .10F:
    56 0000081F C605[65080000]2D    <1>             mov     [.s1 + 0], byte '-'
    57                              <1> .10E:
    58 00000826 68[65080000]6A076A- <1>             cdecl   draw_str, 72, 1, 0x07, .s1
    58 0000082E 016A48E89703000066- <1>
    58 00000837 83C410              <1>
    59                              <1> 
    60                              <1>             ; wait
    61 0000083A 6A0AE8930B00006683- <1>             cdecl   wait_tick, 10
    61 00000843 C404                <1>
    62                              <1> 
    63                              <1> ;           mov		ecx, 20							;   ECX = 20
    64                              <1> ; 		    										;   do
    65                              <1> ; 		    										;   {
    66                              <1> ; .20L:	    mov		eax, [TIMER_COUNT]				;     EAX = TIMER_COUNT;
    67                              <1> ; .21L:	    cmp		[TIMER_COUNT], eax				;     while (TIMER_COUNT != EAX)
    68                              <1> ; 		    je		.21L							;       ;
    69                              <1> ; 		    loop	.20L							;   } while (--ECX);
    70                              <1> 
    71                              <1> ; 		    jmp		.10L							; }
    72                              <1> 
    73 00000845 E977FFFFFF          <1>             jmp     .10L
    74                              <1> 
    75 0000084A 00<rept>            <1> ALIGN 4, db 0
    76 0000084C E8030000            <1> .c1000:     dd  1000
    77 00000850 B4000000            <1> .c180:      dd  180
    78                              <1> 
    79 00000854 00<rept>            <1> .bcd:       times 10 db 0x00
    80                              <1> 
    81 0000085E 5461736B2D3200      <1> .s0:        db   "Task-2", 0
    82 00000865 2D                  <1> .s1:        db  "-"
    83 00000866 302E                <1> .s2:        db  "0."
    84 00000868 30303000            <1> .s3:        db  "000", 0
   185                                  %include    "tasks/task_3.s"
     1                              <1> ; fpu_rose_init:
     2                              <1> 
     3                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
     4                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     5                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1> ;             fldpi                               ;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     7                              <1> ;             fidiv   dword [.c180]               ;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     8                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
     9                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    10                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    11                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    12                              <1> ;                                                 ;        r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    14                              <1> ;             fild    dword [.n]                  ;        n |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    15                              <1> ;             fidiv   dword [.d]                  ;      n/d |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    16                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    18                              <1> ;                                                 ;        k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    19                              <1> ;             fild    dword [.A]                  ;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    20                              <1> 
    21                              <1> ; ALIGN 4, db 0
    22                              <1> ; .c1000:     dd  1000
    23                              <1> ; .c180:      dd  180
    24                              <1> 
    25                              <1> ; .n: dd 5
    26                              <1> ; .d: dd 3
    27                              <1> ; .A: dd 90
    28                              <1> 
    29                              <1> ;--------------------------------------------------------------------------------------------------------------
    30                              <1> ; PREPROCESSING
    31                              <1> 
    32                              <1> fpu_rose_init:
    33                              <1> 
    34                              <1>                                                 ;    +16 | d
    35                              <1>                                                 ;    +12 | n
    36                              <1>                                                 ; EBP+ 8 | A
    37 0000086C 55                  <1>             push    ebp
    38 0000086D 89E5                <1>             mov     ebp, esp
    39                              <1> 
    40 0000086F 68B4000000          <1>             push    dword 180                   ;    - 4 | dword i = 180
    41                              <1> 
    42 00000874 D9EB                <1>             fldpi
    43 00000876 DA75FC              <1>             fidiv   dword [ebp -  4]
    44 00000879 DB450C              <1>             fild    dword [ebp + 12]
    45 0000087C DA7510              <1>             fidiv   dword [ebp + 16]
    46 0000087F DB4508              <1>             fild    dword [ebp +  8]
    47                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    48                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    49                              <1>                                                 ;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    50                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    51                              <1> 
    52 00000882 89EC                <1>             mov     esp, ebp
    53 00000884 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000885 C3                  <1>             ret
    56                              <1> 
    57                              <1> fpu_rose_update:
    58                              <1> 
    59                              <1>             ; construct stack frame
    60                              <1>                                                 ;    +16 | t(angle)
    61                              <1>                                                 ;    +12 | Y(float)
    62                              <1>                                                 ; EBP+ 8 | X(float)
    63 00000886 55                  <1>             push    ebp
    64 00000887 89E5                <1>             mov     ebp, esp
    65                              <1> 
    66                              <1>             ; save registers
    67 00000889 50                  <1>             push    eax
    68 0000088A 53                  <1>             push    ebx
    69                              <1> 
    70                              <1>             ; set save_dest of X/Y coordinate
    71 0000088B 8B4508              <1>             mov     eax, [ebp +  8]
    72 0000088E 8B5D0C              <1>             mov     ebx, [ebp + 12]
    73                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    74                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    75 00000891 DB4510              <1>             fild    dword [ebp + 16]            ;       t  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
    76 00000894 D8CB                <1>             fmul    st0, st3                    ;      rt  |         |         |         |         |         |
    77 00000896 D9C0                <1>             fld     st0                         ;      rt  |     rt  |      A  |      k  |      r  |xxxxxxxxx|
    78                              <1>                                                 ;   θ=(rt) |  θ=(rt) |      A  |      k  |      r  |xxxxxxxxx|
    79                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    80 00000898 D9FB                <1>             fsincos                             ;   cos(θ) |  sin(θ) |      θ  |      A  |      k  |      r  |
    81                              <1> 
    82 0000089A D9CA                <1>             fxch    st2                         ;       θ  |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    83 0000089C D8CC                <1>             fmul    st0, st4                    ;      kθ  |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    84 0000089E D9FE                <1>             fsin                                ;  sin(kθ) |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    85 000008A0 D8CB                <1>             fmul    st0, st3                    ; Asin(kθ) |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
    86                              <1> 
    87 000008A2 D9CA                <1>             fxch    st2                         ;   cos(θ) |  sin(θ) | Asin(kθ)|      A  |      k  |      r  |
    88 000008A4 D8CA                <1>             fmul    st0, st2                    ;       X  |  sin(θ) | Asin(kθ)|      A  |      k  |      r  |
    89 000008A6 DB18                <1>             fistp   dword [eax]                 ;   sin(θ) | Asin(kθ)|      A  |      k  |      r  |xxxxxxxxx|
    90                              <1> 
    91 000008A8 DEC9                <1>             fmulp   st1, st0                    ;       Y  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
    92 000008AA D9E0                <1>             fchs                                ;      -Y  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
    93 000008AC DB1B                <1>             fistp   dword [ebx]                 ;       A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    94                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    95                              <1> 
    96                              <1>             ; return registers
    97 000008AE 5B                  <1>             pop     ebx
    98 000008AF 58                  <1>             pop     eax
    99                              <1> 
   100                              <1>             ; destruct stack frame
   101 000008B0 89EC                <1>             mov     esp, ebp
   102 000008B2 5D                  <1>             pop     ebp
   103                              <1> 
   104 000008B3 C3                  <1>             ret
   105                              <1> 
   106                              <1> task_3:
   107                              <1>             ; construct stack frame
   108 000008B4 89E5                <1>             mov     ebp, esp
   109                              <1> 
   110 000008B6 6A00                <1>             push    dword 0                     ; EBP- 4 | x0 = 0 // x coordinate origin
   111 000008B8 6A00                <1>             push    dword 0                     ;    - 8 | y0 = 0 // y coordinate origin
   112 000008BA 6A00                <1>             push    dword 0                     ;    -12 | x  = 0 // x coordinate drawing
   113 000008BC 6A00                <1>             push    dword 0                     ;    -16 | y  = 0 // y coordinate drawing
   114 000008BE 6A00                <1>             push    dword 0                     ;    -20 | r  = 0 // angle
   115                              <1> 
   116                              <1>             ; initialization
   117                              <1>             ; mov     esi, DRAW_PARAM
   118 000008C0 BE00701000          <1>             mov     esi, 0x0010_7000                    ; test page fault exception
   119                              <1> 
   120                              <1>             ; display title
   121 000008C5 8B06                <1>             mov     eax, [esi + rose.x0]
   122 000008C7 8B5E04              <1>             mov     ebx, [esi + rose.y0]
   123                              <1> 
   124 000008CA C1E803              <1>             shr     eax, 3                              ; EAX /= 8    // convert x coordinate into char position
   125 000008CD C1EB04              <1>             shr     ebx, 4                              ; EBX /= 16   // convert y coordinate into char position
   126 000008D0 4B                  <1>             dec     ebx                                 ; move up one char
   127 000008D1 8B4E24              <1>             mov     ecx, [esi + rose.color_s]           ; char color
   128 000008D4 8D5630              <1>             lea     edx, [esi + rose.title]
   129                              <1> 
   130 000008D7 52515350E8ED020000- <1>             cdecl   draw_str, eax, ebx, ecx, edx
   130 000008E0 6683C410            <1>
   131                              <1> 
   132                              <1>             ; midpoint of X axis
   133 000008E4 8B06                <1>             mov     eax, [esi + rose.x0]
   134 000008E6 8B5E08              <1>             mov     ebx, [esi + rose.x1]
   135 000008E9 29C3                <1>             sub     ebx, eax
   136 000008EB D1EB                <1>             shr     ebx, 1                              ; EBX /= 2
   137 000008ED 01C3                <1>             add     ebx, eax
   138 000008EF 895DFC              <1>             mov     [ebp - 4], ebx                      ; x0 = EBX // x coordinate origin
   139                              <1> 
   140                              <1>             ; midpoint of Y axis
   141 000008F2 8B4604              <1>             mov     eax, [esi + rose.y0]
   142 000008F5 8B5E0C              <1>             mov     ebx, [esi + rose.y1]
   143 000008F8 29C3                <1>             sub     ebx, eax
   144 000008FA D1EB                <1>             shr     ebx, 1                              ; EBX /= 2
   145 000008FC 01C3                <1>             add     ebx, eax
   146 000008FE 895DF8              <1>             mov     [ebp - 8], ebx                      ; y0 = EBX // y coordinate origin
   147                              <1> 
   148                              <1>             ; draw X axis
   149 00000901 8B06                <1>             mov     eax, [esi + rose.x0]
   150 00000903 8B5DF8              <1>             mov     ebx, [ebp - 8]                      ; midpoint of y axis
   151 00000906 8B4E08              <1>             mov     ecx, [esi + rose.x1]
   152                              <1> 
   153 00000909 FF761853515350E839- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
   153 00000912 0400006683C414      <1>
   154                              <1> 
   155                              <1>             ; draw Y axis
   156 00000919 8B4604              <1>             mov     eax, [esi + rose.y0]
   157 0000091C 8B5DFC              <1>             mov     ebx, [ebp - 4]                      ; midpoint of x axis
   158 0000091F 8B4E0C              <1>             mov     ecx, [esi + rose.y1]
   159                              <1> 
   160 00000922 FF761C51535053E820- <1>             cdecl   draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
   160 0000092B 0400006683C414      <1>
   161                              <1> 
   162                              <1>             ; draw frame
   163 00000932 8B06                <1>             mov     eax, [esi + rose.x0]
   164 00000934 8B5E04              <1>             mov     ebx, [esi + rose.y0]
   165 00000937 8B4E08              <1>             mov     ecx, [esi + rose.x1]
   166 0000093A 8B560C              <1>             mov     edx, [esi + rose.y1]
   167                              <1> 
   168 0000093D FF762052515350E8B4- <1>             cdecl   draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
   168 00000946 0400006683C414      <1>
   169                              <1> 
   170                              <1>             ; Amplitude is about 95% of x axis
   171 0000094D 8B4608              <1>             mov     eax, [esi + rose.x1]
   172 00000950 2B06                <1>             sub     eax, [esi + rose.x0]
   173 00000952 D1E8                <1>             shr     eax, 1                              ; EAX /= 2
   174 00000954 89C3                <1>             mov     ebx, eax
   175 00000956 C1EB04              <1>             shr     ebx, 4                              ; EAX /= 16
   176 00000959 29D8                <1>             sub     eax, ebx
   177                              <1> 
   178                              <1>             ; initialize FPU (initialize rose curve)
   179 0000095B FF7614FF761050E805- <1>             cdecl   fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
   179 00000964 FFFFFF6683C40C      <1>
   180                              <1> 
   181                              <1> .10L:
   182                              <1> 
   183                              <1>             ; coordinate culculation
   184 0000096B 8D5DF4              <1>             lea     ebx, [ebp - 12]                     ; x
   185 0000096E 8D4DF0              <1>             lea     ecx, [ebp - 16]                     ; y
   186 00000971 8B45EC              <1>             mov     eax, [ebp - 20]                     ; r
   187                              <1> 
   188 00000974 505153E80AFFFFFF66- <1>             cdecl   fpu_rose_update, ebx, ecx, eax
   188 0000097D 83C40C              <1>
   189                              <1> 
   190                              <1>             ; update angle(r = r % 36000)
   191 00000980 BA00000000          <1>             mov     edx, 0
   192 00000985 40                  <1>             inc     eax
   193 00000986 BBA08C0000          <1>             mov     ebx, 360 * 100
   194 0000098B F7F3                <1>             div     ebx                                 ; EDX = EDX:EAX % EBX
   195 0000098D 8955EC              <1>             mov     [ebp - 20], edx
   196                              <1> 
   197                              <1>             ; draw dot
   198 00000990 8B4DF4              <1>             mov     ecx, [ebp - 12]                     ; x
   199 00000993 8B55F0              <1>             mov     edx, [ebp - 16]                     ; y
   200                              <1> 
   201 00000996 034DFC              <1>             add     ecx, [ebp - 4]                      ; ECX += x coordinate origin
   202 00000999 0355F8              <1>             add     edx, [ebp - 8]                      ; EDX += y coordinate origin
   203                              <1> 
   204 0000099C 8B5E28              <1>             mov     ebx, [esi + rose.color_f]           ; EBX = display color
   205 0000099F CD82                <1>             int     0x82                                ; syscall_82(display color, x, y)
   206                              <1> 
   207                              <1>             ; wait
   208 000009A1 6A02E82C0A00006683- <1>             cdecl   wait_tick, 2
   208 000009AA C404                <1>
   209                              <1> 
   210                              <1>             ; draw dot(erase)
   211 000009AC 8B5E2C              <1>             mov     ebx, [esi + rose.color_b]           ; EBX = background color
   212 000009AF CD82                <1>             int     0x82                                ; syscall_82(display color, x, y)
   213                              <1> 
   214 000009B1 EBB8                <1>             jmp     .10L
   215                              <1> 
   216 000009B3 00                  <1> ALIGN 4, db 0
   217                              <1> DRAW_PARAM:
   218                              <1>     istruc  rose
   219 000009B4 10000000            <1>         at  rose.x0,            dd          16          ; upper left coordinate : X0
   220 000009B8 20000000            <1>         at  rose.y0,            dd          32          ; upper left coordinate : Y0
   221 000009BC A0010000            <1>         at  rose.x1,            dd         416          ; lower right coordinate : X1
   222 000009C0 B0010000            <1>         at  rose.y1,            dd         432          ; lower right coordinate : Y1
   223                              <1> 
   224 000009C4 02000000            <1>         at  rose.n,             dd           2          ; variable : n
   225 000009C8 01000000            <1>         at  rose.d,             dd           1          ; variable : d
   226                              <1> 
   227 000009CC 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   228 000009D0 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   229 000009D4 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   230 000009D8 0F030000            <1>         at  rose.color_s,       dd         0x030F       ; display color : char
   231 000009DC 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   232 000009E0 03000000            <1>         at  rose.color_b,       dd         0x0003       ; display color : graph erase color
   233                              <1> 
   234 000009E4 5461736B2D3300      <1>         at  rose.title,         db         "Task-3", 0  ; title
   235 000009EB 00<rept>            <1>     iend
   236                              <1> 
   186                                  
   187                                  
   188                                  ; MODULES
   189                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000009F4 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 000009F5 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 000009F7 50                  <1>             push    eax
    10 000009F8 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 000009F9 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 000009FC 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 000009FF B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 00000A01 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 00000A05 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 00000A07 5A                  <1>             pop     edx
    21 00000A08 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 00000A09 89EC                <1>             mov     esp, ebp
    25 00000A0B 5D                  <1>             pop     ebp
    26                              <1> 
    27 00000A0C C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 00000A0D 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 00000A0E 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 00000A10 50                  <1>             push    eax
    38 00000A11 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 00000A12 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 00000A15 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000A18 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 00000A1A 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 00000A1E 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 00000A20 5A                  <1>             pop     edx
    49 00000A21 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 00000A22 89EC                <1>             mov     esp, ebp
    53 00000A24 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000A25 C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 00000A26 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 00000A27 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 00000A29 50                  <1>             push    eax
    66 00000A2A 53                  <1>             push    ebx
    67 00000A2B 51                  <1>             push    ecx
    68 00000A2C 52                  <1>             push    edx
    69 00000A2D 56                  <1>             push    esi
    70 00000A2E 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 00000A2F 8B7508              <1>             mov     esi, [ebp + 8]
    74 00000A32 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 00000A35 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 00000A39 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 00000A3D 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 00000A3F 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 00000A42 FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 00000A44 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 00000A46 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 00000A49 FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 00000A4B FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 00000A4C B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 00000A51 AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 00000A52 88C4                <1>             mov     ah, al
    96 00000A54 F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 00000A56 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 00000A58 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 00000A5E 7404                <1>             jz      .11F                                    ; {
   104 00000A60 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 00000A62 EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 00000A64 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 00000A66 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 00000A68 8807                <1>             mov     [edi], al
   116                              <1> 
   117 00000A6A 83C750              <1>             add     edi, 80
   118 00000A6D E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 00000A6F 5F                  <1>             pop     edi
   123 00000A70 5E                  <1>             pop     esi
   124 00000A71 5A                  <1>             pop     edx
   125 00000A72 59                  <1>             pop     ecx
   126 00000A73 5B                  <1>             pop     ebx
   127 00000A74 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 00000A75 89EC                <1>             mov     esp, ebp
   131 00000A77 5D                  <1>             pop     ebp
   132                              <1> 
   133 00000A78 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 00000A79 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 00000A7A 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 00000A7C 50                  <1>             push    eax
   144 00000A7D 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 00000A7E 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 00000A7F 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 00000A82 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 00000A86 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 00000A8A 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 00000A8C 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 00000A8F FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 00000A91 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 00000A94 88C4                <1>             mov     ah, al
   163 00000A96 F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 00000A98 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 00000A9A 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 00000A9C 08E0                <1>             or      al, ah
   169 00000A9E 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 00000AA0 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 00000AA1 5B                  <1>             pop     ebx
   177 00000AA2 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 00000AA3 89EC                <1>             mov     esp, ebp
   181 00000AA5 5D                  <1>             pop     ebp
   182                              <1> 
   183 00000AA6 C3                  <1>             ret
   190                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 00000AA7 55                  <1>             push    ebp                                         ;   +16 | color
     5 00000AA8 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 00000AAA 50                  <1>             push    eax
    10 00000AAB 53                  <1>             push    ebx
    11 00000AAC 51                  <1>             push    ecx
    12 00000AAD 52                  <1>             push    edx
    13 00000AAE 56                  <1>             push    esi
    14 00000AAF 57                  <1>             push    edi
    15                              <1> 
    16                              <1> %ifdef      USE_TEST_AND_SET
    17 00000AB0 68[840B0000]E86D08- <1>             cdecl   test_and_set, IN_USE                        ; TEST_AND_SET(IN_USE) // waiting for resource to be available
    17 00000AB8 00006683C404        <1>
    18                              <1> %endif
    19                              <1> 
    20                              <1>             ; set copy_target font address
    21 00000ABE 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    22 00000AC2 C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    23 00000AC5 0335[50020000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    24                              <1> 
    25                              <1>             ; get copy_dest VRAM address
    26                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    27                              <1>             ; y:row, x:column
    28                              <1> 
    29 00000ACB 8B7D0C              <1>             mov     edi, [ebp + 12]
    30 00000ACE C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    31 00000AD1 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    32 00000AD8 037D08              <1>             add     edi, [ebp + 8]
    33                              <1> 
    34                              <1>             ; output a char of font
    35 00000ADB 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    36                              <1> 
    37 00000ADF 6A03E80EFFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    37 00000AE8 C404                <1>
    38 00000AEA 6A08E81CFFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    38 00000AF3 C404                <1>
    39 00000AF5 536A085756E827FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    39 00000AFE FF6683C410          <1>
    40                              <1> 
    41 00000B03 6A02E8EAFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    41 00000B0C C404                <1>
    42 00000B0E 6A04E8F8FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    42 00000B17 C404                <1>
    43 00000B19 536A045756E803FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    43 00000B22 FF6683C410          <1>
    44                              <1> 
    45 00000B27 6A01E8C6FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    45 00000B30 C404                <1>
    46 00000B32 6A02E8D4FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    46 00000B3B C404                <1>
    47 00000B3D 536A025756E8DFFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    47 00000B46 FF6683C410          <1>
    48                              <1> 
    49 00000B4B 6A00E8A2FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    49 00000B54 C404                <1>
    50 00000B56 6A01E8B0FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    50 00000B5F C404                <1>
    51 00000B61 536A015756E8BBFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    51 00000B6A FF6683C410          <1>
    52                              <1> 
    53                              <1> %ifdef      USE_TEST_AND_SET
    54                              <1> 
    55 00000B6F C705[840B0000]0000- <1>             mov     [IN_USE], dword 0                           ; clear global variable
    55 00000B77 0000                <1>
    56                              <1> %endif
    57                              <1> 
    58                              <1>             ; return registers
    59 00000B79 5F                  <1>             pop		edi
    60 00000B7A 5E                  <1> 		    pop		esi
    61 00000B7B 5A                  <1> 		    pop		edx
    62 00000B7C 59                  <1> 		    pop		ecx
    63 00000B7D 5B                  <1> 		    pop		ebx
    64 00000B7E 58                  <1> 		    pop		eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 00000B7F 89EC                <1>             mov     esp, ebp
    68 00000B81 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000B82 C3                  <1>             ret
    71                              <1> 
    72                              <1> %ifdef      USE_TEST_AND_SET
    73 00000B83 00                  <1> ALIGN 4, db 0
    74 00000B84 00000000            <1> IN_USE: dd 0
    75                              <1> %endif
   191                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000B88 55                  <1>             push    ebp                                         ;   +12 | row
     5 00000B89 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000B8B 50                  <1>             push    eax
     9 00000B8C 53                  <1>             push    ebx
    10 00000B8D 51                  <1>             push    ecx
    11 00000B8E 52                  <1>             push    edx
    12 00000B8F 56                  <1>             push    esi
    13 00000B90 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00000B91 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000B94 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 00000B97 B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 00000B9C 81F900010000        <1> .10L:       cmp     ecx, 256
    22 00000BA2 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 00000BA4 89C8                <1>             mov     eax, ecx
    26 00000BA6 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 00000BA9 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 00000BAB 89CB                <1>             mov     ebx, ecx
    31 00000BAD C1EB04              <1>             shr     ebx, 4
    32 00000BB0 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 00000BB2 516A075350E8EBFEFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 00000BBB FF6683C410          <1>
    35                              <1> 
    36 00000BC0 41                  <1>             inc     ecx
    37 00000BC1 EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 00000BC3 5F                  <1>             pop     edi
    42 00000BC4 5E                  <1>             pop     esi
    43 00000BC5 5A                  <1>             pop     edx
    44 00000BC6 59                  <1>             pop     ecx
    45 00000BC7 5B                  <1>             pop     ebx
    46 00000BC8 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 00000BC9 89EC                <1>             mov     esp, ebp
    50 00000BCB 5D                  <1>             pop     ebp
    51                              <1> 
    52 00000BCC C3                  <1>             ret
   192                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000BCD 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 00000BCE 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 00000BD0 50                  <1>             push    eax
    11 00000BD1 53                  <1>             push    ebx
    12 00000BD2 51                  <1>             push    ecx
    13 00000BD3 52                  <1>             push    edx
    14 00000BD4 56                  <1>             push    esi
    15 00000BD5 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000BD6 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 00000BD9 8B550C              <1>             mov     edx, [ebp + 12]
    20 00000BDC 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 00000BE0 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 00000BE3 FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 00000BE4 AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 00000BE5 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 00000BE7 741A                <1>             je      .10E
    29                              <1> 
    30                              <1> %ifdef      USE_SYSTEM_CALL
    31 00000BE9 CD81                <1>             int     0x81                                        ; sys_call(1, x, y, color, char)
    32                              <1> %else
    33                              <1>             cdecl   draw_char, ecx, edx, ebx, eax
    34                              <1> %endif
    35 00000BEB 41                  <1>             inc     ecx
    36 00000BEC 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    37 00000BEF 7C10                <1>             jl      .12E                                        ; {
    38 00000BF1 B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    39 00000BF6 42                  <1>             inc     edx                                         ;   EDX++;
    40 00000BF7 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    41 00000BFA 7C05                <1>             jl      .12E                                        ;   {
    42 00000BFC BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    43                              <1>                                                                 ;   }
    44                              <1> .12E:                                                           ; }
    45 00000C01 EBE1                <1>             jmp     .10L
    46                              <1> .10E:
    47                              <1> 
    48                              <1>             ; return registers
    49 00000C03 5F                  <1>             pop     edi
    50 00000C04 5E                  <1>             pop     esi
    51 00000C05 5A                  <1>             pop     edx
    52 00000C06 59                  <1>             pop     ecx
    53 00000C07 5B                  <1>             pop     ebx
    54 00000C08 58                  <1>             pop     eax
    55                              <1> 
    56                              <1>             ; destruct stack frame
    57 00000C09 89EC                <1>             mov     esp, ebp
    58 00000C0B 5D                  <1>             pop     ebp
    59                              <1> 
    60 00000C0C C3                  <1>             ret
   193                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000C0D 55                  <1>             push    ebp                                             ;   +12 | row
     5 00000C0E 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000C10 50                  <1>             push    eax
     9 00000C11 53                  <1>             push    ebx
    10 00000C12 51                  <1>             push    ecx
    11 00000C13 52                  <1>             push    edx
    12 00000C14 56                  <1>             push    esi
    13 00000C15 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00000C16 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000C19 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 00000C1C B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 00000C21 83F910              <1> .10L:       cmp     ecx, 16
    22 00000C24 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 00000C26 89C8                <1>             mov     eax, ecx
    26 00000C28 83E001              <1>             and     eax, 0x01
    27 00000C2B C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 00000C2E 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 00000C30 89CB                <1>             mov     ebx, ecx
    32 00000C32 D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 00000C34 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 00000C36 89CA                <1>             mov     edx, ecx
    37 00000C38 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 00000C3A 8B92[670C0000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 00000C40 68[5E0C0000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 00000C48 E880FFFFFF6683C410  <1>
    41                              <1> 
    42 00000C51 41                  <1>             inc     ecx
    43 00000C52 EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 00000C54 5F                  <1>             pop     edi
    48 00000C55 5E                  <1>             pop     esi
    49 00000C56 5A                  <1>             pop     edx
    50 00000C57 59                  <1>             pop     ecx
    51 00000C58 5B                  <1>             pop     ebx
    52 00000C59 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 00000C5A 89E5                <1>             mov     ebp, esp
    56 00000C5C 5D                  <1>             pop     ebp
    57                              <1> 
    58 00000C5D C3                  <1>             ret
    59                              <1> 
    60 00000C5E 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 00000C67 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 00000C6B 00010009            <1>             dw  0x0100, 0x0900
    64 00000C6F 0002000A            <1>             dw  0x0200, 0x0A00
    65 00000C73 0003000B            <1>             dw  0x0300, 0x0B00
    66 00000C77 0004000C            <1>             dw  0x0400, 0x0C00
    67 00000C7B 0005000D            <1>             dw  0x0500, 0x0D00
    68 00000C7F 0006000E            <1>             dw  0x0600, 0x0E00
    69 00000C83 0007000F            <1>             dw  0x0700, 0x0F00
   194                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 00000C87 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 00000C88 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 00000C8A 50                  <1>             push    eax
     9 00000C8B 53                  <1>             push    ebx
    10 00000C8C 51                  <1>             push    ecx
    11 00000C8D 52                  <1>             push    edx
    12 00000C8E 56                  <1>             push    esi
    13 00000C8F 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 00000C90 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 00000C93 C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 00000C96 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 00000C9D 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 00000CA0 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 00000CA2 C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 00000CA5 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 00000CA7 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 00000CAA BB80000000          <1>             mov     ebx, 0x80
    35 00000CAF D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 00000CB1 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 00000CB4 6A03E839FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 00000CBD C404                <1>
    43 00000CBF 6A08E847FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 00000CC8 C404                <1>
    44 00000CCA 516A085753E8A5FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 00000CD3 FF6683C410          <1>
    45                              <1> 
    46 00000CD8 6A02E815FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 00000CE1 C404                <1>
    47 00000CE3 6A04E823FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 00000CEC C404                <1>
    48 00000CEE 516A045753E881FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 00000CF7 FF6683C410          <1>
    49                              <1> 
    50 00000CFC 6A01E8F1FCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 00000D05 C404                <1>
    51 00000D07 6A02E8FFFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 00000D10 C404                <1>
    52 00000D12 516A025753E85DFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 00000D1B FF6683C410          <1>
    53                              <1> 
    54 00000D20 6A00E8CDFCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 00000D29 C404                <1>
    55 00000D2B 6A01E8DBFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 00000D34 C404                <1>
    56 00000D36 516A015753E839FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 00000D3F FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 00000D44 5F                  <1>             pop     edi
    60 00000D45 5E                  <1>             pop     esi
    61 00000D46 5A                  <1>             pop     edx
    62 00000D47 59                  <1>             pop     ecx
    63 00000D48 5B                  <1>             pop     ebx
    64 00000D49 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 00000D4A 89EC                <1>             mov     esp, ebp
    68 00000D4C 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000D4D C3                  <1>             ret
   195                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 00000D4E 55                  <1>             push    ebp
    22 00000D4F 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 00000D51 6A00                <1>             push    dword 0
    25 00000D53 6A00                <1>             push    dword 0
    26 00000D55 6A00                <1>             push    dword 0
    27 00000D57 6A00                <1>             push    dword 0
    28 00000D59 6A00                <1>             push    dword 0
    29 00000D5B 6A00                <1>             push    dword 0
    30 00000D5D 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 00000D5F 50                  <1>             push    eax
    34 00000D60 53                  <1>             push    ebx
    35 00000D61 51                  <1>             push    ecx
    36 00000D62 52                  <1>             push    edx
    37 00000D63 56                  <1>             push    esi
    38 00000D64 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 00000D65 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 00000D68 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 00000D6B 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 00000D6D 7D09                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 00000D6F F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 00000D71 BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 00000D76 EB05                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    50 00000D78 BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 00000D7D 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 00000D80 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 00000D83 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 00000D85 7D09                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 00000D87 F7DA                <1>             neg     edx                                             ;   height *= -1
    60 00000D89 BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 00000D8E EB05                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    63 00000D90 BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 00000D95 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 00000D98 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 00000D9B 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 00000D9E 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 00000DA1 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 00000DA4 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 00000DA7 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 00000DA9 7F08                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 00000DAB 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 00000DAE 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 00000DB1 EB06                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    93                              <1>                                                                     ;   // y axis is base one.
    94 00000DB3 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 00000DB6 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 00000DB9 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 00000DBC 83F900              <1>             cmp     ecx, 0
   101 00000DBF 7505                <1>             jnz     .30E
   102 00000DC1 B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   107                              <1> 
   108                              <1> %ifdef      USE_SYSTEM_CALL
   109 00000DC6 89C8                <1>             mov     eax, ecx
   110                              <1> 
   111 00000DC8 8B5D18              <1>             mov     ebx, [ebp + 24]
   112 00000DCB 8B4DF8              <1>             mov     ecx, [ebp -  8]
   113 00000DCE 8B55EC              <1>             mov     edx, [ebp - 20]
   114 00000DD1 CD82                <1>             int     0x82
   115                              <1> 
   116 00000DD3 89C1                <1>             mov     ecx, eax
   117                              <1> %else
   120                              <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   121                              <1> %endif
   122                              <1>             ; update base axis(1 dot)
   123 00000DD5 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   124 00000DD8 0106                <1>             add     [esi - 0], eax
   125                              <1> 
   126                              <1>             ; update relative axis
   127 00000DDA 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   128 00000DDD 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   129                              <1> 
   130 00000DE0 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   131                              <1> 
   132 00000DE3 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   133 00000DE5 7C07                <1>             jl      .52E                                            ; {
   134 00000DE7 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   135                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   136 00000DE9 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   137 00000DEC 011F                <1>             add     [edi - 0], ebx
   138                              <1> .52E:                                                               ; }
   139                              <1> 
   140 00000DEE 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   141                              <1> 
   142 00000DF1 E2D3                <1>             loop    .50L
   143                              <1> .50E:
   144                              <1> 
   145                              <1>             ; return registers
   146 00000DF3 5F                  <1>             pop     edi
   147 00000DF4 5E                  <1>             pop     esi
   148 00000DF5 5A                  <1>             pop     edx
   149 00000DF6 59                  <1>             pop     ecx
   150 00000DF7 5B                  <1>             pop     ebx
   151 00000DF8 58                  <1>             pop     eax
   152                              <1> 
   153                              <1>             ; destruct stack frame
   154 00000DF9 89EC                <1>             mov     esp, ebp
   155 00000DFB 5D                  <1>             pop     ebp
   156                              <1> 
   157 00000DFC C3                  <1>             ret
   196                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 00000DFD 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 00000DFE 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 00000E00 50                  <1>             push    eax
    11 00000E01 53                  <1>             push    ebx
    12 00000E02 51                  <1>             push    ecx
    13 00000E03 52                  <1>             push    edx
    14 00000E04 56                  <1>             push    esi
    15 00000E05 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000E06 8B4508              <1>             mov     eax, [ebp +  8]
    19 00000E09 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 00000E0C 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 00000E0F 8B5514              <1>             mov     edx, [ebp + 20]
    22 00000E12 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 00000E15 39C8                <1>             cmp     eax, ecx
    26 00000E17 7C01                <1>             jl      .10E
    27 00000E19 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    29 00000E1A 39D3                <1>             cmp     ebx, edx
    30 00000E1C 7C02                <1>             jl      .20E
    31 00000E1E 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    33                              <1> 
    34                              <1>             ; draw rectangle
    35 00000E20 5653515350E824FFFF- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35 00000E29 FF6683C414          <1>
    36 00000E2E 5652505350E816FFFF- <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36 00000E37 FF6683C414          <1>
    37                              <1> 
    38 00000E3C 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39 00000E3D 5652515250E807FFFF- <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39 00000E46 FF6683C414          <1>
    40 00000E4B 42                  <1>             inc     edx
    41                              <1> 
    42 00000E4C 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43 00000E4D 5652515351E8F7FEFF- <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43 00000E56 FF6683C414          <1>
    44                              <1> 
    45                              <1>             ; return registers
    46 00000E5B 5F                  <1>             pop     edi
    47 00000E5C 5E                  <1>             pop     esi
    48 00000E5D 5A                  <1>             pop     edx
    49 00000E5E 59                  <1>             pop     ecx
    50 00000E5F 5B                  <1>             pop     ebx
    51 00000E60 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000E61 89EC                <1>             mov     esp, ebp
    55 00000E63 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000E64 C3                  <1>             ret
   197                                  %include    "../modules/protect/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 00000E65 55                  <1>         push    ebp
     6 00000E66 89E5                <1>         mov     ebp, esp                                ;   +24|flag
     7                              <1>                                                         ;   +20|radix
     8                              <1>                                                         ;   +16|dest buffer size
     9                              <1>                                                         ;   +12|dest buffer address
    10                              <1>                                                         ;   + 8|the value to be converted
    11                              <1>                                                         ;   + 4|Instruction Pointer
    12                              <1>                                                         ;EBP+ 0|EBP
    13                              <1>         ; save registers
    14                              <1> 
    15 00000E68 50                  <1>         push    eax
    16 00000E69 53                  <1>         push    ebx
    17 00000E6A 51                  <1>         push    ecx
    18 00000E6B 52                  <1>         push    edx
    19 00000E6C 56                  <1>         push    esi
    20 00000E6D 57                  <1>         push    edi
    21                              <1> 
    22                              <1>         ; get args
    23                              <1> 
    24 00000E6E 8B4508              <1>         mov     eax, [ebp +  8]                         ; val = value
    25 00000E71 8B750C              <1>         mov     esi, [ebp + 12]                         ; dest= buffer address
    26 00000E74 8B4D10              <1>         mov     ecx, [ebp + 16]                         ; size= remaining buffer size
    27                              <1> 
    28 00000E77 89F7                <1>         mov     edi, esi                                ; end of buffer
    29 00000E79 01CF                <1>         add     edi, ecx                                ; dest = &dest[esize - 1]
    30 00000E7B 4F                  <1>         dec     edi
    31                              <1> 
    32 00000E7C 8B5D18              <1>         mov     ebx, [ebp + 24]
    33                              <1> 
    34                              <1>         ; signing judge
    35                              <1> 
    36 00000E7F F7C301000000        <1>         test    ebx, 0b0001                             ; if (flags & 0x01) //if signed => ZF = 0
    37 00000E85 7408                <1> .10Q    je      .10E                                    ; {                 //if not ZF = 1 so => jmp
    38 00000E87 83F800              <1>         cmp     eax, 0                                  ;   if (val < 0)    //CF = 1, ZF = 0
    39 00000E8A 7D03                <1> .12Q    jge     .12E                                    ;   {
    40 00000E8C 83CB02              <1>         or      ebx, 0b0010                             ;       flags |= 2; //set B1
    41                              <1>                                                         ; }}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ; sign output judge
    46                              <1> 
    47 00000E8F F7C302000000        <1>         test    ebx, 0b0010
    48 00000E95 7410                <1> .20Q    je      .20E
    49 00000E97 83F800              <1>         cmp     eax, 0
    50 00000E9A 7D07                <1> .22Q    jge     .22F
    51 00000E9C F7D8                <1>         neg     eax                                     ; sign reverse
    52 00000E9E C6062D              <1>         mov     [esi], byte '-'                         ; sign display
    53 00000EA1 EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 00000EA3 C6062B              <1>         mov     [esi], byte '+'
    56                              <1> .22E:
    57 00000EA6 49                  <1>         dec     ecx                                     ; subtract remaining buffer size -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ; ASCII conversion
    61                              <1> 
    62 00000EA7 8B5D14              <1>         mov     ebx, [ebp + 20]                          ; ebx = radix
    63                              <1> 
    64                              <1> .30L:                                                   ; do{
    65 00000EAA BA00000000          <1>         mov     edx, 0
    66 00000EAF F7F3                <1>         div     ebx                                    ;   edx = edx:eax % ebx;
    67                              <1>                                                         ;   eax = edx:eax / ebx;
    68                              <1> 
    69 00000EB1 89D6                <1>         mov     esi, edx                                ;   //refer to coversion table
    70 00000EB3 8A96[DE0E0000]      <1>         mov     dl, byte [.ascii + esi]                 ;   DL = ASCII[edx];
    71                              <1> 
    72 00000EB9 8817                <1>         mov     [edi], dl                               ;   *dest = DL;
    73 00000EBB 4F                  <1>         dec     edi                                     ;   dest--;
    74                              <1> 
    75 00000EBC 83F800              <1>         cmp     eax, 0
    76 00000EBF E0E9                <1>         loopnz  .30L                                    ; } while(eax);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ; padding (zero / blank)
    81                              <1> 
    82 00000EC1 83F900              <1>         cmp     ecx, 0                                  ; if (esize)
    83 00000EC4 740E                <1> .40Q:   je      .40E                                    ; {
    84 00000EC6 B020                <1>         mov     al, ' '                                 ;   AL = ' '; // padding with blanks
    85 00000EC8 66837D1804          <1>         cmp     [ebp + 24], word 0b0100                  ;   if (flags & 0x04)
    86 00000ECD 7502                <1> .42Q:   jne     .42E                                    ;   {
    87 00000ECF B030                <1>         mov     al, '0'                                 ;       AL = '0'; // padding with zero
    88                              <1> .42E:                                                   ;   }
    89 00000ED1 FD                  <1>         std                                             ;   // DF = 1(dec)
    90 00000ED2 F3AA                <1>         rep stosb                                       ;   while (--ecx) * edi-- = ' ';
    91                              <1> .40E:                                                   ; }
    92                              <1> 
    93                              <1>         ; return registers
    94                              <1> 
    95 00000ED4 5F                  <1>         pop     edi
    96 00000ED5 5E                  <1>         pop     esi
    97 00000ED6 5A                  <1>         pop     edx
    98 00000ED7 59                  <1>         pop     ecx
    99 00000ED8 5B                  <1>         pop     ebx
   100 00000ED9 58                  <1>         pop     eax
   101                              <1> 
   102                              <1>         ; destruct stack frame
   103                              <1> 
   104 00000EDA 89EC                <1>         mov     esp, ebp
   105 00000EDC 5D                  <1>         pop     ebp
   106                              <1> 
   107 00000EDD C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 00000EDE 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                      ; conversion table
   110 00000EE7 39414243444546      <1>
   198                                  %include    "../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000EEE 55                  <1>             push    ebp                                     ; EBP+8 | destination
     5 00000EEF 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 00000EF1 50                  <1>             push    eax
     9 00000EF2 53                  <1>             push    ebx
    10                              <1> 
    11                              <1> ; // Avoid conflicts between RTC data updates and
    12                              <1> ; // on-chip RAM access by confirming UIP bit on Register A
    13                              <1> 
    14 00000EF3 B00A                <1>             mov     al, 0x0A                                ; register A
    15 00000EF5 E670                <1>             out     0x70, al
    16 00000EF7 E471                <1>             in      al, 0x71                                ; al = register A
    17 00000EF9 A880                <1>             test    al, 0x80                                ; if (UIP) // updating
    18 00000EFB 7407                <1>             je      .10F                                    ; {
    19 00000EFD B801000000          <1>             mov     eax, 1                                  ;   return = 1;
    20 00000F02 EB27                <1>             jmp     .10E                                    ; }
    21                              <1> .10F:                                                       ; else
    22                              <1>                                                             ; {        // get time process
    23                              <1> 
    24                              <1>             ; main process
    25 00000F04 B004                <1>             mov     al, 0x04                                ;   hour
    26 00000F06 E670                <1>             out     0x70, al
    27 00000F08 E471                <1>             in      al, 0x71
    28                              <1> 
    29 00000F0A C1E008              <1>             shl     eax, 8
    30                              <1> 
    31 00000F0D B002                <1>             mov     al, 0x02                                ;   minute
    32 00000F0F E670                <1>             out     0x70, al
    33 00000F11 E471                <1>             in      al, 0x71
    34                              <1> 
    35 00000F13 C1E008              <1>             shl     eax, 8
    36                              <1> 
    37 00000F16 B000                <1>             mov     al, 0x00                                ;   second
    38 00000F18 E670                <1>             out     0x70, al
    39 00000F1A E471                <1>             in      al, 0x71
    40                              <1> 
    41 00000F1C 25FFFFFF00          <1>             and     eax, 0x00_FF_FF_FF                      ;   all data are in lower 3 bytes of eax register
    42                              <1> 
    43 00000F21 8B5D08              <1>             mov     ebx, [ebp + 8]
    44 00000F24 8903                <1>             mov     [ebx], eax                              ;   [dest] = real time
    45                              <1> 
    46 00000F26 B800000000          <1>             mov     eax, 0                                  ;   return = 0;
    47                              <1> .10E:                                                       ; }
    48                              <1> 
    49                              <1>             ; return register
    50 00000F2B 5B                  <1>             pop     ebx
    51 00000F2C 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000F2D 89EC                <1>             mov     esp, ebp
    55 00000F2F 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000F30 C3                  <1>             ret
   199                                  %include    "../modules/protect/draw_time.s"
     1                              <1> draw_time:
     2                              <1> 
     3                              <1>             ; construct stack frame                         ;   +20 | time data
     4 00000F31 55                  <1>             push    ebp                                     ;   +16 | display color
     5 00000F32 89E5                <1>             mov     ebp, esp                                ;   +12 | row
     6                              <1>                                                             ;EBP+ 8 | col
     7                              <1> 
     8                              <1>             ; save registers
     9 00000F34 50                  <1>             push    eax
    10 00000F35 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; get arg
    13 00000F36 8B4514              <1>             mov     eax, [ebp + 20]
    14                              <1> 
    15 00000F39 0FB6D8              <1>             movzx   ebx, al                                 ; ebx = second
    16 00000F3C 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .sec, 2, 16, 0b0100
    16 00000F43 [A30F0000]53E818FF- <1>
    16 00000F4B FFFF6683C414        <1>
    17                              <1> 
    18 00000F51 88E3                <1>             mov     bl, ah                                  ; ebx = min
    19 00000F53 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .min, 2, 16, 0b0100
    19 00000F5A [A00F0000]53E801FF- <1>
    19 00000F62 FFFF6683C414        <1>
    20                              <1> 
    21 00000F68 C1E810              <1>             shr     eax, 16                                 ; ax = hour
    22 00000F6B 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .hour, 2, 16, 0b0100
    22 00000F72 [9D0F0000]50E8E9FE- <1>
    22 00000F7A FFFF6683C414        <1>
    23                              <1> 
    24                              <1>             ; display time
    25 00000F80 68[9D0F0000]FF7510- <1>             cdecl   draw_str, dword [ebp + 8], dword [ebp + 12], dword [ebp + 16], .hour
    25 00000F88 FF750CFF7508E83AFC- <1>
    25 00000F91 FFFF6683C410        <1>
    26                              <1> 
    27                              <1>             ; return registers
    28 00000F97 5B                  <1>             pop     ebx
    29 00000F98 58                  <1>             pop     eax
    30                              <1> 
    31                              <1>             ; destruct stack frame
    32 00000F99 89EC                <1>             mov     esp, ebp
    33 00000F9B 5D                  <1>             pop     ebp
    34                              <1> 
    35 00000F9C C3                  <1>             ret
    36                              <1> 
    37 00000F9D 5A5A3A              <1> .hour:  db  "ZZ:"
    38 00000FA0 5A5A3A              <1> .min:  db  "ZZ:"
    39 00000FA3 5A5A00              <1> .sec:  db  "ZZ", 0
   200                                  %include    "../modules/protect/interrupt.s"
     1                              <1> ; Initialize vector of IDTR
     2                              <1> 
     3 00000FA6 90<rept>            <1> ALIGN 4
     4 00000FA8 FF07                <1> IDTR:       dw      8 * 256 - 1                                     ; limit of IDT
     5 00000FAA 00001000            <1>             dd      VECT_BASE                                       ; base address of IDT
     6                              <1> 
     7                              <1> ; Initialize IDT
     8                              <1> 
     9                              <1> init_int:
    10                              <1> 
    11                              <1>             ; save registers
    12 00000FAE 50                  <1>             push    eax
    13 00000FAF 53                  <1>             push    ebx
    14 00000FB0 51                  <1>             push    ecx
    15 00000FB1 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; define Interrupt Gate Descriptor and apply default process to them
    18                              <1> 
    19 00000FB2 8D05[F8100000]      <1>             lea     eax, [int_default]                              ; EAX = the address of interrupt process
    20 00000FB8 BB008E0800          <1>             mov     ebx, 0x0008_8E00                                ; EBX = segment selector & P,DPL,DT,TYPE
    21 00000FBD 6693                <1>             xchg    ax, bx                                          ; exchange lower word
    22                              <1> 
    23 00000FBF B900010000          <1>             mov     ecx, 256                                        ; num of Interrupt Gate Descriptor
    24 00000FC4 BF00001000          <1>             mov     edi, VECT_BASE                                  ; base address of Interrupt Descriptor Table
    25                              <1> 
    26                              <1> .10L:
    27 00000FC9 891F                <1>             mov     [edi + 0], ebx                                  ; interrupt descriptor(lower)
    28 00000FCB 894704              <1>             mov     [edi + 4], eax                                  ; interrupt descriptor(upper)
    29 00000FCE 83C708              <1>             add     edi, 8                                          ; EDI += 8 byte
    30 00000FD1 E2F6                <1>             loop    .10L
    31                              <1> 
    32                              <1>             ; set up Interrupt Descriptor
    33 00000FD3 0F011D[A80F0000]    <1>             lidt    [IDTR]
    34                              <1> 
    35                              <1>             ; return registers
    36 00000FDA 5F                  <1>             pop     edi
    37 00000FDB 59                  <1>             pop     ecx
    38 00000FDC 5B                  <1>             pop     ebx
    39 00000FDD 58                  <1>             pop     eax
    40                              <1> 
    41 00000FDE C3                  <1>             ret
    42                              <1> 
    43                              <1> int_stop:
    44                              <1> 
    45 00000FDF FB                  <1>             sti                                                     ; interrupt enable
    46                              <1> 
    47                              <1>             ; display the string indicated in EAX
    48 00000FE0 50680F0600006A0F6A- <1>             cdecl   draw_str, 25, 15, 0x060F, eax
    48 00000FE9 19E8DEFBFFFF6683C4- <1>
    48 00000FF2 10                  <1>
    49                              <1> 
    50                              <1>             ; convert stack data into string
    51 00000FF3 8B0424              <1>             mov     eax, [esp + 0]                                  ; EIP
    52 00000FF6 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p1, 8, 16, 0b0100
    52 00000FFD [BB100000]50E85EFE- <1>
    52 00001005 FFFF6683C414        <1>
    53                              <1> 
    54 0000100B 8B442404            <1>             mov     eax, [esp + 4]                                  ; CS
    55 0000100F 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p2, 8, 16, 0b0100
    55 00001016 [CC100000]50E845FE- <1>
    55 0000101E FFFF6683C414        <1>
    56                              <1> 
    57 00001024 8B442408            <1>             mov     eax, [esp + 8]                                  ; EFLAGS
    58 00001028 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p3, 8, 16, 0b0100
    58 0000102F [DD100000]50E82CFE- <1>
    58 00001037 FFFF6683C414        <1>
    59                              <1> 
    60 0000103D 8B44240C            <1>             mov     eax, [esp + 12]
    61 00001041 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p4, 8, 16, 0b0100
    61 00001048 [EE100000]50E813FE- <1>
    61 00001050 FFFF6683C414        <1>
    62                              <1> 
    63                              <1>             ; display string
    64 00001056 68[B4100000]68040F- <1>             cdecl   draw_str, 25, 16, 0x0F04, .s1
    64 0000105E 00006A106A19E864FB- <1>
    64 00001067 FFFF6683C410        <1>
    65 0000106D 68[C5100000]68040F- <1>             cdecl   draw_str, 25, 17, 0x0F04, .s2
    65 00001075 00006A116A19E84DFB- <1>
    65 0000107E FFFF6683C410        <1>
    66 00001084 68[D6100000]68040F- <1>             cdecl   draw_str, 25, 18, 0x0F04, .s3
    66 0000108C 00006A126A19E836FB- <1>
    66 00001095 FFFF6683C410        <1>
    67 0000109B 68[E7100000]68040F- <1>             cdecl   draw_str, 25, 19, 0x0F04, .s4
    67 000010A3 00006A136A19E81FFB- <1>
    67 000010AC FFFF6683C410        <1>
    68                              <1> 
    69                              <1>             ; infinite loop
    70 000010B2 EBFE                <1>             jmp     $
    71                              <1> 
    72 000010B4 4553502B20303A      <1> .s1         db  "ESP+ 0:"
    73 000010BB 5F5F5F5F5F5F5F5F20- <1> .p1         db  "________ ", 0
    73 000010C4 00                  <1>
    74 000010C5 2020202B20343A      <1> .s2         db  "   + 4:"
    75 000010CC 5F5F5F5F5F5F5F5F20- <1> .p2         db  "________ ", 0
    75 000010D5 00                  <1>
    76 000010D6 2020202B20383A      <1> .s3         db  "   + 8:"
    77 000010DD 5F5F5F5F5F5F5F5F20- <1> .p3         db  "________ ", 0
    77 000010E6 00                  <1>
    78 000010E7 2020202B31323A      <1> .s4         db  "   +12:"
    79 000010EE 5F5F5F5F5F5F5F5F20- <1> .p4         db  "________ ", 0
    79 000010F7 00                  <1>
    80                              <1> 
    81                              <1> int_default:
    82 000010F8 9C                  <1>             pushf                                                   ; EFLAGS
    83 000010F9 0E                  <1>             push    cs                                              ; CS
    84 000010FA 68[DF0F0000]        <1>             push    int_stop                                        ; the process of displaying stack
    85                              <1> 
    86 000010FF B8[05110000]        <1>             mov     eax, .s0                                        ; interrupt type
    87 00001104 CF                  <1>             iret
    88                              <1> 
    89 00001105 203C2020202053544F- <1> .s0         db  " <    STOP    > ", 0
    89 0000110E 50202020203E2000    <1>
    90                              <1> 
    91                              <1> int_zero_div:
    92 00001116 9C                  <1>             pushf                                                   ; EFLAGS
    93 00001117 0E                  <1>             push    cs                                              ; CS
    94 00001118 68[DF0F0000]        <1>             push    int_stop                                        ; the process of displaying stack
    95                              <1> 
    96 0000111D B8[23110000]        <1>             mov     eax, .s0                                        ; interrupt type
    97 00001122 CF                  <1>             iret
    98                              <1> 
    99 00001123 203C20205A45524F20- <1> .s0         db  " <  ZERO DIV  > ", 0
    99 0000112C 44495620203E2000    <1>
   100                              <1> 
   101                              <1> 
   201                                  %include    "../modules/protect/pic.s"
     1                              <1> init_pic:
     2                              <1> 
     3                              <1>             ; save register
     4 00001134 50                  <1>             push    eax
     5                              <1> 
     6                              <1>             ; set up Master PIC
     7                              <1>             outp    0x20, 0x11                              ; MASTER.ICW1 = 0x11
     7 00001135 B011                <2>  mov al, %2
     7 00001137 E620                <2>  out %1, al
     8                              <1>             outp    0x21, 0x20                              ; MASTER.ICW2 = 0x20 // interrupt vector
     8 00001139 B020                <2>  mov al, %2
     8 0000113B E621                <2>  out %1, al
     9                              <1>             outp    0x21, 0x04                              ; MASTER.ICW3 = 0x04 // slave connection position : IRQ2
     9 0000113D B004                <2>  mov al, %2
     9 0000113F E621                <2>  out %1, al
    10                              <1>             outp    0x21, 0x05                              ; MASTER.ICW4 = 0x05
    10 00001141 B005                <2>  mov al, %2
    10 00001143 E621                <2>  out %1, al
    11                              <1>             outp    0x21, 0xFF                              ; master interrupt mask
    11 00001145 B0FF                <2>  mov al, %2
    11 00001147 E621                <2>  out %1, al
    12                              <1> 
    13                              <1>             ; set up Slave
    14                              <1>             outp    0xA0, 0x11                              ; SLAVE.ICW1 = 0x11
    14 00001149 B011                <2>  mov al, %2
    14 0000114B E6A0                <2>  out %1, al
    15                              <1>             outp    0xA1, 0x28                              ; SLAVE.ICW2 = 0x28 // interrupt vector
    15 0000114D B028                <2>  mov al, %2
    15 0000114F E6A1                <2>  out %1, al
    16                              <1>             outp    0xA1, 0x02                              ; SLAVE.ICW3 = 0x02 // slave ID = 2
    16 00001151 B002                <2>  mov al, %2
    16 00001153 E6A1                <2>  out %1, al
    17                              <1>             outp    0xA1, 0x01                              ; SLAVE.ICW4 = 0x01
    17 00001155 B001                <2>  mov al, %2
    17 00001157 E6A1                <2>  out %1, al
    18                              <1>             outp    0xA1, 0xFF                              ; slave interrupt mask
    18 00001159 B0FF                <2>  mov al, %2
    18 0000115B E6A1                <2>  out %1, al
    19                              <1> 
    20                              <1>             ; return regisiter
    21 0000115D 58                  <1>             pop     eax
    22                              <1> 
    23 0000115E C3                  <1>             ret
   202                                  %include    "../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2                              <1> 
     3                              <1>             ; save registers
     4 0000115F 60                  <1>             pusha
     5 00001160 1E                  <1>             push    ds
     6 00001161 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00001162 66B81000            <1>             mov     ax, 0x0010                                      ; offset from the beginnig of GDT // second element
    10 00001166 8ED8                <1>             mov     ds, ax
    11 00001168 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; get time from RTC
    14 0000116A 68[54020000]E87AFD- <1>             cdecl   rtc_get_time, RTC_TIME
    14 00001172 FFFF6683C404        <1>
    15                              <1> 
    16                              <1>             ; get RTC interrupt factor
    17                              <1>             outp    0x70, 0x0C                                      ; select register C
    17 00001178 B00C                <2>  mov al, %2
    17 0000117A E670                <2>  out %1, al
    18 0000117C E471                <1>             in      al, 0x71
    19                              <1> 
    20                              <1>             ; clear interrupt flag
    21 0000117E B020                <1>             mov     al, 0x20                                        ; AL = EOI command
    22 00001180 E6A0                <1>             out     0xA0, al                                        ; slave PIC
    23 00001182 E620                <1>             out     0x20, al                                        ; master PIC
    24                              <1> 
    25                              <1>             ; return register
    26 00001184 07                  <1>             pop     es
    27 00001185 1F                  <1>             pop     ds
    28 00001186 61                  <1>             popa
    29                              <1> 
    30 00001187 CF                  <1>             iret                                                    ; end of interrupt process
    31                              <1>                                                                     ; return including flag register => iret
    32                              <1> 
    33                              <1> ; Enable interrupt by RTC itself
    34                              <1> 
    35                              <1> rtc_int_en:
    36                              <1> 
    37                              <1>             ; construct stack frame
    38 00001188 55                  <1>             push    ebp
    39 00001189 89E5                <1>             mov     ebp, esp                                        ;EBP+8 | enable bit
    40                              <1> 
    41                              <1>             ; save register
    42 0000118B 50                  <1>             push    eax
    43                              <1> 
    44                              <1>             ; set up Interrupt Permission
    45                              <1>             outp    0x70, 0x0B                                      ; select register B
    45 0000118C B00B                <2>  mov al, %2
    45 0000118E E670                <2>  out %1, al
    46                              <1> 
    47 00001190 E471                <1>             in      al, 0x71
    48 00001192 0A4508              <1>             or      al, [ebp + 8]                                   ; set the specified bit
    49                              <1> 
    50 00001195 E671                <1>             out     0x71, al                                        ; write down to register B
    51                              <1> 
    52                              <1>             ; return register
    53 00001197 58                  <1>             pop     eax
    54                              <1> 
    55                              <1>             ; destruct stack frame
    56 00001198 89EC                <1>             mov     esp, ebp
    57 0000119A 5D                  <1>             pop     ebp
    58                              <1> 
    59 0000119B C3                  <1>             ret
   203                                  %include    "../modules/protect/ring_buff.s"
     1                              <1> ring_rd:
     2                              <1> 
     3                              <1>             ; construct stack frame                                     ;    +12 | save_dest address
     4 0000119C 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
     5 0000119D 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 0000119F 50                  <1>             push    eax
     9 000011A0 53                  <1>             push    ebx
    10 000011A1 56                  <1>             push    esi
    11 000011A2 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; get args
    14 000011A3 8B7508              <1>             mov     esi, [ebp +  8]
    15 000011A6 8B7D0C              <1>             mov     edi, [ebp + 12]
    16                              <1> 
    17                              <1>             ; confirm the reading location
    18 000011A9 B800000000          <1>             mov     eax, 0                                              ; EAX = 0 // no data
    19 000011AE 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = rp
    20 000011B0 3B5E04              <1>             cmp     ebx, [esi + ring_buff.wp]                           ; if (EBX != wp)
    21 000011B3 7411                <1>             je      .10E                                                ; {
    22                              <1> 
    23 000011B5 8A441E08            <1>             mov     al, [esi + ring_buff.item + ebx]                    ;   AL = BUFFER[rp] // store key code(unit:byte)
    24                              <1> 
    25 000011B9 8807                <1>             mov     [edi], al                                           ;   [EDI] = AL      // save data
    26                              <1> 
    27 000011BB 43                  <1>             inc     ebx                                                 ;   EBX++           // next reading location
    28 000011BC 83E30F              <1>             and     ebx, RING_INDEX_MASK                                ;   EBX &= 0x0F     // limit size
    29 000011BF 891E                <1>             mov     [esi + ring_buff.rp], ebx                           ;   rp = EBX        // save the reading location
    30                              <1> 
    31 000011C1 B801000000          <1>             mov     eax, 1                                              ;   EAX = 1         // data exists
    32                              <1> .10E:                                                                   ; }
    33                              <1> 
    34                              <1>             ; return registers
    35 000011C6 5F                  <1>             pop     edi
    36 000011C7 5E                  <1>             pop     esi
    37 000011C8 5B                  <1>             pop     ebx
    38 000011C9 58                  <1>             pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 000011CA 89EC                <1>             mov     esp, ebp
    42 000011CC 5D                  <1>             pop     ebp
    43                              <1> 
    44 000011CD C3                  <1>             ret
    45                              <1> 
    46                              <1> ring_wr:
    47                              <1> 
    48                              <1>             ; construct stack frame                                     ;    +12 | data to write
    49 000011CE 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
    50 000011CF 89E5                <1>             mov     ebp, esp
    51                              <1> 
    52                              <1>             ; save registers
    53 000011D1 50                  <1>             push    eax
    54 000011D2 53                  <1>             push    ebx
    55 000011D3 51                  <1>             push    ecx
    56 000011D4 56                  <1>             push    esi
    57 000011D5 57                  <1>             push    edi
    58                              <1> 
    59                              <1>             ; get args
    60 000011D6 8B7508              <1>             mov     esi, [ebp + 8]
    61                              <1> 
    62                              <1>             ; confirm the writing location
    63 000011D9 B800000000          <1>             mov     eax, 0
    64 000011DE 8B5E04              <1>             mov     ebx, [esi + ring_buff.wp]                           ; writing position
    65 000011E1 89D9                <1>             mov     ecx, ebx
    66 000011E3 41                  <1>             inc     ecx                                                 ; next writing location
    67 000011E4 83E10F              <1>             and     ecx, RING_INDEX_MASK                                ; size limit
    68                              <1> 
    69 000011E7 3B0E                <1>             cmp     ecx, [esi + ring_buff.rp]                           ; if (ECX != rp)
    70 000011E9 740F                <1>             je      .10E                                                ; {
    71                              <1> 
    72 000011EB 8A450C              <1>             mov     al, [ebp + 12]                                      ;   AL = data
    73                              <1> 
    74 000011EE 88441E08            <1>             mov     [esi + ring_buff.item + ebx], al                    ;   BUFFER[wp] = AL // save key code
    75 000011F2 894E04              <1>             mov     [esi + ring_buff.wp], ecx                           ;   wp = ECX        // save the writing location
    76 000011F5 B801000000          <1>             mov     eax, 1
    77                              <1> .10E:
    78                              <1> 
    79                              <1>             ; return registers
    80 000011FA 5F                  <1>             pop     edi
    81 000011FB 5E                  <1>             pop     esi
    82 000011FC 59                  <1>             pop     ecx
    83 000011FD 5B                  <1>             pop     ebx
    84 000011FE 58                  <1>             pop     eax
    85                              <1> 
    86                              <1>             ; destruct stack frame
    87 000011FF 89EC                <1>             mov     esp, ebp
    88 00001201 5D                  <1>             pop     ebp
    89                              <1> 
    90 00001202 C3                  <1>             ret
    91                              <1> 
    92                              <1> draw_key:
    93                              <1> 
    94                              <1>             ; construct stack frame                                     ;    +16 | ring buffer
    95 00001203 55                  <1>             push    ebp                                                 ;    +12 | row
    96 00001204 89E5                <1>             mov     ebp, esp                                            ; EBP+ 8 | col
    97                              <1> 
    98                              <1>             ; save registers
    99 00001206 60                  <1>             pusha                                                       ; save EAX,EBX,ECX,EDX,EDI,ESI,EBP,ESP
   100                              <1> 
   101                              <1>             ; get args
   102 00001207 8B5508              <1>             mov     edx, [ebp +  8]
   103 0000120A 8B7D0C              <1>             mov     edi, [ebp + 12]
   104 0000120D 8B7510              <1>             mov     esi, [ebp + 16]
   105                              <1> 
   106                              <1>             ; get ring buffer info
   107 00001210 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = wp // writing location
   108 00001212 8D7608              <1>             lea     esi, [esi + ring_buff.item]
   109 00001215 B910000000          <1>             mov     ecx, RING_ITEM_SIZE
   110                              <1> 
   111                              <1>             ; display data
   112                              <1> .10L:
   113                              <1> 
   114 0000121A 4B                  <1>             dec     ebx                                                 ; EBX-- == where data exists
   115 0000121B 83E30F              <1>             and     ebx, RING_INDEX_MASK
   116 0000121E 8A041E              <1>             mov     al, [esi + ebx]                                     ; EAX = KEY_BUFF[EBX]
   117                              <1> 
   118 00001221 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .tmp, 2, 16, 0b0100
   118 00001228 [52120000]50E833FC- <1>
   118 00001230 FFFF6683C414        <1>
   119 00001236 68[52120000]6A0257- <1>             cdecl   draw_str, edx, edi, 0x02, .tmp
   119 0000123E 52E889F9FFFF6683C4- <1>
   119 00001247 10                  <1>
   120                              <1> 
   121 00001248 83C203              <1>             add     edx, 3                                              ; updata display position(3 chars)
   122                              <1> 
   123 0000124B E2CD                <1>             loop    .10L
   124                              <1> .10E:
   125                              <1> 
   126                              <1>             ; return registers
   127 0000124D 61                  <1>             popa
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 0000124E 89EC                <1>             mov     esp, ebp
   131 00001250 5D                  <1>             pop     ebp
   132                              <1> 
   133 00001251 C3                  <1>             ret
   134                              <1> 
   135 00001252 2D2D2000            <1> .tmp        db "-- ", 0
   204                                  %include    "../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1> 
     3                              <1>             ; save registers
     4 00001256 60                  <1>             pusha
     5 00001257 1E                  <1>             push    ds
     6 00001258 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment for data
     9 00001259 66B81000            <1>             mov     ax, 0x0010
    10 0000125D 8ED8                <1>             mov     ds, ax
    11 0000125F 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; read buffer of KBC
    14 00001261 E460                <1>             in      al, 0x60                                    ; AL = get key code
    15                              <1> 
    16                              <1>             ; save key code
    17 00001263 5068[7C120000]E860- <1>             cdecl   ring_wr, _KEY_BUFF, eax
    17 0000126B FFFFFF6683C408      <1>
    18                              <1> 
    19                              <1>             ; send interrupt end command
    20                              <1>             outp    0x20, 0x20                                  ; master PIC: EOI command
    20 00001272 B020                <2>  mov al, %2
    20 00001274 E620                <2>  out %1, al
    21                              <1> 
    22                              <1>             ; return registers
    23 00001276 07                  <1>             pop     es
    24 00001277 1F                  <1>             pop     ds
    25 00001278 61                  <1>             popa
    26                              <1> 
    27 00001279 CF                  <1>             iret
    28                              <1> 
    29 0000127A 00<rept>            <1> ALIGN 4, db 0
    30 0000127C 00<rept>            <1> _KEY_BUFF:  times ring_buff_size db 0
   205                                  %include    "../modules/protect/timer.s"
     1                              <1> int_en_timer0:
     2                              <1> 
     3                              <1>             ; save register
     4 00001294 50                  <1>             push    eax                                     ; use eax register on outp
     5                              <1> 
     6                              <1>             outp    0x43, 0b_00_11_010_0                    ; counter 0|access way:lower/upper|mode 2|16 bit binary couner
     6 00001295 B034                <2>  mov al, %2
     6 00001297 E643                <2>  out %1, al
     7                              <1>             outp    0x40, 0x9C                              ; lower byte
     7 00001299 B09C                <2>  mov al, %2
     7 0000129B E640                <2>  out %1, al
     8                              <1>             outp    0x40, 0x2E                              ; upper byte
     8 0000129D B02E                <2>  mov al, %2
     8 0000129F E640                <2>  out %1, al
     9                              <1> 
    10                              <1>             ; return register
    11 000012A1 58                  <1>             pop     eax
    12                              <1> 
    13 000012A2 C3                  <1>             ret
   206                                  %include    "../modules/protect/draw_rotation_bar.s"
     1                              <1> ;--------------------------------------------------------------------------------------------
     2                              <1> ;char update cycle
     3                              <1> ;=> The value obtained by reading the value of Timer interrupt counter
     4                              <1> ;   and shifting it to the right by 4 bits
     5                              <1> ;   and if the value is different from the previous value, it's the time to update.
     6                              <1> ;--------------------------------------------------------------------------------------------
     7                              <1> 
     8                              <1> draw_rotation_bar:
     9                              <1> 
    10                              <1>             ; save register
    11 000012A3 50                  <1>             push    eax
    12                              <1> 
    13                              <1>             ; main process
    14 000012A4 A1[5C070000]        <1>             mov     eax, [TIMER_COUNT]
    15 000012A9 C1E804              <1>             shr     eax, 4
    16 000012AC 3B05[D4120000]      <1>             cmp     eax, [.index]
    17 000012B2 741E                <1>             je      .10E
    18                              <1> 
    19 000012B4 A3[D4120000]        <1>             mov     [.index], eax
    20 000012B9 83E003              <1>             and     eax, 0x03                                       ; limit to the range 0 to 3
    21                              <1> 
    22 000012BC 8A80[D8120000]      <1>             mov     al, [.table + eax]                              ; AL = table[index]
    23 000012C2 506A0F6A1D6A00E8D9- <1>             cdecl   draw_char, 0, 29, 0x000F, eax
    23 000012CB F7FFFF6683C410      <1>
    24                              <1> 
    25                              <1> .10E:
    26                              <1> 
    27                              <1>             ; return register
    28 000012D2 58                  <1>             pop     eax
    29                              <1> 
    30 000012D3 C3                  <1>             ret
    31                              <1> 
    32                              <1> ALIGN 4, db 0
    33 000012D4 00000000            <1> .index      dd 0                                                    ; previous value
    34 000012D8 7C2F2D5C            <1> .table      db "|/-\"                                               ; display bar
   207                                  %include    "../modules/protect/call_gate.s"
     1                              <1> ;--------------------------------------------------
     2                              <1> ; This is a rapper of draw_str func.
     3                              <1> ;--------------------------------------------------
     4                              <1> 
     5                              <1> call_gate:
     6                              <1> 
     7                              <1>             ; construct stack frame
     8                              <1>                                                                     ;    +24 | char
     9                              <1>                                                                     ;    +20 | display color
    10                              <1>                                                                     ;    +16 | row
    11                              <1>                                                                     ;    +12 | column
    12                              <1>                                                                     ; EBP+ 8 | CS(code segment)
    13 000012DC 55                  <1>             push    ebp
    14 000012DD 89E5                <1>             mov     ebp, esp
    15                              <1> 
    16                              <1>             ; save registers
    17 000012DF 60                  <1>             pusha
    18 000012E0 1E                  <1>             push    ds
    19 000012E1 06                  <1>             push    es
    20                              <1> 
    21                              <1>             ; set up segment for data
    22 000012E2 66B81000            <1>             mov     ax, 0x0010
    23 000012E6 8ED8                <1>             mov     ds, ax
    24 000012E8 8EC0                <1>             mov     es, ax
    25                              <1> 
    26                              <1>             ; display string
    27 000012EA 8B450C              <1>             mov     eax, dword [ebp + 12]
    28 000012ED 8B5D10              <1>             mov     ebx, dword [ebp + 16]
    29 000012F0 8B4D14              <1>             mov     ecx, dword [ebp + 20]
    30 000012F3 8B5518              <1>             mov     edx, dword [ebp + 24]
    31 000012F6 52515350E8CEF8FFFF- <1>             cdecl   draw_str, eax, ebx, ecx, edx
    31 000012FF 6683C410            <1>
    32                              <1> 
    33                              <1>             ; return registers
    34 00001303 07                  <1>             pop     es
    35 00001304 1F                  <1>             pop     ds
    36 00001305 61                  <1>             popa
    37                              <1> 
    38                              <1>             ; destruct stack frame
    39 00001306 89EC                <1>             mov     esp, ebp
    40 00001308 5D                  <1>             pop     ebp
    41                              <1> 
    42 00001309 CA1000              <1>             retf    4 * 4                                                ; end func and adjust arguments
   208                                  %include    "../modules/protect/trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1> 
     3                              <1>             ; output a char
     4 0000130C 50535251E892F7FFFF- <1>             cdecl   draw_char,  ecx, edx, ebx, eax
     4 00001315 6683C410            <1>
     5                              <1> 
     6 00001319 CF                  <1>             iret
     7                              <1> 
     8                              <1> trap_gate_82:
     9                              <1> 
    10                              <1>             ; draw pixel
    11 0000131A 535251E865F9FFFF66- <1>             cdecl   draw_pixel, ecx, edx, ebx
    11 00001323 83C40C              <1>
    12                              <1> 
    13 00001326 CF                  <1>             iret
   209                                  %include    "../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                                     ; EBP+8 | address of global variable
     5 00001327 55                  <1>             push    ebp
     6 00001328 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 0000132A 50                  <1>             push    eax
    10 0000132B 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; test and set
    13 0000132C B800000000          <1>             mov     eax, 0                                          ; local = 0
    14 00001331 8B5D08              <1>             mov     ebx, [ebp + 8]                                  ; global = address
    15                              <1> 
    16                              <1> .10L:
    17 00001334 F00FAB03            <1>             lock bts [ebx], eax                                     ; CF = TEST_AND_SET(IN_USE, 1)
    18 00001338 7307                <1>             jnc     .10E                                            ; if(0 == CF)
    19                              <1>                                                                     ;   break;
    20                              <1> 
    21                              <1> .12L:
    22 0000133A 0FA303              <1>             bt      [ebx], eax                                      ; CF = TEST(IN_USE, 1)
    23 0000133D 72FB                <1>             jc      .12L                                            ; if(0 == CF)
    24                              <1>                                                                     ;   break;
    25 0000133F EBF3                <1>             jmp     .10L
    26                              <1> .10E:
    27                              <1> 
    28                              <1>             ; return registers
    29 00001341 5B                  <1>             pop     ebx
    30 00001342 58                  <1>             pop     eax
    31                              <1> 
    32                              <1>             ; destruct stakc frame
    33 00001343 89EC                <1>             mov     esp, ebp
    34 00001345 5D                  <1>             pop     ebp
    35                              <1> 
    36 00001346 C3                  <1>             ret
   210                                  %include    "../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 
     3                              <1>             ; EBX == TSS selector
     4                              <1> 
     5 00001347 8B83[BA050000]      <1>             mov     eax, [GDT + ebx + 2]                            ; EAX = TSS[23:0]
     6 0000134D C1E008              <1>             shl     eax, 8
     7 00001350 8A83[BF050000]      <1>             mov     al,  [GDT + ebx + 7]                            ; AL  = TSS[31:24]
     8 00001356 C1C808              <1>             ror     eax, 8
     9                              <1> 
    10 00001359 C3                  <1>             ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 
    14                              <1>             ; EAX == base address of TSS descriptor
    15                              <1> 
    16 0000135A DD7068              <1>             fnsave  [eax + 104]                                     ; // save FPU context
    17 0000135D C780D4000000010000- <1>             mov     [eax + 104 + 108], dword 1                      ; saved = 1 // a flag which shows FPU context is saved.
    17 00001366 00                  <1>
    18                              <1> 
    19 00001367 C3                  <1>             ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1> 
    23 00001368 83B8D400000000      <1>             cmp     [eax + 104 + 108], dword 0                      ; if (0 == saved)
    24 0000136F 7504                <1>             jne     .10F
    25 00001371 DBE3                <1>             fninit                                                  ; initialize FPU
    26 00001373 EB03                <1>             jmp     .10E
    27                              <1> .10F:
    28 00001375 DD6068              <1>             frstor  [eax + 104]                                     ; return FPU context
    29                              <1> .10E:
    30 00001378 C3                  <1>             ret
    31                              <1> 
    32                              <1> int_nm:
    33                              <1> 
    34                              <1>             ; save registers
    35 00001379 60                  <1>             pusha
    36 0000137A 1E                  <1>             push    ds
    37 0000137B 06                  <1>             push    es
    38                              <1> 
    39                              <1>             ; set up selector for Kernel
    40 0000137C 66B81000            <1>             mov     ax, DS_KERNEL
    41 00001380 8ED8                <1>             mov     ds, ax
    42 00001382 8EC0                <1>             mov     es, ax
    43                              <1> 
    44                              <1>             ; clear Task Switch flag
    45 00001384 0F06                <1>             clts                                                    ; CR0.TS = 0
    46                              <1>                                                                     ; // TS bit is gonna be set by CPU
    47                              <1>                                                                     ; // when Task Switching happend.
    48                              <1> 
    49                              <1>             ; get previous/this time task
    50 00001386 8B3D[D0130000]      <1>             mov     edi, [.last_tss]                                ; TSS of the task that last used FPU
    51 0000138C 0F00CE              <1>             str     esi                                             ; TSS of the task using FPU this time
    52 0000138F 83E6F8              <1>             and     esi, ~0x0007                                    ; mask segment selector[2:0] // TI:RPL
    53                              <1> 
    54                              <1>             ; compare previous task with the one of this time
    55 00001392 83FF00              <1>             cmp     edi, 0                                          ; if not exist previous task
    56 00001395 7420                <1>             je      .10F
    57                              <1> 
    58 00001397 39FE                <1>             cmp     esi, edi
    59 00001399 741A                <1>             je      .12E
    60                              <1> 
    61 0000139B FA                  <1>             cli                                                     ; disable interrupt
    62                              <1> 
    63                              <1>             ; save previous FPU context
    64 0000139C 89FB                <1>             mov     ebx, edi
    65 0000139E E8A4FFFFFF          <1>             call    get_tss_base                                    ; get TSS address
    66 000013A3 E8B2FFFFFF          <1>             call    save_fpu_context
    67                              <1> 
    68                              <1>             ; return FPU context of this time
    69 000013A8 89F3                <1>             mov     ebx, esi
    70 000013AA E898FFFFFF          <1>             call    get_tss_base
    71 000013AF E8B4FFFFFF          <1>             call    load_fpu_context
    72                              <1> 
    73 000013B4 FB                  <1>             sti                                                     ; enable interrupt
    74                              <1> 
    75                              <1> .12E:
    76 000013B5 EB0E                <1>             jmp     .10E
    77                              <1> .10F:
    78                              <1> 
    79 000013B7 FA                  <1>             cli                                                     ; disable interrupt
    80                              <1> 
    81                              <1>             ; return FPU context of this time
    82 000013B8 89F3                <1>             mov     ebx, esi
    83 000013BA E888FFFFFF          <1>             call    get_tss_base
    84 000013BF E8A4FFFFFF          <1>             call    load_fpu_context
    85                              <1> 
    86 000013C4 FB                  <1>             sti                                                     ; enable interrupt
    87                              <1> 
    88                              <1> .10E:
    89 000013C5 8935[D0130000]      <1>             mov     [.last_tss], esi                                ; save task that used FPU
    90                              <1> 
    91                              <1>             ; return registers
    92 000013CB 07                  <1>             pop     es
    93 000013CC 1F                  <1>             pop     ds
    94 000013CD 61                  <1>             popa
    95                              <1> 
    96 000013CE CF                  <1>             iret
    97                              <1> 
    98 000013CF 00                  <1> ALIGN 4, db 0
    99 000013D0 00000000            <1> .last_tss:  dd  0
   211                                  %include    "../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                             ; EBP +8 | waif == num of system interrupt
     5 000013D4 55                  <1>             push    ebp
     6 000013D5 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 000013D7 50                  <1>             push    eax
    10 000013D8 51                  <1>             push    ecx
    11                              <1> 
    12                              <1>             ; wait
    13 000013D9 8B4D08              <1>             mov     ecx, [ebp + 8]
    14 000013DC A1[5C070000]        <1>             mov     eax, [TIMER_COUNT]
    15                              <1> 
    16                              <1> .10L:
    17 000013E1 3905[5C070000]      <1>             cmp     [TIMER_COUNT], eax                      ; while(TIMER != eax)
    18 000013E7 74F8                <1>             je      .10L
    19 000013E9 40                  <1>             inc     eax                                     ; eax++
    20 000013EA E2F5                <1>             loop    .10L                                    ; while(--ecx)
    21                              <1> 
    22                              <1>             ; return registers
    23 000013EC 59                  <1>             pop     ecx
    24 000013ED 58                  <1>             pop     eax
    25                              <1> 
    26                              <1>             ; destruct stakc frame
    27 000013EE 89EC                <1>             mov     esp, ebp
    28 000013F0 5D                  <1>             pop     ebp
    29                              <1> 
    30 000013F1 C3                  <1>             ret
   212                                  %include    "../modules/protect/memcpy.s"
     1                              <1> memcpy:
     2                              <1> 
     3                              <1>         ; construct stack frame
     4                              <1> 
     5 000013F2 55                  <1>         push    ebp
     6 000013F3 89E5                <1>         mov     ebp, esp
     7                              <1> 
     8                              <1>         ; save registers
     9                              <1> 
    10 000013F5 51                  <1>         push    ecx
    11 000013F6 56                  <1>         push    esi
    12 000013F7 57                  <1>         push    edi
    13                              <1> 
    14                              <1>         ; copy byte by byte
    15                              <1> 
    16 000013F8 FC                  <1>         cld
    17 000013F9 8B7D08              <1>         mov     edi, [ebp + 8]
    18 000013FC 8B750C              <1>         mov     esi, [ebp + 12]
    19 000013FF 8B4D10              <1>         mov     ecx, [ebp + 16]
    20                              <1> 
    21 00001402 F3A4                <1>         rep movsb
    22                              <1> 
    23                              <1>         ; return registers
    24                              <1> 
    25 00001404 5F                  <1>         pop     edi
    26 00001405 5E                  <1>         pop     esi
    27 00001406 59                  <1>         pop     ecx
    28                              <1> 
    29                              <1>         ; destruct stack frame
    30                              <1> 
    31 00001407 89EC                <1>         mov     esp, ebp
    32 00001409 5D                  <1>         pop     ebp
    33                              <1> 
    34 0000140A C3                  <1>         ret
   213                                  
   214                                  
   215                                  ; PADDING
   216                                  
   217 0000140B 00<rept>                            times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
