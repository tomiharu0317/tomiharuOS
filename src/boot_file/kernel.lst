     1                                  ;macro
     2                                  
     3                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1> 
     4                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
    56                              <1> 
    57                              <1> %macro  set_desc 2-*
    58                              <1>             push    eax
    59                              <1>             push    edi
    60                              <1> 
    61                              <1>             mov     edi, %1                             ; descriptor address
    62                              <1>             mov     eax, %2                             ; base address
    63                              <1> 
    64                              <1>         %if 3 == %0
    65                              <1>             mov     [edi + 0], %3                       ; limit
    66                              <1>         %endif
    67                              <1> 
    68                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 4], al                       ; base([23:16])
    71                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    72                              <1> 
    73                              <1>             pop     edi
    74                              <1>             pop     eax
    75                              <1> %endmacro
     5                                  
     6                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     7                                  
     8                                  [BITS 32]                                                       ; BIT 32 directive
     9                                  ; entry point
    10                                  
    11                                  kernel:
    12                                  
    13                                                  ; Get Font address
    14 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    15 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    16 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    17 0000000C C1E004                                  shl     eax, 4
    18 0000000F 01D8                                    add     eax, ebx
    19 00000011 A3[7C010000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    20                                  
    21                                                  ; set up TSS descriptor
    22                                                  set_desc    GDT.tss_0, TSS_0
    22 00000016 50                  <1>  push eax
    22 00000017 57                  <1>  push edi
    22                              <1> 
    22 00000018 BF[74020000]        <1>  mov edi, %1
    22 0000001D B8[84010000]        <1>  mov eax, %2
    22                              <1> 
    22                              <1>  %if 3 == %0
    22                              <1>  mov [edi + 0], %3
    22                              <1>  %endif
    22                              <1> 
    22 00000022 66894702            <1>  mov [edi + 2], ax
    22 00000026 C1E810              <1>  shr eax, 16
    22 00000029 884704              <1>  mov [edi + 4], al
    22 0000002C 886707              <1>  mov [edi + 7], ah
    22                              <1> 
    22 0000002F 5F                  <1>  pop edi
    22 00000030 58                  <1>  pop eax
    23                                                  set_desc    GDT.tss_1, TSS_1
    23 00000031 50                  <1>  push eax
    23 00000032 57                  <1>  push edi
    23                              <1> 
    23 00000033 BF[7C020000]        <1>  mov edi, %1
    23 00000038 B8[EC010000]        <1>  mov eax, %2
    23                              <1> 
    23                              <1>  %if 3 == %0
    23                              <1>  mov [edi + 0], %3
    23                              <1>  %endif
    23                              <1> 
    23 0000003D 66894702            <1>  mov [edi + 2], ax
    23 00000041 C1E810              <1>  shr eax, 16
    23 00000044 884704              <1>  mov [edi + 4], al
    23 00000047 886707              <1>  mov [edi + 7], ah
    23                              <1> 
    23 0000004A 5F                  <1>  pop edi
    23 0000004B 58                  <1>  pop eax
    24                                  
    25                                                  ; set up LDT
    26                                                  set_desc    GDT.ldt, LDT, word LDT_LIMIT        ; descriptor address/base address/limit
    26 0000004C 50                  <1>  push eax
    26 0000004D 57                  <1>  push edi
    26                              <1> 
    26 0000004E BF[6C020000]        <1>  mov edi, %1
    26 00000053 B8[8A020000]        <1>  mov eax, %2
    26                              <1> 
    26                              <1>  %if 3 == %0
    26 00000058 66C7072700          <1>  mov [edi + 0], %3
    26                              <1>  %endif
    26                              <1> 
    26 0000005D 66894702            <1>  mov [edi + 2], ax
    26 00000061 C1E810              <1>  shr eax, 16
    26 00000064 884704              <1>  mov [edi + 4], al
    26 00000067 886707              <1>  mov [edi + 7], ah
    26                              <1> 
    26 0000006A 5F                  <1>  pop edi
    26 0000006B 58                  <1>  pop eax
    27                                  
    28                                                  ; load GDTR (resetting)
    29 0000006C 0F0115[84020000]                        lgdt        [GDTR]
    30                                  
    31                                                  ; set up stack
    32 00000073 BC00341000                              mov     esp, SP_TASK_0                          ; set up stack for Task0
    33                                  
    34                                                  ; recognize Kernel as Task0
    35 00000078 66B82000                                mov     ax, SS_TASK_0
    36 0000007C 0F00D8                                  ltr     ax                                      ; initialize TR
    37                                  
    38                                                  ; initialize interrupt vector
    39 0000007F E832080000                              cdecl   init_int
    40 00000084 E8B3090000                              cdecl   init_pic
    41                                  
    42                                                  set_vect    0x00, int_zero_div                  ; define interrupt process: Zero div
    42 00000089 50                  <1>  push eax
    42 0000008A 57                  <1>  push edi
    42                              <1> 
    42 0000008B BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    42 00000090 B8[1E0A0000]        <1>  mov eax, %2
    42                              <1> 
    42                              <1>  %if 3 == %0
    42                              <1>  mov [edi + 4], %3
    42                              <1>  %endif
    42                              <1> 
    42 00000095 668907              <1>  mov [edi + 0], ax
    42 00000098 C1E810              <1>  shr eax, 16
    42 0000009B 66894706            <1>  mov [edi + 6], ax
    42                              <1> 
    42 0000009F 5F                  <1>  pop edi
    42 000000A0 58                  <1>  pop eax
    43                                                  set_vect    0x20, int_timer                     ; define interrupt process: Timer
    43 000000A1 50                  <1>  push eax
    43 000000A2 57                  <1>  push edi
    43                              <1> 
    43 000000A3 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    43 000000A8 B8[B2020000]        <1>  mov eax, %2
    43                              <1> 
    43                              <1>  %if 3 == %0
    43                              <1>  mov [edi + 4], %3
    43                              <1>  %endif
    43                              <1> 
    43 000000AD 668907              <1>  mov [edi + 0], ax
    43 000000B0 C1E810              <1>  shr eax, 16
    43 000000B3 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    43 000000B7 5F                  <1>  pop edi
    43 000000B8 58                  <1>  pop eax
    44                                                  set_vect    0x21, int_keyboard                  ; define interrupt process: KBC
    44 000000B9 50                  <1>  push eax
    44 000000BA 57                  <1>  push edi
    44                              <1> 
    44 000000BB BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    44 000000C0 B8[5E0B0000]        <1>  mov eax, %2
    44                              <1> 
    44                              <1>  %if 3 == %0
    44                              <1>  mov [edi + 4], %3
    44                              <1>  %endif
    44                              <1> 
    44 000000C5 668907              <1>  mov [edi + 0], ax
    44 000000C8 C1E810              <1>  shr eax, 16
    44 000000CB 66894706            <1>  mov [edi + 6], ax
    44                              <1> 
    44 000000CF 5F                  <1>  pop edi
    44 000000D0 58                  <1>  pop eax
    45                                                  set_vect    0x28, int_rtc                       ; define interrupt process: RTC
    45 000000D1 50                  <1>  push eax
    45 000000D2 57                  <1>  push edi
    45                              <1> 
    45 000000D3 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    45 000000D8 B8[670A0000]        <1>  mov eax, %2
    45                              <1> 
    45                              <1>  %if 3 == %0
    45                              <1>  mov [edi + 4], %3
    45                              <1>  %endif
    45                              <1> 
    45 000000DD 668907              <1>  mov [edi + 0], ax
    45 000000E0 C1E810              <1>  shr eax, 16
    45 000000E3 66894706            <1>  mov [edi + 6], ax
    45                              <1> 
    45 000000E7 5F                  <1>  pop edi
    45 000000E8 58                  <1>  pop eax
    46                                  
    47                                                  ; permit interrupt by device
    48 000000E9 6A10E8A00900006683-                     cdecl   rtc_int_en, 0x10                        ; Updata-Ended Interrupt Enable
    48 000000F2 C404               
    49                                  
    50                                                  ; set up IMR(Interrupt Mask Register)
    51                                                  outp    0x21, 0b1111_1000                       ; interrupt enable: slave PIC/KBC/Timer     // master
    51 000000F4 B0F8                <1>  mov al, %2
    51 000000F6 E621                <1>  out %1, al
    52                                                  outp    0xA1, 0b1111_1110                       ; interrupt enable: RTC                     // slave
    52 000000F8 B0FE                <1>  mov al, %2
    52 000000FA E6A1                <1>  out %1, al
    53                                  
    54                                                  ; CPU interrupt enable
    55 000000FC FB                                      sti
    56                                  
    57                                                  ; display font and color_bar
    58 000000FD 6A0D6A3FE87B030000-                     cdecl   draw_font, 63, 13
    58 00000106 6683C408           
    59 0000010A 6A046A3FE8FE030000-                     cdecl   draw_color_bar, 63, 4
    59 00000113 6683C408           
    60                                  
    61                                                  ; display string
    62 00000117 68[66010000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    62 0000011F 00006A0E6A19E89C03-
    62 00000128 00006683C410       
    63                                  
    64                                  ;---------------------------------------------------------------------------
    65                                  ; multitask
    66                                  ;---------------------------------------------------------------------------
    67                                  
    68                                  
    69                                  ;                 ; call Task
    70                                  ;                 ; call    SS_TASK_1:0
    71                                  
    72                                  ; .10L:
    73                                  
    74                                  ;                 ; display time
    75                                  ;                 mov     eax, [RTC_TIME]
    76                                  ;                 cdecl   draw_time, 72, 0, 0x0700, eax
    77                                  
    78                                  
    79                                  ;                 ; get key code
    80                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
    81                                  ;                 cmp     eax, 0
    82                                  ;                 je      .10E
    83                                  
    84                                  ;                 ; display key code
    85                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
    86                                  ; .10E:
    87                                  
    88                                  ;                 ; draw rotation bar
    89                                  ;                 cdecl   draw_rotation_bar
    90                                  
    91                                  ;                 jmp     .10L
    92                                  
    93                                  ;----------------------------------------------------------------------------
    94                                  
    95                                  
    96                                  ;----------------------------------------------------------------------------
    97                                  ; non-preemptive multitask
    98                                  ;----------------------------------------------------------------------------
    99                                  
   100                                  .10L:
   101                                  
   102                                                  ; call task
   103 0000012E EA000000002800                          jmp     SS_TASK_1:0                             ; jump to Task1
   104                                  
   105                                                  ; draw rotation bar
   106 00000135 E8710A0000                              cdecl   draw_rotation_bar
   107                                  
   108                                                  ; get key code
   109 0000013A 68[78010000]68-                         cdecl   ring_rd, _KEY_BUFF, .int_key
   109 00000140 [840B0000]E85B0900-
   109 00000148 006683C408         
   110 0000014D 83F800                                  cmp     eax, 0
   111 00000150 7412                                    je      .10E
   112                                  
   113                                                  ; display key code
   114 00000152 68[840B0000]6A1D6A-                     cdecl   draw_key, 2, 29, _KEY_BUFF
   114 0000015A 02E8AB0900006683C4-
   114 00000163 0C                 
   115                                  .10E:
   116                                  
   117 00000164 EBC8                                    jmp     .10L
   118                                  
   119                                  ;-----------------------------------------------------------------------------
   120                                  
   121                                  ;data
   122 00000166 2048656C6C6F2C206B-     .s0:    db  " Hello, kernel! ", 0
   122 0000016F 65726E656C212000   
   123                                  
   124 00000177 00                      ALIGN 4, db 0
   125 00000178 00000000                .int_key:   dd 0
   126                                  
   127                                  ALIGN 4, db 0
   128 0000017C 00000000                FONT_ADR:   dd 0
   129 00000180 00000000                RTC_TIME:   dd 0
   130                                  
   131                                  
   132                                  ; TASKS
   133                                  %include    "descriptor.s"
     1                              <1> ;-----------------------------------------------------------------------
     2                              <1> ; TSS
     3                              <1> ;-----------------------------------------------------------------------
     4                              <1> 
     5                              <1> TSS_0:
     6 00000184 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
     7 00000188 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                             ;*  4: ESP0
     8 0000018C 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
     9 00000190 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    10 00000194 00000000            <1> .ss1:           dd  0                                           ;* 16:
    11 00000198 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    12 0000019C 00000000            <1> .ss2:           dd  0                                           ;* 24:
    13 000001A0 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    14 000001A4 00000000            <1> .eip:           dd  0                                           ;  32: EIP
    15 000001A8 00000000            <1> .eflags:        dd  0                                           ;  36: EFLAGS
    16 000001AC 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    17 000001B0 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    18 000001B4 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    19 000001B8 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    20 000001BC 00000000            <1> .esp:           dd  0                                           ;  56: ESP
    21 000001C0 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    22 000001C4 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    23 000001C8 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    24 000001CC 00000000            <1> .es:            dd  0                                           ;  72: ES
    25 000001D0 00000000            <1> .cs:            dd  0                                           ;  76: CS
    26 000001D4 00000000            <1> .ss:            dd  0                                           ;  80: SS
    27 000001D8 00000000            <1> .ds:            dd  0                                           ;  84: DS
    28 000001DC 00000000            <1> .fs:            dd  0                                           ;  88: FS
    29 000001E0 00000000            <1> .gs:            dd  0                                           ;  92: GS
    30 000001E4 00000000            <1> .ldt:           dd  0                                           ;* 96: LDT segment selector
    31 000001E8 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    32                              <1> 
    33                              <1> TSS_1:
    34 000001EC 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    35 000001F0 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                             ;*  4: ESP0
    36 000001F4 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    37 000001F8 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    38 000001FC 00000000            <1> .ss1:           dd  0                                           ;* 16:
    39 00000200 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    40 00000204 00000000            <1> .ss2:           dd  0                                           ;* 24:
    41 00000208 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    42 0000020C [D4020000]          <1> .eip:           dd  task_1                                      ;  32: EIP
    43 00000210 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    44 00000214 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    45 00000218 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    46 0000021C 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    47 00000220 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    48 00000224 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56: ESP
    49 00000228 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    50 0000022C 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    51 00000230 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    52 00000234 24000000            <1> .es:            dd  DS_TASK_1                                   ;  72: ES
    53 00000238 1C000000            <1> .cs:            dd  CS_TASK_1                                   ;  76: CS
    54 0000023C 24000000            <1> .ss:            dd  DS_TASK_1                                   ;  80: SS
    55 00000240 24000000            <1> .ds:            dd  DS_TASK_1                                   ;  84: DS
    56 00000244 24000000            <1> .fs:            dd  DS_TASK_1                                   ;  88: FS
    57 00000248 24000000            <1> .gs:            dd  DS_TASK_1                                   ;  92: GS
    58 0000024C 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    59 00000250 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    60                              <1> 
    61                              <1> ;-----------------------------------------------------------------------------------------------
    62                              <1> ; GDT
    63                              <1> ;-----------------------------------------------------------------------------------------------
    64                              <1> 
    65 00000254 0000000000000000    <1> GDT:            dq  0x0000000000000000
    66 0000025C FFFF0000009ACF00    <1> .cs_kernel:     dq  0x00CF9A000000FFFF                          ; CODE 4G
    67 00000264 FFFF00000092CF00    <1> .ds_kernel:     dq  0x00CF92000000FFFF                          ; DATA 4G
    68 0000026C 0000000000820000    <1> .ldt            dq  0x0000820000000000                          ; LDT descriptor
    69 00000274 6700000000890000    <1> .tss_0:         dq  0x0000890000000067                          ; TSS descriptor
    70 0000027C 6700000000890000    <1> .tss_1:         dq  0x0000890000000067                          ; TSS descriptor
    71                              <1> .end:
    72                              <1> 
    73                              <1> CS_KERNEL       equ .cs_kernel - GDT
    74                              <1> DS_KERNEL       equ .ds_kernel - GDT
    75                              <1> SS_LDT          equ .ldt       - GDT
    76                              <1> SS_TASK_0       equ .tss_0     - GDT
    77                              <1> SS_TASK_1       equ .tss_1     - GDT
    78                              <1> 
    79 00000284 2F00                <1> GDTR:   dw      GDT.end - GDT - 1
    80 00000286 [54020000]          <1>         dd      GDT
    81                              <1> 
    82                              <1> ;-----------------------------------------------------------------------------------------------
    83                              <1> ; LDT
    84                              <1> ;-----------------------------------------------------------------------------------------------
    85                              <1> 
    86 0000028A 0000000000000000    <1> LDT:            dq  0x0000000000000000                          ; NULL
    87 00000292 FFFF0000009ACF00    <1> .cs_task_0:     dq  0x00CF9A000000FFFF                          ; CODE 4G
    88 0000029A FFFF00000092CF00    <1> .ds_task_0:     dq  0x00CF92000000FFFF                          ; DATA 4G
    89 000002A2 FFFF0000009ACF00    <1> .cs_task_1:     dq  0x00CF9A000000FFFF                          ; CODE 4G
    90 000002AA FFFF00000092CF00    <1> .ds_task_1:     dq  0x00CF92000000FFFF                          ; DATA 4G
    91                              <1> .end:
    92                              <1> 
    93                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                      ; cs selector for task0 // set bit 2(TI)
    94                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                      ; ds selector for task0
    95                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4                      ; cs selector for task1
    96                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4                      ; ds selector for task1
    97                              <1> 
    98                              <1> LDT_LIMIT       equ .end        - LDT - 1
   134                                  %include    "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1> 
     3                              <1>             ; save registers
     4 000002B2 60                  <1>             pusha
     5 000002B3 1E                  <1>             push    ds
     6 000002B4 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 000002B5 66B81000            <1>             mov     ax, 0x0010
    10 000002B9 8ED8                <1>             mov     ds, ax
    11 000002BB 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; TICK
    14 000002BD FF05[CC020000]      <1>             inc     dword [TIMER_COUNT]                                     ; TIMER_COUNT++ //update interrupt count
    15                              <1> 
    16                              <1>             ; clear interrupt flag(EOI)
    17                              <1>             outp    0x20, 0x20                                              ; master PIC:EOI command
    17 000002C3 B020                <2>  mov al, %2
    17 000002C5 E620                <2>  out %1, al
    18                              <1> 
    19                              <1>             ; return registers
    20 000002C7 07                  <1>             pop     es
    21 000002C8 1F                  <1>             pop     ds
    22 000002C9 61                  <1>             popa
    23                              <1> 
    24 000002CA CF                  <1>             iret
    25                              <1> 
    26 000002CB 00                  <1> ALIGN 4, db 0
    27 000002CC 0000000000000000    <1> TIMER_COUNT:    dq 0
   135                                  %include    "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1> 
     3                              <1>             ; display string
     4 000002D4 68[09030000]6A076A- <1>             cdecl   draw_str, 63, 0, 0x07, .s0
     4 000002DC 006A3FE8E201000066- <1>
     4 000002E5 83C410              <1>
     5                              <1> 
     6                              <1> ;-------------------------------------------------------------
     7                              <1> ; non-preemptive multitask
     8                              <1> ;-------------------------------------------------------------
     9                              <1> 
    10                              <1> .10L:
    11                              <1>             ; display time
    12 000002E8 A1[80010000]        <1>             mov     eax, [RTC_TIME]                         ; get time
    13 000002ED 5068000700006A006A- <1>             cdecl   draw_time, 72, 0, 0x0700, eax
    13 000002F6 48E83C0500006683C4- <1>
    13 000002FF 10                  <1>
    14                              <1> 
    15                              <1>             ; call Task
    16 00000300 EA000000002000      <1>             jmp    SS_TASK_0:0                             ; jump to Task0(kernel)
    17                              <1> 
    18 00000307 EBDF                <1>             jmp     .10L
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> 
    22                              <1>             ; ; end of task
    23                              <1>             ; iret
    24                              <1> 
    25                              <1>             ; data
    26 00000309 5461736B5F3100      <1> .s0:        db  "Task_1", 0
   136                                  
   137                                  ; MODULES
   138                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000310 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 00000311 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 00000313 50                  <1>             push    eax
    10 00000314 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 00000315 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 00000318 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 0000031B B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 0000031D 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 00000321 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 00000323 5A                  <1>             pop     edx
    21 00000324 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 00000325 89EC                <1>             mov     esp, ebp
    25 00000327 5D                  <1>             pop     ebp
    26                              <1> 
    27 00000328 C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 00000329 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 0000032A 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 0000032C 50                  <1>             push    eax
    38 0000032D 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 0000032E 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 00000331 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000334 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 00000336 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 0000033A 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 0000033C 5A                  <1>             pop     edx
    49 0000033D 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 0000033E 89EC                <1>             mov     esp, ebp
    53 00000340 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000341 C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 00000342 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 00000343 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 00000345 50                  <1>             push    eax
    66 00000346 53                  <1>             push    ebx
    67 00000347 51                  <1>             push    ecx
    68 00000348 52                  <1>             push    edx
    69 00000349 56                  <1>             push    esi
    70 0000034A 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 0000034B 8B7508              <1>             mov     esi, [ebp + 8]
    74 0000034E 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 00000351 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 00000355 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 00000359 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 0000035B 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 0000035E FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 00000360 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 00000362 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 00000365 FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 00000367 FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 00000368 B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 0000036D AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 0000036E 88C4                <1>             mov     ah, al
    96 00000370 F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 00000372 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 00000374 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 0000037A 7404                <1>             jz      .11F                                    ; {
   104 0000037C 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 0000037E EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 00000380 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 00000382 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 00000384 8807                <1>             mov     [edi], al
   116                              <1> 
   117 00000386 83C750              <1>             add     edi, 80
   118 00000389 E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 0000038B 5F                  <1>             pop     edi
   123 0000038C 5E                  <1>             pop     esi
   124 0000038D 5A                  <1>             pop     edx
   125 0000038E 59                  <1>             pop     ecx
   126 0000038F 5B                  <1>             pop     ebx
   127 00000390 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 00000391 89EC                <1>             mov     esp, ebp
   131 00000393 5D                  <1>             pop     ebp
   132                              <1> 
   133 00000394 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 00000395 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 00000396 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 00000398 50                  <1>             push    eax
   144 00000399 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 0000039A 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 0000039B 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 0000039E 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 000003A2 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 000003A6 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 000003A8 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 000003AB FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 000003AD 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 000003B0 88C4                <1>             mov     ah, al
   163 000003B2 F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 000003B4 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 000003B6 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 000003B8 08E0                <1>             or      al, ah
   169 000003BA 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 000003BC 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 000003BD 5B                  <1>             pop     ebx
   177 000003BE 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 000003BF 89EC                <1>             mov     esp, ebp
   181 000003C1 5D                  <1>             pop     ebp
   182                              <1> 
   183 000003C2 C3                  <1>             ret
   139                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 000003C3 55                  <1>             push    ebp                                         ;   +16 | color
     5 000003C4 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 000003C6 53                  <1>             push    ebx
    10 000003C7 56                  <1>             push    esi
    11 000003C8 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; set copy_target font address
    14 000003C9 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    15 000003CD C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    16 000003D0 0335[7C010000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    17                              <1> 
    18                              <1>             ; get copy_dest VRAM address
    19                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    20                              <1>             ; y:row, x:column
    21                              <1> 
    22 000003D6 8B7D0C              <1>             mov     edi, [ebp + 12]
    23 000003D9 C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    24 000003DC 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    25 000003E3 037D08              <1>             add     edi, [ebp + 8]
    26                              <1> 
    27                              <1>             ; output a char of font
    28 000003E6 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    29                              <1> 
    30 000003EA 6A03E81FFFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    30 000003F3 C404                <1>
    31 000003F5 6A08E82DFFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    31 000003FE C404                <1>
    32 00000400 536A085756E838FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    32 00000409 FF6683C410          <1>
    33                              <1> 
    34 0000040E 6A02E8FBFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    34 00000417 C404                <1>
    35 00000419 6A04E809FFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    35 00000422 C404                <1>
    36 00000424 536A045756E814FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    36 0000042D FF6683C410          <1>
    37                              <1> 
    38 00000432 6A01E8D7FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    38 0000043B C404                <1>
    39 0000043D 6A02E8E5FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    39 00000446 C404                <1>
    40 00000448 536A025756E8F0FEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    40 00000451 FF6683C410          <1>
    41                              <1> 
    42 00000456 6A00E8B3FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    42 0000045F C404                <1>
    43 00000461 6A01E8C1FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    43 0000046A C404                <1>
    44 0000046C 536A015756E8CCFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    44 00000475 FF6683C410          <1>
    45                              <1> 
    46                              <1>             ; return registers
    47 0000047A 5F                  <1>             pop     edi
    48 0000047B 5E                  <1>             pop     esi
    49 0000047C 5B                  <1>             pop     ebx
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 0000047D 89EC                <1>             mov     esp, ebp
    53 0000047F 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000480 C3                  <1>             ret
   140                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000481 55                  <1>             push    ebp                                         ;   +12 | row
     5 00000482 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000484 50                  <1>             push    eax
     9 00000485 53                  <1>             push    ebx
    10 00000486 51                  <1>             push    ecx
    11 00000487 52                  <1>             push    edx
    12 00000488 56                  <1>             push    esi
    13 00000489 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 0000048A 8B7508              <1>             mov     esi, [ebp + 8]
    17 0000048D 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 00000490 B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 00000495 81F900010000        <1> .10L:       cmp     ecx, 256
    22 0000049B 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 0000049D 89C8                <1>             mov     eax, ecx
    26 0000049F 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 000004A2 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 000004A4 89CB                <1>             mov     ebx, ecx
    31 000004A6 C1EB04              <1>             shr     ebx, 4
    32 000004A9 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 000004AB 516A075350E80EFFFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 000004B4 FF6683C410          <1>
    35                              <1> 
    36 000004B9 41                  <1>             inc     ecx
    37 000004BA EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 000004BC 5F                  <1>             pop     edi
    42 000004BD 5E                  <1>             pop     esi
    43 000004BE 5A                  <1>             pop     edx
    44 000004BF 59                  <1>             pop     ecx
    45 000004C0 5B                  <1>             pop     ebx
    46 000004C1 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 000004C2 89EC                <1>             mov     esp, ebp
    50 000004C4 5D                  <1>             pop     ebp
    51                              <1> 
    52 000004C5 C3                  <1>             ret
   141                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000004C6 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 000004C7 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 000004C9 50                  <1>             push    eax
    11 000004CA 53                  <1>             push    ebx
    12 000004CB 51                  <1>             push    ecx
    13 000004CC 52                  <1>             push    edx
    14 000004CD 56                  <1>             push    esi
    15 000004CE 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 000004CF 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 000004D2 8B550C              <1>             mov     edx, [ebp + 12]
    20 000004D5 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 000004D9 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 000004DC FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 000004DD AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 000004DE 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 000004E0 7425                <1>             je      .10E
    29                              <1> 
    30 000004E2 50535251E8D8FEFFFF- <1>             cdecl   draw_char, ecx, edx, ebx, eax
    30 000004EB 6683C410            <1>
    31                              <1> 
    32 000004EF 41                  <1>             inc     ecx
    33 000004F0 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    34 000004F3 7C10                <1>             jl      .12E                                        ; {
    35 000004F5 B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    36 000004FA 42                  <1>             inc     edx                                         ;   EDX++;
    37 000004FB 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    38 000004FE 7C05                <1>             jl      .12E                                        ;   {
    39 00000500 BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    40                              <1>                                                                 ;   }
    41                              <1> .12E:                                                           ; }
    42 00000505 EBD6                <1>             jmp     .10L
    43                              <1> .10E:
    44                              <1> 
    45                              <1>             ; return registers
    46 00000507 5F                  <1>             pop     edi
    47 00000508 5E                  <1>             pop     esi
    48 00000509 5A                  <1>             pop     edx
    49 0000050A 59                  <1>             pop     ecx
    50 0000050B 5B                  <1>             pop     ebx
    51 0000050C 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 0000050D 89EC                <1>             mov     esp, ebp
    55 0000050F 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000510 C3                  <1>             ret
   142                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000511 55                  <1>             push    ebp                                             ;   +12 | row
     5 00000512 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000514 50                  <1>             push    eax
     9 00000515 53                  <1>             push    ebx
    10 00000516 51                  <1>             push    ecx
    11 00000517 52                  <1>             push    edx
    12 00000518 56                  <1>             push    esi
    13 00000519 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 0000051A 8B7508              <1>             mov     esi, [ebp + 8]
    17 0000051D 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 00000520 B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 00000525 83F910              <1> .10L:       cmp     ecx, 16
    22 00000528 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 0000052A 89C8                <1>             mov     eax, ecx
    26 0000052C 83E001              <1>             and     eax, 0x01
    27 0000052F C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 00000532 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 00000534 89CB                <1>             mov     ebx, ecx
    32 00000536 D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 00000538 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 0000053A 89CA                <1>             mov     edx, ecx
    37 0000053C D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 0000053E 8B92[6B050000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 00000544 68[62050000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 0000054C E875FFFFFF6683C410  <1>
    41                              <1> 
    42 00000555 41                  <1>             inc     ecx
    43 00000556 EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 00000558 5F                  <1>             pop     edi
    48 00000559 5E                  <1>             pop     esi
    49 0000055A 5A                  <1>             pop     edx
    50 0000055B 59                  <1>             pop     ecx
    51 0000055C 5B                  <1>             pop     ebx
    52 0000055D 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 0000055E 89E5                <1>             mov     ebp, esp
    56 00000560 5D                  <1>             pop     ebp
    57                              <1> 
    58 00000561 C3                  <1>             ret
    59                              <1> 
    60 00000562 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 0000056B 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 0000056F 00010009            <1>             dw  0x0100, 0x0900
    64 00000573 0002000A            <1>             dw  0x0200, 0x0A00
    65 00000577 0003000B            <1>             dw  0x0300, 0x0B00
    66 0000057B 0004000C            <1>             dw  0x0400, 0x0C00
    67 0000057F 0005000D            <1>             dw  0x0500, 0x0D00
    68 00000583 0006000E            <1>             dw  0x0600, 0x0E00
    69 00000587 0007000F            <1>             dw  0x0700, 0x0F00
   143                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 0000058B 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 0000058C 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 0000058E 50                  <1>             push    eax
     9 0000058F 53                  <1>             push    ebx
    10 00000590 51                  <1>             push    ecx
    11 00000591 52                  <1>             push    edx
    12 00000592 56                  <1>             push    esi
    13 00000593 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 00000594 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 00000597 C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 0000059A 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 000005A1 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 000005A4 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 000005A6 C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 000005A9 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 000005AB 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 000005AE BB80000000          <1>             mov     ebx, 0x80
    35 000005B3 D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 000005B5 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 000005B8 6A03E851FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 000005C1 C404                <1>
    43 000005C3 6A08E85FFDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 000005CC C404                <1>
    44 000005CE 516A085753E8BDFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 000005D7 FF6683C410          <1>
    45                              <1> 
    46 000005DC 6A02E82DFDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 000005E5 C404                <1>
    47 000005E7 6A04E83BFDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 000005F0 C404                <1>
    48 000005F2 516A045753E899FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 000005FB FF6683C410          <1>
    49                              <1> 
    50 00000600 6A01E809FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 00000609 C404                <1>
    51 0000060B 6A02E817FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 00000614 C404                <1>
    52 00000616 516A025753E875FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 0000061F FF6683C410          <1>
    53                              <1> 
    54 00000624 6A00E8E5FCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 0000062D C404                <1>
    55 0000062F 6A01E8F3FCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 00000638 C404                <1>
    56 0000063A 516A015753E851FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 00000643 FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 00000648 5F                  <1>             pop     edi
    60 00000649 5E                  <1>             pop     esi
    61 0000064A 5A                  <1>             pop     edx
    62 0000064B 59                  <1>             pop     ecx
    63 0000064C 5B                  <1>             pop     ebx
    64 0000064D 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 0000064E 89EC                <1>             mov     esp, ebp
    68 00000650 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000651 C3                  <1>             ret
   144                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 00000652 55                  <1>             push    ebp
    22 00000653 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 00000655 6A00                <1>             push    dword 0
    25 00000657 6A00                <1>             push    dword 0
    26 00000659 6A00                <1>             push    dword 0
    27 0000065B 6A00                <1>             push    dword 0
    28 0000065D 6A00                <1>             push    dword 0
    29 0000065F 6A00                <1>             push    dword 0
    30 00000661 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 00000663 50                  <1>             push    eax
    34 00000664 53                  <1>             push    ebx
    35 00000665 51                  <1>             push    ecx
    36 00000666 52                  <1>             push    edx
    37 00000667 56                  <1>             push    esi
    38 00000668 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 00000669 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 0000066C 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 0000066F 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 00000671 7D09                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 00000673 F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 00000675 BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 0000067A EB05                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    50 0000067C BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 00000681 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 00000684 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 00000687 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 00000689 7D09                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 0000068B F7DA                <1>             neg     edx                                             ;   height *= -1
    60 0000068D BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 00000692 EB05                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    63 00000694 BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 00000699 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 0000069C 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 0000069F 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 000006A2 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 000006A5 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 000006A8 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 000006AB 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 000006AD 7F08                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 000006AF 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 000006B2 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 000006B5 EB06                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    93                              <1>                                                                     ;   // y axis is base one.
    94 000006B7 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 000006BA 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 000006BD 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 000006C0 83F900              <1>             cmp     ecx, 0
   101 000006C3 7505                <1>             jnz     .30E
   102 000006C5 B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   109 000006CA FF7518FF75ECFF75F8- <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   109 000006D3 E8B3FEFFFF6683C40C  <1>
   110                              <1> 
   111                              <1>             ; update base axis(1 dot)
   112 000006DC 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   113 000006DF 0106                <1>             add     [esi - 0], eax
   114                              <1> 
   115                              <1>             ; update relative axis
   116 000006E1 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   117 000006E4 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   118                              <1> 
   119 000006E7 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   120                              <1> 
   121 000006EA 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   122 000006EC 7C07                <1>             jl      .52E                                            ; {
   123 000006EE 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   124                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   125 000006F0 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   126 000006F3 011F                <1>             add     [edi - 0], ebx
   127                              <1> .52E:                                                               ; }
   128                              <1> 
   129 000006F5 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   130                              <1> 
   131 000006F8 E2D0                <1>             loop    .50L
   132                              <1> .50E:
   133                              <1> 
   134                              <1>             ; return registers
   135 000006FA 5F                  <1>             pop     edi
   136 000006FB 5E                  <1>             pop     esi
   137 000006FC 5A                  <1>             pop     edx
   138 000006FD 59                  <1>             pop     ecx
   139 000006FE 5B                  <1>             pop     ebx
   140 000006FF 58                  <1>             pop     eax
   141                              <1> 
   142                              <1>             ; destruct stack frame
   143 00000700 89EC                <1>             mov     esp, ebp
   144 00000702 5D                  <1>             pop     ebp
   145                              <1> 
   146 00000703 C3                  <1>             ret
   145                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 00000704 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 00000705 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 00000707 50                  <1>             push    eax
    11 00000708 53                  <1>             push    ebx
    12 00000709 51                  <1>             push    ecx
    13 0000070A 52                  <1>             push    edx
    14 0000070B 56                  <1>             push    esi
    15 0000070C 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 0000070D 8B4508              <1>             mov     eax, [ebp +  8]
    19 00000710 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 00000713 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 00000716 8B5514              <1>             mov     edx, [ebp + 20]
    22 00000719 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 0000071C 39C8                <1>             cmp     eax, ecx
    26 0000071E 7C01                <1>             jl      .10E
    27 00000720 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    29 00000721 39D3                <1>             cmp     ebx, edx
    30 00000723 7C02                <1>             jl      .20E
    31 00000725 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    33                              <1> 
    34                              <1>             ; draw rectangle
    35 00000727 5653515350E821FFFF- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35 00000730 FF6683C414          <1>
    36 00000735 5652505350E813FFFF- <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36 0000073E FF6683C414          <1>
    37                              <1> 
    38 00000743 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39 00000744 5652515250E804FFFF- <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39 0000074D FF6683C414          <1>
    40 00000752 42                  <1>             inc     edx
    41                              <1> 
    42 00000753 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43 00000754 5652515351E8F4FEFF- <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43 0000075D FF6683C414          <1>
    44                              <1> 
    45                              <1>             ; return registers
    46 00000762 5F                  <1>             pop     edi
    47 00000763 5E                  <1>             pop     esi
    48 00000764 5A                  <1>             pop     edx
    49 00000765 59                  <1>             pop     ecx
    50 00000766 5B                  <1>             pop     ebx
    51 00000767 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000768 89EC                <1>             mov     esp, ebp
    55 0000076A 5D                  <1>             pop     ebp
    56                              <1> 
    57 0000076B C3                  <1>             ret
   146                                  %include    "../modules/protect/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 0000076C 55                  <1>         push    ebp
     6 0000076D 89E5                <1>         mov     ebp, esp                                ;   +24|flag
     7                              <1>                                                         ;   +20|radix
     8                              <1>                                                         ;   +16|dest buffer size
     9                              <1>                                                         ;   +12|dest buffer address
    10                              <1>                                                         ;   + 8|the value to be converted
    11                              <1>                                                         ;   + 4|Instruction Pointer
    12                              <1>                                                         ;EBP+ 0|EBP
    13                              <1>         ; save registers
    14                              <1> 
    15 0000076F 50                  <1>         push    eax
    16 00000770 53                  <1>         push    ebx
    17 00000771 51                  <1>         push    ecx
    18 00000772 52                  <1>         push    edx
    19 00000773 56                  <1>         push    esi
    20 00000774 57                  <1>         push    edi
    21                              <1> 
    22                              <1>         ; get args
    23                              <1> 
    24 00000775 8B4508              <1>         mov     eax, [ebp +  8]                         ; val = value
    25 00000778 8B750C              <1>         mov     esi, [ebp + 12]                         ; dest= buffer address
    26 0000077B 8B4D10              <1>         mov     ecx, [ebp + 16]                         ; size= remaining buffer size
    27                              <1> 
    28 0000077E 89F7                <1>         mov     edi, esi                                ; end of buffer
    29 00000780 01CF                <1>         add     edi, ecx                                ; dest = &dest[esize - 1]
    30 00000782 4F                  <1>         dec     edi
    31                              <1> 
    32 00000783 8B5D18              <1>         mov     ebx, [ebp + 24]
    33                              <1> 
    34                              <1>         ; signing judge
    35                              <1> 
    36 00000786 F7C301000000        <1>         test    ebx, 0b0001                             ; if (flags & 0x01) //if signed => ZF = 0
    37 0000078C 7408                <1> .10Q    je      .10E                                    ; {                 //if not ZF = 1 so => jmp
    38 0000078E 83F800              <1>         cmp     eax, 0                                  ;   if (val < 0)    //CF = 1, ZF = 0
    39 00000791 7D03                <1> .12Q    jge     .12E                                    ;   {
    40 00000793 83CB02              <1>         or      ebx, 0b0010                             ;       flags |= 2; //set B1
    41                              <1>                                                         ; }}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ; sign output judge
    46                              <1> 
    47 00000796 F7C302000000        <1>         test    ebx, 0b0010
    48 0000079C 7410                <1> .20Q    je      .20E
    49 0000079E 83F800              <1>         cmp     eax, 0
    50 000007A1 7D07                <1> .22Q    jge     .22F
    51 000007A3 F7D8                <1>         neg     eax                                     ; sign reverse
    52 000007A5 C6062D              <1>         mov     [esi], byte '-'                         ; sign display
    53 000007A8 EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 000007AA C6062B              <1>         mov     [esi], byte '+'
    56                              <1> .22E:
    57 000007AD 49                  <1>         dec     ecx                                     ; subtract remaining buffer size -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ; ASCII conversion
    61                              <1> 
    62 000007AE 8B5D14              <1>         mov     ebx, [ebp + 20]                          ; ebx = radix
    63                              <1> 
    64                              <1> .30L:                                                   ; do{
    65 000007B1 BA00000000          <1>         mov     edx, 0
    66 000007B6 F7F3                <1>         div     ebx                                    ;   edx = edx:eax % ebx;
    67                              <1>                                                         ;   eax = edx:eax / ebx;
    68                              <1> 
    69 000007B8 89D6                <1>         mov     esi, edx                                ;   //refer to coversion table
    70 000007BA 8A96[E5070000]      <1>         mov     dl, byte [.ascii + esi]                 ;   DL = ASCII[edx];
    71                              <1> 
    72 000007C0 8817                <1>         mov     [edi], dl                               ;   *dest = DL;
    73 000007C2 4F                  <1>         dec     edi                                     ;   dest--;
    74                              <1> 
    75 000007C3 83F800              <1>         cmp     eax, 0
    76 000007C6 E0E9                <1>         loopnz  .30L                                    ; } while(eax);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ; padding (zero / blank)
    81                              <1> 
    82 000007C8 83F900              <1>         cmp     ecx, 0                                  ; if (esize)
    83 000007CB 740E                <1> .40Q:   je      .40E                                    ; {
    84 000007CD B020                <1>         mov     al, ' '                                 ;   AL = ' '; // padding with blanks
    85 000007CF 66837D1804          <1>         cmp     [ebp + 24], word 0b0100                  ;   if (flags & 0x04)
    86 000007D4 7502                <1> .42Q:   jne     .42E                                    ;   {
    87 000007D6 B030                <1>         mov     al, '0'                                 ;       AL = '0'; // padding with zero
    88                              <1> .42E:                                                   ;   }
    89 000007D8 FD                  <1>         std                                             ;   // DF = 1(dec)
    90 000007D9 F3AA                <1>         rep stosb                                       ;   while (--ecx) * edi-- = ' ';
    91                              <1> .40E:                                                   ; }
    92                              <1> 
    93                              <1>         ; return registers
    94                              <1> 
    95 000007DB 5F                  <1>         pop     edi
    96 000007DC 5E                  <1>         pop     esi
    97 000007DD 5A                  <1>         pop     edx
    98 000007DE 59                  <1>         pop     ecx
    99 000007DF 5B                  <1>         pop     ebx
   100 000007E0 58                  <1>         pop     eax
   101                              <1> 
   102                              <1>         ; destruct stack frame
   103                              <1> 
   104 000007E1 89EC                <1>         mov     esp, ebp
   105 000007E3 5D                  <1>         pop     ebp
   106                              <1> 
   107 000007E4 C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 000007E5 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                      ; conversion table
   110 000007EE 39414243444546      <1>
   147                                  %include    "../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000007F5 55                  <1>             push    ebp                                     ; EBP+8 | destination
     5 000007F6 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 000007F8 50                  <1>             push    eax
     9 000007F9 53                  <1>             push    ebx
    10                              <1> 
    11                              <1> ; // Avoid conflicts between RTC data updates and
    12                              <1> ; // on-chip RAM access by confirming UIP bit on Register A
    13                              <1> 
    14 000007FA B00A                <1>             mov     al, 0x0A                                ; register A
    15 000007FC E670                <1>             out     0x70, al
    16 000007FE E471                <1>             in      al, 0x71                                ; al = register A
    17 00000800 A880                <1>             test    al, 0x80                                ; if (UIP) // updating
    18 00000802 7407                <1>             je      .10F                                    ; {
    19 00000804 B801000000          <1>             mov     eax, 1                                  ;   return = 1;
    20 00000809 EB27                <1>             jmp     .10E                                    ; }
    21                              <1> .10F:                                                       ; else
    22                              <1>                                                             ; {        // get time process
    23                              <1> 
    24                              <1>             ; main process
    25 0000080B B004                <1>             mov     al, 0x04                                ;   hour
    26 0000080D E670                <1>             out     0x70, al
    27 0000080F E471                <1>             in      al, 0x71
    28                              <1> 
    29 00000811 C1E008              <1>             shl     eax, 8
    30                              <1> 
    31 00000814 B002                <1>             mov     al, 0x02                                ;   minute
    32 00000816 E670                <1>             out     0x70, al
    33 00000818 E471                <1>             in      al, 0x71
    34                              <1> 
    35 0000081A C1E008              <1>             shl     eax, 8
    36                              <1> 
    37 0000081D B000                <1>             mov     al, 0x00                                ;   second
    38 0000081F E670                <1>             out     0x70, al
    39 00000821 E471                <1>             in      al, 0x71
    40                              <1> 
    41 00000823 25FFFFFF00          <1>             and     eax, 0x00_FF_FF_FF                      ;   all data are in lower 3 bytes of eax register
    42                              <1> 
    43 00000828 8B5D08              <1>             mov     ebx, [ebp + 8]
    44 0000082B 8903                <1>             mov     [ebx], eax                              ;   [dest] = real time
    45                              <1> 
    46 0000082D B800000000          <1>             mov     eax, 0                                  ;   return = 0;
    47                              <1> .10E:                                                       ; }
    48                              <1> 
    49                              <1>             ; return register
    50 00000832 5B                  <1>             pop     ebx
    51 00000833 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000834 89EC                <1>             mov     esp, ebp
    55 00000836 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000837 C3                  <1>             ret
   148                                  %include    "../modules/protect/draw_time.s"
     1                              <1> draw_time:
     2                              <1> 
     3                              <1>             ; construct stack frame                         ;   +20 | time data
     4 00000838 55                  <1>             push    ebp                                     ;   +16 | display color
     5 00000839 89E5                <1>             mov     ebp, esp                                ;   +12 | row
     6                              <1>                                                             ;EBP+ 8 | col
     7                              <1> 
     8                              <1>             ; save registers
     9 0000083B 50                  <1>             push    eax
    10 0000083C 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; get arg
    13 0000083D 8B4514              <1>             mov     eax, [ebp + 20]
    14                              <1> 
    15 00000840 0FB6D8              <1>             movzx   ebx, al                                 ; ebx = second
    16 00000843 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .sec, 2, 16, 0b0100
    16 0000084A [AA080000]53E818FF- <1>
    16 00000852 FFFF6683C414        <1>
    17                              <1> 
    18 00000858 88E3                <1>             mov     bl, ah                                  ; ebx = min
    19 0000085A 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .min, 2, 16, 0b0100
    19 00000861 [A7080000]53E801FF- <1>
    19 00000869 FFFF6683C414        <1>
    20                              <1> 
    21 0000086F C1E810              <1>             shr     eax, 16                                 ; ax = hour
    22 00000872 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .hour, 2, 16, 0b0100
    22 00000879 [A4080000]50E8E9FE- <1>
    22 00000881 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>             ; display time
    25 00000887 68[A4080000]FF7510- <1>             cdecl   draw_str, dword [ebp + 8], dword [ebp + 12], dword [ebp + 16], .hour
    25 0000088F FF750CFF7508E82CFC- <1>
    25 00000898 FFFF6683C410        <1>
    26                              <1> 
    27                              <1>             ; return registers
    28 0000089E 5B                  <1>             pop     ebx
    29 0000089F 58                  <1>             pop     eax
    30                              <1> 
    31                              <1>             ; destruct stack frame
    32 000008A0 89EC                <1>             mov     esp, ebp
    33 000008A2 5D                  <1>             pop     ebp
    34                              <1> 
    35 000008A3 C3                  <1>             ret
    36                              <1> 
    37 000008A4 5A5A3A              <1> .hour:  db  "ZZ:"
    38 000008A7 5A5A3A              <1> .min:  db  "ZZ:"
    39 000008AA 5A5A00              <1> .sec:  db  "ZZ", 0
   149                                  %include    "../modules/protect/interrupt.s"
     1                              <1> ; Initialize vector of IDTR
     2                              <1> 
     3 000008AD 90<rept>            <1> ALIGN 4
     4 000008B0 FF07                <1> IDTR:       dw      8 * 256 - 1                                     ; limit of IDT
     5 000008B2 00001000            <1>             dd      VECT_BASE                                       ; base address of IDT
     6                              <1> 
     7                              <1> ; Initialize IDT
     8                              <1> 
     9                              <1> init_int:
    10                              <1> 
    11                              <1>             ; save registers
    12 000008B6 50                  <1>             push    eax
    13 000008B7 53                  <1>             push    ebx
    14 000008B8 51                  <1>             push    ecx
    15 000008B9 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; define Interrupt Gate Descriptor and apply default process to them
    18                              <1> 
    19 000008BA 8D05[000A0000]      <1>             lea     eax, [int_default]                              ; EAX = the address of interrupt process
    20 000008C0 BB008E0800          <1>             mov     ebx, 0x0008_8E00                                ; EBX = segment selector & P,DPL,DT,TYPE
    21 000008C5 6693                <1>             xchg    ax, bx                                          ; exchange lower word
    22                              <1> 
    23 000008C7 B900010000          <1>             mov     ecx, 256                                        ; num of Interrupt Gate Descriptor
    24 000008CC BF00001000          <1>             mov     edi, VECT_BASE                                  ; base address of Interrupt Descriptor Table
    25                              <1> 
    26                              <1> .10L:
    27 000008D1 891F                <1>             mov     [edi + 0], ebx                                  ; interrupt descriptor(lower)
    28 000008D3 894704              <1>             mov     [edi + 4], eax                                  ; interrupt descriptor(upper)
    29 000008D6 83C708              <1>             add     edi, 8                                          ; EDI += 8 byte
    30 000008D9 E2F6                <1>             loop    .10L
    31                              <1> 
    32                              <1>             ; set up Interrupt Descriptor
    33 000008DB 0F011D[B0080000]    <1>             lidt    [IDTR]
    34                              <1> 
    35                              <1>             ; return registers
    36 000008E2 5F                  <1>             pop     edi
    37 000008E3 59                  <1>             pop     ecx
    38 000008E4 5B                  <1>             pop     ebx
    39 000008E5 58                  <1>             pop     eax
    40                              <1> 
    41 000008E6 C3                  <1>             ret
    42                              <1> 
    43                              <1> int_stop:
    44                              <1> 
    45 000008E7 FB                  <1>             sti                                                     ; interrupt enable
    46                              <1> 
    47                              <1>             ; display the string indicated in EAX
    48 000008E8 50680F0600006A0F6A- <1>             cdecl   draw_str, 25, 15, 0x060F, eax
    48 000008F1 19E8CFFBFFFF6683C4- <1>
    48 000008FA 10                  <1>
    49                              <1> 
    50                              <1>             ; convert stack data into string
    51 000008FB 8B0424              <1>             mov     eax, [esp + 0]                                  ; EIP
    52 000008FE 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p1, 8, 16, 0b0100
    52 00000905 [C3090000]50E85DFE- <1>
    52 0000090D FFFF6683C414        <1>
    53                              <1> 
    54 00000913 8B442404            <1>             mov     eax, [esp + 4]                                  ; CS
    55 00000917 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p2, 8, 16, 0b0100
    55 0000091E [D4090000]50E844FE- <1>
    55 00000926 FFFF6683C414        <1>
    56                              <1> 
    57 0000092C 8B442408            <1>             mov     eax, [esp + 8]                                  ; EFLAGS
    58 00000930 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p3, 8, 16, 0b0100
    58 00000937 [E5090000]50E82BFE- <1>
    58 0000093F FFFF6683C414        <1>
    59                              <1> 
    60 00000945 8B44240C            <1>             mov     eax, [esp + 12]
    61 00000949 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p4, 8, 16, 0b0100
    61 00000950 [F6090000]50E812FE- <1>
    61 00000958 FFFF6683C414        <1>
    62                              <1> 
    63                              <1>             ; display string
    64 0000095E 68[BC090000]68040F- <1>             cdecl   draw_str, 25, 16, 0x0F04, .s1
    64 00000966 00006A106A19E855FB- <1>
    64 0000096F FFFF6683C410        <1>
    65 00000975 68[CD090000]68040F- <1>             cdecl   draw_str, 25, 17, 0x0F04, .s2
    65 0000097D 00006A116A19E83EFB- <1>
    65 00000986 FFFF6683C410        <1>
    66 0000098C 68[DE090000]68040F- <1>             cdecl   draw_str, 25, 18, 0x0F04, .s3
    66 00000994 00006A126A19E827FB- <1>
    66 0000099D FFFF6683C410        <1>
    67 000009A3 68[EF090000]68040F- <1>             cdecl   draw_str, 25, 19, 0x0F04, .s4
    67 000009AB 00006A136A19E810FB- <1>
    67 000009B4 FFFF6683C410        <1>
    68                              <1> 
    69                              <1>             ; infinite loop
    70 000009BA EBFE                <1>             jmp     $
    71                              <1> 
    72 000009BC 4553502B20303A      <1> .s1         db  "ESP+ 0:"
    73 000009C3 5F5F5F5F5F5F5F5F20- <1> .p1         db  "________ ", 0
    73 000009CC 00                  <1>
    74 000009CD 2020202B20343A      <1> .s2         db  "   + 4:"
    75 000009D4 5F5F5F5F5F5F5F5F20- <1> .p2         db  "________ ", 0
    75 000009DD 00                  <1>
    76 000009DE 2020202B20383A      <1> .s3         db  "   + 8:"
    77 000009E5 5F5F5F5F5F5F5F5F20- <1> .p3         db  "________ ", 0
    77 000009EE 00                  <1>
    78 000009EF 2020202B31323A      <1> .s4         db  "   +12:"
    79 000009F6 5F5F5F5F5F5F5F5F20- <1> .p4         db  "________ ", 0
    79 000009FF 00                  <1>
    80                              <1> 
    81                              <1> int_default:
    82 00000A00 9C                  <1>             pushf                                                   ; EFLAGS
    83 00000A01 0E                  <1>             push    cs                                              ; CS
    84 00000A02 68[E7080000]        <1>             push    int_stop                                        ; the process of displaying stack
    85                              <1> 
    86 00000A07 B8[0D0A0000]        <1>             mov     eax, .s0                                        ; interrupt type
    87 00000A0C CF                  <1>             iret
    88                              <1> 
    89 00000A0D 203C2020202053544F- <1> .s0         db  " <    STOP    > ", 0
    89 00000A16 50202020203E2000    <1>
    90                              <1> 
    91                              <1> int_zero_div:
    92 00000A1E 9C                  <1>             pushf                                                   ; EFLAGS
    93 00000A1F 0E                  <1>             push    cs                                              ; CS
    94 00000A20 68[E7080000]        <1>             push    int_stop                                        ; the process of displaying stack
    95                              <1> 
    96 00000A25 B8[2B0A0000]        <1>             mov     eax, .s0                                        ; interrupt type
    97 00000A2A CF                  <1>             iret
    98                              <1> 
    99 00000A2B 203C20205A45524F20- <1> .s0         db  " <  ZERO DIV  > ", 0
    99 00000A34 44495620203E2000    <1>
   100                              <1> 
   101                              <1> 
   150                                  %include    "../modules/protect/pic.s"
     1                              <1> init_pic:
     2                              <1> 
     3                              <1>             ; save register
     4 00000A3C 50                  <1>             push    eax
     5                              <1> 
     6                              <1>             ; set up Master PIC
     7                              <1>             outp    0x20, 0x11                              ; MASTER.ICW1 = 0x11
     7 00000A3D B011                <2>  mov al, %2
     7 00000A3F E620                <2>  out %1, al
     8                              <1>             outp    0x21, 0x20                              ; MASTER.ICW2 = 0x20 // interrupt vector
     8 00000A41 B020                <2>  mov al, %2
     8 00000A43 E621                <2>  out %1, al
     9                              <1>             outp    0x21, 0x04                              ; MASTER.ICW3 = 0x04 // slave connection position : IRQ2
     9 00000A45 B004                <2>  mov al, %2
     9 00000A47 E621                <2>  out %1, al
    10                              <1>             outp    0x21, 0x05                              ; MASTER.ICW4 = 0x05
    10 00000A49 B005                <2>  mov al, %2
    10 00000A4B E621                <2>  out %1, al
    11                              <1>             outp    0x21, 0xFF                              ; master interrupt mask
    11 00000A4D B0FF                <2>  mov al, %2
    11 00000A4F E621                <2>  out %1, al
    12                              <1> 
    13                              <1>             ; set up Slave
    14                              <1>             outp    0xA0, 0x11                              ; SLAVE.ICW1 = 0x11
    14 00000A51 B011                <2>  mov al, %2
    14 00000A53 E6A0                <2>  out %1, al
    15                              <1>             outp    0xA1, 0x28                              ; SLAVE.ICW2 = 0x28 // interrupt vector
    15 00000A55 B028                <2>  mov al, %2
    15 00000A57 E6A1                <2>  out %1, al
    16                              <1>             outp    0xA1, 0x02                              ; SLAVE.ICW3 = 0x02 // slave ID = 2
    16 00000A59 B002                <2>  mov al, %2
    16 00000A5B E6A1                <2>  out %1, al
    17                              <1>             outp    0xA1, 0x01                              ; SLAVE.ICW4 = 0x01
    17 00000A5D B001                <2>  mov al, %2
    17 00000A5F E6A1                <2>  out %1, al
    18                              <1>             outp    0xA1, 0xFF                              ; slave interrupt mask
    18 00000A61 B0FF                <2>  mov al, %2
    18 00000A63 E6A1                <2>  out %1, al
    19                              <1> 
    20                              <1>             ; return regisiter
    21 00000A65 58                  <1>             pop     eax
    22                              <1> 
    23 00000A66 C3                  <1>             ret
   151                                  %include    "../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000A67 60                  <1>             pusha
     5 00000A68 1E                  <1>             push    ds
     6 00000A69 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000A6A 66B81000            <1>             mov     ax, 0x0010                                      ; offset from the beginnig of GDT // second element
    10 00000A6E 8ED8                <1>             mov     ds, ax
    11 00000A70 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; get time from RTC
    14 00000A72 68[80010000]E879FD- <1>             cdecl   rtc_get_time, RTC_TIME
    14 00000A7A FFFF6683C404        <1>
    15                              <1> 
    16                              <1>             ; get RTC interrupt factor
    17                              <1>             outp    0x70, 0x0C                                      ; select register C
    17 00000A80 B00C                <2>  mov al, %2
    17 00000A82 E670                <2>  out %1, al
    18 00000A84 E471                <1>             in      al, 0x71
    19                              <1> 
    20                              <1>             ; clear interrupt flag
    21 00000A86 B020                <1>             mov     al, 0x20                                        ; AL = EOI command
    22 00000A88 E6A0                <1>             out     0xA0, al                                        ; slave PIC
    23 00000A8A E620                <1>             out     0x20, al                                        ; master PIC
    24                              <1> 
    25                              <1>             ; return register
    26 00000A8C 07                  <1>             pop     es
    27 00000A8D 1F                  <1>             pop     ds
    28 00000A8E 61                  <1>             popa
    29                              <1> 
    30 00000A8F CF                  <1>             iret                                                    ; end of interrupt process
    31                              <1>                                                                     ; return including flag register => iret
    32                              <1> 
    33                              <1> ; Enable interrupt by RTC itself
    34                              <1> 
    35                              <1> rtc_int_en:
    36                              <1> 
    37                              <1>             ; construct stack frame
    38 00000A90 55                  <1>             push    ebp
    39 00000A91 89E5                <1>             mov     ebp, esp                                        ;EBP+8 | enable bit
    40                              <1> 
    41                              <1>             ; save register
    42 00000A93 50                  <1>             push    eax
    43                              <1> 
    44                              <1>             ; set up Interrupt Permission
    45                              <1>             outp    0x70, 0x0B                                      ; select register B
    45 00000A94 B00B                <2>  mov al, %2
    45 00000A96 E670                <2>  out %1, al
    46                              <1> 
    47 00000A98 E471                <1>             in      al, 0x71
    48 00000A9A 0A4508              <1>             or      al, [ebp + 8]                                   ; set the specified bit
    49                              <1> 
    50 00000A9D E671                <1>             out     0x71, al                                        ; write down to register B
    51                              <1> 
    52                              <1>             ; return register
    53 00000A9F 58                  <1>             pop     eax
    54                              <1> 
    55                              <1>             ; destruct stack frame
    56 00000AA0 89EC                <1>             mov     esp, ebp
    57 00000AA2 5D                  <1>             pop     ebp
    58                              <1> 
    59 00000AA3 C3                  <1>             ret
   152                                  %include    "../modules/protect/ring_buff.s"
     1                              <1> ring_rd:
     2                              <1> 
     3                              <1>             ; construct stack frame                                     ;    +12 | save_dest address
     4 00000AA4 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
     5 00000AA5 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 00000AA7 50                  <1>             push    eax
     9 00000AA8 53                  <1>             push    ebx
    10 00000AA9 56                  <1>             push    esi
    11 00000AAA 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; get args
    14 00000AAB 8B7508              <1>             mov     esi, [ebp +  8]
    15 00000AAE 8B7D0C              <1>             mov     edi, [ebp + 12]
    16                              <1> 
    17                              <1>             ; confirm the reading location
    18 00000AB1 B800000000          <1>             mov     eax, 0                                              ; EAX = 0 // no data
    19 00000AB6 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = rp
    20 00000AB8 3B5E04              <1>             cmp     ebx, [esi + ring_buff.wp]                           ; if (EBX != wp)
    21 00000ABB 7411                <1>             je      .10E                                                ; {
    22                              <1> 
    23 00000ABD 8A441E08            <1>             mov     al, [esi + ring_buff.item + ebx]                    ;   AL = BUFFER[rp] // store key code(unit:byte)
    24                              <1> 
    25 00000AC1 8807                <1>             mov     [edi], al                                           ;   [EDI] = AL      // save data
    26                              <1> 
    27 00000AC3 43                  <1>             inc     ebx                                                 ;   EBX++           // next reading location
    28 00000AC4 83E30F              <1>             and     ebx, RING_INDEX_MASK                                ;   EBX &= 0x0F     // limit size
    29 00000AC7 891E                <1>             mov     [esi + ring_buff.rp], ebx                           ;   rp = EBX        // save the reading location
    30                              <1> 
    31 00000AC9 B801000000          <1>             mov     eax, 1                                              ;   EAX = 1         // data exists
    32                              <1> .10E:                                                                   ; }
    33                              <1> 
    34                              <1>             ; return registers
    35 00000ACE 5F                  <1>             pop     edi
    36 00000ACF 5E                  <1>             pop     esi
    37 00000AD0 5B                  <1>             pop     ebx
    38 00000AD1 58                  <1>             pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 00000AD2 89EC                <1>             mov     esp, ebp
    42 00000AD4 5D                  <1>             pop     ebp
    43                              <1> 
    44 00000AD5 C3                  <1>             ret
    45                              <1> 
    46                              <1> ring_wr:
    47                              <1> 
    48                              <1>             ; construct stack frame                                     ;    +12 | data to write
    49 00000AD6 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
    50 00000AD7 89E5                <1>             mov     ebp, esp
    51                              <1> 
    52                              <1>             ; save registers
    53 00000AD9 50                  <1>             push    eax
    54 00000ADA 53                  <1>             push    ebx
    55 00000ADB 51                  <1>             push    ecx
    56 00000ADC 56                  <1>             push    esi
    57 00000ADD 57                  <1>             push    edi
    58                              <1> 
    59                              <1>             ; get args
    60 00000ADE 8B7508              <1>             mov     esi, [ebp + 8]
    61                              <1> 
    62                              <1>             ; confirm the writing location
    63 00000AE1 B800000000          <1>             mov     eax, 0
    64 00000AE6 8B5E04              <1>             mov     ebx, [esi + ring_buff.wp]                           ; writing position
    65 00000AE9 89D9                <1>             mov     ecx, ebx
    66 00000AEB 41                  <1>             inc     ecx                                                 ; next writing location
    67 00000AEC 83E10F              <1>             and     ecx, RING_INDEX_MASK                                ; size limit
    68                              <1> 
    69 00000AEF 3B0E                <1>             cmp     ecx, [esi + ring_buff.rp]                           ; if (ECX != rp)
    70 00000AF1 740F                <1>             je      .10E                                                ; {
    71                              <1> 
    72 00000AF3 8A450C              <1>             mov     al, [ebp + 12]                                      ;   AL = data
    73                              <1> 
    74 00000AF6 88441E08            <1>             mov     [esi + ring_buff.item + ebx], al                    ;   BUFFER[wp] = AL // save key code
    75 00000AFA 894E04              <1>             mov     [esi + ring_buff.wp], ecx                           ;   wp = ECX        // save the writing location
    76 00000AFD B801000000          <1>             mov     eax, 1
    77                              <1> .10E:
    78                              <1> 
    79                              <1>             ; return registers
    80 00000B02 5F                  <1>             pop     edi
    81 00000B03 5E                  <1>             pop     esi
    82 00000B04 59                  <1>             pop     ecx
    83 00000B05 5B                  <1>             pop     ebx
    84 00000B06 58                  <1>             pop     eax
    85                              <1> 
    86                              <1>             ; destruct stack frame
    87 00000B07 89EC                <1>             mov     esp, ebp
    88 00000B09 5D                  <1>             pop     ebp
    89                              <1> 
    90 00000B0A C3                  <1>             ret
    91                              <1> 
    92                              <1> draw_key:
    93                              <1> 
    94                              <1>             ; construct stack frame                                     ;    +16 | ring buffer
    95 00000B0B 55                  <1>             push    ebp                                                 ;    +12 | row
    96 00000B0C 89E5                <1>             mov     ebp, esp                                            ; EBP+ 8 | col
    97                              <1> 
    98                              <1>             ; save registers
    99 00000B0E 60                  <1>             pusha                                                       ; save EAX,EBX,ECX,EDX,EDI,ESI,EBP,ESP
   100                              <1> 
   101                              <1>             ; get args
   102 00000B0F 8B5508              <1>             mov     edx, [ebp +  8]
   103 00000B12 8B7D0C              <1>             mov     edi, [ebp + 12]
   104 00000B15 8B7510              <1>             mov     esi, [ebp + 16]
   105                              <1> 
   106                              <1>             ; get ring buffer info
   107 00000B18 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = wp // writing location
   108 00000B1A 8D7608              <1>             lea     esi, [esi + ring_buff.item]
   109 00000B1D B910000000          <1>             mov     ecx, RING_ITEM_SIZE
   110                              <1> 
   111                              <1>             ; display data
   112                              <1> .10L:
   113                              <1> 
   114 00000B22 4B                  <1>             dec     ebx                                                 ; EBX-- == where data exists
   115 00000B23 83E30F              <1>             and     ebx, RING_INDEX_MASK
   116 00000B26 8A041E              <1>             mov     al, [esi + ebx]                                     ; EAX = KEY_BUFF[EBX]
   117                              <1> 
   118 00000B29 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .tmp, 2, 16, 0b0100
   118 00000B30 [5A0B0000]50E832FC- <1>
   118 00000B38 FFFF6683C414        <1>
   119 00000B3E 68[5A0B0000]6A0257- <1>             cdecl   draw_str, edx, edi, 0x02, .tmp
   119 00000B46 52E87AF9FFFF6683C4- <1>
   119 00000B4F 10                  <1>
   120                              <1> 
   121 00000B50 83C203              <1>             add     edx, 3                                              ; updata display position(3 chars)
   122                              <1> 
   123 00000B53 E2CD                <1>             loop    .10L
   124                              <1> .10E:
   125                              <1> 
   126                              <1>             ; return registers
   127 00000B55 61                  <1>             popa
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 00000B56 89EC                <1>             mov     esp, ebp
   131 00000B58 5D                  <1>             pop     ebp
   132                              <1> 
   133 00000B59 C3                  <1>             ret
   134                              <1> 
   135 00000B5A 2D2D2000            <1> .tmp        db "-- ", 0
   153                                  %include    "../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000B5E 60                  <1>             pusha
     5 00000B5F 1E                  <1>             push    ds
     6 00000B60 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment for data
     9 00000B61 66B81000            <1>             mov     ax, 0x0010
    10 00000B65 8ED8                <1>             mov     ds, ax
    11 00000B67 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; read buffer of KBC
    14 00000B69 E460                <1>             in      al, 0x60                                    ; AL = get key code
    15                              <1> 
    16                              <1>             ; save key code
    17 00000B6B 5068[840B0000]E860- <1>             cdecl   ring_wr, _KEY_BUFF, eax
    17 00000B73 FFFFFF6683C408      <1>
    18                              <1> 
    19                              <1>             ; send interrupt end command
    20                              <1>             outp    0x20, 0x20                                  ; master PIC: EOI command
    20 00000B7A B020                <2>  mov al, %2
    20 00000B7C E620                <2>  out %1, al
    21                              <1> 
    22                              <1>             ; return registers
    23 00000B7E 07                  <1>             pop     es
    24 00000B7F 1F                  <1>             pop     ds
    25 00000B80 61                  <1>             popa
    26                              <1> 
    27 00000B81 CF                  <1>             iret
    28                              <1> 
    29 00000B82 00<rept>            <1> ALIGN 4, db 0
    30 00000B84 00<rept>            <1> _KEY_BUFF:  times ring_buff_size db 0
   154                                  %include    "../modules/protect/timer.s"
     1                              <1> int_en_timer0:
     2                              <1> 
     3                              <1>             ; save register
     4 00000B9C 50                  <1>             push    eax                                     ; use eax register on outp
     5                              <1> 
     6                              <1>             outp    0x43, 0b_00_11_010_0                    ; counter 0|access way:lower/upper|mode 2|16 bit binary couner
     6 00000B9D B034                <2>  mov al, %2
     6 00000B9F E643                <2>  out %1, al
     7                              <1>             outp    0x40, 0x9C                              ; lower byte
     7 00000BA1 B09C                <2>  mov al, %2
     7 00000BA3 E640                <2>  out %1, al
     8                              <1>             outp    0x40, 0x2E                              ; upper byte
     8 00000BA5 B02E                <2>  mov al, %2
     8 00000BA7 E640                <2>  out %1, al
     9                              <1> 
    10                              <1>             ; return register
    11 00000BA9 58                  <1>             pop     eax
    12                              <1> 
    13 00000BAA C3                  <1>             ret
   155                                  %include    "../modules/protect/draw_rotation_bar.s"
     1                              <1> ;--------------------------------------------------------------------------------------------
     2                              <1> ;char update cycle
     3                              <1> ;=> The value obtained by reading the value of Timer interrupt counter
     4                              <1> ;   and shifting it to the right by 4 bits
     5                              <1> ;   and if the value is different from the previous value, it's the time to update.
     6                              <1> ;--------------------------------------------------------------------------------------------
     7                              <1> 
     8                              <1> draw_rotation_bar:
     9                              <1> 
    10                              <1>             ; save register
    11 00000BAB 50                  <1>             push    eax
    12                              <1> 
    13                              <1>             ; main process
    14 00000BAC A1[CC020000]        <1>             mov     eax, [TIMER_COUNT]
    15 00000BB1 C1E804              <1>             shr     eax, 4
    16 00000BB4 3B05[DC0B0000]      <1>             cmp     eax, [.index]
    17 00000BBA 741E                <1>             je      .10E
    18                              <1> 
    19 00000BBC A3[DC0B0000]        <1>             mov     [.index], eax
    20 00000BC1 83E003              <1>             and     eax, 0x03                                       ; limit to the range 0 to 3
    21                              <1> 
    22 00000BC4 8A80[E00B0000]      <1>             mov     al, [.table + eax]                              ; AL = table[index]
    23 00000BCA 506A0F6A1D6A00E8ED- <1>             cdecl   draw_char, 0, 29, 0x000F, eax
    23 00000BD3 F7FFFF6683C410      <1>
    24                              <1> 
    25                              <1> .10E:
    26                              <1> 
    27                              <1>             ; return register
    28 00000BDA 58                  <1>             pop     eax
    29                              <1> 
    30 00000BDB C3                  <1>             ret
    31                              <1> 
    32                              <1> ALIGN 4, db 0
    33 00000BDC 00000000            <1> .index      dd 0                                                    ; previous value
    34 00000BE0 7C2F2D5C            <1> .table      db "|/-\"                                               ; display bar
   156                                  
   157                                  
   158                                  ; PADDING
   159                                  
   160 00000BE4 00<rept>                            times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
