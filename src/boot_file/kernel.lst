     1                                  %define     USE_SYSTEM_CALL
     2                                  %define     USE_TEST_AND_SET
     3                                  
     4                                  ;macro
     5                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7c00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1>         SP_TASK_2       equ     STACK_BASE + (STACK_SIZE * 3)
    24                              <1>         SP_TASK_3       equ     STACK_BASE + (STACK_SIZE * 4)
    25                              <1> 
    26                              <1> 
     6                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> struc   drive                               ; define parameters by structure when reading sector
    42 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    43 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    44 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    45 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    46                              <1> endstruc
    47                              <1> 
    48                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    49                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    50                              <1> 
    51                              <1> struc   ring_buff
    52 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    53 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    54 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    55                              <1> endstruc
    56                              <1> 
    57                              <1> %macro  set_desc 2-*
    58                              <1>             push    eax
    59                              <1>             push    edi
    60                              <1> 
    61                              <1>             mov     edi, %1                             ; descriptor address
    62                              <1>             mov     eax, %2                             ; base address
    63                              <1> 
    64                              <1>         %if 3 == %0
    65                              <1>             mov     [edi + 0], %3                       ; limit
    66                              <1>         %endif
    67                              <1> 
    68                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 4], al                       ; base([23:16])
    71                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    72                              <1> 
    73                              <1>             pop     edi
    74                              <1>             pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate 2-*
    78                              <1>             push    eax
    79                              <1>             push    edi
    80                              <1> 
    81                              <1>             mov     edi, %1                             ; descriptor address
    82                              <1>             mov     eax, %2                             ; base address
    83                              <1> 
    84                              <1>             mov     [edi + 0], ax                       ; base([15:0])
    85                              <1>             shr     eax, 16
    86                              <1>             mov     [edi + 6], ax                       ; base([31:16])
    87                              <1> 
    88                              <1>             pop     edi
    89                              <1>             pop     eax
    90                              <1> %endmacro
     7                                  
     8                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     9                                  
    10                                  [BITS 32]                                                       ; BIT 32 directive
    11                                  ; entry point
    12                                  
    13                                  kernel:
    14                                  
    15                                                  ; Get Font address
    16 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    17 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    18 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    19 0000000C C1E004                                  shl     eax, 4
    20 0000000F 01D8                                    add     eax, ebx
    21 00000011 A3[1C020000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    22                                  
    23                                                  ; set up TSS descriptor
    24                                                  set_desc    GDT.tss_0, TSS_0
    24 00000016 50                  <1>  push eax
    24 00000017 57                  <1>  push edi
    24                              <1> 
    24 00000018 BF[A4050000]        <1>  mov edi, %1
    24 0000001D B8[24020000]        <1>  mov eax, %2
    24                              <1> 
    24                              <1>  %if 3 == %0
    24                              <1>  mov [edi + 0], %3
    24                              <1>  %endif
    24                              <1> 
    24 00000022 66894702            <1>  mov [edi + 2], ax
    24 00000026 C1E810              <1>  shr eax, 16
    24 00000029 884704              <1>  mov [edi + 4], al
    24 0000002C 886707              <1>  mov [edi + 7], ah
    24                              <1> 
    24 0000002F 5F                  <1>  pop edi
    24 00000030 58                  <1>  pop eax
    25                                                  set_desc    GDT.tss_1, TSS_1
    25 00000031 50                  <1>  push eax
    25 00000032 57                  <1>  push edi
    25                              <1> 
    25 00000033 BF[AC050000]        <1>  mov edi, %1
    25 00000038 B8[FC020000]        <1>  mov eax, %2
    25                              <1> 
    25                              <1>  %if 3 == %0
    25                              <1>  mov [edi + 0], %3
    25                              <1>  %endif
    25                              <1> 
    25 0000003D 66894702            <1>  mov [edi + 2], ax
    25 00000041 C1E810              <1>  shr eax, 16
    25 00000044 884704              <1>  mov [edi + 4], al
    25 00000047 886707              <1>  mov [edi + 7], ah
    25                              <1> 
    25 0000004A 5F                  <1>  pop edi
    25 0000004B 58                  <1>  pop eax
    26                                                  set_desc    GDT.tss_2, TSS_2
    26 0000004C 50                  <1>  push eax
    26 0000004D 57                  <1>  push edi
    26                              <1> 
    26 0000004E BF[B4050000]        <1>  mov edi, %1
    26 00000053 B8[D4030000]        <1>  mov eax, %2
    26                              <1> 
    26                              <1>  %if 3 == %0
    26                              <1>  mov [edi + 0], %3
    26                              <1>  %endif
    26                              <1> 
    26 00000058 66894702            <1>  mov [edi + 2], ax
    26 0000005C C1E810              <1>  shr eax, 16
    26 0000005F 884704              <1>  mov [edi + 4], al
    26 00000062 886707              <1>  mov [edi + 7], ah
    26                              <1> 
    26 00000065 5F                  <1>  pop edi
    26 00000066 58                  <1>  pop eax
    27                                                  set_desc    GDT.tss_3, TSS_3
    27 00000067 50                  <1>  push eax
    27 00000068 57                  <1>  push edi
    27                              <1> 
    27 00000069 BF[BC050000]        <1>  mov edi, %1
    27 0000006E B8[AC040000]        <1>  mov eax, %2
    27                              <1> 
    27                              <1>  %if 3 == %0
    27                              <1>  mov [edi + 0], %3
    27                              <1>  %endif
    27                              <1> 
    27 00000073 66894702            <1>  mov [edi + 2], ax
    27 00000077 C1E810              <1>  shr eax, 16
    27 0000007A 884704              <1>  mov [edi + 4], al
    27 0000007D 886707              <1>  mov [edi + 7], ah
    27                              <1> 
    27 00000080 5F                  <1>  pop edi
    27 00000081 58                  <1>  pop eax
    28                                  
    29                                  
    30                                                  ; set up Call Gate
    31                                                  set_gate    GDT.call_gate, call_gate
    31 00000082 50                  <1>  push eax
    31 00000083 57                  <1>  push edi
    31                              <1> 
    31 00000084 BF[C4050000]        <1>  mov edi, %1
    31 00000089 B8[40110000]        <1>  mov eax, %2
    31                              <1> 
    31 0000008E 668907              <1>  mov [edi + 0], ax
    31 00000091 C1E810              <1>  shr eax, 16
    31 00000094 66894706            <1>  mov [edi + 6], ax
    31                              <1> 
    31 00000098 5F                  <1>  pop edi
    31 00000099 58                  <1>  pop eax
    32                                  
    33                                                  ; set up LDT
    34                                                  set_desc    GDT.ldt, LDT, word LDT_LIMIT        ; descriptor address/base address/limit
    34 0000009A 50                  <1>  push eax
    34 0000009B 57                  <1>  push edi
    34                              <1> 
    34 0000009C BF[9C050000]        <1>  mov edi, %1
    34 000000A1 B8[D2050000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if 3 == %0
    34 000000A6 66C7074700          <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 000000AB 66894702            <1>  mov [edi + 2], ax
    34 000000AF C1E810              <1>  shr eax, 16
    34 000000B2 884704              <1>  mov [edi + 4], al
    34 000000B5 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 000000B8 5F                  <1>  pop edi
    34 000000B9 58                  <1>  pop eax
    35                                  
    36                                                  ; load GDTR (resetting)
    37 000000BA 0F0115[CC050000]                        lgdt        [GDTR]
    38                                  
    39                                                  ; set up stack
    40 000000C1 BC00341000                              mov     esp, SP_TASK_0                          ; set up stack for Task0
    41                                  
    42                                                  ; recognize Kernel as Task0
    43 000000C6 66B82000                                mov     ax, SS_TASK_0
    44 000000CA 0F00D8                                  ltr     ax                                      ; initialize TR
    45                                  
    46                                                  ; initialize interrupt vector
    47 000000CD E8400D0000                              cdecl   init_int
    48 000000D2 E8C10E0000                              cdecl   init_pic
    49                                  
    50                                                  set_vect    0x00, int_zero_div                  ; define interrupt process: Zero div
    50 000000D7 50                  <1>  push eax
    50 000000D8 57                  <1>  push edi
    50                              <1> 
    50 000000D9 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    50 000000DE B8[7A0F0000]        <1>  mov eax, %2
    50                              <1> 
    50                              <1>  %if 3 == %0
    50                              <1>  mov [edi + 4], %3
    50                              <1>  %endif
    50                              <1> 
    50 000000E3 668907              <1>  mov [edi + 0], ax
    50 000000E6 C1E810              <1>  shr eax, 16
    50 000000E9 66894706            <1>  mov [edi + 6], ax
    50                              <1> 
    50 000000ED 5F                  <1>  pop edi
    50 000000EE 58                  <1>  pop eax
    51                                                  set_vect    0x07, int_nm                        ; define interrupt process: device unavailable exception
    51 000000EF 50                  <1>  push eax
    51 000000F0 57                  <1>  push edi
    51                              <1> 
    51 000000F1 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    51 000000F6 B8[DD110000]        <1>  mov eax, %2
    51                              <1> 
    51                              <1>  %if 3 == %0
    51                              <1>  mov [edi + 4], %3
    51                              <1>  %endif
    51                              <1> 
    51 000000FB 668907              <1>  mov [edi + 0], ax
    51 000000FE C1E810              <1>  shr eax, 16
    51 00000101 66894706            <1>  mov [edi + 6], ax
    51                              <1> 
    51 00000105 5F                  <1>  pop edi
    51 00000106 58                  <1>  pop eax
    52                                                  set_vect    0x20, int_timer                     ; define interrupt process: Timer
    52 00000107 50                  <1>  push eax
    52 00000108 57                  <1>  push edi
    52                              <1> 
    52 00000109 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    52 0000010E B8[1A060000]        <1>  mov eax, %2
    52                              <1> 
    52                              <1>  %if 3 == %0
    52                              <1>  mov [edi + 4], %3
    52                              <1>  %endif
    52                              <1> 
    52 00000113 668907              <1>  mov [edi + 0], ax
    52 00000116 C1E810              <1>  shr eax, 16
    52 00000119 66894706            <1>  mov [edi + 6], ax
    52                              <1> 
    52 0000011D 5F                  <1>  pop edi
    52 0000011E 58                  <1>  pop eax
    53                                                  set_vect    0x21, int_keyboard                  ; define interrupt process: KBC
    53 0000011F 50                  <1>  push eax
    53 00000120 57                  <1>  push edi
    53                              <1> 
    53 00000121 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    53 00000126 B8[BA100000]        <1>  mov eax, %2
    53                              <1> 
    53                              <1>  %if 3 == %0
    53                              <1>  mov [edi + 4], %3
    53                              <1>  %endif
    53                              <1> 
    53 0000012B 668907              <1>  mov [edi + 0], ax
    53 0000012E C1E810              <1>  shr eax, 16
    53 00000131 66894706            <1>  mov [edi + 6], ax
    53                              <1> 
    53 00000135 5F                  <1>  pop edi
    53 00000136 58                  <1>  pop eax
    54                                                  set_vect    0x28, int_rtc                       ; define interrupt process: RTC
    54 00000137 50                  <1>  push eax
    54 00000138 57                  <1>  push edi
    54                              <1> 
    54 00000139 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    54 0000013E B8[C30F0000]        <1>  mov eax, %2
    54                              <1> 
    54                              <1>  %if 3 == %0
    54                              <1>  mov [edi + 4], %3
    54                              <1>  %endif
    54                              <1> 
    54 00000143 668907              <1>  mov [edi + 0], ax
    54 00000146 C1E810              <1>  shr eax, 16
    54 00000149 66894706            <1>  mov [edi + 6], ax
    54                              <1> 
    54 0000014D 5F                  <1>  pop edi
    54 0000014E 58                  <1>  pop eax
    55                                                  set_vect    0x81, trap_gate_81, word 0xEF00     ; define trap gate        : display a char
    55 0000014F 50                  <1>  push eax
    55 00000150 57                  <1>  push edi
    55                              <1> 
    55 00000151 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    55 00000156 B8[70110000]        <1>  mov eax, %2
    55                              <1> 
    55                              <1>  %if 3 == %0
    55 0000015B 66C7470400EF        <1>  mov [edi + 4], %3
    55                              <1>  %endif
    55                              <1> 
    55 00000161 668907              <1>  mov [edi + 0], ax
    55 00000164 C1E810              <1>  shr eax, 16
    55 00000167 66894706            <1>  mov [edi + 6], ax
    55                              <1> 
    55 0000016B 5F                  <1>  pop edi
    55 0000016C 58                  <1>  pop eax
    56                                                  set_vect    0x82, trap_gate_82, word 0xEF00     ; define trap gate        : draw pixel
    56 0000016D 50                  <1>  push eax
    56 0000016E 57                  <1>  push edi
    56                              <1> 
    56 0000016F BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    56 00000174 B8[7E110000]        <1>  mov eax, %2
    56                              <1> 
    56                              <1>  %if 3 == %0
    56 00000179 66C7470400EF        <1>  mov [edi + 4], %3
    56                              <1>  %endif
    56                              <1> 
    56 0000017F 668907              <1>  mov [edi + 0], ax
    56 00000182 C1E810              <1>  shr eax, 16
    56 00000185 66894706            <1>  mov [edi + 6], ax
    56                              <1> 
    56 00000189 5F                  <1>  pop edi
    56 0000018A 58                  <1>  pop eax
    57                                  
    58                                  
    59                                                  ; permit interrupt by device
    60 0000018B 6A10E85A0E00006683-                     cdecl   rtc_int_en, 0x10                        ; Updata-Ended Interrupt Enable
    60 00000194 C404               
    61 00000196 E85D0F0000                              cdecl   int_en_timer0
    62                                  
    63                                                  ; set up IMR(Interrupt Mask Register)
    64                                                  outp    0x21, 0b1111_1000                       ; interrupt enable: slave PIC/KBC/Timer     // master
    64 0000019B B0F8                <1>  mov al, %2
    64 0000019D E621                <1>  out %1, al
    65                                                  outp    0xA1, 0b1111_1110                       ; interrupt enable: RTC                     // slave
    65 0000019F B0FE                <1>  mov al, %2
    65 000001A1 E6A1                <1>  out %1, al
    66                                  
    67                                                  ; CPU interrupt enable
    68 000001A3 FB                                      sti
    69                                  
    70                                                  ; display font and color_bar
    71 000001A4 6A0D6A3FE83B080000-                     cdecl   draw_font, 63, 13
    71 000001AD 6683C408           
    72 000001B1 6A046A3FE8B3080000-                     cdecl   draw_color_bar, 63, 4
    72 000001BA 6683C408           
    73                                  
    74                                                  ; display string
    75 000001BE 68[06020000]680F01-                     cdecl   draw_str, 25, 14, 0x010F, .s0
    75 000001C6 00006A0E6A19E85C08-
    75 000001CF 00006683C410       
    76                                  
    77                                  ;---------------------------------------------------------------------------
    78                                  ; default multitask
    79                                  ;---------------------------------------------------------------------------
    80                                  
    81                                  
    82                                  ;                 ; call Task
    83                                  ;                 ; call    SS_TASK_1:0
    84                                  
    85                                  ; .10L:
    86                                  
    87                                  ;                 ; display time
    88                                  ;                 mov     eax, [RTC_TIME]
    89                                  ;                 cdecl   draw_time, 72, 0, 0x0700, eax
    90                                  
    91                                  
    92                                  ;                 ; get key code
    93                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
    94                                  ;                 cmp     eax, 0
    95                                  ;                 je      .10E
    96                                  
    97                                  ;                 ; display key code
    98                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
    99                                  ; .10E:
   100                                  
   101                                  ;                 ; draw rotation bar
   102                                  ;                 cdecl   draw_rotation_bar
   103                                  
   104                                  ;                 jmp     .10L
   105                                  
   106                                  ;----------------------------------------------------------------------------
   107                                  
   108                                  
   109                                  ;----------------------------------------------------------------------------
   110                                  ; non-preemptive multitask
   111                                  ;----------------------------------------------------------------------------
   112                                  
   113                                  ; .10L:
   114                                  
   115                                  ;                 ; call task
   116                                  ;                 jmp     SS_TASK_1:0                             ; jump to Task1
   117                                  
   118                                  ;                 ; draw rotation bar
   119                                  ;                 cdecl   draw_rotation_bar
   120                                  
   121                                  ;                 ; get key code
   122                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   123                                  ;                 cmp     eax, 0
   124                                  ;                 je      .10E
   125                                  
   126                                  ;                 ; display key code
   127                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   128                                  ; .10E:
   129                                  
   130                                  ;                 jmp     .10L
   131                                  
   132                                  ;-----------------------------------------------------------------------------
   133                                  
   134                                  ;----------------------------------------------------------------------------
   135                                  ; preemptive multitask
   136                                  ;----------------------------------------------------------------------------
   137                                  
   138                                  .10L:
   139                                  
   140                                                  ; draw rotation bar
   141 000001D5 E82D0F0000                              cdecl   draw_rotation_bar
   142                                  
   143                                                  ; get key code
   144 000001DA 68[18020000]68-                         cdecl   ring_rd, _KEY_BUFF, .int_key
   144 000001E0 [E0100000]E8170E00-
   144 000001E8 006683C408         
   145 000001ED 83F800                                  cmp     eax, 0
   146 000001F0 7412                                    je      .10E
   147                                  
   148                                                  ; display key code
   149 000001F2 68[E0100000]6A1D6A-                     cdecl   draw_key, 2, 29, _KEY_BUFF
   149 000001FA 02E8670E00006683C4-
   149 00000203 0C                 
   150                                  .10E:
   151                                  
   152 00000204 EBCF                                    jmp     .10L
   153                                  
   154                                  ;-----------------------------------------------------------------------------
   155                                  
   156                                  ;data
   157 00000206 2048656C6C6F2C206B-     .s0:    db  " Hello, kernel! ", 0
   157 0000020F 65726E656C212000   
   158                                  
   159 00000217 00                      ALIGN 4, db 0
   160 00000218 00000000                .int_key:   dd 0
   161                                  
   162                                  ALIGN 4, db 0
   163 0000021C 00000000                FONT_ADR:   dd 0
   164 00000220 00000000                RTC_TIME:   dd 0
   165                                  
   166                                  
   167                                  ; TASKS
   168                                  %include    "descriptor.s"
     1                              <1> ;-----------------------------------------------------------------------
     2                              <1> ; TSS
     3                              <1> ;-----------------------------------------------------------------------
     4                              <1> 
     5                              <1> TSS_0:
     6 00000224 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
     7 00000228 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                             ;*  4: ESP0
     8 0000022C 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
     9 00000230 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    10 00000234 00000000            <1> .ss1:           dd  0                                           ;* 16:
    11 00000238 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    12 0000023C 00000000            <1> .ss2:           dd  0                                           ;* 24:
    13 00000240 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    14 00000244 00000000            <1> .eip:           dd  0                                           ;  32: EIP
    15 00000248 00000000            <1> .eflags:        dd  0                                           ;  36: EFLAGS
    16 0000024C 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    17 00000250 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    18 00000254 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    19 00000258 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    20 0000025C 00000000            <1> .esp:           dd  0                                           ;  56: ESP
    21 00000260 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    22 00000264 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    23 00000268 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    24 0000026C 00000000            <1> .es:            dd  0                                           ;  72: ES
    25 00000270 00000000            <1> .cs:            dd  0                                           ;  76: CS
    26 00000274 00000000            <1> .ss:            dd  0                                           ;  80: SS
    27 00000278 00000000            <1> .ds:            dd  0                                           ;  84: DS
    28 0000027C 00000000            <1> .fs:            dd  0                                           ;  88: FS
    29 00000280 00000000            <1> .gs:            dd  0                                           ;  92: GS
    30 00000284 00000000            <1> .ldt:           dd  0                                           ;* 96: LDT segment selector
    31 00000288 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    32 0000028C 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    33                              <1> 
    34                              <1> TSS_1:
    35 000002FC 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    36 00000300 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                             ;*  4: ESP0
    37 00000304 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    38 00000308 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    39 0000030C 00000000            <1> .ss1:           dd  0                                           ;* 16:
    40 00000310 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    41 00000314 00000000            <1> .ss2:           dd  0                                           ;* 24:
    42 00000318 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    43 0000031C [78060000]          <1> .eip:           dd  task_1                                      ;  32: EIP
    44 00000320 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    45 00000324 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    46 00000328 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    47 0000032C 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    48 00000330 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    49 00000334 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56: ESP
    50 00000338 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    51 0000033C 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    52 00000340 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    53 00000344 27000000            <1> .es:            dd  DS_TASK_1                                   ;  72: ES
    54 00000348 1F000000            <1> .cs:            dd  CS_TASK_1                                   ;  76: CS
    55 0000034C 27000000            <1> .ss:            dd  DS_TASK_1                                   ;  80: SS
    56 00000350 27000000            <1> .ds:            dd  DS_TASK_1                                   ;  84: DS
    57 00000354 27000000            <1> .fs:            dd  DS_TASK_1                                   ;  88: FS
    58 00000358 27000000            <1> .gs:            dd  DS_TASK_1                                   ;  92: GS
    59 0000035C 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    60 00000360 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    61 00000364 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    62                              <1> 
    63                              <1> 
    64                              <1> TSS_2:
    65 000003D4 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    66 000003D8 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                             ;*  4: ESP0
    67 000003DC 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    68 000003E0 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    69 000003E4 00000000            <1> .ss1:           dd  0                                           ;* 16:
    70 000003E8 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    71 000003EC 00000000            <1> .ss2:           dd  0                                           ;* 24:
    72 000003F0 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
    73 000003F4 [AD060000]          <1> .eip:           dd  task_2                                      ;  32: EIP
    74 000003F8 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    75 000003FC 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    76 00000400 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    77 00000404 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    78 00000408 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    79 0000040C 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56: ESP
    80 00000410 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    81 00000414 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    82 00000418 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    83 0000041C 37000000            <1> .es:            dd  DS_TASK_2                                   ;  72: ES
    84 00000420 2F000000            <1> .cs:            dd  CS_TASK_2                                   ;  76: CS
    85 00000424 37000000            <1> .ss:            dd  DS_TASK_2                                   ;  80: SS
    86 00000428 37000000            <1> .ds:            dd  DS_TASK_2                                   ;  84: DS
    87 0000042C 37000000            <1> .fs:            dd  DS_TASK_2                                   ;  88: FS
    88 00000430 37000000            <1> .gs:            dd  DS_TASK_2                                   ;  92: GS
    89 00000434 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    90 00000438 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    91 0000043C 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    92                              <1> 
    93                              <1> TSS_3:
    94 000004AC 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    95 000004B0 003E1000            <1> .esp0:          dd  SP_TASK_3 - 512                             ;*  4: ESP0
    96 000004B4 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    97 000004B8 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    98 000004BC 00000000            <1> .ss1:           dd  0                                           ;* 16:
    99 000004C0 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   100 000004C4 00000000            <1> .ss2:           dd  0                                           ;* 24:
   101 000004C8 00000000            <1> .cr3:           dd  0                                           ;  28: CR3(PDBR)
   102 000004CC [80070000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   103 000004D0 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   104 000004D4 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   105 000004D8 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   106 000004DC 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   107 000004E0 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   108 000004E4 00401000            <1> .esp:           dd  SP_TASK_3                                           ;  56: ESP
   109 000004E8 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   110 000004EC 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   111 000004F0 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   112 000004F4 47000000            <1> .es:            dd  DS_TASK_3                                   ;  72: ES
   113 000004F8 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   114 000004FC 47000000            <1> .ss:            dd  DS_TASK_3                                   ;  80: SS
   115 00000500 47000000            <1> .ds:            dd  DS_TASK_3                                   ;  84: DS
   116 00000504 47000000            <1> .fs:            dd  DS_TASK_3                                   ;  88: FS
   117 00000508 47000000            <1> .gs:            dd  DS_TASK_3                                   ;  92: GS
   118 0000050C 18000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   119 00000510 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   120 00000514 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   121                              <1> 
   122                              <1> 
   123                              <1> ;-----------------------------------------------------------------------------------------------
   124                              <1> ; GDT
   125                              <1> ;-----------------------------------------------------------------------------------------------
   126                              <1> 
   127 00000584 0000000000000000    <1> GDT:            dq  0x0000000000000000
   128 0000058C FFFF0000009ACF00    <1> .cs_kernel:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   129 00000594 FFFF00000092CF00    <1> .ds_kernel:     dq  0x00CF92000000FFFF                          ; DATA 4G
   130 0000059C 0000000000820000    <1> .ldt            dq  0x0000820000000000                          ; LDT descriptor
   131 000005A4 6700000000890000    <1> .tss_0:         dq  0x0000890000000067                          ; TSS descriptor
   132 000005AC 6700000000890000    <1> .tss_1:         dq  0x0000890000000067                          ; TSS descriptor
   133 000005B4 6700000000890000    <1> .tss_2:         dq  0x0000890000000067                          ; TSS descriptor
   134 000005BC 6700000000890000    <1> .tss_3:         dq  0x0000890000000067                          ; TSS descriptor
   135 000005C4 0000080004EC0000    <1> .call_gate:     dq  0x0000EC0400080000                          ; 386 call gate(DPL=3, count=4, SEL=8)
   136                              <1> .end:
   137                              <1> 
   138                              <1> CS_KERNEL       equ .cs_kernel - GDT
   139                              <1> DS_KERNEL       equ .ds_kernel - GDT
   140                              <1> SS_LDT          equ .ldt       - GDT
   141                              <1> SS_TASK_0       equ .tss_0     - GDT
   142                              <1> SS_TASK_1       equ .tss_1     - GDT
   143                              <1> SS_TASK_2       equ .tss_2     - GDT
   144                              <1> SS_TASK_3       equ .tss_3     - GDT
   145                              <1> SS_GATE_0       equ .call_gate - GDT
   146                              <1> 
   147 000005CC 4700                <1> GDTR:   dw      GDT.end - GDT - 1
   148 000005CE [84050000]          <1>         dd      GDT
   149                              <1> 
   150                              <1> ;-----------------------------------------------------------------------------------------------
   151                              <1> ; LDT
   152                              <1> ;-----------------------------------------------------------------------------------------------
   153                              <1> 
   154 000005D2 0000000000000000    <1> LDT:            dq  0x0000000000000000                          ; NULL
   155 000005DA FFFF0000009ACF00    <1> .cs_task_0:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   156 000005E2 FFFF00000092CF00    <1> .ds_task_0:     dq  0x00CF92000000FFFF                          ; DATA 4G
   157 000005EA FFFF000000FACF00    <1> .cs_task_1:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   158 000005F2 FFFF000000F2CF00    <1> .ds_task_1:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   159 000005FA FFFF000000FACF00    <1> .cs_task_2:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   160 00000602 FFFF000000F2CF00    <1> .ds_task_2:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   161 0000060A FFFF000000FACF00    <1> .cs_task_3:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   162 00000612 FFFF000000F2CF00    <1> .ds_task_3:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   163                              <1> .end:
   164                              <1> 
   165                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                      ; cs selector for task0 // set bit 2(TI)
   166                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                      ; ds selector for task0 // Priviledge level 0
   167                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                  ; cs selector for task1 // Priviledge level 3
   168                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                  ; ds selector for task1
   169                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                  ; cs selector for task2 // Priviledge level 3
   170                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                  ; ds selector for task2
   171                              <1> CS_TASK_3       equ (.cs_task_3 - LDT) | 4 | 3                  ; cs selector for task3 // Priviledge level 3
   172                              <1> DS_TASK_3       equ (.ds_task_3 - LDT) | 4 | 3                  ; ds selector for task3
   173                              <1> LDT_LIMIT       equ .end        - LDT - 1
   169                                  %include    "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1> 
     3                              <1>             ; save registers
     4 0000061A 60                  <1>             pusha
     5 0000061B 1E                  <1>             push    ds
     6 0000061C 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 0000061D 66B81000            <1>             mov     ax, 0x0010
    10 00000621 8ED8                <1>             mov     ds, ax
    11 00000623 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; TICK
    14 00000625 FF05[70060000]      <1>             inc     dword [TIMER_COUNT]                                     ; TIMER_COUNT++ //update interrupt count
    15                              <1> 
    16                              <1>             ; clear interrupt flag(EOI)
    17                              <1>             outp    0x20, 0x20                                              ; master PIC:EOI command
    17 0000062B B020                <2>  mov al, %2
    17 0000062D E620                <2>  out %1, al
    18                              <1> 
    19                              <1>             ; exchange Task
    20 0000062F 660F00C8            <1>             str     ax                                                      ; AX = TR // current Task Register
    21 00000633 6683F820            <1>             cmp     ax, SS_TASK_0
    22 00000637 7415                <1>             je      .11L
    23 00000639 6683F828            <1>             cmp     ax, SS_TASK_1
    24 0000063D 7418                <1>             je      .12L
    25 0000063F 6683F830            <1>             cmp     ax, SS_TASK_2
    26 00000643 741B                <1>             je      .13L
    27                              <1> 
    28 00000645 EA000000002000      <1>             jmp     SS_TASK_0:0
    29 0000064C EB1B                <1>             jmp     .10E
    30                              <1> .11L:
    31 0000064E EA000000002800      <1>             jmp     SS_TASK_1:0
    32 00000655 EB12                <1>             jmp     .10E
    33                              <1> .12L:
    34 00000657 EA000000003000      <1>             jmp     SS_TASK_2:0
    35 0000065E EB09                <1>             jmp     .10E
    36                              <1> .13L:
    37 00000660 EA000000003800      <1>             jmp     SS_TASK_3:0
    38 00000667 EB00                <1>             jmp     .10E
    39                              <1> .10E:
    40                              <1> 
    41                              <1>             ; return registers
    42 00000669 07                  <1>             pop     es
    43 0000066A 1F                  <1>             pop     ds
    44 0000066B 61                  <1>             popa
    45                              <1> 
    46 0000066C CF                  <1>             iret
    47                              <1> 
    48 0000066D 00<rept>            <1> ALIGN 4, db 0
    49 00000670 0000000000000000    <1> TIMER_COUNT:    dq 0
   170                                  %include    "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1> 
     3                              <1>             ; display string
     4 00000678 68[A6060000]6A076A- <1>             cdecl   draw_str, 63, 0, 0x07, .s0              ; draw_str()
     4 00000680 006A3FE8A503000066- <1>
     4 00000689 83C410              <1>
     5                              <1> 
     6                              <1> ;-------------------------------------------------------------
     7                              <1> ; non-preemptive multitask
     8                              <1> ;-------------------------------------------------------------
     9                              <1> 
    10                              <1> ; .10L:
    11                              <1> ;             ; display time
    12                              <1> ;             mov     eax, [RTC_TIME]                         ; get time
    13                              <1> ;             cdecl   draw_time, 72, 0, 0x0700, eax
    14                              <1> 
    15                              <1> ;             ; call Task
    16                              <1> ;             jmp    SS_TASK_0:0                             ; jump to Task0(kernel)
    17                              <1> 
    18                              <1> ;             jmp     .10L
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> 
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; preemptive multitask
    24                              <1> ;-------------------------------------------------------------
    25                              <1> 
    26                              <1> .10L:
    27                              <1>             ; display time
    28 0000068C A1[20020000]        <1>             mov     eax, [RTC_TIME]                         ; get time
    29 00000691 5068000700006A006A- <1>             cdecl   draw_time, 72, 0, 0x0700, eax
    29 0000069A 48E8F40600006683C4- <1>
    29 000006A3 10                  <1>
    30                              <1> 
    31                              <1> 
    32 000006A4 EBE6                <1>             jmp     .10L
    33                              <1> 
    34                              <1> ;-------------------------------------------------------------
    35                              <1> 
    36                              <1>             ; data
    37 000006A6 5461736B2D3100      <1> .s0:        db  "Task-1", 0
   171                                  %include    "tasks/task_2.s"
     1                              <1> task_2:
     2                              <1> 
     3 000006AD 68[72070000]6A076A- <1>             cdecl   draw_str, 63, 1, 0x07, .s0
     3 000006B5 016A3FE87003000066- <1>
     3 000006BE 83C410              <1>
     4                              <1> 
     5                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     7                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     8 000006C1 DB05[60070000]      <1>             fild    dword [.c1000]              ;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     9 000006C7 D9EB                <1>             fldpi                               ;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    10 000006C9 DA35[64070000]      <1>             fidiv   dword [.c180]               ;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    11 000006CF D9EB                <1>             fldpi                               ;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    12 000006D1 DCC0                <1>             fadd    st0, st0                    ;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13 000006D3 D9EE                <1>             fldz                                ;    θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    14                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    15                              <1>                                                 ;    θ = 0 |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    16                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> 
    18                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    19                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    20                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    21                              <1> .10L:                                           ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    22                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    23 000006D5 D8C2                <1>             fadd    st0, st2                    ;    θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    24 000006D7 D9F8                <1>             fprem                               ;    MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx| // fprem(ST0 %= ST1)
    25 000006D9 D9C0                <1>             fld     st0                         ;        θ |       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    26 000006DB D9FE                <1>             fsin                                ;    SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    27 000006DD D8CC                <1>             fmul    st0, st4                    ;ST4*SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    28 000006DF DF35[68070000]      <1>             fbstp   [.bcd]                      ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    29                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    30                              <1> 
    31                              <1>             ; convert into ASCII code
    32 000006E5 A1[68070000]        <1>             mov     eax, [.bcd]                 ; EAX = 1000 * sin(t)
    33 000006EA 89C3                <1>             mov     ebx, eax                    ; EBX = EAX
    34                              <1> 
    35 000006EC 250F0F0000          <1>             and     eax, 0x0F0F                 ; mask upper 4 bits
    36 000006F1 0D30300000          <1>             or      eax, 0x3030                 ; set 0x3 to upper 4 bits
    37                              <1> 
    38 000006F6 C1EB04              <1>             shr     ebx, 4                      ; EBX = upper 16 bits
    39 000006F9 81E30F0F0000        <1>             and     ebx, 0x0F0F
    40 000006FF 81CB30300000        <1>             or      ebx, 0x3030
    41                              <1> 
    42                              <1>             ; set the result to the buffer which is for screen display byte by byte
    43 00000705 883D[7A070000]      <1>             mov     [.s2 + 0], bh               ; first digit
    44 0000070B 8825[7C070000]      <1>             mov     [.s3 + 0], ah               ; the first decimal place
    45 00000711 881D[7D070000]      <1>             mov     [.s3 + 1], bl               ; the second decimal place
    46 00000717 A2[7E070000]        <1>             mov     [.s3 + 2], al               ; the third decimal place
    47                              <1> 
    48                              <1>             ; whether displaying sign or not
    49 0000071C B807000000          <1>             mov     eax, 7
    50 00000721 0FA305[71070000]    <1>             bt      [.bcd + 9], eax             ; CF = bcd[9] & 0x80
    51 00000728 7209                <1>             jc      .10F
    52                              <1> 
    53 0000072A C605[79070000]2B    <1>             mov     [.s1 + 0], byte '+'
    54 00000731 EB07                <1>             jmp     .10E
    55                              <1> .10F:
    56 00000733 C605[79070000]2D    <1>             mov     [.s1 + 0], byte '-'
    57                              <1> .10E:
    58 0000073A 68[79070000]6A076A- <1>             cdecl   draw_str, 72, 1, 0x07, .s1
    58 00000742 016A48E8E302000066- <1>
    58 0000074B 83C410              <1>
    59                              <1> 
    60                              <1>             ; wait
    61 0000074E 6A0AE8E30A00006683- <1>             cdecl   wait_tick, 10
    61 00000757 C404                <1>
    62                              <1> 
    63                              <1> ;           mov		ecx, 20							;   ECX = 20
    64                              <1> ; 		    										;   do
    65                              <1> ; 		    										;   {
    66                              <1> ; .20L:	    mov		eax, [TIMER_COUNT]				;     EAX = TIMER_COUNT;
    67                              <1> ; .21L:	    cmp		[TIMER_COUNT], eax				;     while (TIMER_COUNT != EAX)
    68                              <1> ; 		    je		.21L							;       ;
    69                              <1> ; 		    loop	.20L							;   } while (--ECX);
    70                              <1> 
    71                              <1> ; 		    jmp		.10L							; }
    72                              <1> 
    73 00000759 E977FFFFFF          <1>             jmp     .10L
    74                              <1> 
    75 0000075E 00<rept>            <1> ALIGN 4, db 0
    76 00000760 E8030000            <1> .c1000:     dd  1000
    77 00000764 B4000000            <1> .c180:      dd  180
    78                              <1> 
    79 00000768 00<rept>            <1> .bcd:       times 10 db 0x00
    80                              <1> 
    81 00000772 5461736B2D3200      <1> .s0:        db   "Task-2", 0
    82 00000779 2D                  <1> .s1:        db  "-"
    83 0000077A 302E                <1> .s2:        db  "0."
    84 0000077C 30303000            <1> .s3:        db  "000", 0
   172                                  %include    "tasks/task_3.s"
     1                              <1> task_3:
     2                              <1> 
     3 00000780 68[46080000]6A076A- <1>             cdecl   draw_str, 63, 2, 0x07, .s0
     3 00000788 026A3FE89D02000066- <1>
     3 00000791 83C410              <1>
     4                              <1> 
     5                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     7                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     8 00000794 DB05[34080000]      <1>             fild    dword [.c1000]              ;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     9 0000079A D9EB                <1>             fldpi                               ;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    10 0000079C DA35[38080000]      <1>             fidiv   dword [.c180]               ;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    11 000007A2 D9EB                <1>             fldpi                               ;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    12 000007A4 DCC0                <1>             fadd    st0, st0                    ;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13 000007A6 D9EE                <1>             fldz                                ;    θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    14                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    15                              <1>                                                 ;    θ = 0 |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    16                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> 
    18                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    19                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    20                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    21                              <1> .10L:                                           ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    22                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    23 000007A8 D8C2                <1>             fadd    st0, st2                    ;    θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    24 000007AA D9F8                <1>             fprem                               ;    MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx| // fprem(ST0 %= ST1)
    25 000007AC D9C0                <1>             fld     st0                         ;        θ |       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    26 000007AE D9FF                <1>             fcos                                ;    COS(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    27 000007B0 D8CC                <1>             fmul    st0, st4                    ;ST4*COS(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    28 000007B2 DF35[3C080000]      <1>             fbstp   [.bcd]                      ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    29                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    30                              <1> 
    31                              <1>             ; convert into ASCII code
    32 000007B8 A1[3C080000]        <1>             mov     eax, [.bcd]                 ; EAX = 1000 * sin(t)
    33 000007BD 89C3                <1>             mov     ebx, eax                    ; EBX = EAX
    34                              <1> 
    35 000007BF 250F0F0000          <1>             and     eax, 0x0F0F                 ; mask upper 4 bits
    36 000007C4 0D30300000          <1>             or      eax, 0x3030                 ; set 0x3 to upper 4 bits
    37                              <1> 
    38 000007C9 C1EB04              <1>             shr     ebx, 4                      ; EBX = upper 16 bits
    39 000007CC 81E30F0F0000        <1>             and     ebx, 0x0F0F
    40 000007D2 81CB30300000        <1>             or      ebx, 0x3030
    41                              <1> 
    42                              <1>             ; set the result to the buffer which is for screen display byte by byte
    43 000007D8 883D[4E080000]      <1>             mov     [.s2 + 0], bh               ; first digit
    44 000007DE 8825[50080000]      <1>             mov     [.s3 + 0], ah               ; the first decimal place
    45 000007E4 881D[51080000]      <1>             mov     [.s3 + 1], bl               ; the second decimal place
    46 000007EA A2[52080000]        <1>             mov     [.s3 + 2], al               ; the third decimal place
    47                              <1> 
    48                              <1>             ; whether displaying sign or not
    49 000007EF B807000000          <1>             mov     eax, 7
    50 000007F4 0FA305[45080000]    <1>             bt      [.bcd + 9], eax             ; CF = bcd[9] & 0x80
    51 000007FB 7209                <1>             jc      .10F
    52                              <1> 
    53 000007FD C605[4D080000]2B    <1>             mov     [.s1 + 0], byte '+'
    54 00000804 EB07                <1>             jmp     .10E
    55                              <1> .10F:
    56 00000806 C605[4D080000]2D    <1>             mov     [.s1 + 0], byte '-'
    57                              <1> .10E:
    58 0000080D 68[4D080000]6A076A- <1>             cdecl   draw_str, 72, 2, 0x07, .s1
    58 00000815 026A48E81002000066- <1>
    58 0000081E 83C410              <1>
    59                              <1> 
    60                              <1>             ; wait
    61 00000821 6A0AE8100A00006683- <1>             cdecl   wait_tick, 10
    61 0000082A C404                <1>
    62                              <1> 
    63 0000082C E977FFFFFF          <1>             jmp     .10L
    64                              <1> 
    65 00000831 00<rept>            <1> ALIGN 4, db 0
    66 00000834 E8030000            <1> .c1000:     dd  1000
    67 00000838 B4000000            <1> .c180:      dd  180
    68                              <1> 
    69 0000083C 00<rept>            <1> .bcd:       times 10 db 0x00
    70                              <1> 
    71 00000846 5461736B2D3300      <1> .s0:        db   "Task-3", 0
    72 0000084D 2D                  <1> .s1:        db  "-"
    73 0000084E 302E                <1> .s2:        db  "0."
    74 00000850 30303000            <1> .s3:        db  "000", 0
   173                                  
   174                                  
   175                                  ; MODULES
   176                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000854 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 00000855 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 00000857 50                  <1>             push    eax
    10 00000858 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 00000859 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 0000085C 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 0000085F B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 00000861 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 00000865 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 00000867 5A                  <1>             pop     edx
    21 00000868 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 00000869 89EC                <1>             mov     esp, ebp
    25 0000086B 5D                  <1>             pop     ebp
    26                              <1> 
    27 0000086C C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 0000086D 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 0000086E 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 00000870 50                  <1>             push    eax
    38 00000871 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 00000872 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 00000875 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000878 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 0000087A 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 0000087E 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 00000880 5A                  <1>             pop     edx
    49 00000881 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 00000882 89EC                <1>             mov     esp, ebp
    53 00000884 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000885 C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 00000886 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 00000887 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 00000889 50                  <1>             push    eax
    66 0000088A 53                  <1>             push    ebx
    67 0000088B 51                  <1>             push    ecx
    68 0000088C 52                  <1>             push    edx
    69 0000088D 56                  <1>             push    esi
    70 0000088E 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 0000088F 8B7508              <1>             mov     esi, [ebp + 8]
    74 00000892 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 00000895 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 00000899 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 0000089D 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 0000089F 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 000008A2 FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 000008A4 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 000008A6 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 000008A9 FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 000008AB FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 000008AC B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 000008B1 AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 000008B2 88C4                <1>             mov     ah, al
    96 000008B4 F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 000008B6 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 000008B8 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 000008BE 7404                <1>             jz      .11F                                    ; {
   104 000008C0 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 000008C2 EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 000008C4 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 000008C6 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 000008C8 8807                <1>             mov     [edi], al
   116                              <1> 
   117 000008CA 83C750              <1>             add     edi, 80
   118 000008CD E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 000008CF 5F                  <1>             pop     edi
   123 000008D0 5E                  <1>             pop     esi
   124 000008D1 5A                  <1>             pop     edx
   125 000008D2 59                  <1>             pop     ecx
   126 000008D3 5B                  <1>             pop     ebx
   127 000008D4 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 000008D5 89EC                <1>             mov     esp, ebp
   131 000008D7 5D                  <1>             pop     ebp
   132                              <1> 
   133 000008D8 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 000008D9 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 000008DA 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 000008DC 50                  <1>             push    eax
   144 000008DD 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 000008DE 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 000008DF 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 000008E2 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 000008E6 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 000008EA 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 000008EC 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 000008EF FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 000008F1 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 000008F4 88C4                <1>             mov     ah, al
   163 000008F6 F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 000008F8 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 000008FA 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 000008FC 08E0                <1>             or      al, ah
   169 000008FE 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 00000900 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 00000901 5B                  <1>             pop     ebx
   177 00000902 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 00000903 89EC                <1>             mov     esp, ebp
   181 00000905 5D                  <1>             pop     ebp
   182                              <1> 
   183 00000906 C3                  <1>             ret
   177                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 00000907 55                  <1>             push    ebp                                         ;   +16 | color
     5 00000908 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 0000090A 50                  <1>             push    eax
    10 0000090B 53                  <1>             push    ebx
    11 0000090C 51                  <1>             push    ecx
    12 0000090D 52                  <1>             push    edx
    13 0000090E 56                  <1>             push    esi
    14 0000090F 57                  <1>             push    edi
    15                              <1> 
    16                              <1> %ifdef      USE_TEST_AND_SET
    17 00000910 68[E4090000]E87108- <1>             cdecl   test_and_set, IN_USE                        ; TEST_AND_SET(IN_USE) // waiting for resource to be available
    17 00000918 00006683C404        <1>
    18                              <1> %endif
    19                              <1> 
    20                              <1>             ; set copy_target font address
    21 0000091E 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    22 00000922 C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    23 00000925 0335[1C020000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    24                              <1> 
    25                              <1>             ; get copy_dest VRAM address
    26                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    27                              <1>             ; y:row, x:column
    28                              <1> 
    29 0000092B 8B7D0C              <1>             mov     edi, [ebp + 12]
    30 0000092E C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    31 00000931 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    32 00000938 037D08              <1>             add     edi, [ebp + 8]
    33                              <1> 
    34                              <1>             ; output a char of font
    35 0000093B 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    36                              <1> 
    37 0000093F 6A03E80EFFFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    37 00000948 C404                <1>
    38 0000094A 6A08E81CFFFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    38 00000953 C404                <1>
    39 00000955 536A085756E827FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    39 0000095E FF6683C410          <1>
    40                              <1> 
    41 00000963 6A02E8EAFEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    41 0000096C C404                <1>
    42 0000096E 6A04E8F8FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    42 00000977 C404                <1>
    43 00000979 536A045756E803FFFF- <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    43 00000982 FF6683C410          <1>
    44                              <1> 
    45 00000987 6A01E8C6FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    45 00000990 C404                <1>
    46 00000992 6A02E8D4FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    46 0000099B C404                <1>
    47 0000099D 536A025756E8DFFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    47 000009A6 FF6683C410          <1>
    48                              <1> 
    49 000009AB 6A00E8A2FEFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    49 000009B4 C404                <1>
    50 000009B6 6A01E8B0FEFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    50 000009BF C404                <1>
    51 000009C1 536A015756E8BBFEFF- <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    51 000009CA FF6683C410          <1>
    52                              <1> 
    53                              <1> %ifdef      USE_TEST_AND_SET
    54                              <1> 
    55 000009CF C705[E4090000]0000- <1>             mov     [IN_USE], dword 0                           ; clear global variable
    55 000009D7 0000                <1>
    56                              <1> %endif
    57                              <1> 
    58                              <1>             ; return registers
    59 000009D9 5F                  <1>             pop		edi
    60 000009DA 5E                  <1> 		    pop		esi
    61 000009DB 5A                  <1> 		    pop		edx
    62 000009DC 59                  <1> 		    pop		ecx
    63 000009DD 5B                  <1> 		    pop		ebx
    64 000009DE 58                  <1> 		    pop		eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 000009DF 89EC                <1>             mov     esp, ebp
    68 000009E1 5D                  <1>             pop     ebp
    69                              <1> 
    70 000009E2 C3                  <1>             ret
    71                              <1> 
    72                              <1> %ifdef      USE_TEST_AND_SET
    73 000009E3 00                  <1> ALIGN 4, db 0
    74 000009E4 00000000            <1> IN_USE: dd 0
    75                              <1> %endif
   178                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000009E8 55                  <1>             push    ebp                                         ;   +12 | row
     5 000009E9 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 000009EB 50                  <1>             push    eax
     9 000009EC 53                  <1>             push    ebx
    10 000009ED 51                  <1>             push    ecx
    11 000009EE 52                  <1>             push    edx
    12 000009EF 56                  <1>             push    esi
    13 000009F0 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 000009F1 8B7508              <1>             mov     esi, [ebp + 8]
    17 000009F4 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 000009F7 B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 000009FC 81F900010000        <1> .10L:       cmp     ecx, 256
    22 00000A02 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 00000A04 89C8                <1>             mov     eax, ecx
    26 00000A06 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 00000A09 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 00000A0B 89CB                <1>             mov     ebx, ecx
    31 00000A0D C1EB04              <1>             shr     ebx, 4
    32 00000A10 01FB                <1>             add     ebx, edi
    33                              <1> 
    34 00000A12 516A075350E8EBFEFF- <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34 00000A1B FF6683C410          <1>
    35                              <1> 
    36 00000A20 41                  <1>             inc     ecx
    37 00000A21 EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 00000A23 5F                  <1>             pop     edi
    42 00000A24 5E                  <1>             pop     esi
    43 00000A25 5A                  <1>             pop     edx
    44 00000A26 59                  <1>             pop     ecx
    45 00000A27 5B                  <1>             pop     ebx
    46 00000A28 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 00000A29 89EC                <1>             mov     esp, ebp
    50 00000A2B 5D                  <1>             pop     ebp
    51                              <1> 
    52 00000A2C C3                  <1>             ret
   179                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000A2D 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 00000A2E 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 00000A30 50                  <1>             push    eax
    11 00000A31 53                  <1>             push    ebx
    12 00000A32 51                  <1>             push    ecx
    13 00000A33 52                  <1>             push    edx
    14 00000A34 56                  <1>             push    esi
    15 00000A35 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000A36 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 00000A39 8B550C              <1>             mov     edx, [ebp + 12]
    20 00000A3C 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 00000A40 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 00000A43 FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 00000A44 AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 00000A45 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 00000A47 741A                <1>             je      .10E
    29                              <1> 
    30                              <1> %ifdef      USE_SYSTEM_CALL
    31 00000A49 CD81                <1>             int     0x81                                        ; sys_call(1, x, y, color, char)
    32                              <1> %else
    33                              <1>             cdecl   draw_char, ecx, edx, ebx, eax
    34                              <1> %endif
    35 00000A4B 41                  <1>             inc     ecx
    36 00000A4C 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    37 00000A4F 7C10                <1>             jl      .12E                                        ; {
    38 00000A51 B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    39 00000A56 42                  <1>             inc     edx                                         ;   EDX++;
    40 00000A57 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    41 00000A5A 7C05                <1>             jl      .12E                                        ;   {
    42 00000A5C BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    43                              <1>                                                                 ;   }
    44                              <1> .12E:                                                           ; }
    45 00000A61 EBE1                <1>             jmp     .10L
    46                              <1> .10E:
    47                              <1> 
    48                              <1>             ; return registers
    49 00000A63 5F                  <1>             pop     edi
    50 00000A64 5E                  <1>             pop     esi
    51 00000A65 5A                  <1>             pop     edx
    52 00000A66 59                  <1>             pop     ecx
    53 00000A67 5B                  <1>             pop     ebx
    54 00000A68 58                  <1>             pop     eax
    55                              <1> 
    56                              <1>             ; destruct stack frame
    57 00000A69 89EC                <1>             mov     esp, ebp
    58 00000A6B 5D                  <1>             pop     ebp
    59                              <1> 
    60 00000A6C C3                  <1>             ret
   180                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000A6D 55                  <1>             push    ebp                                             ;   +12 | row
     5 00000A6E 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00000A70 50                  <1>             push    eax
     9 00000A71 53                  <1>             push    ebx
    10 00000A72 51                  <1>             push    ecx
    11 00000A73 52                  <1>             push    edx
    12 00000A74 56                  <1>             push    esi
    13 00000A75 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00000A76 8B7508              <1>             mov     esi, [ebp + 8]
    17 00000A79 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 00000A7C B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 00000A81 83F910              <1> .10L:       cmp     ecx, 16
    22 00000A84 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 00000A86 89C8                <1>             mov     eax, ecx
    26 00000A88 83E001              <1>             and     eax, 0x01
    27 00000A8B C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 00000A8E 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 00000A90 89CB                <1>             mov     ebx, ecx
    32 00000A92 D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 00000A94 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 00000A96 89CA                <1>             mov     edx, ecx
    37 00000A98 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 00000A9A 8B92[C70A0000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40 00000AA0 68[BE0A0000]525350- <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40 00000AA8 E880FFFFFF6683C410  <1>
    41                              <1> 
    42 00000AB1 41                  <1>             inc     ecx
    43 00000AB2 EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 00000AB4 5F                  <1>             pop     edi
    48 00000AB5 5E                  <1>             pop     esi
    49 00000AB6 5A                  <1>             pop     edx
    50 00000AB7 59                  <1>             pop     ecx
    51 00000AB8 5B                  <1>             pop     ebx
    52 00000AB9 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 00000ABA 89E5                <1>             mov     ebp, esp
    56 00000ABC 5D                  <1>             pop     ebp
    57                              <1> 
    58 00000ABD C3                  <1>             ret
    59                              <1> 
    60 00000ABE 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 00000AC7 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 00000ACB 00010009            <1>             dw  0x0100, 0x0900
    64 00000ACF 0002000A            <1>             dw  0x0200, 0x0A00
    65 00000AD3 0003000B            <1>             dw  0x0300, 0x0B00
    66 00000AD7 0004000C            <1>             dw  0x0400, 0x0C00
    67 00000ADB 0005000D            <1>             dw  0x0500, 0x0D00
    68 00000ADF 0006000E            <1>             dw  0x0600, 0x0E00
    69 00000AE3 0007000F            <1>             dw  0x0700, 0x0F00
   181                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 00000AE7 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 00000AE8 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 00000AEA 50                  <1>             push    eax
     9 00000AEB 53                  <1>             push    ebx
    10 00000AEC 51                  <1>             push    ecx
    11 00000AED 52                  <1>             push    edx
    12 00000AEE 56                  <1>             push    esi
    13 00000AEF 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 00000AF0 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 00000AF3 C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 00000AF6 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 00000AFD 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 00000B00 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 00000B02 C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 00000B05 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 00000B07 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 00000B0A BB80000000          <1>             mov     ebx, 0x80
    35 00000B0F D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 00000B11 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1>             ;------------------------------------------------------------------------
    41                              <1> 
    42 00000B14 6A03E839FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    42 00000B1D C404                <1>
    43 00000B1F 6A08E847FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    43 00000B28 C404                <1>
    44 00000B2A 516A085753E8A5FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    44 00000B33 FF6683C410          <1>
    45                              <1> 
    46 00000B38 6A02E815FDFFFF6683- <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    46 00000B41 C404                <1>
    47 00000B43 6A04E823FDFFFF6683- <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    47 00000B4C C404                <1>
    48 00000B4E 516A045753E881FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    48 00000B57 FF6683C410          <1>
    49                              <1> 
    50 00000B5C 6A01E8F1FCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    50 00000B65 C404                <1>
    51 00000B67 6A02E8FFFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    51 00000B70 C404                <1>
    52 00000B72 516A025753E85DFDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    52 00000B7B FF6683C410          <1>
    53                              <1> 
    54 00000B80 6A00E8CDFCFFFF6683- <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    54 00000B89 C404                <1>
    55 00000B8B 6A01E8DBFCFFFF6683- <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    55 00000B94 C404                <1>
    56 00000B96 516A015753E839FDFF- <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    56 00000B9F FF6683C410          <1>
    57                              <1> 
    58                              <1>             ; return registers
    59 00000BA4 5F                  <1>             pop     edi
    60 00000BA5 5E                  <1>             pop     esi
    61 00000BA6 5A                  <1>             pop     edx
    62 00000BA7 59                  <1>             pop     ecx
    63 00000BA8 5B                  <1>             pop     ebx
    64 00000BA9 58                  <1>             pop     eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 00000BAA 89EC                <1>             mov     esp, ebp
    68 00000BAC 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000BAD C3                  <1>             ret
   182                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 00000BAE 55                  <1>             push    ebp
    22 00000BAF 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 00000BB1 6A00                <1>             push    dword 0
    25 00000BB3 6A00                <1>             push    dword 0
    26 00000BB5 6A00                <1>             push    dword 0
    27 00000BB7 6A00                <1>             push    dword 0
    28 00000BB9 6A00                <1>             push    dword 0
    29 00000BBB 6A00                <1>             push    dword 0
    30 00000BBD 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 00000BBF 50                  <1>             push    eax
    34 00000BC0 53                  <1>             push    ebx
    35 00000BC1 51                  <1>             push    ecx
    36 00000BC2 52                  <1>             push    edx
    37 00000BC3 56                  <1>             push    esi
    38 00000BC4 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 00000BC5 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 00000BC8 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 00000BCB 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 00000BCD 7D09                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 00000BCF F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 00000BD1 BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 00000BD6 EB05                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    50 00000BD8 BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 00000BDD 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 00000BE0 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 00000BE3 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 00000BE5 7D09                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 00000BE7 F7DA                <1>             neg     edx                                             ;   height *= -1
    60 00000BE9 BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 00000BEE EB05                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    63 00000BF0 BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 00000BF5 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 00000BF8 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 00000BFB 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 00000BFE 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 00000C01 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 00000C04 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 00000C07 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 00000C09 7F08                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 00000C0B 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 00000C0E 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 00000C11 EB06                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    93                              <1>                                                                     ;   // y axis is base one.
    94 00000C13 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 00000C16 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 00000C19 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 00000C1C 83F900              <1>             cmp     ecx, 0
   101 00000C1F 7505                <1>             jnz     .30E
   102 00000C21 B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   109 00000C26 FF7518FF75ECFF75F8- <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   109 00000C2F E8B3FEFFFF6683C40C  <1>
   110                              <1> 
   111                              <1>             ; update base axis(1 dot)
   112 00000C38 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   113 00000C3B 0106                <1>             add     [esi - 0], eax
   114                              <1> 
   115                              <1>             ; update relative axis
   116 00000C3D 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   117 00000C40 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   118                              <1> 
   119 00000C43 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   120                              <1> 
   121 00000C46 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   122 00000C48 7C07                <1>             jl      .52E                                            ; {
   123 00000C4A 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   124                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   125 00000C4C 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   126 00000C4F 011F                <1>             add     [edi - 0], ebx
   127                              <1> .52E:                                                               ; }
   128                              <1> 
   129 00000C51 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   130                              <1> 
   131 00000C54 E2D0                <1>             loop    .50L
   132                              <1> .50E:
   133                              <1> 
   134                              <1>             ; return registers
   135 00000C56 5F                  <1>             pop     edi
   136 00000C57 5E                  <1>             pop     esi
   137 00000C58 5A                  <1>             pop     edx
   138 00000C59 59                  <1>             pop     ecx
   139 00000C5A 5B                  <1>             pop     ebx
   140 00000C5B 58                  <1>             pop     eax
   141                              <1> 
   142                              <1>             ; destruct stack frame
   143 00000C5C 89EC                <1>             mov     esp, ebp
   144 00000C5E 5D                  <1>             pop     ebp
   145                              <1> 
   146 00000C5F C3                  <1>             ret
   183                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 00000C60 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 00000C61 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 00000C63 50                  <1>             push    eax
    11 00000C64 53                  <1>             push    ebx
    12 00000C65 51                  <1>             push    ecx
    13 00000C66 52                  <1>             push    edx
    14 00000C67 56                  <1>             push    esi
    15 00000C68 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00000C69 8B4508              <1>             mov     eax, [ebp +  8]
    19 00000C6C 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 00000C6F 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 00000C72 8B5514              <1>             mov     edx, [ebp + 20]
    22 00000C75 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 00000C78 39C8                <1>             cmp     eax, ecx
    26 00000C7A 7C01                <1>             jl      .10E
    27 00000C7C 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    29 00000C7D 39D3                <1>             cmp     ebx, edx
    30 00000C7F 7C02                <1>             jl      .20E
    31 00000C81 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    33                              <1> 
    34                              <1>             ; draw rectangle
    35 00000C83 5653515350E821FFFF- <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35 00000C8C FF6683C414          <1>
    36 00000C91 5652505350E813FFFF- <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36 00000C9A FF6683C414          <1>
    37                              <1> 
    38 00000C9F 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39 00000CA0 5652515250E804FFFF- <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39 00000CA9 FF6683C414          <1>
    40 00000CAE 42                  <1>             inc     edx
    41                              <1> 
    42 00000CAF 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43 00000CB0 5652515351E8F4FEFF- <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43 00000CB9 FF6683C414          <1>
    44                              <1> 
    45                              <1>             ; return registers
    46 00000CBE 5F                  <1>             pop     edi
    47 00000CBF 5E                  <1>             pop     esi
    48 00000CC0 5A                  <1>             pop     edx
    49 00000CC1 59                  <1>             pop     ecx
    50 00000CC2 5B                  <1>             pop     ebx
    51 00000CC3 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000CC4 89EC                <1>             mov     esp, ebp
    55 00000CC6 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000CC7 C3                  <1>             ret
   184                                  %include    "../modules/protect/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 00000CC8 55                  <1>         push    ebp
     6 00000CC9 89E5                <1>         mov     ebp, esp                                ;   +24|flag
     7                              <1>                                                         ;   +20|radix
     8                              <1>                                                         ;   +16|dest buffer size
     9                              <1>                                                         ;   +12|dest buffer address
    10                              <1>                                                         ;   + 8|the value to be converted
    11                              <1>                                                         ;   + 4|Instruction Pointer
    12                              <1>                                                         ;EBP+ 0|EBP
    13                              <1>         ; save registers
    14                              <1> 
    15 00000CCB 50                  <1>         push    eax
    16 00000CCC 53                  <1>         push    ebx
    17 00000CCD 51                  <1>         push    ecx
    18 00000CCE 52                  <1>         push    edx
    19 00000CCF 56                  <1>         push    esi
    20 00000CD0 57                  <1>         push    edi
    21                              <1> 
    22                              <1>         ; get args
    23                              <1> 
    24 00000CD1 8B4508              <1>         mov     eax, [ebp +  8]                         ; val = value
    25 00000CD4 8B750C              <1>         mov     esi, [ebp + 12]                         ; dest= buffer address
    26 00000CD7 8B4D10              <1>         mov     ecx, [ebp + 16]                         ; size= remaining buffer size
    27                              <1> 
    28 00000CDA 89F7                <1>         mov     edi, esi                                ; end of buffer
    29 00000CDC 01CF                <1>         add     edi, ecx                                ; dest = &dest[esize - 1]
    30 00000CDE 4F                  <1>         dec     edi
    31                              <1> 
    32 00000CDF 8B5D18              <1>         mov     ebx, [ebp + 24]
    33                              <1> 
    34                              <1>         ; signing judge
    35                              <1> 
    36 00000CE2 F7C301000000        <1>         test    ebx, 0b0001                             ; if (flags & 0x01) //if signed => ZF = 0
    37 00000CE8 7408                <1> .10Q    je      .10E                                    ; {                 //if not ZF = 1 so => jmp
    38 00000CEA 83F800              <1>         cmp     eax, 0                                  ;   if (val < 0)    //CF = 1, ZF = 0
    39 00000CED 7D03                <1> .12Q    jge     .12E                                    ;   {
    40 00000CEF 83CB02              <1>         or      ebx, 0b0010                             ;       flags |= 2; //set B1
    41                              <1>                                                         ; }}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ; sign output judge
    46                              <1> 
    47 00000CF2 F7C302000000        <1>         test    ebx, 0b0010
    48 00000CF8 7410                <1> .20Q    je      .20E
    49 00000CFA 83F800              <1>         cmp     eax, 0
    50 00000CFD 7D07                <1> .22Q    jge     .22F
    51 00000CFF F7D8                <1>         neg     eax                                     ; sign reverse
    52 00000D01 C6062D              <1>         mov     [esi], byte '-'                         ; sign display
    53 00000D04 EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 00000D06 C6062B              <1>         mov     [esi], byte '+'
    56                              <1> .22E:
    57 00000D09 49                  <1>         dec     ecx                                     ; subtract remaining buffer size -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ; ASCII conversion
    61                              <1> 
    62 00000D0A 8B5D14              <1>         mov     ebx, [ebp + 20]                          ; ebx = radix
    63                              <1> 
    64                              <1> .30L:                                                   ; do{
    65 00000D0D BA00000000          <1>         mov     edx, 0
    66 00000D12 F7F3                <1>         div     ebx                                    ;   edx = edx:eax % ebx;
    67                              <1>                                                         ;   eax = edx:eax / ebx;
    68                              <1> 
    69 00000D14 89D6                <1>         mov     esi, edx                                ;   //refer to coversion table
    70 00000D16 8A96[410D0000]      <1>         mov     dl, byte [.ascii + esi]                 ;   DL = ASCII[edx];
    71                              <1> 
    72 00000D1C 8817                <1>         mov     [edi], dl                               ;   *dest = DL;
    73 00000D1E 4F                  <1>         dec     edi                                     ;   dest--;
    74                              <1> 
    75 00000D1F 83F800              <1>         cmp     eax, 0
    76 00000D22 E0E9                <1>         loopnz  .30L                                    ; } while(eax);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ; padding (zero / blank)
    81                              <1> 
    82 00000D24 83F900              <1>         cmp     ecx, 0                                  ; if (esize)
    83 00000D27 740E                <1> .40Q:   je      .40E                                    ; {
    84 00000D29 B020                <1>         mov     al, ' '                                 ;   AL = ' '; // padding with blanks
    85 00000D2B 66837D1804          <1>         cmp     [ebp + 24], word 0b0100                  ;   if (flags & 0x04)
    86 00000D30 7502                <1> .42Q:   jne     .42E                                    ;   {
    87 00000D32 B030                <1>         mov     al, '0'                                 ;       AL = '0'; // padding with zero
    88                              <1> .42E:                                                   ;   }
    89 00000D34 FD                  <1>         std                                             ;   // DF = 1(dec)
    90 00000D35 F3AA                <1>         rep stosb                                       ;   while (--ecx) * edi-- = ' ';
    91                              <1> .40E:                                                   ; }
    92                              <1> 
    93                              <1>         ; return registers
    94                              <1> 
    95 00000D37 5F                  <1>         pop     edi
    96 00000D38 5E                  <1>         pop     esi
    97 00000D39 5A                  <1>         pop     edx
    98 00000D3A 59                  <1>         pop     ecx
    99 00000D3B 5B                  <1>         pop     ebx
   100 00000D3C 58                  <1>         pop     eax
   101                              <1> 
   102                              <1>         ; destruct stack frame
   103                              <1> 
   104 00000D3D 89EC                <1>         mov     esp, ebp
   105 00000D3F 5D                  <1>         pop     ebp
   106                              <1> 
   107 00000D40 C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 00000D41 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                      ; conversion table
   110 00000D4A 39414243444546      <1>
   185                                  %include    "../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000D51 55                  <1>             push    ebp                                     ; EBP+8 | destination
     5 00000D52 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 00000D54 50                  <1>             push    eax
     9 00000D55 53                  <1>             push    ebx
    10                              <1> 
    11                              <1> ; // Avoid conflicts between RTC data updates and
    12                              <1> ; // on-chip RAM access by confirming UIP bit on Register A
    13                              <1> 
    14 00000D56 B00A                <1>             mov     al, 0x0A                                ; register A
    15 00000D58 E670                <1>             out     0x70, al
    16 00000D5A E471                <1>             in      al, 0x71                                ; al = register A
    17 00000D5C A880                <1>             test    al, 0x80                                ; if (UIP) // updating
    18 00000D5E 7407                <1>             je      .10F                                    ; {
    19 00000D60 B801000000          <1>             mov     eax, 1                                  ;   return = 1;
    20 00000D65 EB27                <1>             jmp     .10E                                    ; }
    21                              <1> .10F:                                                       ; else
    22                              <1>                                                             ; {        // get time process
    23                              <1> 
    24                              <1>             ; main process
    25 00000D67 B004                <1>             mov     al, 0x04                                ;   hour
    26 00000D69 E670                <1>             out     0x70, al
    27 00000D6B E471                <1>             in      al, 0x71
    28                              <1> 
    29 00000D6D C1E008              <1>             shl     eax, 8
    30                              <1> 
    31 00000D70 B002                <1>             mov     al, 0x02                                ;   minute
    32 00000D72 E670                <1>             out     0x70, al
    33 00000D74 E471                <1>             in      al, 0x71
    34                              <1> 
    35 00000D76 C1E008              <1>             shl     eax, 8
    36                              <1> 
    37 00000D79 B000                <1>             mov     al, 0x00                                ;   second
    38 00000D7B E670                <1>             out     0x70, al
    39 00000D7D E471                <1>             in      al, 0x71
    40                              <1> 
    41 00000D7F 25FFFFFF00          <1>             and     eax, 0x00_FF_FF_FF                      ;   all data are in lower 3 bytes of eax register
    42                              <1> 
    43 00000D84 8B5D08              <1>             mov     ebx, [ebp + 8]
    44 00000D87 8903                <1>             mov     [ebx], eax                              ;   [dest] = real time
    45                              <1> 
    46 00000D89 B800000000          <1>             mov     eax, 0                                  ;   return = 0;
    47                              <1> .10E:                                                       ; }
    48                              <1> 
    49                              <1>             ; return register
    50 00000D8E 5B                  <1>             pop     ebx
    51 00000D8F 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00000D90 89EC                <1>             mov     esp, ebp
    55 00000D92 5D                  <1>             pop     ebp
    56                              <1> 
    57 00000D93 C3                  <1>             ret
   186                                  %include    "../modules/protect/draw_time.s"
     1                              <1> draw_time:
     2                              <1> 
     3                              <1>             ; construct stack frame                         ;   +20 | time data
     4 00000D94 55                  <1>             push    ebp                                     ;   +16 | display color
     5 00000D95 89E5                <1>             mov     ebp, esp                                ;   +12 | row
     6                              <1>                                                             ;EBP+ 8 | col
     7                              <1> 
     8                              <1>             ; save registers
     9 00000D97 50                  <1>             push    eax
    10 00000D98 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; get arg
    13 00000D99 8B4514              <1>             mov     eax, [ebp + 20]
    14                              <1> 
    15 00000D9C 0FB6D8              <1>             movzx   ebx, al                                 ; ebx = second
    16 00000D9F 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .sec, 2, 16, 0b0100
    16 00000DA6 [060E0000]53E818FF- <1>
    16 00000DAE FFFF6683C414        <1>
    17                              <1> 
    18 00000DB4 88E3                <1>             mov     bl, ah                                  ; ebx = min
    19 00000DB6 6A046A106A0268-     <1>             cdecl   int_to_str, ebx, .min, 2, 16, 0b0100
    19 00000DBD [030E0000]53E801FF- <1>
    19 00000DC5 FFFF6683C414        <1>
    20                              <1> 
    21 00000DCB C1E810              <1>             shr     eax, 16                                 ; ax = hour
    22 00000DCE 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .hour, 2, 16, 0b0100
    22 00000DD5 [000E0000]50E8E9FE- <1>
    22 00000DDD FFFF6683C414        <1>
    23                              <1> 
    24                              <1>             ; display time
    25 00000DE3 68[000E0000]FF7510- <1>             cdecl   draw_str, dword [ebp + 8], dword [ebp + 12], dword [ebp + 16], .hour
    25 00000DEB FF750CFF7508E837FC- <1>
    25 00000DF4 FFFF6683C410        <1>
    26                              <1> 
    27                              <1>             ; return registers
    28 00000DFA 5B                  <1>             pop     ebx
    29 00000DFB 58                  <1>             pop     eax
    30                              <1> 
    31                              <1>             ; destruct stack frame
    32 00000DFC 89EC                <1>             mov     esp, ebp
    33 00000DFE 5D                  <1>             pop     ebp
    34                              <1> 
    35 00000DFF C3                  <1>             ret
    36                              <1> 
    37 00000E00 5A5A3A              <1> .hour:  db  "ZZ:"
    38 00000E03 5A5A3A              <1> .min:  db  "ZZ:"
    39 00000E06 5A5A00              <1> .sec:  db  "ZZ", 0
   187                                  %include    "../modules/protect/interrupt.s"
     1                              <1> ; Initialize vector of IDTR
     2                              <1> 
     3 00000E09 90<rept>            <1> ALIGN 4
     4 00000E0C FF07                <1> IDTR:       dw      8 * 256 - 1                                     ; limit of IDT
     5 00000E0E 00001000            <1>             dd      VECT_BASE                                       ; base address of IDT
     6                              <1> 
     7                              <1> ; Initialize IDT
     8                              <1> 
     9                              <1> init_int:
    10                              <1> 
    11                              <1>             ; save registers
    12 00000E12 50                  <1>             push    eax
    13 00000E13 53                  <1>             push    ebx
    14 00000E14 51                  <1>             push    ecx
    15 00000E15 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; define Interrupt Gate Descriptor and apply default process to them
    18                              <1> 
    19 00000E16 8D05[5C0F0000]      <1>             lea     eax, [int_default]                              ; EAX = the address of interrupt process
    20 00000E1C BB008E0800          <1>             mov     ebx, 0x0008_8E00                                ; EBX = segment selector & P,DPL,DT,TYPE
    21 00000E21 6693                <1>             xchg    ax, bx                                          ; exchange lower word
    22                              <1> 
    23 00000E23 B900010000          <1>             mov     ecx, 256                                        ; num of Interrupt Gate Descriptor
    24 00000E28 BF00001000          <1>             mov     edi, VECT_BASE                                  ; base address of Interrupt Descriptor Table
    25                              <1> 
    26                              <1> .10L:
    27 00000E2D 891F                <1>             mov     [edi + 0], ebx                                  ; interrupt descriptor(lower)
    28 00000E2F 894704              <1>             mov     [edi + 4], eax                                  ; interrupt descriptor(upper)
    29 00000E32 83C708              <1>             add     edi, 8                                          ; EDI += 8 byte
    30 00000E35 E2F6                <1>             loop    .10L
    31                              <1> 
    32                              <1>             ; set up Interrupt Descriptor
    33 00000E37 0F011D[0C0E0000]    <1>             lidt    [IDTR]
    34                              <1> 
    35                              <1>             ; return registers
    36 00000E3E 5F                  <1>             pop     edi
    37 00000E3F 59                  <1>             pop     ecx
    38 00000E40 5B                  <1>             pop     ebx
    39 00000E41 58                  <1>             pop     eax
    40                              <1> 
    41 00000E42 C3                  <1>             ret
    42                              <1> 
    43                              <1> int_stop:
    44                              <1> 
    45 00000E43 FB                  <1>             sti                                                     ; interrupt enable
    46                              <1> 
    47                              <1>             ; display the string indicated in EAX
    48 00000E44 50680F0600006A0F6A- <1>             cdecl   draw_str, 25, 15, 0x060F, eax
    48 00000E4D 19E8DAFBFFFF6683C4- <1>
    48 00000E56 10                  <1>
    49                              <1> 
    50                              <1>             ; convert stack data into string
    51 00000E57 8B0424              <1>             mov     eax, [esp + 0]                                  ; EIP
    52 00000E5A 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p1, 8, 16, 0b0100
    52 00000E61 [1F0F0000]50E85DFE- <1>
    52 00000E69 FFFF6683C414        <1>
    53                              <1> 
    54 00000E6F 8B442404            <1>             mov     eax, [esp + 4]                                  ; CS
    55 00000E73 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p2, 8, 16, 0b0100
    55 00000E7A [300F0000]50E844FE- <1>
    55 00000E82 FFFF6683C414        <1>
    56                              <1> 
    57 00000E88 8B442408            <1>             mov     eax, [esp + 8]                                  ; EFLAGS
    58 00000E8C 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p3, 8, 16, 0b0100
    58 00000E93 [410F0000]50E82BFE- <1>
    58 00000E9B FFFF6683C414        <1>
    59                              <1> 
    60 00000EA1 8B44240C            <1>             mov     eax, [esp + 12]
    61 00000EA5 6A046A106A0868-     <1>             cdecl   int_to_str, eax, .p4, 8, 16, 0b0100
    61 00000EAC [520F0000]50E812FE- <1>
    61 00000EB4 FFFF6683C414        <1>
    62                              <1> 
    63                              <1>             ; display string
    64 00000EBA 68[180F0000]68040F- <1>             cdecl   draw_str, 25, 16, 0x0F04, .s1
    64 00000EC2 00006A106A19E860FB- <1>
    64 00000ECB FFFF6683C410        <1>
    65 00000ED1 68[290F0000]68040F- <1>             cdecl   draw_str, 25, 17, 0x0F04, .s2
    65 00000ED9 00006A116A19E849FB- <1>
    65 00000EE2 FFFF6683C410        <1>
    66 00000EE8 68[3A0F0000]68040F- <1>             cdecl   draw_str, 25, 18, 0x0F04, .s3
    66 00000EF0 00006A126A19E832FB- <1>
    66 00000EF9 FFFF6683C410        <1>
    67 00000EFF 68[4B0F0000]68040F- <1>             cdecl   draw_str, 25, 19, 0x0F04, .s4
    67 00000F07 00006A136A19E81BFB- <1>
    67 00000F10 FFFF6683C410        <1>
    68                              <1> 
    69                              <1>             ; infinite loop
    70 00000F16 EBFE                <1>             jmp     $
    71                              <1> 
    72 00000F18 4553502B20303A      <1> .s1         db  "ESP+ 0:"
    73 00000F1F 5F5F5F5F5F5F5F5F20- <1> .p1         db  "________ ", 0
    73 00000F28 00                  <1>
    74 00000F29 2020202B20343A      <1> .s2         db  "   + 4:"
    75 00000F30 5F5F5F5F5F5F5F5F20- <1> .p2         db  "________ ", 0
    75 00000F39 00                  <1>
    76 00000F3A 2020202B20383A      <1> .s3         db  "   + 8:"
    77 00000F41 5F5F5F5F5F5F5F5F20- <1> .p3         db  "________ ", 0
    77 00000F4A 00                  <1>
    78 00000F4B 2020202B31323A      <1> .s4         db  "   +12:"
    79 00000F52 5F5F5F5F5F5F5F5F20- <1> .p4         db  "________ ", 0
    79 00000F5B 00                  <1>
    80                              <1> 
    81                              <1> int_default:
    82 00000F5C 9C                  <1>             pushf                                                   ; EFLAGS
    83 00000F5D 0E                  <1>             push    cs                                              ; CS
    84 00000F5E 68[430E0000]        <1>             push    int_stop                                        ; the process of displaying stack
    85                              <1> 
    86 00000F63 B8[690F0000]        <1>             mov     eax, .s0                                        ; interrupt type
    87 00000F68 CF                  <1>             iret
    88                              <1> 
    89 00000F69 203C2020202053544F- <1> .s0         db  " <    STOP    > ", 0
    89 00000F72 50202020203E2000    <1>
    90                              <1> 
    91                              <1> int_zero_div:
    92 00000F7A 9C                  <1>             pushf                                                   ; EFLAGS
    93 00000F7B 0E                  <1>             push    cs                                              ; CS
    94 00000F7C 68[430E0000]        <1>             push    int_stop                                        ; the process of displaying stack
    95                              <1> 
    96 00000F81 B8[870F0000]        <1>             mov     eax, .s0                                        ; interrupt type
    97 00000F86 CF                  <1>             iret
    98                              <1> 
    99 00000F87 203C20205A45524F20- <1> .s0         db  " <  ZERO DIV  > ", 0
    99 00000F90 44495620203E2000    <1>
   100                              <1> 
   101                              <1> 
   188                                  %include    "../modules/protect/pic.s"
     1                              <1> init_pic:
     2                              <1> 
     3                              <1>             ; save register
     4 00000F98 50                  <1>             push    eax
     5                              <1> 
     6                              <1>             ; set up Master PIC
     7                              <1>             outp    0x20, 0x11                              ; MASTER.ICW1 = 0x11
     7 00000F99 B011                <2>  mov al, %2
     7 00000F9B E620                <2>  out %1, al
     8                              <1>             outp    0x21, 0x20                              ; MASTER.ICW2 = 0x20 // interrupt vector
     8 00000F9D B020                <2>  mov al, %2
     8 00000F9F E621                <2>  out %1, al
     9                              <1>             outp    0x21, 0x04                              ; MASTER.ICW3 = 0x04 // slave connection position : IRQ2
     9 00000FA1 B004                <2>  mov al, %2
     9 00000FA3 E621                <2>  out %1, al
    10                              <1>             outp    0x21, 0x05                              ; MASTER.ICW4 = 0x05
    10 00000FA5 B005                <2>  mov al, %2
    10 00000FA7 E621                <2>  out %1, al
    11                              <1>             outp    0x21, 0xFF                              ; master interrupt mask
    11 00000FA9 B0FF                <2>  mov al, %2
    11 00000FAB E621                <2>  out %1, al
    12                              <1> 
    13                              <1>             ; set up Slave
    14                              <1>             outp    0xA0, 0x11                              ; SLAVE.ICW1 = 0x11
    14 00000FAD B011                <2>  mov al, %2
    14 00000FAF E6A0                <2>  out %1, al
    15                              <1>             outp    0xA1, 0x28                              ; SLAVE.ICW2 = 0x28 // interrupt vector
    15 00000FB1 B028                <2>  mov al, %2
    15 00000FB3 E6A1                <2>  out %1, al
    16                              <1>             outp    0xA1, 0x02                              ; SLAVE.ICW3 = 0x02 // slave ID = 2
    16 00000FB5 B002                <2>  mov al, %2
    16 00000FB7 E6A1                <2>  out %1, al
    17                              <1>             outp    0xA1, 0x01                              ; SLAVE.ICW4 = 0x01
    17 00000FB9 B001                <2>  mov al, %2
    17 00000FBB E6A1                <2>  out %1, al
    18                              <1>             outp    0xA1, 0xFF                              ; slave interrupt mask
    18 00000FBD B0FF                <2>  mov al, %2
    18 00000FBF E6A1                <2>  out %1, al
    19                              <1> 
    20                              <1>             ; return regisiter
    21 00000FC1 58                  <1>             pop     eax
    22                              <1> 
    23 00000FC2 C3                  <1>             ret
   189                                  %include    "../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000FC3 60                  <1>             pusha
     5 00000FC4 1E                  <1>             push    ds
     6 00000FC5 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000FC6 66B81000            <1>             mov     ax, 0x0010                                      ; offset from the beginnig of GDT // second element
    10 00000FCA 8ED8                <1>             mov     ds, ax
    11 00000FCC 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; get time from RTC
    14 00000FCE 68[20020000]E879FD- <1>             cdecl   rtc_get_time, RTC_TIME
    14 00000FD6 FFFF6683C404        <1>
    15                              <1> 
    16                              <1>             ; get RTC interrupt factor
    17                              <1>             outp    0x70, 0x0C                                      ; select register C
    17 00000FDC B00C                <2>  mov al, %2
    17 00000FDE E670                <2>  out %1, al
    18 00000FE0 E471                <1>             in      al, 0x71
    19                              <1> 
    20                              <1>             ; clear interrupt flag
    21 00000FE2 B020                <1>             mov     al, 0x20                                        ; AL = EOI command
    22 00000FE4 E6A0                <1>             out     0xA0, al                                        ; slave PIC
    23 00000FE6 E620                <1>             out     0x20, al                                        ; master PIC
    24                              <1> 
    25                              <1>             ; return register
    26 00000FE8 07                  <1>             pop     es
    27 00000FE9 1F                  <1>             pop     ds
    28 00000FEA 61                  <1>             popa
    29                              <1> 
    30 00000FEB CF                  <1>             iret                                                    ; end of interrupt process
    31                              <1>                                                                     ; return including flag register => iret
    32                              <1> 
    33                              <1> ; Enable interrupt by RTC itself
    34                              <1> 
    35                              <1> rtc_int_en:
    36                              <1> 
    37                              <1>             ; construct stack frame
    38 00000FEC 55                  <1>             push    ebp
    39 00000FED 89E5                <1>             mov     ebp, esp                                        ;EBP+8 | enable bit
    40                              <1> 
    41                              <1>             ; save register
    42 00000FEF 50                  <1>             push    eax
    43                              <1> 
    44                              <1>             ; set up Interrupt Permission
    45                              <1>             outp    0x70, 0x0B                                      ; select register B
    45 00000FF0 B00B                <2>  mov al, %2
    45 00000FF2 E670                <2>  out %1, al
    46                              <1> 
    47 00000FF4 E471                <1>             in      al, 0x71
    48 00000FF6 0A4508              <1>             or      al, [ebp + 8]                                   ; set the specified bit
    49                              <1> 
    50 00000FF9 E671                <1>             out     0x71, al                                        ; write down to register B
    51                              <1> 
    52                              <1>             ; return register
    53 00000FFB 58                  <1>             pop     eax
    54                              <1> 
    55                              <1>             ; destruct stack frame
    56 00000FFC 89EC                <1>             mov     esp, ebp
    57 00000FFE 5D                  <1>             pop     ebp
    58                              <1> 
    59 00000FFF C3                  <1>             ret
   190                                  %include    "../modules/protect/ring_buff.s"
     1                              <1> ring_rd:
     2                              <1> 
     3                              <1>             ; construct stack frame                                     ;    +12 | save_dest address
     4 00001000 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
     5 00001001 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 00001003 50                  <1>             push    eax
     9 00001004 53                  <1>             push    ebx
    10 00001005 56                  <1>             push    esi
    11 00001006 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; get args
    14 00001007 8B7508              <1>             mov     esi, [ebp +  8]
    15 0000100A 8B7D0C              <1>             mov     edi, [ebp + 12]
    16                              <1> 
    17                              <1>             ; confirm the reading location
    18 0000100D B800000000          <1>             mov     eax, 0                                              ; EAX = 0 // no data
    19 00001012 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = rp
    20 00001014 3B5E04              <1>             cmp     ebx, [esi + ring_buff.wp]                           ; if (EBX != wp)
    21 00001017 7411                <1>             je      .10E                                                ; {
    22                              <1> 
    23 00001019 8A441E08            <1>             mov     al, [esi + ring_buff.item + ebx]                    ;   AL = BUFFER[rp] // store key code(unit:byte)
    24                              <1> 
    25 0000101D 8807                <1>             mov     [edi], al                                           ;   [EDI] = AL      // save data
    26                              <1> 
    27 0000101F 43                  <1>             inc     ebx                                                 ;   EBX++           // next reading location
    28 00001020 83E30F              <1>             and     ebx, RING_INDEX_MASK                                ;   EBX &= 0x0F     // limit size
    29 00001023 891E                <1>             mov     [esi + ring_buff.rp], ebx                           ;   rp = EBX        // save the reading location
    30                              <1> 
    31 00001025 B801000000          <1>             mov     eax, 1                                              ;   EAX = 1         // data exists
    32                              <1> .10E:                                                                   ; }
    33                              <1> 
    34                              <1>             ; return registers
    35 0000102A 5F                  <1>             pop     edi
    36 0000102B 5E                  <1>             pop     esi
    37 0000102C 5B                  <1>             pop     ebx
    38 0000102D 58                  <1>             pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 0000102E 89EC                <1>             mov     esp, ebp
    42 00001030 5D                  <1>             pop     ebp
    43                              <1> 
    44 00001031 C3                  <1>             ret
    45                              <1> 
    46                              <1> ring_wr:
    47                              <1> 
    48                              <1>             ; construct stack frame                                     ;    +12 | data to write
    49 00001032 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
    50 00001033 89E5                <1>             mov     ebp, esp
    51                              <1> 
    52                              <1>             ; save registers
    53 00001035 50                  <1>             push    eax
    54 00001036 53                  <1>             push    ebx
    55 00001037 51                  <1>             push    ecx
    56 00001038 56                  <1>             push    esi
    57 00001039 57                  <1>             push    edi
    58                              <1> 
    59                              <1>             ; get args
    60 0000103A 8B7508              <1>             mov     esi, [ebp + 8]
    61                              <1> 
    62                              <1>             ; confirm the writing location
    63 0000103D B800000000          <1>             mov     eax, 0
    64 00001042 8B5E04              <1>             mov     ebx, [esi + ring_buff.wp]                           ; writing position
    65 00001045 89D9                <1>             mov     ecx, ebx
    66 00001047 41                  <1>             inc     ecx                                                 ; next writing location
    67 00001048 83E10F              <1>             and     ecx, RING_INDEX_MASK                                ; size limit
    68                              <1> 
    69 0000104B 3B0E                <1>             cmp     ecx, [esi + ring_buff.rp]                           ; if (ECX != rp)
    70 0000104D 740F                <1>             je      .10E                                                ; {
    71                              <1> 
    72 0000104F 8A450C              <1>             mov     al, [ebp + 12]                                      ;   AL = data
    73                              <1> 
    74 00001052 88441E08            <1>             mov     [esi + ring_buff.item + ebx], al                    ;   BUFFER[wp] = AL // save key code
    75 00001056 894E04              <1>             mov     [esi + ring_buff.wp], ecx                           ;   wp = ECX        // save the writing location
    76 00001059 B801000000          <1>             mov     eax, 1
    77                              <1> .10E:
    78                              <1> 
    79                              <1>             ; return registers
    80 0000105E 5F                  <1>             pop     edi
    81 0000105F 5E                  <1>             pop     esi
    82 00001060 59                  <1>             pop     ecx
    83 00001061 5B                  <1>             pop     ebx
    84 00001062 58                  <1>             pop     eax
    85                              <1> 
    86                              <1>             ; destruct stack frame
    87 00001063 89EC                <1>             mov     esp, ebp
    88 00001065 5D                  <1>             pop     ebp
    89                              <1> 
    90 00001066 C3                  <1>             ret
    91                              <1> 
    92                              <1> draw_key:
    93                              <1> 
    94                              <1>             ; construct stack frame                                     ;    +16 | ring buffer
    95 00001067 55                  <1>             push    ebp                                                 ;    +12 | row
    96 00001068 89E5                <1>             mov     ebp, esp                                            ; EBP+ 8 | col
    97                              <1> 
    98                              <1>             ; save registers
    99 0000106A 60                  <1>             pusha                                                       ; save EAX,EBX,ECX,EDX,EDI,ESI,EBP,ESP
   100                              <1> 
   101                              <1>             ; get args
   102 0000106B 8B5508              <1>             mov     edx, [ebp +  8]
   103 0000106E 8B7D0C              <1>             mov     edi, [ebp + 12]
   104 00001071 8B7510              <1>             mov     esi, [ebp + 16]
   105                              <1> 
   106                              <1>             ; get ring buffer info
   107 00001074 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = wp // writing location
   108 00001076 8D7608              <1>             lea     esi, [esi + ring_buff.item]
   109 00001079 B910000000          <1>             mov     ecx, RING_ITEM_SIZE
   110                              <1> 
   111                              <1>             ; display data
   112                              <1> .10L:
   113                              <1> 
   114 0000107E 4B                  <1>             dec     ebx                                                 ; EBX-- == where data exists
   115 0000107F 83E30F              <1>             and     ebx, RING_INDEX_MASK
   116 00001082 8A041E              <1>             mov     al, [esi + ebx]                                     ; EAX = KEY_BUFF[EBX]
   117                              <1> 
   118 00001085 6A046A106A0268-     <1>             cdecl   int_to_str, eax, .tmp, 2, 16, 0b0100
   118 0000108C [B6100000]50E832FC- <1>
   118 00001094 FFFF6683C414        <1>
   119 0000109A 68[B6100000]6A0257- <1>             cdecl   draw_str, edx, edi, 0x02, .tmp
   119 000010A2 52E885F9FFFF6683C4- <1>
   119 000010AB 10                  <1>
   120                              <1> 
   121 000010AC 83C203              <1>             add     edx, 3                                              ; updata display position(3 chars)
   122                              <1> 
   123 000010AF E2CD                <1>             loop    .10L
   124                              <1> .10E:
   125                              <1> 
   126                              <1>             ; return registers
   127 000010B1 61                  <1>             popa
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 000010B2 89EC                <1>             mov     esp, ebp
   131 000010B4 5D                  <1>             pop     ebp
   132                              <1> 
   133 000010B5 C3                  <1>             ret
   134                              <1> 
   135 000010B6 2D2D2000            <1> .tmp        db "-- ", 0
   191                                  %include    "../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1> 
     3                              <1>             ; save registers
     4 000010BA 60                  <1>             pusha
     5 000010BB 1E                  <1>             push    ds
     6 000010BC 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment for data
     9 000010BD 66B81000            <1>             mov     ax, 0x0010
    10 000010C1 8ED8                <1>             mov     ds, ax
    11 000010C3 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; read buffer of KBC
    14 000010C5 E460                <1>             in      al, 0x60                                    ; AL = get key code
    15                              <1> 
    16                              <1>             ; save key code
    17 000010C7 5068[E0100000]E860- <1>             cdecl   ring_wr, _KEY_BUFF, eax
    17 000010CF FFFFFF6683C408      <1>
    18                              <1> 
    19                              <1>             ; send interrupt end command
    20                              <1>             outp    0x20, 0x20                                  ; master PIC: EOI command
    20 000010D6 B020                <2>  mov al, %2
    20 000010D8 E620                <2>  out %1, al
    21                              <1> 
    22                              <1>             ; return registers
    23 000010DA 07                  <1>             pop     es
    24 000010DB 1F                  <1>             pop     ds
    25 000010DC 61                  <1>             popa
    26                              <1> 
    27 000010DD CF                  <1>             iret
    28                              <1> 
    29 000010DE 00<rept>            <1> ALIGN 4, db 0
    30 000010E0 00<rept>            <1> _KEY_BUFF:  times ring_buff_size db 0
   192                                  %include    "../modules/protect/timer.s"
     1                              <1> int_en_timer0:
     2                              <1> 
     3                              <1>             ; save register
     4 000010F8 50                  <1>             push    eax                                     ; use eax register on outp
     5                              <1> 
     6                              <1>             outp    0x43, 0b_00_11_010_0                    ; counter 0|access way:lower/upper|mode 2|16 bit binary couner
     6 000010F9 B034                <2>  mov al, %2
     6 000010FB E643                <2>  out %1, al
     7                              <1>             outp    0x40, 0x9C                              ; lower byte
     7 000010FD B09C                <2>  mov al, %2
     7 000010FF E640                <2>  out %1, al
     8                              <1>             outp    0x40, 0x2E                              ; upper byte
     8 00001101 B02E                <2>  mov al, %2
     8 00001103 E640                <2>  out %1, al
     9                              <1> 
    10                              <1>             ; return register
    11 00001105 58                  <1>             pop     eax
    12                              <1> 
    13 00001106 C3                  <1>             ret
   193                                  %include    "../modules/protect/draw_rotation_bar.s"
     1                              <1> ;--------------------------------------------------------------------------------------------
     2                              <1> ;char update cycle
     3                              <1> ;=> The value obtained by reading the value of Timer interrupt counter
     4                              <1> ;   and shifting it to the right by 4 bits
     5                              <1> ;   and if the value is different from the previous value, it's the time to update.
     6                              <1> ;--------------------------------------------------------------------------------------------
     7                              <1> 
     8                              <1> draw_rotation_bar:
     9                              <1> 
    10                              <1>             ; save register
    11 00001107 50                  <1>             push    eax
    12                              <1> 
    13                              <1>             ; main process
    14 00001108 A1[70060000]        <1>             mov     eax, [TIMER_COUNT]
    15 0000110D C1E804              <1>             shr     eax, 4
    16 00001110 3B05[38110000]      <1>             cmp     eax, [.index]
    17 00001116 741E                <1>             je      .10E
    18                              <1> 
    19 00001118 A3[38110000]        <1>             mov     [.index], eax
    20 0000111D 83E003              <1>             and     eax, 0x03                                       ; limit to the range 0 to 3
    21                              <1> 
    22 00001120 8A80[3C110000]      <1>             mov     al, [.table + eax]                              ; AL = table[index]
    23 00001126 506A0F6A1D6A00E8D5- <1>             cdecl   draw_char, 0, 29, 0x000F, eax
    23 0000112F F7FFFF6683C410      <1>
    24                              <1> 
    25                              <1> .10E:
    26                              <1> 
    27                              <1>             ; return register
    28 00001136 58                  <1>             pop     eax
    29                              <1> 
    30 00001137 C3                  <1>             ret
    31                              <1> 
    32                              <1> ALIGN 4, db 0
    33 00001138 00000000            <1> .index      dd 0                                                    ; previous value
    34 0000113C 7C2F2D5C            <1> .table      db "|/-\"                                               ; display bar
   194                                  %include    "../modules/protect/call_gate.s"
     1                              <1> ;--------------------------------------------------
     2                              <1> ; This is a rapper of draw_str func.
     3                              <1> ;--------------------------------------------------
     4                              <1> 
     5                              <1> call_gate:
     6                              <1> 
     7                              <1>             ; construct stack frame
     8                              <1>                                                                     ;    +24 | char
     9                              <1>                                                                     ;    +20 | display color
    10                              <1>                                                                     ;    +16 | row
    11                              <1>                                                                     ;    +12 | column
    12                              <1>                                                                     ; EBP+ 8 | CS(code segment)
    13 00001140 55                  <1>             push    ebp
    14 00001141 89E5                <1>             mov     ebp, esp
    15                              <1> 
    16                              <1>             ; save registers
    17 00001143 60                  <1>             pusha
    18 00001144 1E                  <1>             push    ds
    19 00001145 06                  <1>             push    es
    20                              <1> 
    21                              <1>             ; set up segment for data
    22 00001146 66B81000            <1>             mov     ax, 0x0010
    23 0000114A 8ED8                <1>             mov     ds, ax
    24 0000114C 8EC0                <1>             mov     es, ax
    25                              <1> 
    26                              <1>             ; display string
    27 0000114E 8B450C              <1>             mov     eax, dword [ebp + 12]
    28 00001151 8B5D10              <1>             mov     ebx, dword [ebp + 16]
    29 00001154 8B4D14              <1>             mov     ecx, dword [ebp + 20]
    30 00001157 8B5518              <1>             mov     edx, dword [ebp + 24]
    31 0000115A 52515350E8CAF8FFFF- <1>             cdecl   draw_str, eax, ebx, ecx, edx
    31 00001163 6683C410            <1>
    32                              <1> 
    33                              <1>             ; return registers
    34 00001167 07                  <1>             pop     es
    35 00001168 1F                  <1>             pop     ds
    36 00001169 61                  <1>             popa
    37                              <1> 
    38                              <1>             ; destruct stack frame
    39 0000116A 89EC                <1>             mov     esp, ebp
    40 0000116C 5D                  <1>             pop     ebp
    41                              <1> 
    42 0000116D CA1000              <1>             retf    4 * 4                                                ; end func and adjust arguments
   195                                  %include    "../modules/protect/trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1> 
     3                              <1>             ; output a char
     4 00001170 50535251E88EF7FFFF- <1>             cdecl   draw_char,  ecx, edx, ebx, eax
     4 00001179 6683C410            <1>
     5                              <1> 
     6 0000117D CF                  <1>             iret
     7                              <1> 
     8                              <1> trap_gate_82:
     9                              <1> 
    10                              <1>             ; draw pixel
    11 0000117E 535251E861F9FFFF66- <1>             cdecl   draw_pixel, ecx, edx, ebx
    11 00001187 83C40C              <1>
    12                              <1> 
    13 0000118A CF                  <1>             iret
   196                                  %include    "../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                                     ; EBP+8 | address of global variable
     5 0000118B 55                  <1>             push    ebp
     6 0000118C 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 0000118E 50                  <1>             push    eax
    10 0000118F 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; test and set
    13 00001190 B800000000          <1>             mov     eax, 0                                          ; local = 0
    14 00001195 8B5D08              <1>             mov     ebx, [ebp + 8]                                  ; global = address
    15                              <1> 
    16                              <1> .10L:
    17 00001198 F00FAB03            <1>             lock bts [ebx], eax                                     ; CF = TEST_AND_SET(IN_USE, 1)
    18 0000119C 7307                <1>             jnc     .10E                                            ; if(0 == CF)
    19                              <1>                                                                     ;   break;
    20                              <1> 
    21                              <1> .12L:
    22 0000119E 0FA303              <1>             bt      [ebx], eax                                      ; CF = TEST(IN_USE, 1)
    23 000011A1 72FB                <1>             jc      .12L                                            ; if(0 == CF)
    24                              <1>                                                                     ;   break;
    25 000011A3 EBF3                <1>             jmp     .10L
    26                              <1> .10E:
    27                              <1> 
    28                              <1>             ; return registers
    29 000011A5 5B                  <1>             pop     ebx
    30 000011A6 58                  <1>             pop     eax
    31                              <1> 
    32                              <1>             ; destruct stakc frame
    33 000011A7 89EC                <1>             mov     esp, ebp
    34 000011A9 5D                  <1>             pop     ebp
    35                              <1> 
    36 000011AA C3                  <1>             ret
   197                                  %include    "../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 
     3                              <1>             ; EBX == TSS selector
     4                              <1> 
     5 000011AB 8B83[86050000]      <1>             mov     eax, [GDT + ebx + 2]                            ; EAX = TSS[23:0]
     6 000011B1 C1E008              <1>             shl     eax, 8
     7 000011B4 8A83[8B050000]      <1>             mov     al,  [GDT + ebx + 7]                            ; AL  = TSS[31:24]
     8 000011BA C1C808              <1>             ror     eax, 8
     9                              <1> 
    10 000011BD C3                  <1>             ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 
    14                              <1>             ; EAX == base address of TSS descriptor
    15                              <1> 
    16 000011BE DD7068              <1>             fnsave  [eax + 104]                                     ; // save FPU context
    17 000011C1 C780D4000000010000- <1>             mov     [eax + 104 + 108], dword 1                      ; saved = 1 // a flag which shows FPU context is saved.
    17 000011CA 00                  <1>
    18                              <1> 
    19 000011CB C3                  <1>             ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1> 
    23 000011CC 83B8D400000000      <1>             cmp     [eax + 104 + 108], dword 0                      ; if (0 == saved)
    24 000011D3 7504                <1>             jne     .10F
    25 000011D5 DBE3                <1>             fninit                                                  ; initialize FPU
    26 000011D7 EB03                <1>             jmp     .10E
    27                              <1> .10F:
    28 000011D9 DD6068              <1>             frstor  [eax + 104]                                     ; return FPU context
    29                              <1> .10E:
    30 000011DC C3                  <1>             ret
    31                              <1> 
    32                              <1> int_nm:
    33                              <1> 
    34                              <1>             ; save registers
    35 000011DD 60                  <1>             pusha
    36 000011DE 1E                  <1>             push    ds
    37 000011DF 06                  <1>             push    es
    38                              <1> 
    39                              <1>             ; set up selector for Kernel
    40 000011E0 66B81000            <1>             mov     ax, DS_KERNEL
    41 000011E4 8ED8                <1>             mov     ds, ax
    42 000011E6 8EC0                <1>             mov     es, ax
    43                              <1> 
    44                              <1>             ; clear Task Switch flag
    45 000011E8 0F06                <1>             clts                                                    ; CR0.TS = 0
    46                              <1>                                                                     ; // TS bit is gonna be set by CPU
    47                              <1>                                                                     ; // when Task Switching happend.
    48                              <1> 
    49                              <1>             ; get previous/this time task
    50 000011EA 8B3D[34120000]      <1>             mov     edi, [.last_tss]                                ; TSS of the task that last used FPU
    51 000011F0 0F00CE              <1>             str     esi                                             ; TSS of the task using FPU this time
    52 000011F3 83E6F8              <1>             and     esi, ~0x0007                                    ; mask segment selector[2:0] // TI:RPL
    53                              <1> 
    54                              <1>             ; compare previous task with the one of this time
    55 000011F6 83FF00              <1>             cmp     edi, 0                                          ; if not exist previous task
    56 000011F9 7420                <1>             je      .10F
    57                              <1> 
    58 000011FB 39FE                <1>             cmp     esi, edi
    59 000011FD 741A                <1>             je      .12E
    60                              <1> 
    61 000011FF FA                  <1>             cli                                                     ; disable interrupt
    62                              <1> 
    63                              <1>             ; save previous FPU context
    64 00001200 89FB                <1>             mov     ebx, edi
    65 00001202 E8A4FFFFFF          <1>             call    get_tss_base                                    ; get TSS address
    66 00001207 E8B2FFFFFF          <1>             call    save_fpu_context
    67                              <1> 
    68                              <1>             ; return FPU context of this time
    69 0000120C 89F3                <1>             mov     ebx, esi
    70 0000120E E898FFFFFF          <1>             call    get_tss_base
    71 00001213 E8B4FFFFFF          <1>             call    load_fpu_context
    72                              <1> 
    73 00001218 FB                  <1>             sti                                                     ; enable interrupt
    74                              <1> 
    75                              <1> .12E:
    76 00001219 EB0E                <1>             jmp     .10E
    77                              <1> .10F:
    78                              <1> 
    79 0000121B FA                  <1>             cli                                                     ; disable interrupt
    80                              <1> 
    81                              <1>             ; return FPU context of this time
    82 0000121C 89F3                <1>             mov     ebx, esi
    83 0000121E E888FFFFFF          <1>             call    get_tss_base
    84 00001223 E8A4FFFFFF          <1>             call    load_fpu_context
    85                              <1> 
    86 00001228 FB                  <1>             sti                                                     ; enable interrupt
    87                              <1> 
    88                              <1> .10E:
    89 00001229 8935[34120000]      <1>             mov     [.last_tss], esi                                ; save task that used FPU
    90                              <1> 
    91                              <1>             ; return registers
    92 0000122F 07                  <1>             pop     es
    93 00001230 1F                  <1>             pop     ds
    94 00001231 61                  <1>             popa
    95                              <1> 
    96 00001232 CF                  <1>             iret
    97                              <1> 
    98 00001233 00                  <1> ALIGN 4, db 0
    99 00001234 00000000            <1> .last_tss:  dd  0
   198                                  %include    "../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                             ; EBP +8 | waif == num of system interrupt
     5 00001238 55                  <1>             push    ebp
     6 00001239 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 0000123B 50                  <1>             push    eax
    10 0000123C 51                  <1>             push    ecx
    11                              <1> 
    12                              <1>             ; wait
    13 0000123D 8B4D08              <1>             mov     ecx, [ebp + 8]
    14 00001240 A1[70060000]        <1>             mov     eax, [TIMER_COUNT]
    15                              <1> 
    16                              <1> .10L:
    17 00001245 3905[70060000]      <1>             cmp     [TIMER_COUNT], eax                      ; while(TIMER != eax)
    18 0000124B 74F8                <1>             je      .10L
    19 0000124D 40                  <1>             inc     eax                                     ; eax++
    20 0000124E E2F5                <1>             loop    .10L                                    ; while(--ecx)
    21                              <1> 
    22                              <1>             ; return registers
    23 00001250 59                  <1>             pop     ecx
    24 00001251 58                  <1>             pop     eax
    25                              <1> 
    26                              <1>             ; destruct stakc frame
    27 00001252 89EC                <1>             mov     esp, ebp
    28 00001254 5D                  <1>             pop     ebp
    29                              <1> 
    30 00001255 C3                  <1>             ret
   199                                  
   200                                  
   201                                  ; PADDING
   202                                  
   203 00001256 00<rept>                            times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
