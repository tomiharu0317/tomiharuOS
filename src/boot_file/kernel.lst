     1                                  %define     USE_SYSTEM_CALL
     2                                  %define     USE_TEST_AND_SET
     3                                  
     4                                  ;macro
     5                                  %include    "../include/define.s"
     1                              <1>         BOOT_SIZE       equ     (1024 * 8)                      ; boot size
     2                              <1>         KERNEL_SIZE     equ     (1024 * 8)                      ; kernel size
     3                              <1> 
     4                              <1>         BOOT_LOAD       equ     0x7C00                          ; where boot program is gonna be loaded
     5                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1>         KERNEL_LOAD     equ     0x0010_1000
     8                              <1> 
     9                              <1>         SECT_SIZE       equ     (512)                           ; sector size
    10                              <1> 
    11                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)         ; num of sector of boot program
    12                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>         E820_RECORD_SIZE        equ     20
    15                              <1> 
    16                              <1>         VECT_BASE       equ     0x0010_0000                     ; 0010_0000 ~ 0010_07FF
    17                              <1> 
    18                              <1>         STACK_BASE      equ     0x0010_3000                     ; stack area for task
    19                              <1>         STACK_SIZE      equ     1024                            ; stack size
    20                              <1> 
    21                              <1>         SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    22                              <1>         SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
    23                              <1>         SP_TASK_2       equ     STACK_BASE + (STACK_SIZE * 3)
    24                              <1>         SP_TASK_3       equ     STACK_BASE + (STACK_SIZE * 4)
    25                              <1>         SP_TASK_4       equ     STACK_BASE + (STACK_SIZE * 5)
    26                              <1>         SP_TASK_5       equ     STACK_BASE + (STACK_SIZE * 6)
    27                              <1>         SP_TASK_6       equ     STACK_BASE + (STACK_SIZE * 7)
    28                              <1> 
    29                              <1>         PARAM_TASK_4    equ     0x0010_8000                     ; drawing params : for task4
    30                              <1>         PARAM_TASK_5    equ     0x0010_9000                     ; drawing params : for task5
    31                              <1>         PARAM_TASK_6    equ     0x0010_A000                     ; drawing params : for task6
    32                              <1> 
    33                              <1> 
    34                              <1>         CR3_BASE        equ     0x0010_5000                     ; page conversion table: for task 3
    35                              <1> 
    36                              <1>         CR3_TASK_4      equ     0x0020_0000                     ; page conversion table: for task 4
    37                              <1>         CR3_TASK_5      equ     0x0020_2000                     ; page conversion table: for task 5
    38                              <1>         CR3_TASK_6      equ     0x0020_4000                     ; page conversion table: for task 6
    39                              <1> 
    40                              <1> ;------------------------------------------------------------------------------------------------------
    41                              <1> ; FAT settings
    42                              <1> ;------------------------------------------------------------------------------------------------------
    43                              <1> 
    44                              <1>         FAT_SIZE        equ     (1024 * 128)                    ; FAT-1/2
    45                              <1>         ROOT_SIZE       equ     (1024 * 16)
    46                              <1> 
    47                              <1>         ENTRY_SIZE      equ     32
    48                              <1> 
    49                              <1> 	FAT1_START      equ     (KERNEL_SIZE)
    50                              <1> 	FAT2_START      equ     (FAT1_START + FAT_SIZE)
    51                              <1> 	ROOT_START      equ     (FAT2_START + FAT_SIZE)
    52                              <1> 	FILE_START      equ     (ROOT_START + ROOT_SIZE)
    53                              <1> 
    54                              <1>         ATTR_ARCHIVE    equ     0x20
    55                              <1>         ATTR_VOLUME_ID  equ     0x08
     6                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*
     2                              <1> 
     3                              <1>     %rep  %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)   ; vector address
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>     %if 3 == %0
    25                              <1>         mov     [edi + 4], %3               ; flag
    26                              <1>     %endif
    27                              <1> 
    28                              <1>         mov     [edi + 0], ax               ; exception address[15:0]
    29                              <1>         shr     eax, 16
    30                              <1>         mov     [edi + 6], ax               ; exception address[31:16]
    31                              <1> 
    32                              <1>         pop     edi
    33                              <1>         pop     eax
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro  outp 2
    37                              <1>         mov     al, %2
    38                              <1>         out     %1, al
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> %macro  set_desc 2-*
    42                              <1>             push    eax
    43                              <1>             push    edi
    44                              <1> 
    45                              <1>             mov     edi, %1                             ; descriptor address
    46                              <1>             mov     eax, %2                             ; base address
    47                              <1> 
    48                              <1>         %if 3 == %0
    49                              <1>             mov     [edi + 0], %3                       ; limit
    50                              <1>         %endif
    51                              <1> 
    52                              <1>             mov     [edi + 2], ax                       ; base([15:0])
    53                              <1>             shr     eax, 16
    54                              <1>             mov     [edi + 4], al                       ; base([23:16])
    55                              <1>             mov     [edi + 7], ah                       ; base([31:24])
    56                              <1> 
    57                              <1>             pop     edi
    58                              <1>             pop     eax
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro  set_gate 2-*
    62                              <1>             push    eax
    63                              <1>             push    edi
    64                              <1> 
    65                              <1>             mov     edi, %1                             ; descriptor address
    66                              <1>             mov     eax, %2                             ; base address
    67                              <1> 
    68                              <1>             mov     [edi + 0], ax                       ; base([15:0])
    69                              <1>             shr     eax, 16
    70                              <1>             mov     [edi + 6], ax                       ; base([31:16])
    71                              <1> 
    72                              <1>             pop     edi
    73                              <1>             pop     eax
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> struc   drive                               ; define parameters by structure when reading sector
    77 00000000 <res 00000002>      <1>             .no         resw    1           ; drive no.
    78 00000002 <res 00000002>      <1>             .cyln       resw    1           ; cylinder
    79 00000004 <res 00000002>      <1>             .head       resw    1           ; head
    80 00000006 <res 00000002>      <1>             .sect       resw    1           ; sector
    81                              <1> endstruc
    82                              <1> 
    83                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    84                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    85                              <1> 
    86                              <1> struc   ring_buff
    87 00000000 <res 00000004>      <1>             .rp         resd    1                       ; RP: Reading Position
    88 00000004 <res 00000004>      <1>             .wp         resd    1                       ; WP: Writing Position
    89 00000008 <res 00000010>      <1>             .item       resb    RING_ITEM_SIZE          ; buffer // unit:byte
    90                              <1> endstruc
    91                              <1> 
    92                              <1> struc   rose
    93 00000000 <res 00000004>      <1>             .x0         resd    1                       ; upper left coordinate : X0
    94 00000004 <res 00000004>      <1>             .y0         resd    1                       ; upper left coordinate : Y0
    95 00000008 <res 00000004>      <1>             .x1         resd    1                       ; lower right coordinate : X1
    96 0000000C <res 00000004>      <1>             .y1         resd    1                       ; lower right coordinate : Y1
    97                              <1> 
    98 00000010 <res 00000004>      <1>             .n          resd    1                       ; variable:n
    99 00000014 <res 00000004>      <1>             .d          resd    1                       ; variable:d
   100                              <1> 
   101 00000018 <res 00000004>      <1>             .color_x    resd    1                       ; display color : X axis
   102 0000001C <res 00000004>      <1>             .color_y    resd    1                       ; display color : Y axis
   103 00000020 <res 00000004>      <1>             .color_z    resd    1                       ; display color : frame
   104 00000024 <res 00000004>      <1>             .color_s    resd    1                       ; display color : char
   105 00000028 <res 00000004>      <1>             .color_f    resd    1                       ; display color : graph display color
   106 0000002C <res 00000004>      <1>             .color_b    resd    1                       ; display color : graph erase color
   107                              <1> 
   108 00000030 <res 00000010>      <1>             .title      resb    16                      ; title
   109                              <1> endstruc
   110                              <1> 
   111                              <1> 
     7                                  
     8                                                  ORG     KERNEL_LOAD                             ; load address of kernel
     9                                  
    10                                  [BITS 32]                                                       ; BIT 32 directive
    11                                  ; entry point
    12                                  
    13                                  kernel:
    14                                  
    15                                                  ; Get Font address
    16 00000000 BE007E0000                              mov     esi, BOOT_LOAD + SECT_SIZE              ; ESI = 0x7x00 + 512
    17 00000005 0FB706                                  movzx   eax, word [esi + 0]                     ; segment
    18 00000008 0FB75E02                                movzx   ebx, word [esi + 2]                     ; offset
    19 0000000C C1E004                                  shl     eax, 4
    20 0000000F 01D8                                    add     eax, ebx
    21 00000011 A3[F8020000]                            mov     [FONT_ADR], eax                         ; FONT_ADR[0] = EAX
    22                                  
    23                                                  ; set up TSS descriptor
    24                                                  set_desc    GDT.tss_0, TSS_0
    24 00000016 50                  <1>  push eax
    24 00000017 57                  <1>  push edi
    24                              <1> 
    24 00000018 BF[18090000]        <1>  mov edi, %1
    24 0000001D B8[00030000]        <1>  mov eax, %2
    24                              <1> 
    24                              <1>  %if 3 == %0
    24                              <1>  mov [edi + 0], %3
    24                              <1>  %endif
    24                              <1> 
    24 00000022 66894702            <1>  mov [edi + 2], ax
    24 00000026 C1E810              <1>  shr eax, 16
    24 00000029 884704              <1>  mov [edi + 4], al
    24 0000002C 886707              <1>  mov [edi + 7], ah
    24                              <1> 
    24 0000002F 5F                  <1>  pop edi
    24 00000030 58                  <1>  pop eax
    25                                                  set_desc    GDT.tss_1, TSS_1
    25 00000031 50                  <1>  push eax
    25 00000032 57                  <1>  push edi
    25                              <1> 
    25 00000033 BF[20090000]        <1>  mov edi, %1
    25 00000038 B8[D8030000]        <1>  mov eax, %2
    25                              <1> 
    25                              <1>  %if 3 == %0
    25                              <1>  mov [edi + 0], %3
    25                              <1>  %endif
    25                              <1> 
    25 0000003D 66894702            <1>  mov [edi + 2], ax
    25 00000041 C1E810              <1>  shr eax, 16
    25 00000044 884704              <1>  mov [edi + 4], al
    25 00000047 886707              <1>  mov [edi + 7], ah
    25                              <1> 
    25 0000004A 5F                  <1>  pop edi
    25 0000004B 58                  <1>  pop eax
    26                                                  set_desc    GDT.tss_2, TSS_2
    26 0000004C 50                  <1>  push eax
    26 0000004D 57                  <1>  push edi
    26                              <1> 
    26 0000004E BF[28090000]        <1>  mov edi, %1
    26 00000053 B8[B0040000]        <1>  mov eax, %2
    26                              <1> 
    26                              <1>  %if 3 == %0
    26                              <1>  mov [edi + 0], %3
    26                              <1>  %endif
    26                              <1> 
    26 00000058 66894702            <1>  mov [edi + 2], ax
    26 0000005C C1E810              <1>  shr eax, 16
    26 0000005F 884704              <1>  mov [edi + 4], al
    26 00000062 886707              <1>  mov [edi + 7], ah
    26                              <1> 
    26 00000065 5F                  <1>  pop edi
    26 00000066 58                  <1>  pop eax
    27                                                  set_desc    GDT.tss_3, TSS_3
    27 00000067 50                  <1>  push eax
    27 00000068 57                  <1>  push edi
    27                              <1> 
    27 00000069 BF[30090000]        <1>  mov edi, %1
    27 0000006E B8[88050000]        <1>  mov eax, %2
    27                              <1> 
    27                              <1>  %if 3 == %0
    27                              <1>  mov [edi + 0], %3
    27                              <1>  %endif
    27                              <1> 
    27 00000073 66894702            <1>  mov [edi + 2], ax
    27 00000077 C1E810              <1>  shr eax, 16
    27 0000007A 884704              <1>  mov [edi + 4], al
    27 0000007D 886707              <1>  mov [edi + 7], ah
    27                              <1> 
    27 00000080 5F                  <1>  pop edi
    27 00000081 58                  <1>  pop eax
    28                                                  set_desc    GDT.tss_4, TSS_4
    28 00000082 50                  <1>  push eax
    28 00000083 57                  <1>  push edi
    28                              <1> 
    28 00000084 BF[38090000]        <1>  mov edi, %1
    28 00000089 B8[60060000]        <1>  mov eax, %2
    28                              <1> 
    28                              <1>  %if 3 == %0
    28                              <1>  mov [edi + 0], %3
    28                              <1>  %endif
    28                              <1> 
    28 0000008E 66894702            <1>  mov [edi + 2], ax
    28 00000092 C1E810              <1>  shr eax, 16
    28 00000095 884704              <1>  mov [edi + 4], al
    28 00000098 886707              <1>  mov [edi + 7], ah
    28                              <1> 
    28 0000009B 5F                  <1>  pop edi
    28 0000009C 58                  <1>  pop eax
    29                                                  set_desc    GDT.tss_5, TSS_5
    29 0000009D 50                  <1>  push eax
    29 0000009E 57                  <1>  push edi
    29                              <1> 
    29 0000009F BF[40090000]        <1>  mov edi, %1
    29 000000A4 B8[38070000]        <1>  mov eax, %2
    29                              <1> 
    29                              <1>  %if 3 == %0
    29                              <1>  mov [edi + 0], %3
    29                              <1>  %endif
    29                              <1> 
    29 000000A9 66894702            <1>  mov [edi + 2], ax
    29 000000AD C1E810              <1>  shr eax, 16
    29 000000B0 884704              <1>  mov [edi + 4], al
    29 000000B3 886707              <1>  mov [edi + 7], ah
    29                              <1> 
    29 000000B6 5F                  <1>  pop edi
    29 000000B7 58                  <1>  pop eax
    30                                                  set_desc    GDT.tss_6, TSS_6
    30 000000B8 50                  <1>  push eax
    30 000000B9 57                  <1>  push edi
    30                              <1> 
    30 000000BA BF[48090000]        <1>  mov edi, %1
    30 000000BF B8[10080000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 000000C4 66894702            <1>  mov [edi + 2], ax
    30 000000C8 C1E810              <1>  shr eax, 16
    30 000000CB 884704              <1>  mov [edi + 4], al
    30 000000CE 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 000000D1 5F                  <1>  pop edi
    30 000000D2 58                  <1>  pop eax
    31                                  
    32                                  
    33                                                  ; set up Call Gate
    34                                                  set_gate    GDT.call_gate, call_gate
    34 000000D3 50                  <1>  push eax
    34 000000D4 57                  <1>  push edi
    34                              <1> 
    34 000000D5 BF[50090000]        <1>  mov edi, %1
    34 000000DA B8[DC170000]        <1>  mov eax, %2
    34                              <1> 
    34 000000DF 668907              <1>  mov [edi + 0], ax
    34 000000E2 C1E810              <1>  shr eax, 16
    34 000000E5 66894706            <1>  mov [edi + 6], ax
    34                              <1> 
    34 000000E9 5F                  <1>  pop edi
    34 000000EA 58                  <1>  pop eax
    35                                  
    36                                                  ; set up LDT
    37                                                  set_desc    GDT.ldt, LDT, word LDT_LIMIT        ; descriptor address/base address/limit
    37 000000EB 50                  <1>  push eax
    37 000000EC 57                  <1>  push edi
    37                              <1> 
    37 000000ED BF[10090000]        <1>  mov edi, %1
    37 000000F2 B8[5E090000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if 3 == %0
    37 000000F7 66C7075F00          <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 000000FC 66894702            <1>  mov [edi + 2], ax
    37 00000100 C1E810              <1>  shr eax, 16
    37 00000103 884704              <1>  mov [edi + 4], al
    37 00000106 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 00000109 5F                  <1>  pop edi
    37 0000010A 58                  <1>  pop eax
    38                                  
    39                                                  ; load GDTR (resetting)
    40 0000010B 0F0115[58090000]                        lgdt        [GDTR]
    41                                  
    42                                                  ; set up stack
    43 00000112 BC00341000                              mov     esp, SP_TASK_0                          ; set up stack for Task0
    44                                  
    45                                                  ; recognize Kernel as Task0
    46 00000117 66B83000                                mov     ax, SS_TASK_0
    47 0000011B 0F00D8                                  ltr     ax                                      ; initialize TR
    48                                  
    49                                                  ; initialize interrupt vector
    50                                                  cdecl   init_int                                ; initialize Interrupt Descriptor Table
    50                              <1> 
    50                              <1>  %rep %0 - 1
    50                              <1>  push %-1:-1
    50                              <1>  %rotate -1
    50                              <1>  %endrep
    50                              <1>  %rotate -1
    50                              <1> 
    50 0000011E E88B130000          <1>  call %1
    50                              <1> 
    50                              <1>  %if 1 < %0
    50                              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    50                              <1>  %endif
    50                              <1> 
    51                                                  cdecl   init_pic                                ; initialize Programmable Interrupt Controler
    51                              <1> 
    51                              <1>  %rep %0 - 1
    51                              <1>  push %-1:-1
    51                              <1>  %rotate -1
    51                              <1>  %endrep
    51                              <1>  %rotate -1
    51                              <1> 
    51 00000123 E80C150000          <1>  call %1
    51                              <1> 
    51                              <1>  %if 1 < %0
    51                              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    51                              <1>  %endif
    51                              <1> 
    52                                                  cdecl   init_page                               ; initialize Paging
    52                              <1> 
    52                              <1>  %rep %0 - 1
    52                              <1>  push %-1:-1
    52                              <1>  %rotate -1
    52                              <1>  %endrep
    52                              <1>  %rotate -1
    52                              <1> 
    52 00000128 E891080000          <1>  call %1
    52                              <1> 
    52                              <1>  %if 1 < %0
    52                              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    52                              <1>  %endif
    52                              <1> 
    53                                  
    54                                                  set_vect    0x00, int_zero_div                  ; define interrupt process: Zero div
    54 0000012D 50                  <1>  push eax
    54 0000012E 57                  <1>  push edi
    54                              <1> 
    54 0000012F BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    54 00000134 B8[16160000]        <1>  mov eax, %2
    54                              <1> 
    54                              <1>  %if 3 == %0
    54                              <1>  mov [edi + 4], %3
    54                              <1>  %endif
    54                              <1> 
    54 00000139 668907              <1>  mov [edi + 0], ax
    54 0000013C C1E810              <1>  shr eax, 16
    54 0000013F 66894706            <1>  mov [edi + 6], ax
    54                              <1> 
    54 00000143 5F                  <1>  pop edi
    54 00000144 58                  <1>  pop eax
    55                                                  set_vect    0x07, int_nm                        ; define interrupt process: device unavailable exception
    55 00000145 50                  <1>  push eax
    55 00000146 57                  <1>  push edi
    55                              <1> 
    55 00000147 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    55 0000014C B8[79180000]        <1>  mov eax, %2
    55                              <1> 
    55                              <1>  %if 3 == %0
    55                              <1>  mov [edi + 4], %3
    55                              <1>  %endif
    55                              <1> 
    55 00000151 668907              <1>  mov [edi + 0], ax
    55 00000154 C1E810              <1>  shr eax, 16
    55 00000157 66894706            <1>  mov [edi + 6], ax
    55                              <1> 
    55 0000015B 5F                  <1>  pop edi
    55 0000015C 58                  <1>  pop eax
    56                                                  set_vect    0x0E, int_pf                        ; define interrupt process; page fault
    56 0000015D 50                  <1>  push eax
    56 0000015E 57                  <1>  push edi
    56                              <1> 
    56 0000015F BF70001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    56 00000164 B8[200B0000]        <1>  mov eax, %2
    56                              <1> 
    56                              <1>  %if 3 == %0
    56                              <1>  mov [edi + 4], %3
    56                              <1>  %endif
    56                              <1> 
    56 00000169 668907              <1>  mov [edi + 0], ax
    56 0000016C C1E810              <1>  shr eax, 16
    56 0000016F 66894706            <1>  mov [edi + 6], ax
    56                              <1> 
    56 00000173 5F                  <1>  pop edi
    56 00000174 58                  <1>  pop eax
    57                                                  set_vect    0x20, int_timer                     ; define interrupt process: Timer
    57 00000175 50                  <1>  push eax
    57 00000176 57                  <1>  push edi
    57                              <1> 
    57 00000177 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    57 0000017C B8[9B0A0000]        <1>  mov eax, %2
    57                              <1> 
    57                              <1>  %if 3 == %0
    57                              <1>  mov [edi + 4], %3
    57                              <1>  %endif
    57                              <1> 
    57 00000181 668907              <1>  mov [edi + 0], ax
    57 00000184 C1E810              <1>  shr eax, 16
    57 00000187 66894706            <1>  mov [edi + 6], ax
    57                              <1> 
    57 0000018B 5F                  <1>  pop edi
    57 0000018C 58                  <1>  pop eax
    58                                                  set_vect    0x21, int_keyboard                  ; define interrupt process: KBC
    58 0000018D 50                  <1>  push eax
    58 0000018E 57                  <1>  push edi
    58                              <1> 
    58 0000018F BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    58 00000194 B8[9C160000]        <1>  mov eax, %2
    58                              <1> 
    58                              <1>  %if 3 == %0
    58                              <1>  mov [edi + 4], %3
    58                              <1>  %endif
    58                              <1> 
    58 00000199 668907              <1>  mov [edi + 0], ax
    58 0000019C C1E810              <1>  shr eax, 16
    58 0000019F 66894706            <1>  mov [edi + 6], ax
    58                              <1> 
    58 000001A3 5F                  <1>  pop edi
    58 000001A4 58                  <1>  pop eax
    59                                                  set_vect    0x28, int_rtc                       ; define interrupt process: RTC
    59 000001A5 50                  <1>  push eax
    59 000001A6 57                  <1>  push edi
    59                              <1> 
    59 000001A7 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    59 000001AC B8[5F160000]        <1>  mov eax, %2
    59                              <1> 
    59                              <1>  %if 3 == %0
    59                              <1>  mov [edi + 4], %3
    59                              <1>  %endif
    59                              <1> 
    59 000001B1 668907              <1>  mov [edi + 0], ax
    59 000001B4 C1E810              <1>  shr eax, 16
    59 000001B7 66894706            <1>  mov [edi + 6], ax
    59                              <1> 
    59 000001BB 5F                  <1>  pop edi
    59 000001BC 58                  <1>  pop eax
    60                                                  set_vect    0x81, trap_gate_81, word 0xEF00     ; define trap gate        : display a char
    60 000001BD 50                  <1>  push eax
    60 000001BE 57                  <1>  push edi
    60                              <1> 
    60 000001BF BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    60 000001C4 B8[0C180000]        <1>  mov eax, %2
    60                              <1> 
    60                              <1>  %if 3 == %0
    60 000001C9 66C7470400EF        <1>  mov [edi + 4], %3
    60                              <1>  %endif
    60                              <1> 
    60 000001CF 668907              <1>  mov [edi + 0], ax
    60 000001D2 C1E810              <1>  shr eax, 16
    60 000001D5 66894706            <1>  mov [edi + 6], ax
    60                              <1> 
    60 000001D9 5F                  <1>  pop edi
    60 000001DA 58                  <1>  pop eax
    61                                                  set_vect    0x82, trap_gate_82, word 0xEF00     ; define trap gate        : draw pixel
    61 000001DB 50                  <1>  push eax
    61 000001DC 57                  <1>  push edi
    61                              <1> 
    61 000001DD BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    61 000001E2 B8[1A180000]        <1>  mov eax, %2
    61                              <1> 
    61                              <1>  %if 3 == %0
    61 000001E7 66C7470400EF        <1>  mov [edi + 4], %3
    61                              <1>  %endif
    61                              <1> 
    61 000001ED 668907              <1>  mov [edi + 0], ax
    61 000001F0 C1E810              <1>  shr eax, 16
    61 000001F3 66894706            <1>  mov [edi + 6], ax
    61                              <1> 
    61 000001F7 5F                  <1>  pop edi
    61 000001F8 58                  <1>  pop eax
    62                                  
    63                                                  ; permit interrupt by device
    64                                                  cdecl   rtc_int_en, 0x10                        ; Updata-Ended Interrupt Enable
    64                              <1> 
    64                              <1>  %rep %0 - 1
    64                              <1>  push %-1:-1
    64                              <1>  %rotate -1
    64                              <1>  %endrep
    64 000001F9 6A10                <2>  push %-1:-1
    64                              <2>  %rotate -1
    64                              <1>  %rotate -1
    64                              <1> 
    64 000001FB E888140000          <1>  call %1
    64                              <1> 
    64                              <1>  %if 1 < %0
    64 00000200 6683C404            <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    64                              <1>  %endif
    64                              <1> 
    65                                                  cdecl   int_en_timer0
    65                              <1> 
    65                              <1>  %rep %0 - 1
    65                              <1>  push %-1:-1
    65                              <1>  %rotate -1
    65                              <1>  %endrep
    65                              <1>  %rotate -1
    65                              <1> 
    65 00000204 E889150000          <1>  call %1
    65                              <1> 
    65                              <1>  %if 1 < %0
    65                              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    65                              <1>  %endif
    65                              <1> 
    66                                  
    67                                                  ; set up IMR(Interrupt Mask Register)
    68                                                  outp    0x21, 0b1111_1000                       ; interrupt enable: slave PIC/KBC/Timer     // master
    68 00000209 B0F8                <1>  mov al, %2
    68 0000020B E621                <1>  out %1, al
    69                                                  outp    0xA1, 0b1111_1110                       ; interrupt enable: RTC                     // slave
    69 0000020D B0FE                <1>  mov al, %2
    69 0000020F E6A1                <1>  out %1, al
    70                                  
    71                                                  ; register page table
    72 00000211 B800501000                              mov     eax, CR3_BASE
    73 00000216 0F22D8                                  mov     cr3, eax
    74                                  
    75                                                  ; enable paging
    76 00000219 0F20C0                                  mov     eax, cr0
    77 0000021C 0D00000080                              or      eax, (1 << 31)                          ; CR0 |= PG
    78 00000221 0F22C0                                  mov     cr0, eax
    79 00000224 EB00                                    jmp     $ + 2                                   ; FLUSH()
    80                                  
    81                                                  ; CPU interrupt enable
    82 00000226 FB                                      sti
    83                                  
    84                                                  ; display font and color_bar
    85                                                  cdecl   draw_font, 63, 13
    85                              <1> 
    85                              <1>  %rep %0 - 1
    85                              <1>  push %-1:-1
    85                              <1>  %rotate -1
    85                              <1>  %endrep
    85 00000227 6A0D                <2>  push %-1:-1
    85                              <2>  %rotate -1
    85 00000229 6A3F                <2>  push %-1:-1
    85                              <2>  %rotate -1
    85                              <1>  %rotate -1
    85                              <1> 
    85 0000022B E8400E0000          <1>  call %1
    85                              <1> 
    85                              <1>  %if 1 < %0
    85 00000230 6683C408            <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    85                              <1>  %endif
    85                              <1> 
    86                                                  cdecl   draw_color_bar, 63, 4
    86                              <1> 
    86                              <1>  %rep %0 - 1
    86                              <1>  push %-1:-1
    86                              <1>  %rotate -1
    86                              <1>  %endrep
    86 00000234 6A04                <2>  push %-1:-1
    86                              <2>  %rotate -1
    86 00000236 6A3F                <2>  push %-1:-1
    86                              <2>  %rotate -1
    86                              <1>  %rotate -1
    86                              <1> 
    86 00000238 E8B80E0000          <1>  call %1
    86                              <1> 
    86                              <1>  %if 1 < %0
    86 0000023D 6683C408            <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    86                              <1>  %endif
    86                              <1> 
    87                                  
    88                                                  ; display string
    89                                                  cdecl   draw_str, 25, 14, 0x010F, .s0
    89                              <1> 
    89                              <1>  %rep %0 - 1
    89                              <1>  push %-1:-1
    89                              <1>  %rotate -1
    89                              <1>  %endrep
    89 00000241 68[DE020000]        <2>  push %-1:-1
    89                              <2>  %rotate -1
    89 00000246 680F010000          <2>  push %-1:-1
    89                              <2>  %rotate -1
    89 0000024B 6A0E                <2>  push %-1:-1
    89                              <2>  %rotate -1
    89 0000024D 6A19                <2>  push %-1:-1
    89                              <2>  %rotate -1
    89                              <1>  %rotate -1
    89                              <1> 
    89 0000024F E8610E0000          <1>  call %1
    89                              <1> 
    89                              <1>  %if 1 < %0
    89 00000254 6683C410            <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
    89                              <1>  %endif
    89                              <1> 
    90                                  
    91                                  ;---------------------------------------------------------------------------
    92                                  ; default multitask
    93                                  ;---------------------------------------------------------------------------
    94                                  
    95                                  
    96                                  ;                 ; call Task
    97                                  ;                 ; call    SS_TASK_1:0
    98                                  
    99                                  ; .10L:
   100                                  
   101                                  ;                 ; display time
   102                                  ;                 mov     eax, [RTC_TIME]
   103                                  ;                 cdecl   draw_time, 72, 0, 0x0700, eax
   104                                  
   105                                  
   106                                  ;                 ; get key code
   107                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   108                                  ;                 cmp     eax, 0
   109                                  ;                 je      .10E
   110                                  
   111                                  ;                 ; display key code
   112                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   113                                  ; .10E:
   114                                  
   115                                  ;                 ; draw rotation bar
   116                                  ;                 cdecl   draw_rotation_bar
   117                                  
   118                                  ;                 jmp     .10L
   119                                  
   120                                  ;----------------------------------------------------------------------------
   121                                  
   122                                  
   123                                  ;----------------------------------------------------------------------------
   124                                  ; non-preemptive multitask
   125                                  ;----------------------------------------------------------------------------
   126                                  
   127                                  ; .10L:
   128                                  
   129                                  ;                 ; call task
   130                                  ;                 jmp     SS_TASK_1:0                             ; jump to Task1
   131                                  
   132                                  ;                 ; draw rotation bar
   133                                  ;                 cdecl   draw_rotation_bar
   134                                  
   135                                  ;                 ; get key code
   136                                  ;                 cdecl   ring_rd, _KEY_BUFF, .int_key
   137                                  ;                 cmp     eax, 0
   138                                  ;                 je      .10E
   139                                  
   140                                  ;                 ; display key code
   141                                  ;                 cdecl   draw_key, 2, 29, _KEY_BUFF
   142                                  ; .10E:
   143                                  
   144                                  ;                 jmp     .10L
   145                                  
   146                                  ;-----------------------------------------------------------------------------
   147                                  
   148                                  ;----------------------------------------------------------------------------
   149                                  ; preemptive multitask
   150                                  ;----------------------------------------------------------------------------
   151                                  
   152                                  .10L:
   153                                  
   154                                                  ; draw rotation bar
   155                                                  cdecl   draw_rotation_bar
   155                              <1> 
   155                              <1>  %rep %0 - 1
   155                              <1>  push %-1:-1
   155                              <1>  %rotate -1
   155                              <1>  %endrep
   155                              <1>  %rotate -1
   155                              <1> 
   155 00000258 E844150000          <1>  call %1
   155                              <1> 
   155                              <1>  %if 1 < %0
   155                              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
   155                              <1>  %endif
   155                              <1> 
   156                                  
   157                                                  ; get key code
   158                                                  cdecl   ring_rd, _KEY_BUFF, .int_key
   158                              <1> 
   158                              <1>  %rep %0 - 1
   158                              <1>  push %-1:-1
   158                              <1>  %rotate -1
   158                              <1>  %endrep
   158 0000025D 68[F0020000]        <2>  push %-1:-1
   158                              <2>  %rotate -1
   158 00000262 68[C0160000]        <2>  push %-1:-1
   158                              <2>  %rotate -1
   158                              <1>  %rotate -1
   158                              <1> 
   158 00000267 E86C140000          <1>  call %1
   158                              <1> 
   158                              <1>  %if 1 < %0
   158 0000026C 6683C408            <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
   158                              <1>  %endif
   158                              <1> 
   159 00000270 83F800                                  cmp     eax, 0
   160 00000273 7464                                    je      .10E
   161                                  
   162                                                  ; display key code
   163                                                  cdecl   draw_key, 2, 29, _KEY_BUFF
   163                              <1> 
   163                              <1>  %rep %0 - 1
   163                              <1>  push %-1:-1
   163                              <1>  %rotate -1
   163                              <1>  %endrep
   163 00000275 68[C0160000]        <2>  push %-1:-1
   163                              <2>  %rotate -1
   163 0000027A 6A1D                <2>  push %-1:-1
   163                              <2>  %rotate -1
   163 0000027C 6A02                <2>  push %-1:-1
   163                              <2>  %rotate -1
   163                              <1>  %rotate -1
   163                              <1> 
   163 0000027E E8BC140000          <1>  call %1
   163                              <1> 
   163                              <1>  %if 1 < %0
   163 00000283 6683C40C            <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
   163                              <1>  %endif
   163                              <1> 
   164                                  
   165                                                  ; the process when the exact key is pressed
   166 00000287 A0[F0020000]                            mov     al, [.int_key]
   167 0000028C 3C02                                    cmp     al, 0x02                            ; key[0x02] == '1'
   168 0000028E 7522                                    jne     .12E
   169                                  
   170                                                  ; read file
   171 00000290 FF15F09B0000                            call    [BOOT_LOAD + BOOT_SIZE - 16]        ; read mode transition file
   172                                  
   173                                                  ; display contents of file
   174 00000296 BE00780000                              mov     esi, 0x7800                         ; ESI = read dest address
   175 0000029B C6462000                                mov     [esi + 32], byte 0
   176                                                  cdecl   draw_str, 0, 0, 0x0F04, esi
   176                              <1> 
   176                              <1>  %rep %0 - 1
   176                              <1>  push %-1:-1
   176                              <1>  %rotate -1
   176                              <1>  %endrep
   176 0000029F 56                  <2>  push %-1:-1
   176                              <2>  %rotate -1
   176 000002A0 68040F0000          <2>  push %-1:-1
   176                              <2>  %rotate -1
   176 000002A5 6A00                <2>  push %-1:-1
   176                              <2>  %rotate -1
   176 000002A7 6A00                <2>  push %-1:-1
   176                              <2>  %rotate -1
   176                              <1>  %rotate -1
   176                              <1> 
   176 000002A9 E8070E0000          <1>  call %1
   176                              <1> 
   176                              <1>  %if 1 < %0
   176 000002AE 6683C410            <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
   176                              <1>  %endif
   176                              <1> 
   177                                  .12E:
   178                                  
   179                                                  ; CTRL + ALt + END
   180 000002B2 A0[F0020000]                            mov     al, [.int_key]                      ; // key code
   181                                                  cdecl   ctrl_alt_end, eax
   181                              <1> 
   181                              <1>  %rep %0 - 1
   181                              <1>  push %-1:-1
   181                              <1>  %rotate -1
   181                              <1>  %endrep
   181 000002B7 50                  <2>  push %-1:-1
   181                              <2>  %rotate -1
   181                              <1>  %rotate -1
   181                              <1> 
   181 000002B8 E84E160000          <1>  call %1
   181                              <1> 
   181                              <1>  %if 1 < %0
   181 000002BD 6683C404            <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
   181                              <1>  %endif
   181                              <1> 
   182 000002C1 83F800                                  cmp     eax, 0
   183 000002C4 7413                                    je      .14E                                ; if (eax == 0) => failure
   184                                  
   185 000002C6 B800000000                              mov     eax, 0                              ; do POWER_OFF process only once
   186 000002CB 0FAB05[F4020000]                        bts     [.once], eax                        ; if (0 == bts(.once))
   187 000002D2 7205                                    jc      .14E                                ; {
   188                                                  cdecl   power_off                           ;   power_off();
   188                              <1> 
   188                              <1>  %rep %0 - 1
   188                              <1>  push %-1:-1
   188                              <1>  %rotate -1
   188                              <1>  %endrep
   188                              <1>  %rotate -1
   188                              <1> 
   188 000002D4 E8A4160000          <1>  call %1
   188                              <1> 
   188                              <1>  %if 1 < %0
   188                              <1>  add sp, (__BITS__ >> 3) * (%0 - 1)
   188                              <1>  %endif
   188                              <1> 
   189                                                                                              ; }
   190                                  .14E:
   191                                  
   192                                  .10E:
   193                                  
   194 000002D9 E97AFFFFFF                              jmp     .10L
   195                                  
   196                                  ;-----------------------------------------------------------------------------
   197                                  
   198                                  ;data
   199 000002DE 2048656C6C6F2C206B-     .s0:    db  " Hello, kernel! ", 0
   199 000002E7 65726E656C212000   
   200                                  
   201 000002EF 00                      ALIGN 4, db 0
   202 000002F0 00000000                .int_key:   dd 0
   203 000002F4 00000000                .once:      dd 0
   204                                  
   205                                  ALIGN 4, db 0
   206 000002F8 00000000                FONT_ADR:   dd 0
   207 000002FC 00000000                RTC_TIME:   dd 0
   208                                  
   209                                  
   210                                  ; TASKS
   211                                  %include    "descriptor.s"
     1                              <1> ;-----------------------------------------------------------------------
     2                              <1> ; TSS
     3                              <1> ;-----------------------------------------------------------------------
     4                              <1> 
     5                              <1> TSS_0:
     6 00000300 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
     7 00000304 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                             ;*  4: ESP0
     8 00000308 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
     9 0000030C 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    10 00000310 00000000            <1> .ss1:           dd  0                                           ;* 16:
    11 00000314 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    12 00000318 00000000            <1> .ss2:           dd  0                                           ;* 24:
    13 0000031C 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    14 00000320 00000000            <1> .eip:           dd  0                                           ;  32: EIP
    15 00000324 00000000            <1> .eflags:        dd  0                                           ;  36: EFLAGS
    16 00000328 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    17 0000032C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    18 00000330 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    19 00000334 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    20 00000338 00000000            <1> .esp:           dd  0                                           ;  56: ESP
    21 0000033C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    22 00000340 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    23 00000344 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    24 00000348 00000000            <1> .es:            dd  0                                           ;  72: ES
    25 0000034C 00000000            <1> .cs:            dd  0                                           ;  76: CS
    26 00000350 00000000            <1> .ss:            dd  0                                           ;  80: SS
    27 00000354 00000000            <1> .ds:            dd  0                                           ;  84: DS
    28 00000358 00000000            <1> .fs:            dd  0                                           ;  88: FS
    29 0000035C 00000000            <1> .gs:            dd  0                                           ;  92: GS
    30 00000360 00000000            <1> .ldt:           dd  0                                           ;* 96: LDT segment selector
    31 00000364 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    32 00000368 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    33                              <1> 
    34                              <1> TSS_1:
    35 000003D8 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    36 000003DC 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                             ;*  4: ESP0
    37 000003E0 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    38 000003E4 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    39 000003E8 00000000            <1> .ss1:           dd  0                                           ;* 16:
    40 000003EC 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    41 000003F0 00000000            <1> .ss2:           dd  0                                           ;* 24:
    42 000003F4 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    43 000003F8 [8E0B0000]          <1> .eip:           dd  task_1                                      ;  32: EIP
    44 000003FC 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    45 00000400 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    46 00000404 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    47 00000408 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    48 0000040C 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    49 00000410 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56: ESP
    50 00000414 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    51 00000418 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    52 0000041C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    53 00000420 27000000            <1> .es:            dd  DS_TASK_1                                   ;  72: ES
    54 00000424 1F000000            <1> .cs:            dd  CS_TASK_1                                   ;  76: CS
    55 00000428 27000000            <1> .ss:            dd  DS_TASK_1                                   ;  80: SS
    56 0000042C 27000000            <1> .ds:            dd  DS_TASK_1                                   ;  84: DS
    57 00000430 27000000            <1> .fs:            dd  DS_TASK_1                                   ;  88: FS
    58 00000434 27000000            <1> .gs:            dd  DS_TASK_1                                   ;  92: GS
    59 00000438 28000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    60 0000043C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    61 00000440 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    62                              <1> 
    63                              <1> 
    64                              <1> TSS_2:
    65 000004B0 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    66 000004B4 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                             ;*  4: ESP0
    67 000004B8 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    68 000004BC 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    69 000004C0 00000000            <1> .ss1:           dd  0                                           ;* 16:
    70 000004C4 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
    71 000004C8 00000000            <1> .ss2:           dd  0                                           ;* 24:
    72 000004CC 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
    73 000004D0 [C30B0000]          <1> .eip:           dd  task_2                                      ;  32: EIP
    74 000004D4 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
    75 000004D8 00000000            <1> .eax:           dd  0                                           ;  40: EAX
    76 000004DC 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
    77 000004E0 00000000            <1> .edx:           dd  0                                           ;  48: EDX
    78 000004E4 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
    79 000004E8 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56: ESP
    80 000004EC 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
    81 000004F0 00000000            <1> .esi:           dd  0                                           ;  64: ESI
    82 000004F4 00000000            <1> .edi:           dd  0                                           ;  68: EDI
    83 000004F8 37000000            <1> .es:            dd  DS_TASK_2                                   ;  72: ES
    84 000004FC 2F000000            <1> .cs:            dd  CS_TASK_2                                   ;  76: CS
    85 00000500 37000000            <1> .ss:            dd  DS_TASK_2                                   ;  80: SS
    86 00000504 37000000            <1> .ds:            dd  DS_TASK_2                                   ;  84: DS
    87 00000508 37000000            <1> .fs:            dd  DS_TASK_2                                   ;  88: FS
    88 0000050C 37000000            <1> .gs:            dd  DS_TASK_2                                   ;  92: GS
    89 00000510 28000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
    90 00000514 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
    91 00000518 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
    92                              <1> 
    93                              <1> TSS_3:
    94 00000588 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
    95 0000058C 003E1000            <1> .esp0:          dd  SP_TASK_3 - 512                             ;*  4: ESP0
    96 00000590 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
    97 00000594 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
    98 00000598 00000000            <1> .ss1:           dd  0                                           ;* 16:
    99 0000059C 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   100 000005A0 00000000            <1> .ss2:           dd  0                                           ;* 24:
   101 000005A4 00501000            <1> .cr3:           dd  CR3_BASE                                    ;  28: CR3(PDBR)
   102 000005A8 [940C0000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   103 000005AC 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   104 000005B0 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   105 000005B4 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   106 000005B8 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   107 000005BC 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   108 000005C0 00401000            <1> .esp:           dd  SP_TASK_3                                           ;  56: ESP
   109 000005C4 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   110 000005C8 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   111 000005CC 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   112 000005D0 47000000            <1> .es:            dd  DS_TASK_3                                   ;  72: ES
   113 000005D4 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   114 000005D8 47000000            <1> .ss:            dd  DS_TASK_3                                   ;  80: SS
   115 000005DC 47000000            <1> .ds:            dd  DS_TASK_3                                   ;  84: DS
   116 000005E0 47000000            <1> .fs:            dd  DS_TASK_3                                   ;  88: FS
   117 000005E4 47000000            <1> .gs:            dd  DS_TASK_3                                   ;  92: GS
   118 000005E8 28000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   119 000005EC 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   120 000005F0 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   121                              <1> 
   122                              <1> TSS_4:
   123 00000660 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
   124 00000664 00421000            <1> .esp0:          dd  SP_TASK_4 - 512                             ;*  4: ESP0
   125 00000668 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
   126 0000066C 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
   127 00000670 00000000            <1> .ss1:           dd  0                                           ;* 16:
   128 00000674 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   129 00000678 00000000            <1> .ss2:           dd  0                                           ;* 24:
   130 0000067C 00002000            <1> .cr3:           dd  CR3_TASK_4                                  ;  28: CR3(PDBR)
   131 00000680 [940C0000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   132 00000684 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   133 00000688 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   134 0000068C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   135 00000690 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   136 00000694 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   137 00000698 00441000            <1> .esp:           dd  SP_TASK_4                                   ;  56: ESP
   138 0000069C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   139 000006A0 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   140 000006A4 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   141 000006A8 4F000000            <1> .es:            dd  DS_TASK_4                                   ;  72: ES
   142 000006AC 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   143 000006B0 4F000000            <1> .ss:            dd  DS_TASK_4                                   ;  80: SS
   144 000006B4 4F000000            <1> .ds:            dd  DS_TASK_4                                   ;  84: DS
   145 000006B8 4F000000            <1> .fs:            dd  DS_TASK_4                                   ;  88: FS
   146 000006BC 4F000000            <1> .gs:            dd  DS_TASK_4                                   ;  92: GS
   147 000006C0 28000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   148 000006C4 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   149 000006C8 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   150                              <1> 
   151                              <1> TSS_5:
   152 00000738 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
   153 0000073C 00461000            <1> .esp0:          dd  SP_TASK_5 - 512                             ;*  4: ESP0
   154 00000740 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
   155 00000744 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
   156 00000748 00000000            <1> .ss1:           dd  0                                           ;* 16:
   157 0000074C 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   158 00000750 00000000            <1> .ss2:           dd  0                                           ;* 24:
   159 00000754 00202000            <1> .cr3:           dd  CR3_TASK_5                                  ;  28: CR3(PDBR)
   160 00000758 [940C0000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   161 0000075C 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   162 00000760 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   163 00000764 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   164 00000768 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   165 0000076C 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   166 00000770 00481000            <1> .esp:           dd  SP_TASK_5                                           ;  56: ESP
   167 00000774 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   168 00000778 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   169 0000077C 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   170 00000780 57000000            <1> .es:            dd  DS_TASK_5                                   ;  72: ES
   171 00000784 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   172 00000788 57000000            <1> .ss:            dd  DS_TASK_5                                   ;  80: SS
   173 0000078C 57000000            <1> .ds:            dd  DS_TASK_5                                   ;  84: DS
   174 00000790 57000000            <1> .fs:            dd  DS_TASK_5                                   ;  88: FS
   175 00000794 57000000            <1> .gs:            dd  DS_TASK_5                                   ;  92: GS
   176 00000798 28000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   177 0000079C 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   178 000007A0 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   179                              <1> 
   180                              <1> TSS_6:
   181 00000810 00000000            <1> .link:          dd  0                                           ;   0: link to previous task
   182 00000814 004A1000            <1> .esp0:          dd  SP_TASK_6 - 512                             ;*  4: ESP0
   183 00000818 10000000            <1> .ss0:           dd  DS_KERNEL                                   ;*  8:
   184 0000081C 00000000            <1> .esp1:          dd  0                                           ;* 12: ESP1
   185 00000820 00000000            <1> .ss1:           dd  0                                           ;* 16:
   186 00000824 00000000            <1> .esp2:          dd  0                                           ;* 20: ESP2
   187 00000828 00000000            <1> .ss2:           dd  0                                           ;* 24:
   188 0000082C 00402000            <1> .cr3:           dd  CR3_TASK_6                                  ;  28: CR3(PDBR)
   189 00000830 [940C0000]          <1> .eip:           dd  task_3                                      ;  32: EIP
   190 00000834 02020000            <1> .eflags:        dd  0x0202                                      ;  36: EFLAGS
   191 00000838 00000000            <1> .eax:           dd  0                                           ;  40: EAX
   192 0000083C 00000000            <1> .ecx:           dd  0                                           ;  44: ECX
   193 00000840 00000000            <1> .edx:           dd  0                                           ;  48: EDX
   194 00000844 00000000            <1> .ebx:           dd  0                                           ;  52: EBX
   195 00000848 004C1000            <1> .esp:           dd  SP_TASK_6                                           ;  56: ESP
   196 0000084C 00000000            <1> .ebp:           dd  0                                           ;  60: EBP
   197 00000850 00000000            <1> .esi:           dd  0                                           ;  64: ESI
   198 00000854 00000000            <1> .edi:           dd  0                                           ;  68: EDI
   199 00000858 5F000000            <1> .es:            dd  DS_TASK_6                                   ;  72: ES
   200 0000085C 3F000000            <1> .cs:            dd  CS_TASK_3                                   ;  76: CS
   201 00000860 5F000000            <1> .ss:            dd  DS_TASK_6                                   ;  80: SS
   202 00000864 5F000000            <1> .ds:            dd  DS_TASK_6                                   ;  84: DS
   203 00000868 5F000000            <1> .fs:            dd  DS_TASK_6                                   ;  88: FS
   204 0000086C 5F000000            <1> .gs:            dd  DS_TASK_6                                   ;  92: GS
   205 00000870 28000000            <1> .ldt:           dd  SS_LDT                                      ;* 96: LDT segment selector
   206 00000874 00000000            <1> .io:            dd  0                                           ; 100: I/O map base address
   207 00000878 00<rept>            <1> .fp_save:       times 108 + 4 db 0                              ; save space for FPU context
   208                              <1> 
   209                              <1> ;-----------------------------------------------------------------------------------------------
   210                              <1> ; GDT
   211                              <1> ;-----------------------------------------------------------------------------------------------
   212                              <1> 
   213 000008E8 0000000000000000    <1> GDT:            dq  0x0000000000000000
   214 000008F0 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   215 000008F8 FFFF00000092CF00    <1> .ds_kernel:     dq  0x00CF92000000FFFF                          ; DATA 4G
   216 00000900 FFFF0000009A0F00    <1> .cs_bit16:      dq  0x000F9A000000FFFF                          ; code segment(16 bit segment) // offset:0x18
   217 00000908 FFFF000000920F00    <1> .ds_bit16:      dq  0x000F92000000FFFF                          ; data segment(16 bit segment) // offset:0x20
   218 00000910 0000000000820000    <1> .ldt            dq  0x0000820000000000                          ; LDT descriptor
   219 00000918 6700000000890000    <1> .tss_0:         dq  0x0000890000000067                          ; TSS descriptor
   220 00000920 6700000000890000    <1> .tss_1:         dq  0x0000890000000067                          ; TSS descriptor
   221 00000928 6700000000890000    <1> .tss_2:         dq  0x0000890000000067                          ; TSS descriptor
   222 00000930 6700000000890000    <1> .tss_3:         dq  0x0000890000000067                          ; TSS descriptor
   223 00000938 6700000000890000    <1> .tss_4:         dq  0x0000890000000067                          ; TSS descriptor
   224 00000940 6700000000890000    <1> .tss_5:         dq  0x0000890000000067                          ; TSS descriptor
   225 00000948 6700000000890000    <1> .tss_6:         dq  0x0000890000000067                          ; TSS descriptor
   226 00000950 0000080004EC0000    <1> .call_gate:     dq  0x0000EC0400080000                          ; 386 call gate(DPL=3, count=4, SEL=8)
   227                              <1> .end:
   228                              <1> 
   229                              <1> CS_KERNEL       equ .cs_kernel - GDT
   230                              <1> DS_KERNEL       equ .ds_kernel - GDT
   231                              <1> SS_LDT          equ .ldt       - GDT
   232                              <1> SS_TASK_0       equ .tss_0     - GDT
   233                              <1> SS_TASK_1       equ .tss_1     - GDT
   234                              <1> SS_TASK_2       equ .tss_2     - GDT
   235                              <1> SS_TASK_3       equ .tss_3     - GDT
   236                              <1> SS_TASK_4       equ .tss_4     - GDT
   237                              <1> SS_TASK_5       equ .tss_5     - GDT
   238                              <1> SS_TASK_6       equ .tss_6     - GDT
   239                              <1> SS_GATE_0       equ .call_gate - GDT
   240                              <1> 
   241 00000958 6F00                <1> GDTR:   dw      GDT.end - GDT - 1
   242 0000095A [E8080000]          <1>         dd      GDT
   243                              <1> 
   244                              <1> ;-----------------------------------------------------------------------------------------------
   245                              <1> ; LDT
   246                              <1> ;-----------------------------------------------------------------------------------------------
   247                              <1> 
   248 0000095E 0000000000000000    <1> LDT:            dq  0x0000000000000000                          ; NULL
   249 00000966 FFFF0000009ACF00    <1> .cs_task_0:     dq  0x00CF9A000000FFFF                          ; CODE 4G
   250 0000096E FFFF00000092CF00    <1> .ds_task_0:     dq  0x00CF92000000FFFF                          ; DATA 4G
   251 00000976 FFFF000000FACF00    <1> .cs_task_1:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   252 0000097E FFFF000000F2CF00    <1> .ds_task_1:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   253 00000986 FFFF000000FACF00    <1> .cs_task_2:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   254 0000098E FFFF000000F2CF00    <1> .ds_task_2:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   255 00000996 FFFF000000FACF00    <1> .cs_task_3:     dq  0x00CFFA000000FFFF                          ; CODE 4G
   256 0000099E FFFF000000F2CF00    <1> .ds_task_3:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   257 000009A6 FFFF000000F2CF00    <1> .ds_task_4:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   258 000009AE FFFF000000F2CF00    <1> .ds_task_5:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   259 000009B6 FFFF000000F2CF00    <1> .ds_task_6:     dq  0x00CFF2000000FFFF                          ; DATA 4G
   260                              <1> .end:
   261                              <1> 
   262                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                      ; cs selector for task0 // set bit 2(TI)
   263                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                      ; ds selector for task0 // Priviledge level 0
   264                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                  ; cs selector for task1 // Priviledge level 3
   265                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                  ; ds selector for task1
   266                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                  ; cs selector for task2 // Priviledge level 3
   267                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                  ; ds selector for task2
   268                              <1> CS_TASK_3       equ (.cs_task_3 - LDT) | 4 | 3                  ; cs selector for task3 // Priviledge level 3
   269                              <1> DS_TASK_3       equ (.ds_task_3 - LDT) | 4 | 3                  ; ds selector for task3
   270                              <1> DS_TASK_4       equ (.ds_task_4 - LDT) | 4 | 3                  ; ds selector for task4
   271                              <1> DS_TASK_5       equ (.ds_task_5 - LDT) | 4 | 3                  ; ds selector for task5
   272                              <1> DS_TASK_6       equ (.ds_task_6 - LDT) | 4 | 3                  ; ds selector for task6
   273                              <1> 
   274                              <1> LDT_LIMIT       equ .end        - LDT - 1
   212                                  %include    "modules/paging.s"
     1                              <1> init_page:
     2                              <1> 
     3                              <1>             ; save registers
     4 000009BE 60                  <1>             pusha
     5                              <1> 
     6                              <1>             ; make page conversion table
     7                              <1>             cdecl  page_set_4m, CR3_BASE                               ; make page conversion table : for task3
     7                              <2> 
     7                              <2>  %rep %0 - 1
     7                              <2>  push %-1:-1
     7                              <2>  %rotate -1
     7                              <2>  %endrep
     7 000009BF 6800501000          <3>  push %-1:-1
     7                              <3>  %rotate -1
     7                              <2>  %rotate -1
     7                              <2> 
     7 000009C4 E897000000          <2>  call %1
     7                              <2> 
     7                              <2>  %if 1 < %0
     7 000009C9 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
     7                              <2>  %endif
     7                              <2> 
     8                              <1>             cdecl  page_set_4m, CR3_TASK_4                             ; make page conversion table : for task4
     8                              <2> 
     8                              <2>  %rep %0 - 1
     8                              <2>  push %-1:-1
     8                              <2>  %rotate -1
     8                              <2>  %endrep
     8 000009CD 6800002000          <3>  push %-1:-1
     8                              <3>  %rotate -1
     8                              <2>  %rotate -1
     8                              <2> 
     8 000009D2 E889000000          <2>  call %1
     8                              <2> 
     8                              <2>  %if 1 < %0
     8 000009D7 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
     8                              <2>  %endif
     8                              <2> 
     9                              <1>             cdecl  page_set_4m, CR3_TASK_5                             ; make page conversion table : for task5
     9                              <2> 
     9                              <2>  %rep %0 - 1
     9                              <2>  push %-1:-1
     9                              <2>  %rotate -1
     9                              <2>  %endrep
     9 000009DB 6800202000          <3>  push %-1:-1
     9                              <3>  %rotate -1
     9                              <2>  %rotate -1
     9                              <2> 
     9 000009E0 E87B000000          <2>  call %1
     9                              <2> 
     9                              <2>  %if 1 < %0
     9 000009E5 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
     9                              <2>  %endif
     9                              <2> 
    10                              <1>             cdecl  page_set_4m, CR3_TASK_6                             ; make page conversion table : for task6
    10                              <2> 
    10                              <2>  %rep %0 - 1
    10                              <2>  push %-1:-1
    10                              <2>  %rotate -1
    10                              <2>  %endrep
    10 000009E9 6800402000          <3>  push %-1:-1
    10                              <3>  %rotate -1
    10                              <2>  %rotate -1
    10                              <2> 
    10 000009EE E86D000000          <2>  call %1
    10                              <2> 
    10                              <2>  %if 1 < %0
    10 000009F3 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    10                              <2>  %endif
    10                              <2> 
    11                              <1> 
    12                              <1>             ; set page table(absense)
    13 000009F7 C7051C641000000000- <1>             mov    [0x0010_6000 + 0x107 * 4], dword 0                  ; set 0x0010_7000 to the page not exist
    13 00000A00 00                  <1>
    14                              <1> 
    15                              <1>             ; set address conversion
    16 00000A01 C7051C142000078010- <1>             mov    [0x0020_1000 + 0x107 * 4], dword PARAM_TASK_4 + 7   ; address conversion : for task4
    16 00000A0A 00                  <1>
    17 00000A0B C7051C342000079010- <1>             mov    [0x0020_3000 + 0x107 * 4], dword PARAM_TASK_5 + 7   ; address conversion : for task5
    17 00000A14 00                  <1>
    18 00000A15 C7051C54200007A010- <1>             mov    [0x0020_5000 + 0x107 * 4], dword PARAM_TASK_6 + 7   ; address conversion : for task6
    18 00000A1E 00                  <1>
    19                              <1> 
    20                              <1>             ; set drawing params
    21                              <1>             cdecl   memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size      ; drawing params : for task4
    21                              <2> 
    21                              <2>  %rep %0 - 1
    21                              <2>  push %-1:-1
    21                              <2>  %rotate -1
    21                              <2>  %endrep
    21 00000A1F 6A40                <3>  push %-1:-1
    21                              <3>  %rotate -1
    21 00000A21 68[D40D0000]        <3>  push %-1:-1
    21                              <3>  %rotate -1
    21 00000A26 6800801000          <3>  push %-1:-1
    21                              <3>  %rotate -1
    21                              <2>  %rotate -1
    21                              <2> 
    21 00000A2B E8C20E0000          <2>  call %1
    21                              <2> 
    21                              <2>  %if 1 < %0
    21 00000A30 6683C40C            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    21                              <2>  %endif
    21                              <2> 
    22                              <1>             cdecl   memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size      ; drawing params : for task5
    22                              <2> 
    22                              <2>  %rep %0 - 1
    22                              <2>  push %-1:-1
    22                              <2>  %rotate -1
    22                              <2>  %endrep
    22 00000A34 6A40                <3>  push %-1:-1
    22                              <3>  %rotate -1
    22 00000A36 68[140E0000]        <3>  push %-1:-1
    22                              <3>  %rotate -1
    22 00000A3B 6800901000          <3>  push %-1:-1
    22                              <3>  %rotate -1
    22                              <2>  %rotate -1
    22                              <2> 
    22 00000A40 E8AD0E0000          <2>  call %1
    22                              <2> 
    22                              <2>  %if 1 < %0
    22 00000A45 6683C40C            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    22                              <2>  %endif
    22                              <2> 
    23                              <1>             cdecl   memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size      ; drawing params : for task6
    23                              <2> 
    23                              <2>  %rep %0 - 1
    23                              <2>  push %-1:-1
    23                              <2>  %rotate -1
    23                              <2>  %endrep
    23 00000A49 6A40                <3>  push %-1:-1
    23                              <3>  %rotate -1
    23 00000A4B 68[540E0000]        <3>  push %-1:-1
    23                              <3>  %rotate -1
    23 00000A50 6800A01000          <3>  push %-1:-1
    23                              <3>  %rotate -1
    23                              <2>  %rotate -1
    23                              <2> 
    23 00000A55 E8980E0000          <2>  call %1
    23                              <2> 
    23                              <2>  %if 1 < %0
    23 00000A5A 6683C40C            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    23                              <2>  %endif
    23                              <2> 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1>             ; return registers
    28 00000A5E 61                  <1>             popa
    29                              <1> 
    30 00000A5F C3                  <1>             ret
    31                              <1> 
    32                              <1> page_set_4m:
    33                              <1> 
    34                              <1>             ; construct stack frame
    35 00000A60 55                  <1>             push    ebp
    36 00000A61 89E5                <1>             mov     ebp, esp                                        ; EBP+8 | base address of page directory
    37                              <1> 
    38                              <1>             ; save registers
    39 00000A63 60                  <1>             pusha
    40                              <1> 
    41                              <1>             ; make page directory
    42 00000A64 FC                  <1>             cld
    43 00000A65 8B7D08              <1>             mov     edi, [ebp + 8]
    44 00000A68 B800000000          <1>             mov     eax, 0x00000000                                 ; // P = 0
    45 00000A6D B900040000          <1>             mov     ecx, 1024
    46 00000A72 F3AB                <1>             rep     stosd                                           ; while(ecx--) *edi++ = type
    47                              <1> 
    48                              <1>             ; set top entry
    49 00000A74 89F8                <1>             mov     eax, edi                                        ; EAX = right after the page directory = address of page table
    50 00000A76 2500F0FFFF          <1>             and     eax, ~0x0000_0FFF                               ; specifying the physical address
    51 00000A7B 83C807              <1>             or      eax, 7                                          ; permit R/W
    52 00000A7E 898700F0FFFF        <1>             mov     [edi - (1024 * 4)], eax                         ; set top entry of page directory
    53                              <1> 
    54                              <1>             ; set page table
    55 00000A84 B807000000          <1>             mov     eax, 0x00000007                                ; specifying physical address and permit R/W
    56 00000A89 B900040000          <1>             mov     ecx, 1024
    57                              <1> 
    58                              <1> .10L:
    59 00000A8E AB                  <1>             stosd
    60 00000A8F 0500100000          <1>             add     eax, 0x00001000
    61 00000A94 E2F8                <1>             loop    .10L
    62                              <1> 
    63                              <1>             ; return registers
    64 00000A96 61                  <1>             popa
    65                              <1> 
    66                              <1>             ; desctruct stack frame
    67 00000A97 89EC                <1>             mov     esp, ebp
    68 00000A99 5D                  <1>             pop     ebp
    69                              <1> 
    70 00000A9A C3                  <1>             ret
   213                                  %include    "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1> 
     3                              <1>             ; save registers
     4 00000A9B 60                  <1>             pusha
     5 00000A9C 1E                  <1>             push    ds
     6 00000A9D 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00000A9E 66B81000            <1>             mov     ax, 0x0010
    10 00000AA2 8ED8                <1>             mov     ds, ax
    11 00000AA4 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; TICK
    14 00000AA6 FF05[1C0B0000]      <1>             inc     dword [TIMER_COUNT]                                     ; TIMER_COUNT++ //update interrupt count
    15                              <1> 
    16                              <1>             ; clear interrupt flag(EOI)
    17                              <1>             outp    0x20, 0x20                                              ; master PIC:EOI command
    17 00000AAC B020                <2>  mov al, %2
    17 00000AAE E620                <2>  out %1, al
    18                              <1> 
    19                              <1>             ; exchange Task
    20 00000AB0 660F00C8            <1>             str     ax                                                      ; AX = TR // current Task Register
    21 00000AB4 6683F830            <1>             cmp     ax, SS_TASK_0
    22 00000AB8 7427                <1>             je      .11L
    23 00000ABA 6683F838            <1>             cmp     ax, SS_TASK_1
    24 00000ABE 742A                <1>             je      .12L
    25 00000AC0 6683F840            <1>             cmp     ax, SS_TASK_2
    26 00000AC4 742D                <1>             je      .13L
    27 00000AC6 6683F848            <1>             cmp     ax, SS_TASK_3
    28 00000ACA 7430                <1>             je      .14L
    29 00000ACC 6683F850            <1>             cmp     ax, SS_TASK_4
    30 00000AD0 7433                <1>             je      .15L
    31 00000AD2 6683F858            <1>             cmp     ax, SS_TASK_5
    32 00000AD6 7436                <1>             je      .16L
    33                              <1> 
    34 00000AD8 EA000000003000      <1>             jmp     SS_TASK_0:0
    35 00000ADF EB36                <1>             jmp     .10E
    36                              <1> .11L:
    37 00000AE1 EA000000003800      <1>             jmp     SS_TASK_1:0
    38 00000AE8 EB2D                <1>             jmp     .10E
    39                              <1> .12L:
    40 00000AEA EA000000004000      <1>             jmp     SS_TASK_2:0
    41 00000AF1 EB24                <1>             jmp     .10E
    42                              <1> .13L:
    43 00000AF3 EA000000004800      <1>             jmp     SS_TASK_3:0
    44 00000AFA EB1B                <1>             jmp     .10E
    45                              <1> .14L:
    46 00000AFC EA000000005000      <1>             jmp     SS_TASK_4:0
    47 00000B03 EB12                <1>             jmp     .10E
    48                              <1> .15L:
    49 00000B05 EA000000005800      <1>             jmp     SS_TASK_5:0
    50 00000B0C EB09                <1>             jmp     .10E
    51                              <1> .16L:
    52 00000B0E EA000000006000      <1>             jmp     SS_TASK_6:0
    53 00000B15 EB00                <1>             jmp     .10E
    54                              <1> .10E:
    55                              <1> 
    56                              <1>             ; return registers
    57 00000B17 07                  <1>             pop     es
    58 00000B18 1F                  <1>             pop     ds
    59 00000B19 61                  <1>             popa
    60                              <1> 
    61 00000B1A CF                  <1>             iret
    62                              <1> 
    63 00000B1B 00                  <1> ALIGN 4, db 0
    64 00000B1C 00000000            <1> TIMER_COUNT:    dd 0
   214                                  %include    "modules/int_pf.s"
     1                              <1> int_pf:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000B20 55                  <1>             push    ebp
     5 00000B21 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 00000B23 60                  <1>             pusha
     9 00000B24 1E                  <1>             push    ds
    10 00000B25 06                  <1>             push    es
    11                              <1> 
    12 00000B26 66B81000            <1>             mov     ax, 0x0010
    13 00000B2A 8ED8                <1>             mov     ds, ax
    14 00000B2C 8EC0                <1>             mov     es, ax
    15                              <1> 
    16                              <1>             ; confirm the address of what raised exception
    17 00000B2E 0F20D0              <1>             mov     eax, cr2
    18 00000B31 2500F0FFFF          <1>             and     eax, ~0xFFF                                     ; access within 4K bytes
    19 00000B36 3D00701000          <1>             cmp     eax, 0x0010_7000                                ; if (0x0010_7000 == ptr) => page activation process
    20 00000B3B 7521                <1>             jne     .10F                                            ; if (0x0010_7000 != ptr) => task termination process
    21                              <1> 
    22                              <1>             ; enable page
    23 00000B3D C7051C641000077010- <1>             mov     [0x00106000 + 0x107 * 4], dword 0x00107007
    23 00000B46 00                  <1>
    24                              <1>             cdecl   memcpy, 0x0010_7000, DRAW_PARAM, rose_size
    24                              <2> 
    24                              <2>  %rep %0 - 1
    24                              <2>  push %-1:-1
    24                              <2>  %rotate -1
    24                              <2>  %endrep
    24 00000B47 6A40                <3>  push %-1:-1
    24                              <3>  %rotate -1
    24 00000B49 68[940D0000]        <3>  push %-1:-1
    24                              <3>  %rotate -1
    24 00000B4E 6800701000          <3>  push %-1:-1
    24                              <3>  %rotate -1
    24                              <2>  %rotate -1
    24                              <2> 
    24 00000B53 E89A0D0000          <2>  call %1
    24                              <2> 
    24                              <2>  %if 1 < %0
    24 00000B58 6683C40C            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    24                              <2>  %endif
    24                              <2> 
    25                              <1> 
    26 00000B5C EB15                <1>             jmp     .10E
    27                              <1> 
    28                              <1> .10F:
    29                              <1>             ; adjust stack
    30 00000B5E 83C404              <1>             add     esp, 4                                          ; pop es
    31 00000B61 83C404              <1>             add     esp, 4                                          ; pop ds
    32 00000B64 61                  <1>             popa
    33 00000B65 5D                  <1>             pop     ebp
    34                              <1> 
    35                              <1>             ; task termination process
    36 00000B66 9C                  <1>             pushf                                                   ; EFLAGS
    37 00000B67 0E                  <1>             push    cs
    38 00000B68 68[DF140000]        <1>             push    int_stop                                        ; stack displaying process
    39                              <1> 
    40 00000B6D B8[7D0B0000]        <1>             mov     eax, .s0                                        ; interrupt type
    41 00000B72 CF                  <1>             iret
    42                              <1> 
    43                              <1> .10E:
    44                              <1> 
    45                              <1>             ; return registers
    46 00000B73 07                  <1>             pop     es
    47 00000B74 1F                  <1>             pop     ds
    48 00000B75 61                  <1>             popa
    49                              <1> 
    50                              <1>             ; destruct stack frame
    51 00000B76 89EC                <1>             mov     esp, ebp
    52 00000B78 5D                  <1>             pop     ebp
    53                              <1> 
    54 00000B79 83C404              <1>             add     esp, 4                                          ; discard error code
    55 00000B7C CF                  <1>             iret
    56                              <1> 
    57 00000B7D 203C20504147452046- <1> .s0:        db  " < PAGE FAULT > ", 0
    57 00000B86 41554C54203E2000    <1>
   215                                  %include    "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1> 
     3                              <1>             ; display string
     4                              <1>             cdecl   draw_str, 63, 0, 0x07, .s0              ; draw_str()
     4                              <2> 
     4                              <2>  %rep %0 - 1
     4                              <2>  push %-1:-1
     4                              <2>  %rotate -1
     4                              <2>  %endrep
     4 00000B8E 68[BC0B0000]        <3>  push %-1:-1
     4                              <3>  %rotate -1
     4 00000B93 6A07                <3>  push %-1:-1
     4                              <3>  %rotate -1
     4 00000B95 6A00                <3>  push %-1:-1
     4                              <3>  %rotate -1
     4 00000B97 6A3F                <3>  push %-1:-1
     4                              <3>  %rotate -1
     4                              <2>  %rotate -1
     4                              <2> 
     4 00000B99 E817050000          <2>  call %1
     4                              <2> 
     4                              <2>  %if 1 < %0
     4 00000B9E 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
     4                              <2>  %endif
     4                              <2> 
     5                              <1> 
     6                              <1> ;-------------------------------------------------------------
     7                              <1> ; non-preemptive multitask
     8                              <1> ;-------------------------------------------------------------
     9                              <1> 
    10                              <1> ; .10L:
    11                              <1> ;             ; display time
    12                              <1> ;             mov     eax, [RTC_TIME]                         ; get time
    13                              <1> ;             cdecl   draw_time, 72, 0, 0x0700, eax
    14                              <1> 
    15                              <1> ;             ; call Task
    16                              <1> ;             jmp    SS_TASK_0:0                             ; jump to Task0(kernel)
    17                              <1> 
    18                              <1> ;             jmp     .10L
    19                              <1> 
    20                              <1> ;-------------------------------------------------------------
    21                              <1> 
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; preemptive multitask
    24                              <1> ;-------------------------------------------------------------
    25                              <1> 
    26                              <1> .10L:
    27                              <1>             ; display time
    28 00000BA2 A1[FC020000]        <1>             mov     eax, [RTC_TIME]                         ; get time
    29                              <1>             cdecl   draw_time, 72, 0, 0x0700, eax
    29                              <2> 
    29                              <2>  %rep %0 - 1
    29                              <2>  push %-1:-1
    29                              <2>  %rotate -1
    29                              <2>  %endrep
    29 00000BA7 50                  <3>  push %-1:-1
    29                              <3>  %rotate -1
    29 00000BA8 6800070000          <3>  push %-1:-1
    29                              <3>  %rotate -1
    29 00000BAD 6A00                <3>  push %-1:-1
    29                              <3>  %rotate -1
    29 00000BAF 6A48                <3>  push %-1:-1
    29                              <3>  %rotate -1
    29                              <2>  %rotate -1
    29                              <2> 
    29 00000BB1 E87B080000          <2>  call %1
    29                              <2> 
    29                              <2>  %if 1 < %0
    29 00000BB6 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    29                              <2>  %endif
    29                              <2> 
    30                              <1> 
    31                              <1> 
    32 00000BBA EBE6                <1>             jmp     .10L
    33                              <1> 
    34                              <1> ;-------------------------------------------------------------
    35                              <1> 
    36                              <1>             ; data
    37 00000BBC 5461736B2D3100      <1> .s0:        db  "Task-1", 0
   216                                  %include    "tasks/task_2.s"
     1                              <1> task_2:
     2                              <1> 
     3                              <1>             cdecl   draw_str, 63, 1, 0x07, .s0
     3                              <2> 
     3                              <2>  %rep %0 - 1
     3                              <2>  push %-1:-1
     3                              <2>  %rotate -1
     3                              <2>  %endrep
     3 00000BC3 68[860C0000]        <3>  push %-1:-1
     3                              <3>  %rotate -1
     3 00000BC8 6A07                <3>  push %-1:-1
     3                              <3>  %rotate -1
     3 00000BCA 6A01                <3>  push %-1:-1
     3                              <3>  %rotate -1
     3 00000BCC 6A3F                <3>  push %-1:-1
     3                              <3>  %rotate -1
     3                              <2>  %rotate -1
     3                              <2> 
     3 00000BCE E8E2040000          <2>  call %1
     3                              <2> 
     3                              <2>  %if 1 < %0
     3 00000BD3 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
     3                              <2>  %endif
     3                              <2> 
     4                              <1> 
     5                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     6                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
     7                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
     8 00000BD7 DB05[740C0000]      <1>             fild    dword [.c1000]              ;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
     9 00000BDD D9EB                <1>             fldpi                               ;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    10 00000BDF DA35[780C0000]      <1>             fidiv   dword [.c180]               ;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    11 00000BE5 D9EB                <1>             fldpi                               ;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    12 00000BE7 DCC0                <1>             fadd    st0, st0                    ;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    13 00000BE9 D9EE                <1>             fldz                                ;    θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    14                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    15                              <1>                                                 ;    θ = 0 |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    16                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    17                              <1> 
    18                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    19                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
    20                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    21                              <1> .10L:                                           ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    22                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    23 00000BEB D8C2                <1>             fadd    st0, st2                    ;    θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    24 00000BED D9F8                <1>             fprem                               ;    MOD(θ)|    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx| // fprem(ST0 %= ST1)
    25 00000BEF D9C0                <1>             fld     st0                         ;        θ |       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    26 00000BF1 D9FE                <1>             fsin                                ;    SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    27 00000BF3 D8CC                <1>             fmul    st0, st4                    ;ST4*SIN(θ)|       θ |    2*pi |       d |    1000 |xxxxxxxxx|
    28 00000BF5 DF35[7C0C0000]      <1>             fbstp   [.bcd]                      ;        θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    29                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
    30                              <1> 
    31                              <1>             ; convert into ASCII code
    32 00000BFB A1[7C0C0000]        <1>             mov     eax, [.bcd]                 ; EAX = 1000 * sin(t)
    33 00000C00 89C3                <1>             mov     ebx, eax                    ; EBX = EAX
    34                              <1> 
    35 00000C02 250F0F0000          <1>             and     eax, 0x0F0F                 ; mask upper 4 bits
    36 00000C07 0D30300000          <1>             or      eax, 0x3030                 ; set 0x3 to upper 4 bits
    37                              <1> 
    38 00000C0C C1EB04              <1>             shr     ebx, 4                      ; EBX = upper 16 bits
    39 00000C0F 81E30F0F0000        <1>             and     ebx, 0x0F0F
    40 00000C15 81CB30300000        <1>             or      ebx, 0x3030
    41                              <1> 
    42                              <1>             ; set the result to the buffer which is for screen display byte by byte
    43 00000C1B 883D[8E0C0000]      <1>             mov     [.s2 + 0], bh               ; first digit
    44 00000C21 8825[900C0000]      <1>             mov     [.s3 + 0], ah               ; the first decimal place
    45 00000C27 881D[910C0000]      <1>             mov     [.s3 + 1], bl               ; the second decimal place
    46 00000C2D A2[920C0000]        <1>             mov     [.s3 + 2], al               ; the third decimal place
    47                              <1> 
    48                              <1>             ; whether displaying sign or not
    49 00000C32 B807000000          <1>             mov     eax, 7
    50 00000C37 0FA305[850C0000]    <1>             bt      [.bcd + 9], eax             ; CF = bcd[9] & 0x80
    51 00000C3E 7209                <1>             jc      .10F
    52                              <1> 
    53 00000C40 C605[8D0C0000]2B    <1>             mov     [.s1 + 0], byte '+'
    54 00000C47 EB07                <1>             jmp     .10E
    55                              <1> .10F:
    56 00000C49 C605[8D0C0000]2D    <1>             mov     [.s1 + 0], byte '-'
    57                              <1> .10E:
    58                              <1>             cdecl   draw_str, 72, 1, 0x07, .s1
    58                              <2> 
    58                              <2>  %rep %0 - 1
    58                              <2>  push %-1:-1
    58                              <2>  %rotate -1
    58                              <2>  %endrep
    58 00000C50 68[8D0C0000]        <3>  push %-1:-1
    58                              <3>  %rotate -1
    58 00000C55 6A07                <3>  push %-1:-1
    58                              <3>  %rotate -1
    58 00000C57 6A01                <3>  push %-1:-1
    58                              <3>  %rotate -1
    58 00000C59 6A48                <3>  push %-1:-1
    58                              <3>  %rotate -1
    58                              <2>  %rotate -1
    58                              <2> 
    58 00000C5B E855040000          <2>  call %1
    58                              <2> 
    58                              <2>  %if 1 < %0
    58 00000C60 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    58                              <2>  %endif
    58                              <2> 
    59                              <1> 
    60                              <1>             ; wait
    61                              <1>             cdecl   wait_tick, 10
    61                              <2> 
    61                              <2>  %rep %0 - 1
    61                              <2>  push %-1:-1
    61                              <2>  %rotate -1
    61                              <2>  %endrep
    61 00000C64 6A0A                <3>  push %-1:-1
    61                              <3>  %rotate -1
    61                              <2>  %rotate -1
    61                              <2> 
    61 00000C66 E8690C0000          <2>  call %1
    61                              <2> 
    61                              <2>  %if 1 < %0
    61 00000C6B 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    61                              <2>  %endif
    61                              <2> 
    62                              <1> 
    63                              <1> ;           mov		ecx, 20							;   ECX = 20
    64                              <1> ; 		    										;   do
    65                              <1> ; 		    										;   {
    66                              <1> ; .20L:	    mov		eax, [TIMER_COUNT]				;     EAX = TIMER_COUNT;
    67                              <1> ; .21L:	    cmp		[TIMER_COUNT], eax				;     while (TIMER_COUNT != EAX)
    68                              <1> ; 		    je		.21L							;       ;
    69                              <1> ; 		    loop	.20L							;   } while (--ECX);
    70                              <1> 
    71                              <1> ; 		    jmp		.10L							; }
    72                              <1> 
    73 00000C6F E977FFFFFF          <1>             jmp     .10L
    74                              <1> 
    75                              <1> ALIGN 4, db 0
    76 00000C74 E8030000            <1> .c1000:     dd  1000
    77 00000C78 B4000000            <1> .c180:      dd  180
    78                              <1> 
    79 00000C7C 00<rept>            <1> .bcd:       times 10 db 0x00
    80                              <1> 
    81 00000C86 5461736B2D3200      <1> .s0:        db   "Task-2", 0
    82 00000C8D 2D                  <1> .s1:        db  "-"
    83 00000C8E 302E                <1> .s2:        db  "0."
    84 00000C90 30303000            <1> .s3:        db  "000", 0
   217                                  %include    "tasks/task_3.s"
     1                              <1> 
     2                              <1> task_3:
     3                              <1>             ; construct stack frame
     4 00000C94 89E5                <1>             mov     ebp, esp
     5                              <1> 
     6 00000C96 6A00                <1>             push    dword 0                     ; EBP- 4 | x0 = 0 // x coordinate origin
     7 00000C98 6A00                <1>             push    dword 0                     ;    - 8 | y0 = 0 // y coordinate origin
     8 00000C9A 6A00                <1>             push    dword 0                     ;    -12 | x  = 0 // x coordinate drawing
     9 00000C9C 6A00                <1>             push    dword 0                     ;    -16 | y  = 0 // y coordinate drawing
    10 00000C9E 6A00                <1>             push    dword 0                     ;    -20 | r  = 0 // angle
    11                              <1> 
    12                              <1>             ; initialization
    13                              <1>             ; mov     esi, DRAW_PARAM
    14 00000CA0 BE00701000          <1>             mov     esi, 0x0010_7000                    ; test page fault exception
    15                              <1> 
    16                              <1>             ; display title
    17 00000CA5 8B06                <1>             mov     eax, [esi + rose.x0]
    18 00000CA7 8B5E04              <1>             mov     ebx, [esi + rose.y0]
    19                              <1> 
    20 00000CAA C1E803              <1>             shr     eax, 3                              ; EAX /= 8    // convert x coordinate into char position
    21 00000CAD C1EB04              <1>             shr     ebx, 4                              ; EBX /= 16   // convert y coordinate into char position
    22 00000CB0 4B                  <1>             dec     ebx                                 ; move up one char
    23 00000CB1 8B4E24              <1>             mov     ecx, [esi + rose.color_s]           ; char color
    24 00000CB4 8D5630              <1>             lea     edx, [esi + rose.title]
    25                              <1> 
    26                              <1>             cdecl   draw_str, eax, ebx, ecx, edx
    26                              <2> 
    26                              <2>  %rep %0 - 1
    26                              <2>  push %-1:-1
    26                              <2>  %rotate -1
    26                              <2>  %endrep
    26 00000CB7 52                  <3>  push %-1:-1
    26                              <3>  %rotate -1
    26 00000CB8 51                  <3>  push %-1:-1
    26                              <3>  %rotate -1
    26 00000CB9 53                  <3>  push %-1:-1
    26                              <3>  %rotate -1
    26 00000CBA 50                  <3>  push %-1:-1
    26                              <3>  %rotate -1
    26                              <2>  %rotate -1
    26                              <2> 
    26 00000CBB E8F5030000          <2>  call %1
    26                              <2> 
    26                              <2>  %if 1 < %0
    26 00000CC0 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    26                              <2>  %endif
    26                              <2> 
    27                              <1> 
    28                              <1>             ; midpoint of X axis
    29 00000CC4 8B06                <1>             mov     eax, [esi + rose.x0]
    30 00000CC6 8B5E08              <1>             mov     ebx, [esi + rose.x1]
    31 00000CC9 29C3                <1>             sub     ebx, eax
    32 00000CCB D1EB                <1>             shr     ebx, 1                              ; EBX /= 2
    33 00000CCD 01C3                <1>             add     ebx, eax
    34 00000CCF 895DFC              <1>             mov     [ebp - 4], ebx                      ; x0 = EBX // x coordinate origin
    35                              <1> 
    36                              <1>             ; midpoint of Y axis
    37 00000CD2 8B4604              <1>             mov     eax, [esi + rose.y0]
    38 00000CD5 8B5E0C              <1>             mov     ebx, [esi + rose.y1]
    39 00000CD8 29C3                <1>             sub     ebx, eax
    40 00000CDA D1EB                <1>             shr     ebx, 1                              ; EBX /= 2
    41 00000CDC 01C3                <1>             add     ebx, eax
    42 00000CDE 895DF8              <1>             mov     [ebp - 8], ebx                      ; y0 = EBX // y coordinate origin
    43                              <1> 
    44                              <1>             ; draw X axis
    45 00000CE1 8B06                <1>             mov     eax, [esi + rose.x0]
    46 00000CE3 8B5DF8              <1>             mov     ebx, [ebp - 8]                      ; midpoint of y axis
    47 00000CE6 8B4E08              <1>             mov     ecx, [esi + rose.x1]
    48                              <1> 
    49                              <1>             cdecl   draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
    49                              <2> 
    49                              <2>  %rep %0 - 1
    49                              <2>  push %-1:-1
    49                              <2>  %rotate -1
    49                              <2>  %endrep
    49 00000CE9 FF7618              <3>  push %-1:-1
    49                              <3>  %rotate -1
    49 00000CEC 53                  <3>  push %-1:-1
    49                              <3>  %rotate -1
    49 00000CED 51                  <3>  push %-1:-1
    49                              <3>  %rotate -1
    49 00000CEE 53                  <3>  push %-1:-1
    49                              <3>  %rotate -1
    49 00000CEF 50                  <3>  push %-1:-1
    49                              <3>  %rotate -1
    49                              <2>  %rotate -1
    49                              <2> 
    49 00000CF0 E859050000          <2>  call %1
    49                              <2> 
    49                              <2>  %if 1 < %0
    49 00000CF5 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    49                              <2>  %endif
    49                              <2> 
    50                              <1> 
    51                              <1>             ; draw Y axis
    52 00000CF9 8B4604              <1>             mov     eax, [esi + rose.y0]
    53 00000CFC 8B5DFC              <1>             mov     ebx, [ebp - 4]                      ; midpoint of x axis
    54 00000CFF 8B4E0C              <1>             mov     ecx, [esi + rose.y1]
    55                              <1> 
    56                              <1>             cdecl   draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
    56                              <2> 
    56                              <2>  %rep %0 - 1
    56                              <2>  push %-1:-1
    56                              <2>  %rotate -1
    56                              <2>  %endrep
    56 00000D02 FF761C              <3>  push %-1:-1
    56                              <3>  %rotate -1
    56 00000D05 51                  <3>  push %-1:-1
    56                              <3>  %rotate -1
    56 00000D06 53                  <3>  push %-1:-1
    56                              <3>  %rotate -1
    56 00000D07 50                  <3>  push %-1:-1
    56                              <3>  %rotate -1
    56 00000D08 53                  <3>  push %-1:-1
    56                              <3>  %rotate -1
    56                              <2>  %rotate -1
    56                              <2> 
    56 00000D09 E840050000          <2>  call %1
    56                              <2> 
    56                              <2>  %if 1 < %0
    56 00000D0E 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    56                              <2>  %endif
    56                              <2> 
    57                              <1> 
    58                              <1>             ; draw frame
    59 00000D12 8B06                <1>             mov     eax, [esi + rose.x0]
    60 00000D14 8B5E04              <1>             mov     ebx, [esi + rose.y0]
    61 00000D17 8B4E08              <1>             mov     ecx, [esi + rose.x1]
    62 00000D1A 8B560C              <1>             mov     edx, [esi + rose.y1]
    63                              <1> 
    64                              <1>             cdecl   draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
    64                              <2> 
    64                              <2>  %rep %0 - 1
    64                              <2>  push %-1:-1
    64                              <2>  %rotate -1
    64                              <2>  %endrep
    64 00000D1D FF7620              <3>  push %-1:-1
    64                              <3>  %rotate -1
    64 00000D20 52                  <3>  push %-1:-1
    64                              <3>  %rotate -1
    64 00000D21 51                  <3>  push %-1:-1
    64                              <3>  %rotate -1
    64 00000D22 53                  <3>  push %-1:-1
    64                              <3>  %rotate -1
    64 00000D23 50                  <3>  push %-1:-1
    64                              <3>  %rotate -1
    64                              <2>  %rotate -1
    64                              <2> 
    64 00000D24 E8D4050000          <2>  call %1
    64                              <2> 
    64                              <2>  %if 1 < %0
    64 00000D29 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    64                              <2>  %endif
    64                              <2> 
    65                              <1> 
    66                              <1>             ; Amplitude is about 95% of x axis
    67 00000D2D 8B4608              <1>             mov     eax, [esi + rose.x1]
    68 00000D30 2B06                <1>             sub     eax, [esi + rose.x0]
    69 00000D32 D1E8                <1>             shr     eax, 1                              ; EAX /= 2
    70 00000D34 89C3                <1>             mov     ebx, eax
    71 00000D36 C1EB04              <1>             shr     ebx, 4                              ; EAX /= 16
    72 00000D39 29D8                <1>             sub     eax, ebx
    73                              <1> 
    74                              <1>             ; initialize FPU (initialize rose curve)
    75                              <1>             cdecl   fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]
    75                              <2> 
    75                              <2>  %rep %0 - 1
    75                              <2>  push %-1:-1
    75                              <2>  %rotate -1
    75                              <2>  %endrep
    75 00000D3B FF7614              <3>  push %-1:-1
    75                              <3>  %rotate -1
    75 00000D3E FF7610              <3>  push %-1:-1
    75                              <3>  %rotate -1
    75 00000D41 50                  <3>  push %-1:-1
    75                              <3>  %rotate -1
    75                              <2>  %rotate -1
    75                              <2> 
    75 00000D42 E84D010000          <2>  call %1
    75                              <2> 
    75                              <2>  %if 1 < %0
    75 00000D47 6683C40C            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    75                              <2>  %endif
    75                              <2> 
    76                              <1> 
    77                              <1> .10L:
    78                              <1> 
    79                              <1>             ; coordinate culculation
    80 00000D4B 8D5DF4              <1>             lea     ebx, [ebp - 12]                     ; x
    81 00000D4E 8D4DF0              <1>             lea     ecx, [ebp - 16]                     ; y
    82 00000D51 8B45EC              <1>             mov     eax, [ebp - 20]                     ; r
    83                              <1> 
    84                              <1>             cdecl   fpu_rose_update, ebx, ecx, eax
    84                              <2> 
    84                              <2>  %rep %0 - 1
    84                              <2>  push %-1:-1
    84                              <2>  %rotate -1
    84                              <2>  %endrep
    84 00000D54 50                  <3>  push %-1:-1
    84                              <3>  %rotate -1
    84 00000D55 51                  <3>  push %-1:-1
    84                              <3>  %rotate -1
    84 00000D56 53                  <3>  push %-1:-1
    84                              <3>  %rotate -1
    84                              <2>  %rotate -1
    84                              <2> 
    84 00000D57 E852010000          <2>  call %1
    84                              <2> 
    84                              <2>  %if 1 < %0
    84 00000D5C 6683C40C            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    84                              <2>  %endif
    84                              <2> 
    85                              <1> 
    86                              <1>             ; update angle(r = r % 36000)
    87 00000D60 BA00000000          <1>             mov     edx, 0
    88 00000D65 40                  <1>             inc     eax
    89 00000D66 BBA08C0000          <1>             mov     ebx, 360 * 100
    90 00000D6B F7F3                <1>             div     ebx                                 ; EDX = EDX:EAX % EBX
    91 00000D6D 8955EC              <1>             mov     [ebp - 20], edx
    92                              <1> 
    93                              <1>             ; draw dot
    94 00000D70 8B4DF4              <1>             mov     ecx, [ebp - 12]                     ; x
    95 00000D73 8B55F0              <1>             mov     edx, [ebp - 16]                     ; y
    96                              <1> 
    97 00000D76 034DFC              <1>             add     ecx, [ebp - 4]                      ; ECX += x coordinate origin
    98 00000D79 0355F8              <1>             add     edx, [ebp - 8]                      ; EDX += y coordinate origin
    99                              <1> 
   100 00000D7C 8B5E28              <1>             mov     ebx, [esi + rose.color_f]           ; EBX = display color
   101 00000D7F CD82                <1>             int     0x82                                ; syscall_82(display color, x, y)
   102                              <1> 
   103                              <1>             ; wait
   104                              <1>             cdecl   wait_tick, 2
   104                              <2> 
   104                              <2>  %rep %0 - 1
   104                              <2>  push %-1:-1
   104                              <2>  %rotate -1
   104                              <2>  %endrep
   104 00000D81 6A02                <3>  push %-1:-1
   104                              <3>  %rotate -1
   104                              <2>  %rotate -1
   104                              <2> 
   104 00000D83 E84C0B0000          <2>  call %1
   104                              <2> 
   104                              <2>  %if 1 < %0
   104 00000D88 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
   104                              <2>  %endif
   104                              <2> 
   105                              <1> 
   106                              <1>             ; draw dot(erase)
   107 00000D8C 8B5E2C              <1>             mov     ebx, [esi + rose.color_b]           ; EBX = background color
   108 00000D8F CD82                <1>             int     0x82                                ; syscall_82(display color, x, y)
   109                              <1> 
   110 00000D91 EBB8                <1>             jmp     .10L
   111                              <1> 
   112 00000D93 00                  <1> ALIGN 4, db 0
   113                              <1> DRAW_PARAM:
   114                              <1> .t3:
   115                              <1>     istruc  rose
   116 00000D94 20000000            <1>         at  rose.x0,            dd          32          ; upper left coordinate : X0
   117 00000D98 20000000            <1>         at  rose.y0,            dd          32          ; upper left coordinate : Y0
   118 00000D9C D0000000            <1>         at  rose.x1,            dd         208          ; lower right coordinate : X1
   119 00000DA0 D0000000            <1>         at  rose.y1,            dd         208          ; lower right coordinate : Y1
   120                              <1> 
   121 00000DA4 02000000            <1>         at  rose.n,             dd           2          ; variable : n
   122 00000DA8 01000000            <1>         at  rose.d,             dd           1          ; variable : d
   123                              <1> 
   124 00000DAC 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   125 00000DB0 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   126 00000DB4 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   127 00000DB8 0F030000            <1>         at  rose.color_s,       dd         0x030F       ; display color : char
   128 00000DBC 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   129 00000DC0 03000000            <1>         at  rose.color_b,       dd         0x0003       ; display color : graph erase color
   130                              <1> 
   131 00000DC4 5461736B2D3300      <1>         at  rose.title,         db         "Task-3", 0  ; title
   132 00000DCB 00<rept>            <1>     iend
   133                              <1> 
   134                              <1> .t4:
   135                              <1>     istruc  rose
   136 00000DD4 F8000000            <1>         at  rose.x0,            dd         248          ; upper left coordinate : X0
   137 00000DD8 20000000            <1>         at  rose.y0,            dd          32          ; upper left coordinate : Y0
   138 00000DDC A8010000            <1>         at  rose.x1,            dd         424          ; lower right coordinate : X1
   139 00000DE0 D0000000            <1>         at  rose.y1,            dd         208          ; lower right coordinate : Y1
   140                              <1> 
   141 00000DE4 03000000            <1>         at  rose.n,             dd           3          ; variable : n
   142 00000DE8 01000000            <1>         at  rose.d,             dd           1          ; variable : d
   143                              <1> 
   144 00000DEC 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   145 00000DF0 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   146 00000DF4 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   147 00000DF8 0F040000            <1>         at  rose.color_s,       dd         0x040F       ; display color : char
   148 00000DFC 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   149 00000E00 04000000            <1>         at  rose.color_b,       dd         0x0004       ; display color : graph erase color
   150                              <1> 
   151 00000E04 5461736B2D3400      <1>         at  rose.title,         db         "Task-4", 0  ; title
   152 00000E0B 00<rept>            <1>     iend
   153                              <1> 
   154                              <1> .t5:
   155                              <1>     istruc  rose
   156 00000E14 20000000            <1>         at  rose.x0,            dd          32          ; upper left coordinate : X0
   157 00000E18 10010000            <1>         at  rose.y0,            dd         272          ; upper left coordinate : Y0
   158 00000E1C D0000000            <1>         at  rose.x1,            dd         208          ; lower right coordinate : X1
   159 00000E20 C0010000            <1>         at  rose.y1,            dd         448          ; lower right coordinate : Y1
   160                              <1> 
   161 00000E24 02000000            <1>         at  rose.n,             dd           2          ; variable : n
   162 00000E28 06000000            <1>         at  rose.d,             dd           6          ; variable : d
   163                              <1> 
   164 00000E2C 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   165 00000E30 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   166 00000E34 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   167 00000E38 0F050000            <1>         at  rose.color_s,       dd         0x050F       ; display color : char
   168 00000E3C 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   169 00000E40 05000000            <1>         at  rose.color_b,       dd         0x0005       ; display color : graph erase color
   170                              <1> 
   171 00000E44 5461736B2D3500      <1>         at  rose.title,         db         "Task-5", 0  ; title
   172 00000E4B 00<rept>            <1>     iend
   173                              <1> 
   174                              <1> .t6:
   175                              <1>     istruc  rose
   176 00000E54 F8000000            <1>         at  rose.x0,            dd         248          ; upper left coordinate : X0
   177 00000E58 10010000            <1>         at  rose.y0,            dd         272          ; upper left coordinate : Y0
   178 00000E5C A8010000            <1>         at  rose.x1,            dd         424          ; lower right coordinate : X1
   179 00000E60 C0010000            <1>         at  rose.y1,            dd         448          ; lower right coordinate : Y1
   180                              <1> 
   181 00000E64 04000000            <1>         at  rose.n,             dd           4          ; variable : n
   182 00000E68 06000000            <1>         at  rose.d,             dd           6          ; variable : d
   183                              <1> 
   184 00000E6C 07000000            <1>         at  rose.color_x,       dd         0x0007       ; display color : x axis
   185 00000E70 07000000            <1>         at  rose.color_y,       dd         0x0007       ; display color : y axis
   186 00000E74 0F000000            <1>         at  rose.color_z,       dd         0x000F       ; display color : frame
   187 00000E78 0F060000            <1>         at  rose.color_s,       dd         0x060F       ; display color : char
   188 00000E7C 0F000000            <1>         at  rose.color_f,       dd         0x000F       ; display color : graph display color
   189 00000E80 06000000            <1>         at  rose.color_b,       dd         0x0006       ; display color : graph erase color
   190                              <1> 
   191 00000E84 5461736B2D3600      <1>         at  rose.title,         db         "Task-6", 0  ; title
   192 00000E8B 00<rept>            <1>     iend
   193                              <1> 
   194                              <1> 
   195                              <1> ; fpu_rose_init:
   196                              <1> 
   197                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
   198                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
   199                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
   200                              <1> ;             fldpi                               ;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   201                              <1> ;             fidiv   dword [.c180]               ;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   202                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
   203                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
   204                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
   205                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
   206                              <1> ;                                                 ;        r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   207                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
   208                              <1> ;             fild    dword [.n]                  ;        n |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   209                              <1> ;             fidiv   dword [.d]                  ;      n/d |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   210                              <1> ;                                                 ; ---------+---------+---------+---------+---------+---------|
   211                              <1> ;                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
   212                              <1> ;                                                 ;        k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   213                              <1> ;             fild    dword [.A]                  ;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   214                              <1> 
   215                              <1> ; ALIGN 4, db 0
   216                              <1> ; .c1000:     dd  1000
   217                              <1> ; .c180:      dd  180
   218                              <1> 
   219                              <1> ; .n: dd 5
   220                              <1> ; .d: dd 3
   221                              <1> ; .A: dd 90
   222                              <1> 
   223                              <1> ;--------------------------------------------------------------------------------------------------------------
   224                              <1> ; PREPROCESSING
   225                              <1> 
   226                              <1> fpu_rose_init:
   227                              <1> 
   228                              <1>                                                 ;    +16 | d
   229                              <1>                                                 ;    +12 | n
   230                              <1>                                                 ; EBP+ 8 | A
   231 00000E94 55                  <1>             push    ebp
   232 00000E95 89E5                <1>             mov     ebp, esp
   233                              <1> 
   234 00000E97 68B4000000          <1>             push    dword 180                   ;    - 4 | dword i = 180
   235                              <1> 
   236 00000E9C D9EB                <1>             fldpi
   237 00000E9E DA75FC              <1>             fidiv   dword [ebp -  4]
   238 00000EA1 DB450C              <1>             fild    dword [ebp + 12]
   239 00000EA4 DA7510              <1>             fidiv   dword [ebp + 16]
   240 00000EA7 DB4508              <1>             fild    dword [ebp +  8]
   241                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
   242                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
   243                              <1>                                                 ;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   244                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
   245                              <1> 
   246 00000EAA 89EC                <1>             mov     esp, ebp
   247 00000EAC 5D                  <1>             pop     ebp
   248                              <1> 
   249 00000EAD C3                  <1>             ret
   250                              <1> 
   251                              <1> fpu_rose_update:
   252                              <1> 
   253                              <1>             ; construct stack frame
   254                              <1>                                                 ;    +16 | t(angle)
   255                              <1>                                                 ;    +12 | Y(float)
   256                              <1>                                                 ; EBP+ 8 | X(float)
   257 00000EAE 55                  <1>             push    ebp
   258 00000EAF 89E5                <1>             mov     ebp, esp
   259                              <1> 
   260                              <1>             ; save registers
   261 00000EB1 50                  <1>             push    eax
   262 00000EB2 53                  <1>             push    ebx
   263                              <1> 
   264                              <1>             ; set save_dest of X/Y coordinate
   265 00000EB3 8B4508              <1>             mov     eax, [ebp +  8]
   266 00000EB6 8B5D0C              <1>             mov     ebx, [ebp + 12]
   267                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
   268                              <1>                                                 ;      ST0 |     ST1 |     ST2 |     ST3 |     ST4 |     ST5 |
   269 00000EB9 DB4510              <1>             fild    dword [ebp + 16]            ;       t  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
   270 00000EBC D8CB                <1>             fmul    st0, st3                    ;      rt  |         |         |         |         |         |
   271 00000EBE D9C0                <1>             fld     st0                         ;      rt  |     rt  |      A  |      k  |      r  |xxxxxxxxx|
   272                              <1>                                                 ;   θ=(rt) |  θ=(rt) |      A  |      k  |      r  |xxxxxxxxx|
   273                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
   274 00000EC0 D9FB                <1>             fsincos                             ;   cos(θ) |  sin(θ) |      θ  |      A  |      k  |      r  |
   275                              <1> 
   276 00000EC2 D9CA                <1>             fxch    st2                         ;       θ  |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
   277 00000EC4 D8CC                <1>             fmul    st0, st4                    ;      kθ  |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
   278 00000EC6 D9FE                <1>             fsin                                ;  sin(kθ) |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
   279 00000EC8 D8CB                <1>             fmul    st0, st3                    ; Asin(kθ) |  sin(θ) |  cos(θ) |      A  |      k  |      r  |
   280                              <1> 
   281 00000ECA D9CA                <1>             fxch    st2                         ;   cos(θ) |  sin(θ) | Asin(kθ)|      A  |      k  |      r  |
   282 00000ECC D8CA                <1>             fmul    st0, st2                    ;       X  |  sin(θ) | Asin(kθ)|      A  |      k  |      r  |
   283 00000ECE DB18                <1>             fistp   dword [eax]                 ;   sin(θ) | Asin(kθ)|      A  |      k  |      r  |xxxxxxxxx|
   284                              <1> 
   285 00000ED0 DEC9                <1>             fmulp   st1, st0                    ;       Y  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
   286 00000ED2 D9E0                <1>             fchs                                ;      -Y  |      A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|
   287 00000ED4 DB1B                <1>             fistp   dword [ebx]                 ;       A  |      k  |      r  |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   288                              <1>                                                 ; ---------+---------+---------+---------+---------+---------|
   289                              <1> 
   290                              <1>             ; return registers
   291 00000ED6 5B                  <1>             pop     ebx
   292 00000ED7 58                  <1>             pop     eax
   293                              <1> 
   294                              <1>             ; destruct stack frame
   295 00000ED8 89EC                <1>             mov     esp, ebp
   296 00000EDA 5D                  <1>             pop     ebp
   297                              <1> 
   298 00000EDB C3                  <1>             ret
   218                                  
   219                                  
   220                                  ; MODULES
   221                                  %include    "../modules/protect/vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00000EDC 55                  <1>             push    ebp                                     ;   +8 | reading plane
     5 00000EDD 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
     6                              <1>                                                             ;EBP+0 | EBP
     7                              <1> 
     8                              <1>             ; save registers
     9 00000EDF 50                  <1>             push    eax
    10 00000EE0 52                  <1>             push    edx
    11                              <1> 
    12                              <1>             ; choose reading plane
    13 00000EE1 8A6508              <1>             mov     ah, [ebp + 8]                           ; 3=luminance, 2~0=RGB
    14 00000EE4 80E403              <1>             and     ah, 0x03                                ; bit mask
    15 00000EE7 B004                <1>             mov     al, 0x04                                ; register of choosing reading plane
    16 00000EE9 66BACE03            <1>             mov     dx, 0x03CE                              ; DX = graphix control port
    17 00000EED 66EF                <1>             out     dx, ax
    18                              <1> 
    19                              <1>             ; return registers
    20 00000EEF 5A                  <1>             pop     edx
    21 00000EF0 58                  <1>             pop     eax
    22                              <1> 
    23                              <1>             ; destruct stack frame
    24 00000EF1 89EC                <1>             mov     esp, ebp
    25 00000EF3 5D                  <1>             pop     ebp
    26                              <1> 
    27 00000EF4 C3                  <1>             ret
    28                              <1> 
    29                              <1> vga_set_write_plane:
    30                              <1> 
    31                              <1>             ; construct stack frame
    32 00000EF5 55                  <1>             push    ebp                                     ;   +8 | writing plane
    33 00000EF6 89E5                <1>             mov     ebp, esp                                ;   +4 | IP(instruction pointer)
    34                              <1>                                                             ;EBP+0 | EBP
    35                              <1> 
    36                              <1>             ; save registers
    37 00000EF8 50                  <1>             push    eax
    38 00000EF9 52                  <1>             push    edx
    39                              <1> 
    40                              <1>             ; choose writing plane
    41 00000EFA 8A6508              <1>             mov     ah, [ebp + 8]                           ; AH = ----IRGB
    42 00000EFD 80E40F              <1>             and     ah, 0x0F                                ; bit mask
    43 00000F00 B002                <1>             mov     al, 0x02                                ; AL = map mask register(choosing writing plane)
    44 00000F02 66BAC403            <1>             mov     dx, 0x03C4                              ; DX = sequencer control port
    45 00000F06 66EF                <1>             out     dx, ax
    46                              <1> 
    47                              <1>             ; return registers
    48 00000F08 5A                  <1>             pop     edx
    49 00000F09 58                  <1>             pop     eax
    50                              <1> 
    51                              <1>             ; destruct stack frame
    52 00000F0A 89EC                <1>             mov     esp, ebp
    53 00000F0C 5D                  <1>             pop     ebp
    54                              <1> 
    55 00000F0D C3                  <1>             ret
    56                              <1> 
    57                              <1> vram_font_copy:
    58                              <1> 
    59                              <1>             ; construct stack frame                         ;   +20 | color
    60 00000F0E 55                  <1>             push    ebp                                     ;   +16 | color plane
    61 00000F0F 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
    62                              <1>                                                             ;EBP+ 8 | font address
    63                              <1> 
    64                              <1>             ; save registers
    65 00000F11 50                  <1>             push    eax
    66 00000F12 53                  <1>             push    ebx
    67 00000F13 51                  <1>             push    ecx
    68 00000F14 52                  <1>             push    edx
    69 00000F15 56                  <1>             push    esi
    70 00000F16 57                  <1>             push    edi
    71                              <1> 
    72                              <1>             ; get arguments
    73 00000F17 8B7508              <1>             mov     esi, [ebp + 8]
    74 00000F1A 8B7D0C              <1>             mov     edi, [ebp + 12]
    75 00000F1D 0FB64510            <1>             movzx   eax, byte [ebp + 16]                    ; EAX = color plane // zero expansion
    76 00000F21 0FB75D14            <1>             movzx   ebx, word [ebp + 20]                    ; EBX = color
    77                              <1> 
    78                              <1>             ; make mask data
    79 00000F25 84C7                <1>             test    bh, al                                  ; ZF = (background color & color plane)
    80 00000F27 0F94C6              <1>             setz    dh                                      ; AH = 0x01 if (ZF == 1) else AH = 0x00
    81 00000F2A FECE                <1>             dec     dh                                      ; AH = 0x00 or 0xFF
    82                              <1> 
    83 00000F2C 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
    84 00000F2E 0F94C2              <1>             setz    dl                                      ; AL = 0x01 if (ZF == 1) else AL = 0x00
    85 00000F31 FECA                <1>             dec     dl                                      ; AL = 0x00 or 0xFF
    86                              <1> 
    87                              <1>             ; copy 16 dot font
    88 00000F33 FC                  <1>             cld                                             ; DF = 0 // plus
    89                              <1> 
    90 00000F34 B910000000          <1>             mov     ecx, 16                                 ; font data(height = 16, length = 8)
    91                              <1> .10L:
    92                              <1> 
    93                              <1>             ; make reversed font
    94 00000F39 AC                  <1>             lodsb                                           ; AL = [ESI]; ESI += <op><size>
    95 00000F3A 88C4                <1>             mov     ah, al
    96 00000F3C F6D4                <1>             not     ah
    97                              <1> 
    98                              <1>             ; foreground color
    99 00000F3E 20D0                <1>             and     al, dl                                  ; AL = font & foreground color
   100                              <1> 
   101                              <1>             ; background color
   102 00000F40 F7C310000000        <1>             test    ebx, 0x0010                             ; if (transmissive mode)
   103 00000F46 7404                <1>             jz      .11F                                    ; {
   104 00000F48 2227                <1>             and     ah, [edi]                               ;   AH = !font & [EDI]; // get current value
   105 00000F4A EB02                <1>             jmp     .11E                                    ; } else
   106                              <1> .11F:                                                       ; {
   107 00000F4C 20F4                <1>             and     ah, dh                                  ;   AH = !font & background color;
   108                              <1>                                                             ; }
   109                              <1> 
   110                              <1> .11E:
   111                              <1>             ; synthesize bakcground & foreground color
   112 00000F4E 08E0                <1>             or      al, ah
   113                              <1> 
   114                              <1>             ; out new value
   115 00000F50 8807                <1>             mov     [edi], al
   116                              <1> 
   117 00000F52 83C750              <1>             add     edi, 80
   118 00000F55 E2E2                <1>             loop    .10L
   119                              <1> .10E:
   120                              <1> 
   121                              <1>             ; return registers
   122 00000F57 5F                  <1>             pop     edi
   123 00000F58 5E                  <1>             pop     esi
   124 00000F59 5A                  <1>             pop     edx
   125 00000F5A 59                  <1>             pop     ecx
   126 00000F5B 5B                  <1>             pop     ebx
   127 00000F5C 58                  <1>             pop     eax
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 00000F5D 89EC                <1>             mov     esp, ebp
   131 00000F5F 5D                  <1>             pop     ebp
   132                              <1> 
   133 00000F60 C3                  <1>             ret
   134                              <1> 
   135                              <1> vram_bit_copy:
   136                              <1> 
   137                              <1>             ; construct stack frame                         ;   +20 | display color
   138 00000F61 55                  <1>             push    ebp                                     ;   +16 | color plane
   139 00000F62 89E5                <1>             mov     ebp, esp                                ;   +12 | VRAM address
   140                              <1>                                                             ;EBP+ 8 | bit data
   141                              <1> 
   142                              <1>             ; save registers
   143 00000F64 50                  <1>             push    eax
   144 00000F65 53                  <1>             push    ebx
   145                              <1>             ; push    ecx
   146                              <1>             ; push    edx
   147                              <1>             ; push    esi
   148 00000F66 57                  <1>             push    edi
   149                              <1> 
   150                              <1>             ; get arguments
   151 00000F67 8B7D0C              <1>             mov     edi, [ebp + 12]
   152 00000F6A 0FB64510            <1>             movzx   eax, byte [ebp + 16]
   153 00000F6E 0FB75D14            <1>             movzx   ebx, word [ebp + 20]
   154                              <1> 
   155                              <1>             ; make mask data(always transmissive mode => only foreground)
   156                              <1> 
   157 00000F72 84C3                <1>             test    bl, al                                  ; ZF = (foreground color & color plane)
   158 00000F74 0F94C3              <1>             setz    bl                                      ; BL = 0x01 if (ZF == 1) else BL = 0x00
   159 00000F77 FECB                <1>             dec     bl                                      ; BL = 0x00 or 0xFF
   160                              <1> 
   161 00000F79 8A4508              <1>             mov     al, [ebp + 8]                           ; AL = output bit pattern
   162 00000F7C 88C4                <1>             mov     ah, al
   163 00000F7E F6D4                <1>             not     ah                                      ; AH = reversed bit data
   164                              <1> 
   165                              <1>             ; drawing process
   166 00000F80 2227                <1>             and     ah, [edi]                               ; AH = !output bit pattern & current val
   167 00000F82 20D8                <1>             and     al, bl                                  ; AL =  output bit pattern & display color
   168 00000F84 08E0                <1>             or      al, ah
   169 00000F86 8807                <1>             mov     [edi], al
   170                              <1> 
   171                              <1>             ; return registers
   172 00000F88 5F                  <1>             pop     edi
   173                              <1>             ; pop     esi
   174                              <1>             ; pop     edx
   175                              <1>             ; pop     ecx
   176 00000F89 5B                  <1>             pop     ebx
   177 00000F8A 58                  <1>             pop     eax
   178                              <1> 
   179                              <1>             ; destruct stack frame
   180 00000F8B 89EC                <1>             mov     esp, ebp
   181 00000F8D 5D                  <1>             pop     ebp
   182                              <1> 
   183 00000F8E C3                  <1>             ret
   222                                  %include    "../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 
     3                              <1>             ; construct stack frame                             ;   +20 | char code
     4 00000F8F 55                  <1>             push    ebp                                         ;   +16 | color
     5 00000F90 89E5                <1>             mov     ebp, esp                                    ;   +12 | row(0~29)
     6                              <1>                                                                 ;EBP+ 8 | column(0~79)
     7                              <1> 
     8                              <1>             ; save registers
     9 00000F92 50                  <1>             push    eax
    10 00000F93 53                  <1>             push    ebx
    11 00000F94 51                  <1>             push    ecx
    12 00000F95 52                  <1>             push    edx
    13 00000F96 56                  <1>             push    esi
    14 00000F97 57                  <1>             push    edi
    15                              <1> 
    16                              <1> %ifdef      USE_TEST_AND_SET
    17                              <1>             cdecl   test_and_set, IN_USE                        ; TEST_AND_SET(IN_USE) // waiting for resource to be available
    17                              <2> 
    17                              <2>  %rep %0 - 1
    17                              <2>  push %-1:-1
    17                              <2>  %rotate -1
    17                              <2>  %endrep
    17 00000F98 68[6C100000]        <3>  push %-1:-1
    17                              <3>  %rotate -1
    17                              <2>  %rotate -1
    17                              <2> 
    17 00000F9D E885080000          <2>  call %1
    17                              <2> 
    17                              <2>  %if 1 < %0
    17 00000FA2 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    17                              <2>  %endif
    17                              <2> 
    18                              <1> %endif
    19                              <1> 
    20                              <1>             ; set copy_target font address
    21 00000FA6 0FB67514            <1>             movzx   esi, byte [ebp + 20]
    22 00000FAA C1E604              <1>             shl     esi, 4                                      ; *= 16 // 16 byte per char
    23 00000FAD 0335[F8020000]      <1>             add     esi, [FONT_ADR]                             ; ESI = font address
    24                              <1> 
    25                              <1>             ; get copy_dest VRAM address
    26                              <1>             ; ADR = 0xA0000 + ( ( 640 / 8) * 16 ) * y + x
    27                              <1>             ; y:row, x:column
    28                              <1> 
    29 00000FB3 8B7D0C              <1>             mov     edi, [ebp + 12]
    30 00000FB6 C1E708              <1>             shl     edi, 8                                      ; EDI = row * 256
    31 00000FB9 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA0000]              ; EDI = row * 4 + row
    32 00000FC0 037D08              <1>             add     edi, [ebp + 8]
    33                              <1> 
    34                              <1>             ; output a char of font
    35 00000FC3 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    36                              <1> 
    37                              <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    37                              <2> 
    37                              <2>  %rep %0 - 1
    37                              <2>  push %-1:-1
    37                              <2>  %rotate -1
    37                              <2>  %endrep
    37 00000FC7 6A03                <3>  push %-1:-1
    37                              <3>  %rotate -1
    37                              <2>  %rotate -1
    37                              <2> 
    37 00000FC9 E80EFFFFFF          <2>  call %1
    37                              <2> 
    37                              <2>  %if 1 < %0
    37 00000FCE 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    37                              <2>  %endif
    37                              <2> 
    38                              <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    38                              <2> 
    38                              <2>  %rep %0 - 1
    38                              <2>  push %-1:-1
    38                              <2>  %rotate -1
    38                              <2>  %endrep
    38 00000FD2 6A08                <3>  push %-1:-1
    38                              <3>  %rotate -1
    38                              <2>  %rotate -1
    38                              <2> 
    38 00000FD4 E81CFFFFFF          <2>  call %1
    38                              <2> 
    38                              <2>  %if 1 < %0
    38 00000FD9 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    38                              <2>  %endif
    38                              <2> 
    39                              <1>             cdecl   vram_font_copy, esi, edi, 0x08, ebx
    39                              <2> 
    39                              <2>  %rep %0 - 1
    39                              <2>  push %-1:-1
    39                              <2>  %rotate -1
    39                              <2>  %endrep
    39 00000FDD 53                  <3>  push %-1:-1
    39                              <3>  %rotate -1
    39 00000FDE 6A08                <3>  push %-1:-1
    39                              <3>  %rotate -1
    39 00000FE0 57                  <3>  push %-1:-1
    39                              <3>  %rotate -1
    39 00000FE1 56                  <3>  push %-1:-1
    39                              <3>  %rotate -1
    39                              <2>  %rotate -1
    39                              <2> 
    39 00000FE2 E827FFFFFF          <2>  call %1
    39                              <2> 
    39                              <2>  %if 1 < %0
    39 00000FE7 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    39                              <2>  %endif
    39                              <2> 
    40                              <1> 
    41                              <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    41                              <2> 
    41                              <2>  %rep %0 - 1
    41                              <2>  push %-1:-1
    41                              <2>  %rotate -1
    41                              <2>  %endrep
    41 00000FEB 6A02                <3>  push %-1:-1
    41                              <3>  %rotate -1
    41                              <2>  %rotate -1
    41                              <2> 
    41 00000FED E8EAFEFFFF          <2>  call %1
    41                              <2> 
    41                              <2>  %if 1 < %0
    41 00000FF2 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    41                              <2>  %endif
    41                              <2> 
    42                              <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    42                              <2> 
    42                              <2>  %rep %0 - 1
    42                              <2>  push %-1:-1
    42                              <2>  %rotate -1
    42                              <2>  %endrep
    42 00000FF6 6A04                <3>  push %-1:-1
    42                              <3>  %rotate -1
    42                              <2>  %rotate -1
    42                              <2> 
    42 00000FF8 E8F8FEFFFF          <2>  call %1
    42                              <2> 
    42                              <2>  %if 1 < %0
    42 00000FFD 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    42                              <2>  %endif
    42                              <2> 
    43                              <1>             cdecl   vram_font_copy, esi, edi, 0x04, ebx
    43                              <2> 
    43                              <2>  %rep %0 - 1
    43                              <2>  push %-1:-1
    43                              <2>  %rotate -1
    43                              <2>  %endrep
    43 00001001 53                  <3>  push %-1:-1
    43                              <3>  %rotate -1
    43 00001002 6A04                <3>  push %-1:-1
    43                              <3>  %rotate -1
    43 00001004 57                  <3>  push %-1:-1
    43                              <3>  %rotate -1
    43 00001005 56                  <3>  push %-1:-1
    43                              <3>  %rotate -1
    43                              <2>  %rotate -1
    43                              <2> 
    43 00001006 E803FFFFFF          <2>  call %1
    43                              <2> 
    43                              <2>  %if 1 < %0
    43 0000100B 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    43                              <2>  %endif
    43                              <2> 
    44                              <1> 
    45                              <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    45                              <2> 
    45                              <2>  %rep %0 - 1
    45                              <2>  push %-1:-1
    45                              <2>  %rotate -1
    45                              <2>  %endrep
    45 0000100F 6A01                <3>  push %-1:-1
    45                              <3>  %rotate -1
    45                              <2>  %rotate -1
    45                              <2> 
    45 00001011 E8C6FEFFFF          <2>  call %1
    45                              <2> 
    45                              <2>  %if 1 < %0
    45 00001016 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    45                              <2>  %endif
    45                              <2> 
    46                              <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    46                              <2> 
    46                              <2>  %rep %0 - 1
    46                              <2>  push %-1:-1
    46                              <2>  %rotate -1
    46                              <2>  %endrep
    46 0000101A 6A02                <3>  push %-1:-1
    46                              <3>  %rotate -1
    46                              <2>  %rotate -1
    46                              <2> 
    46 0000101C E8D4FEFFFF          <2>  call %1
    46                              <2> 
    46                              <2>  %if 1 < %0
    46 00001021 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    46                              <2>  %endif
    46                              <2> 
    47                              <1>             cdecl   vram_font_copy, esi, edi, 0x02, ebx
    47                              <2> 
    47                              <2>  %rep %0 - 1
    47                              <2>  push %-1:-1
    47                              <2>  %rotate -1
    47                              <2>  %endrep
    47 00001025 53                  <3>  push %-1:-1
    47                              <3>  %rotate -1
    47 00001026 6A02                <3>  push %-1:-1
    47                              <3>  %rotate -1
    47 00001028 57                  <3>  push %-1:-1
    47                              <3>  %rotate -1
    47 00001029 56                  <3>  push %-1:-1
    47                              <3>  %rotate -1
    47                              <2>  %rotate -1
    47                              <2> 
    47 0000102A E8DFFEFFFF          <2>  call %1
    47                              <2> 
    47                              <2>  %if 1 < %0
    47 0000102F 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    47                              <2>  %endif
    47                              <2> 
    48                              <1> 
    49                              <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    49                              <2> 
    49                              <2>  %rep %0 - 1
    49                              <2>  push %-1:-1
    49                              <2>  %rotate -1
    49                              <2>  %endrep
    49 00001033 6A00                <3>  push %-1:-1
    49                              <3>  %rotate -1
    49                              <2>  %rotate -1
    49                              <2> 
    49 00001035 E8A2FEFFFF          <2>  call %1
    49                              <2> 
    49                              <2>  %if 1 < %0
    49 0000103A 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    49                              <2>  %endif
    49                              <2> 
    50                              <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    50                              <2> 
    50                              <2>  %rep %0 - 1
    50                              <2>  push %-1:-1
    50                              <2>  %rotate -1
    50                              <2>  %endrep
    50 0000103E 6A01                <3>  push %-1:-1
    50                              <3>  %rotate -1
    50                              <2>  %rotate -1
    50                              <2> 
    50 00001040 E8B0FEFFFF          <2>  call %1
    50                              <2> 
    50                              <2>  %if 1 < %0
    50 00001045 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    50                              <2>  %endif
    50                              <2> 
    51                              <1>             cdecl   vram_font_copy, esi, edi, 0x01, ebx
    51                              <2> 
    51                              <2>  %rep %0 - 1
    51                              <2>  push %-1:-1
    51                              <2>  %rotate -1
    51                              <2>  %endrep
    51 00001049 53                  <3>  push %-1:-1
    51                              <3>  %rotate -1
    51 0000104A 6A01                <3>  push %-1:-1
    51                              <3>  %rotate -1
    51 0000104C 57                  <3>  push %-1:-1
    51                              <3>  %rotate -1
    51 0000104D 56                  <3>  push %-1:-1
    51                              <3>  %rotate -1
    51                              <2>  %rotate -1
    51                              <2> 
    51 0000104E E8BBFEFFFF          <2>  call %1
    51                              <2> 
    51                              <2>  %if 1 < %0
    51 00001053 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    51                              <2>  %endif
    51                              <2> 
    52                              <1> 
    53                              <1> %ifdef      USE_TEST_AND_SET
    54                              <1> 
    55 00001057 C705[6C100000]0000- <1>             mov     [IN_USE], dword 0                           ; clear global variable
    55 0000105F 0000                <1>
    56                              <1> %endif
    57                              <1> 
    58                              <1>             ; return registers
    59 00001061 5F                  <1>             pop		edi
    60 00001062 5E                  <1> 		    pop		esi
    61 00001063 5A                  <1> 		    pop		edx
    62 00001064 59                  <1> 		    pop		ecx
    63 00001065 5B                  <1> 		    pop		ebx
    64 00001066 58                  <1> 		    pop		eax
    65                              <1> 
    66                              <1>             ; destruct stack frame
    67 00001067 89EC                <1>             mov     esp, ebp
    68 00001069 5D                  <1>             pop     ebp
    69                              <1> 
    70 0000106A C3                  <1>             ret
    71                              <1> 
    72                              <1> %ifdef      USE_TEST_AND_SET
    73 0000106B 00                  <1> ALIGN 4, db 0
    74 0000106C 00000000            <1> IN_USE: dd 0
    75                              <1> %endif
   223                                  %include    "../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00001070 55                  <1>             push    ebp                                         ;   +12 | row
     5 00001071 89E5                <1>             mov     ebp, esp                                    ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 00001073 50                  <1>             push    eax
     9 00001074 53                  <1>             push    ebx
    10 00001075 51                  <1>             push    ecx
    11 00001076 52                  <1>             push    edx
    12 00001077 56                  <1>             push    esi
    13 00001078 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 00001079 8B7508              <1>             mov     esi, [ebp + 8]
    17 0000107C 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; loop
    20 0000107F B900000000          <1>             mov     ecx, 0                                      ; for (ECX = 0; ECX < 256; ECX++)
    21 00001084 81F900010000        <1> .10L:       cmp     ecx, 256
    22 0000108A 731F                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; figure out current column
    25 0000108C 89C8                <1>             mov     eax, ecx
    26 0000108E 83E00F              <1>             and     eax, 0x0F                                   ; begin on a new line per 16 chars
    27 00001091 01F0                <1>             add     eax, esi
    28                              <1> 
    29                              <1>             ; figure out current row
    30 00001093 89CB                <1>             mov     ebx, ecx
    31 00001095 C1EB04              <1>             shr     ebx, 4
    32 00001098 01FB                <1>             add     ebx, edi
    33                              <1> 
    34                              <1>             cdecl   draw_char, eax, ebx, 0x07, ecx
    34                              <2> 
    34                              <2>  %rep %0 - 1
    34                              <2>  push %-1:-1
    34                              <2>  %rotate -1
    34                              <2>  %endrep
    34 0000109A 51                  <3>  push %-1:-1
    34                              <3>  %rotate -1
    34 0000109B 6A07                <3>  push %-1:-1
    34                              <3>  %rotate -1
    34 0000109D 53                  <3>  push %-1:-1
    34                              <3>  %rotate -1
    34 0000109E 50                  <3>  push %-1:-1
    34                              <3>  %rotate -1
    34                              <2>  %rotate -1
    34                              <2> 
    34 0000109F E8EBFEFFFF          <2>  call %1
    34                              <2> 
    34                              <2>  %if 1 < %0
    34 000010A4 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    34                              <2>  %endif
    34                              <2> 
    35                              <1> 
    36 000010A8 41                  <1>             inc     ecx
    37 000010A9 EBD9                <1>             jmp     .10L
    38                              <1> .10E:
    39                              <1> 
    40                              <1>             ; return registers
    41 000010AB 5F                  <1>             pop     edi
    42 000010AC 5E                  <1>             pop     esi
    43 000010AD 5A                  <1>             pop     edx
    44 000010AE 59                  <1>             pop     ecx
    45 000010AF 5B                  <1>             pop     ebx
    46 000010B0 58                  <1>             pop     eax
    47                              <1> 
    48                              <1>             ; destruct stack frame
    49 000010B1 89EC                <1>             mov     esp, ebp
    50 000010B3 5D                  <1>             pop     ebp
    51                              <1> 
    52 000010B4 C3                  <1>             ret
   224                                  %include    "../modules/protect/draw_str.s"
     1                              <1> draw_str:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000010B5 55                  <1>             push    ebp                                         ;   +20 | address of string
     5 000010B6 89E5                <1>             mov     ebp, esp                                    ;   +16 | color
     6                              <1>                                                                 ;   +12 | row
     7                              <1>                                                                 ;EBP+ 8 | column
     8                              <1> 
     9                              <1>             ; save registers
    10 000010B8 50                  <1>             push    eax
    11 000010B9 53                  <1>             push    ebx
    12 000010BA 51                  <1>             push    ecx
    13 000010BB 52                  <1>             push    edx
    14 000010BC 56                  <1>             push    esi
    15 000010BD 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 000010BE 8B4D08              <1>             mov     ecx, [ebp + 8]
    19 000010C1 8B550C              <1>             mov     edx, [ebp + 12]
    20 000010C4 0FB75D10            <1>             movzx   ebx, word [ebp + 16]
    21 000010C8 8B7514              <1>             mov     esi, [ebp + 20]
    22                              <1> 
    23                              <1>             ; main process
    24 000010CB FC                  <1>             cld                                                 ; DF = 0 // address addition
    25                              <1> .10L:
    26 000010CC AC                  <1>             lodsb                                               ; AL = *ESI++ // get char
    27 000010CD 3C00                <1>             cmp     al, 0                                       ; if (AL == 0) break;
    28 000010CF 741A                <1>             je      .10E
    29                              <1> 
    30                              <1> %ifdef      USE_SYSTEM_CALL
    31 000010D1 CD81                <1>             int     0x81                                        ; sys_call(1, x, y, color, char)
    32                              <1> %else
    33                              <1>             cdecl   draw_char, ecx, edx, ebx, eax
    34                              <1> %endif
    35 000010D3 41                  <1>             inc     ecx
    36 000010D4 83F950              <1>             cmp     ecx, 80                                     ; if (80 <= ECX)
    37 000010D7 7C10                <1>             jl      .12E                                        ; {
    38 000010D9 B900000000          <1>             mov     ecx, 0                                      ;   ECX = 0;
    39 000010DE 42                  <1>             inc     edx                                         ;   EDX++;
    40 000010DF 83FA1E              <1>             cmp     edx, 30                                     ;   if (30 <= EDX)
    41 000010E2 7C05                <1>             jl      .12E                                        ;   {
    42 000010E4 BA00000000          <1>             mov     edx, 0                                      ;     EDX = 0;
    43                              <1>                                                                 ;   }
    44                              <1> .12E:                                                           ; }
    45 000010E9 EBE1                <1>             jmp     .10L
    46                              <1> .10E:
    47                              <1> 
    48                              <1>             ; return registers
    49 000010EB 5F                  <1>             pop     edi
    50 000010EC 5E                  <1>             pop     esi
    51 000010ED 5A                  <1>             pop     edx
    52 000010EE 59                  <1>             pop     ecx
    53 000010EF 5B                  <1>             pop     ebx
    54 000010F0 58                  <1>             pop     eax
    55                              <1> 
    56                              <1>             ; destruct stack frame
    57 000010F1 89EC                <1>             mov     esp, ebp
    58 000010F3 5D                  <1>             pop     ebp
    59                              <1> 
    60 000010F4 C3                  <1>             ret
   225                                  %include    "../modules/protect/draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000010F5 55                  <1>             push    ebp                                             ;   +12 | row
     5 000010F6 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | column
     6                              <1> 
     7                              <1>             ; save registers
     8 000010F8 50                  <1>             push    eax
     9 000010F9 53                  <1>             push    ebx
    10 000010FA 51                  <1>             push    ecx
    11 000010FB 52                  <1>             push    edx
    12 000010FC 56                  <1>             push    esi
    13 000010FD 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get arguments
    16 000010FE 8B7508              <1>             mov     esi, [ebp + 8]
    17 00001101 8B7D0C              <1>             mov     edi, [ebp + 12]
    18                              <1> 
    19                              <1>             ; display color bar
    20 00001104 B900000000          <1>             mov     ecx, 0                                          ; for(ECX = 0; ECX < 16;; ECX++)
    21 00001109 83F910              <1> .10L:       cmp     ecx, 16
    22 0000110C 732E                <1>             jae     .10E
    23                              <1> 
    24                              <1>             ; column
    25 0000110E 89C8                <1>             mov     eax, ecx
    26 00001110 83E001              <1>             and     eax, 0x01
    27 00001113 C1E003              <1>             shl     eax, 3                                          ; EAX *= 8
    28 00001116 01F0                <1>             add     eax, esi                                        ; EAX += column
    29                              <1> 
    30                              <1>             ; row
    31 00001118 89CB                <1>             mov     ebx, ecx
    32 0000111A D1EB                <1>             shr     ebx, 1                                          ; EBX /= 2
    33 0000111C 01FB                <1>             add     ebx, edi                                        ; EBX += row
    34                              <1> 
    35                              <1>             ; display string and background color are created in table
    36 0000111E 89CA                <1>             mov     edx, ecx
    37 00001120 D1E2                <1>             shl     edx, 1                                          ; EDX /= 2
    38 00001122 8B92[4F110000]      <1>             mov     edx, [.t0 + edx]                                ; EDX += row
    39                              <1> 
    40                              <1>             cdecl   draw_str, eax, ebx, edx, .s0
    40                              <2> 
    40                              <2>  %rep %0 - 1
    40                              <2>  push %-1:-1
    40                              <2>  %rotate -1
    40                              <2>  %endrep
    40 00001128 68[46110000]        <3>  push %-1:-1
    40                              <3>  %rotate -1
    40 0000112D 52                  <3>  push %-1:-1
    40                              <3>  %rotate -1
    40 0000112E 53                  <3>  push %-1:-1
    40                              <3>  %rotate -1
    40 0000112F 50                  <3>  push %-1:-1
    40                              <3>  %rotate -1
    40                              <2>  %rotate -1
    40                              <2> 
    40 00001130 E880FFFFFF          <2>  call %1
    40                              <2> 
    40                              <2>  %if 1 < %0
    40 00001135 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    40                              <2>  %endif
    40                              <2> 
    41                              <1> 
    42 00001139 41                  <1>             inc     ecx
    43 0000113A EBCD                <1>             jmp     .10L
    44                              <1> .10E:
    45                              <1> 
    46                              <1>             ; return registers
    47 0000113C 5F                  <1>             pop     edi
    48 0000113D 5E                  <1>             pop     esi
    49 0000113E 5A                  <1>             pop     edx
    50 0000113F 59                  <1>             pop     ecx
    51 00001140 5B                  <1>             pop     ebx
    52 00001141 58                  <1>             pop     eax
    53                              <1> 
    54                              <1>             ; destruct stack frame
    55 00001142 89E5                <1>             mov     ebp, esp
    56 00001144 5D                  <1>             pop     ebp
    57                              <1> 
    58 00001145 C3                  <1>             ret
    59                              <1> 
    60 00001146 202020202020202000  <1> .s0:        db  '        ', 0                                        ; space for 8 char
    61                              <1> 
    62 0000114F 00000008            <1> .t0:        dw  0x0000, 0x0800                                       ; background color
    63 00001153 00010009            <1>             dw  0x0100, 0x0900
    64 00001157 0002000A            <1>             dw  0x0200, 0x0A00
    65 0000115B 0003000B            <1>             dw  0x0300, 0x0B00
    66 0000115F 0004000C            <1>             dw  0x0400, 0x0C00
    67 00001163 0005000D            <1>             dw  0x0500, 0x0D00
    68 00001167 0006000E            <1>             dw  0x0600, 0x0E00
    69 0000116B 0007000F            <1>             dw  0x0700, 0x0F00
   226                                  %include    "../modules/protect/draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +16 | display color
     4 0000116F 55                  <1>             push    ebp                                             ;   +12 | Y coordinate
     5 00001170 89E5                <1>             mov     ebp, esp                                        ;EBP+ 8 | X coordinate
     6                              <1> 
     7                              <1>             ; save registers
     8 00001172 50                  <1>             push    eax
     9 00001173 53                  <1>             push    ebx
    10 00001174 51                  <1>             push    ecx
    11 00001175 52                  <1>             push    edx
    12 00001176 56                  <1>             push    esi
    13 00001177 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ;
    16                              <1>             ; calculate the corresponding VRAM address
    17                              <1>             ;
    18                              <1> 
    19                              <1>             ; multiply Y coordinate by 80 (640/8)
    20 00001178 8B7D0C              <1>             mov     edi, [ebp + 12]
    21 0000117B C1E704              <1>             shl     edi, 4                                          ; EDI *= 4
    22 0000117E 8DBCBF00000A00      <1>             lea     edi, [edi * 4 + edi + 0xA_0000]                 ; 80 = 16 * 4 + 16
    23                              <1> 
    24                              <1>             ; divide X coodinate by 8 and add
    25 00001185 8B5D08              <1>             mov     ebx, [ebp + 8]
    26 00001188 89D9                <1>             mov     ecx, ebx                                        ; ECX = x coodinate(buffer)
    27 0000118A C1EB03              <1>             shr     ebx, 3                                          ; EBX /= 8
    28 0000118D 01DF                <1>             add     edi, ebx                                        ; EDX += EBX
    29                              <1> 
    30                              <1>             ; calculate bit position from remainder of X coordinate divided by 8
    31                              <1>             ; (0=0x80, 1=0x40,... 7=0x01)
    32                              <1> 
    33 0000118F 83E107              <1>             and     ecx, 0x07                                       ; ECX = X & 0x07
    34 00001192 BB80000000          <1>             mov     ebx, 0x80
    35 00001197 D3EB                <1>             shr     ebx, cl                                         ; EBX >>= ECX
    36                              <1> 
    37                              <1>             ; color specification
    38 00001199 8B4D10              <1>             mov     ecx, [ebp + 16]
    39                              <1> 
    40                              <1> %ifdef      USE_TEST_AND_SET
    41                              <1>             cdecl   test_and_set, IN_USE
    41                              <2> 
    41                              <2>  %rep %0 - 1
    41                              <2>  push %-1:-1
    41                              <2>  %rotate -1
    41                              <2>  %endrep
    41 0000119C 68[6C100000]        <3>  push %-1:-1
    41                              <3>  %rotate -1
    41                              <2>  %rotate -1
    41                              <2> 
    41 000011A1 E881060000          <2>  call %1
    41                              <2> 
    41                              <2>  %if 1 < %0
    41 000011A6 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    41                              <2>  %endif
    41                              <2> 
    42                              <1> %endif
    43                              <1> 
    44                              <1>             ;------------------------------------------------------------------------
    45                              <1> 
    46                              <1>             cdecl   vga_set_read_plane, 0x03                    ; writing plane : luminance(I)
    46                              <2> 
    46                              <2>  %rep %0 - 1
    46                              <2>  push %-1:-1
    46                              <2>  %rotate -1
    46                              <2>  %endrep
    46 000011AA 6A03                <3>  push %-1:-1
    46                              <3>  %rotate -1
    46                              <2>  %rotate -1
    46                              <2> 
    46 000011AC E82BFDFFFF          <2>  call %1
    46                              <2> 
    46                              <2>  %if 1 < %0
    46 000011B1 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    46                              <2>  %endif
    46                              <2> 
    47                              <1>             cdecl   vga_set_write_plane, 0x08                   ; reading plane : luminance(I)
    47                              <2> 
    47                              <2>  %rep %0 - 1
    47                              <2>  push %-1:-1
    47                              <2>  %rotate -1
    47                              <2>  %endrep
    47 000011B5 6A08                <3>  push %-1:-1
    47                              <3>  %rotate -1
    47                              <2>  %rotate -1
    47                              <2> 
    47 000011B7 E839FDFFFF          <2>  call %1
    47                              <2> 
    47                              <2>  %if 1 < %0
    47 000011BC 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    47                              <2>  %endif
    47                              <2> 
    48                              <1>             cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    48                              <2> 
    48                              <2>  %rep %0 - 1
    48                              <2>  push %-1:-1
    48                              <2>  %rotate -1
    48                              <2>  %endrep
    48 000011C0 51                  <3>  push %-1:-1
    48                              <3>  %rotate -1
    48 000011C1 6A08                <3>  push %-1:-1
    48                              <3>  %rotate -1
    48 000011C3 57                  <3>  push %-1:-1
    48                              <3>  %rotate -1
    48 000011C4 53                  <3>  push %-1:-1
    48                              <3>  %rotate -1
    48                              <2>  %rotate -1
    48                              <2> 
    48 000011C5 E897FDFFFF          <2>  call %1
    48                              <2> 
    48                              <2>  %if 1 < %0
    48 000011CA 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    48                              <2>  %endif
    48                              <2> 
    49                              <1> 
    50                              <1>             cdecl   vga_set_read_plane, 0x02                    ; writing plane : red(R)
    50                              <2> 
    50                              <2>  %rep %0 - 1
    50                              <2>  push %-1:-1
    50                              <2>  %rotate -1
    50                              <2>  %endrep
    50 000011CE 6A02                <3>  push %-1:-1
    50                              <3>  %rotate -1
    50                              <2>  %rotate -1
    50                              <2> 
    50 000011D0 E807FDFFFF          <2>  call %1
    50                              <2> 
    50                              <2>  %if 1 < %0
    50 000011D5 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    50                              <2>  %endif
    50                              <2> 
    51                              <1>             cdecl   vga_set_write_plane, 0x04                   ; reading plane : red(R)
    51                              <2> 
    51                              <2>  %rep %0 - 1
    51                              <2>  push %-1:-1
    51                              <2>  %rotate -1
    51                              <2>  %endrep
    51 000011D9 6A04                <3>  push %-1:-1
    51                              <3>  %rotate -1
    51                              <2>  %rotate -1
    51                              <2> 
    51 000011DB E815FDFFFF          <2>  call %1
    51                              <2> 
    51                              <2>  %if 1 < %0
    51 000011E0 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    51                              <2>  %endif
    51                              <2> 
    52                              <1>             cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    52                              <2> 
    52                              <2>  %rep %0 - 1
    52                              <2>  push %-1:-1
    52                              <2>  %rotate -1
    52                              <2>  %endrep
    52 000011E4 51                  <3>  push %-1:-1
    52                              <3>  %rotate -1
    52 000011E5 6A04                <3>  push %-1:-1
    52                              <3>  %rotate -1
    52 000011E7 57                  <3>  push %-1:-1
    52                              <3>  %rotate -1
    52 000011E8 53                  <3>  push %-1:-1
    52                              <3>  %rotate -1
    52                              <2>  %rotate -1
    52                              <2> 
    52 000011E9 E873FDFFFF          <2>  call %1
    52                              <2> 
    52                              <2>  %if 1 < %0
    52 000011EE 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    52                              <2>  %endif
    52                              <2> 
    53                              <1> 
    54                              <1>             cdecl   vga_set_read_plane, 0x01                    ; writing plane : green(G)
    54                              <2> 
    54                              <2>  %rep %0 - 1
    54                              <2>  push %-1:-1
    54                              <2>  %rotate -1
    54                              <2>  %endrep
    54 000011F2 6A01                <3>  push %-1:-1
    54                              <3>  %rotate -1
    54                              <2>  %rotate -1
    54                              <2> 
    54 000011F4 E8E3FCFFFF          <2>  call %1
    54                              <2> 
    54                              <2>  %if 1 < %0
    54 000011F9 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    54                              <2>  %endif
    54                              <2> 
    55                              <1>             cdecl   vga_set_write_plane, 0x02                   ; reading plane : green(G)
    55                              <2> 
    55                              <2>  %rep %0 - 1
    55                              <2>  push %-1:-1
    55                              <2>  %rotate -1
    55                              <2>  %endrep
    55 000011FD 6A02                <3>  push %-1:-1
    55                              <3>  %rotate -1
    55                              <2>  %rotate -1
    55                              <2> 
    55 000011FF E8F1FCFFFF          <2>  call %1
    55                              <2> 
    55                              <2>  %if 1 < %0
    55 00001204 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    55                              <2>  %endif
    55                              <2> 
    56                              <1>             cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    56                              <2> 
    56                              <2>  %rep %0 - 1
    56                              <2>  push %-1:-1
    56                              <2>  %rotate -1
    56                              <2>  %endrep
    56 00001208 51                  <3>  push %-1:-1
    56                              <3>  %rotate -1
    56 00001209 6A02                <3>  push %-1:-1
    56                              <3>  %rotate -1
    56 0000120B 57                  <3>  push %-1:-1
    56                              <3>  %rotate -1
    56 0000120C 53                  <3>  push %-1:-1
    56                              <3>  %rotate -1
    56                              <2>  %rotate -1
    56                              <2> 
    56 0000120D E84FFDFFFF          <2>  call %1
    56                              <2> 
    56                              <2>  %if 1 < %0
    56 00001212 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    56                              <2>  %endif
    56                              <2> 
    57                              <1> 
    58                              <1>             cdecl   vga_set_read_plane, 0x00                    ; writing plane : blue(B)
    58                              <2> 
    58                              <2>  %rep %0 - 1
    58                              <2>  push %-1:-1
    58                              <2>  %rotate -1
    58                              <2>  %endrep
    58 00001216 6A00                <3>  push %-1:-1
    58                              <3>  %rotate -1
    58                              <2>  %rotate -1
    58                              <2> 
    58 00001218 E8BFFCFFFF          <2>  call %1
    58                              <2> 
    58                              <2>  %if 1 < %0
    58 0000121D 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    58                              <2>  %endif
    58                              <2> 
    59                              <1>             cdecl   vga_set_write_plane, 0x01                   ; reading plane : blue(B)
    59                              <2> 
    59                              <2>  %rep %0 - 1
    59                              <2>  push %-1:-1
    59                              <2>  %rotate -1
    59                              <2>  %endrep
    59 00001221 6A01                <3>  push %-1:-1
    59                              <3>  %rotate -1
    59                              <2>  %rotate -1
    59                              <2> 
    59 00001223 E8CDFCFFFF          <2>  call %1
    59                              <2> 
    59                              <2>  %if 1 < %0
    59 00001228 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    59                              <2>  %endif
    59                              <2> 
    60                              <1>             cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    60                              <2> 
    60                              <2>  %rep %0 - 1
    60                              <2>  push %-1:-1
    60                              <2>  %rotate -1
    60                              <2>  %endrep
    60 0000122C 51                  <3>  push %-1:-1
    60                              <3>  %rotate -1
    60 0000122D 6A01                <3>  push %-1:-1
    60                              <3>  %rotate -1
    60 0000122F 57                  <3>  push %-1:-1
    60                              <3>  %rotate -1
    60 00001230 53                  <3>  push %-1:-1
    60                              <3>  %rotate -1
    60                              <2>  %rotate -1
    60                              <2> 
    60 00001231 E82BFDFFFF          <2>  call %1
    60                              <2> 
    60                              <2>  %if 1 < %0
    60 00001236 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    60                              <2>  %endif
    60                              <2> 
    61                              <1> 
    62                              <1> %ifdef      USE_TEST_AND_SET
    63                              <1> 
    64 0000123A C705[6C100000]0000- <1>             mov     [IN_USE], dword 0
    64 00001242 0000                <1>
    65                              <1> %endif
    66                              <1> 
    67                              <1>             ; return registers
    68 00001244 5F                  <1>             pop     edi
    69 00001245 5E                  <1>             pop     esi
    70 00001246 5A                  <1>             pop     edx
    71 00001247 59                  <1>             pop     ecx
    72 00001248 5B                  <1>             pop     ebx
    73 00001249 58                  <1>             pop     eax
    74                              <1> 
    75                              <1>             ; destruct stack frame
    76 0000124A 89EC                <1>             mov     esp, ebp
    77 0000124C 5D                  <1>             pop     ebp
    78                              <1> 
    79 0000124D C3                  <1>             ret
   227                                  %include    "../modules/protect/draw_line.s"
     1                              <1> draw_line:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>             ; and reserve stack for some local variables
     5                              <1> 
     6                              <1>             ;   +24 | display color
     7                              <1>             ;   +20 | Y_end
     8                              <1>             ;   +16 | X_end
     9                              <1>             ;   +12 | Y_start
    10                              <1>             ;   + 8 | X_start
    11                              <1>             ;EBP+ 4 | IP
    12                              <1>             ;EBP+ 0 | EBP
    13                              <1>             ;   - 4 | sum       = 0 // total value of relative axis
    14                              <1>             ;   - 8 | X_start   = 0 // x coordinate
    15                              <1>             ;   -12 | dx        = 0 // x increment
    16                              <1>             ;   -16 | inc_x     = 0 // increment of x coordinate(1 or -1)
    17                              <1>             ;   -20 | Y_start   = 0 // y coordinate
    18                              <1>             ;   -24 | dy        = 0 // y increment
    19                              <1>             ;   -28 | inc_y     = 0 // increment of y coordinate(1 or -1)
    20                              <1> 
    21 0000124E 55                  <1>             push    ebp
    22 0000124F 89E5                <1>             mov     ebp, esp
    23                              <1> 
    24 00001251 6A00                <1>             push    dword 0
    25 00001253 6A00                <1>             push    dword 0
    26 00001255 6A00                <1>             push    dword 0
    27 00001257 6A00                <1>             push    dword 0
    28 00001259 6A00                <1>             push    dword 0
    29 0000125B 6A00                <1>             push    dword 0
    30 0000125D 6A00                <1>             push    dword 0
    31                              <1> 
    32                              <1>             ; save registers
    33 0000125F 50                  <1>             push    eax
    34 00001260 53                  <1>             push    ebx
    35 00001261 51                  <1>             push    ecx
    36 00001262 52                  <1>             push    edx
    37 00001263 56                  <1>             push    esi
    38 00001264 57                  <1>             push    edi
    39                              <1> 
    40                              <1>             ; calculate width(X axis)
    41 00001265 8B4508              <1>             mov     eax, [ebp + 8]                                  ; eax = x_start
    42 00001268 8B5D10              <1>             mov     ebx, [ebp + 16]                                 ; ebx = x_end
    43 0000126B 29C3                <1>             sub     ebx, eax                                        ; ebx = x_e - x_s //width
    44 0000126D 7D09                <1>             jge     .10F                                            ; if (width < 0){
    45                              <1> 
    46 0000126F F7DB                <1>             neg     ebx                                             ;   width *= -1
    47 00001271 BEFFFFFFFF          <1>             mov     esi, -1                                         ;   // increment of x coordinate
    48 00001276 EB05                <1>             jmp     .10E                                            ; } else {
    49                              <1> .10F:
    50 00001278 BE01000000          <1>             mov     esi, 1                                          ;   // increment of x coordinate
    51                              <1> .10E:                                                               ; }
    52                              <1> 
    53                              <1>             ; calculate height(Y axis)
    54 0000127D 8B4D0C              <1>             mov     ecx, [ebp + 12]                                 ; eax = y_start
    55 00001280 8B5514              <1>             mov     edx, [ebp + 20]                                 ; ebx = y_end
    56 00001283 29CA                <1>             sub     edx, ecx                                        ; ebx = y_e - y_s //height
    57 00001285 7D09                <1>             jge     .20F                                            ; if (height < 0){
    58                              <1> 
    59 00001287 F7DA                <1>             neg     edx                                             ;   height *= -1
    60 00001289 BFFFFFFFFF          <1>             mov     edi, -1                                         ;   // increment of y coordinate
    61 0000128E EB05                <1>             jmp     .20E                                            ; } else {
    62                              <1> .20F:
    63 00001290 BF01000000          <1>             mov     edi, 1                                          ;   // increment of y coordinate
    64                              <1> .20E:                                                               ; }
    65                              <1> 
    66                              <1>             ; store the calculated value in local variables
    67                              <1> 
    68                              <1>             ; X axis
    69 00001295 8945F8              <1>             mov     [ebp -  8], eax                                  ; start coordinate
    70 00001298 895DF4              <1>             mov     [ebp - 12], ebx                                 ; width
    71 0000129B 8975F0              <1>             mov     [ebp - 16], esi                                 ; increment(base axis: 1 or -1)
    72                              <1> 
    73                              <1>             ; Y axis
    74 0000129E 894DEC              <1>             mov     [ebp - 20], ecx                                 ; start coordinate
    75 000012A1 8955E8              <1>             mov     [ebp - 24], edx                                 ; height
    76 000012A4 897DE4              <1>             mov     [ebp - 28], edi                                 ; increment(base axis: 1 or -1)
    77                              <1> 
    78                              <1>             ;--------------------------------------------------
    79                              <1>             ; what is base axis?
    80                              <1>             ; x axis if (width > height) else y axis.
    81                              <1>             ; relative axis is what is not base axis.
    82                              <1>             ;--------------------------------------------------
    83                              <1> 
    84                              <1>             ; define base axis
    85 000012A7 39D3                <1>             cmp     ebx, edx                                        ; if (width <= height)
    86 000012A9 7F08                <1>             jg      .22F                                            ; {
    87                              <1> 
    88 000012AB 8D75EC              <1>             lea     esi, [ebp - 20]                                 ;   // x axis is base one.
    89 000012AE 8D7DF8              <1>             lea     edi, [ebp -  8]                                 ;   // y axis is relative one.
    90                              <1>                                                                     ; }
    91 000012B1 EB06                <1>             jmp     .22E                                            ; else
    92                              <1> .22F:                                                               ; {
    93                              <1>                                                                     ;   // y axis is base one.
    94 000012B3 8D75F8              <1>             lea     esi, [ebp -  8]                                 ;   // x axis is relative one.
    95 000012B6 8D7DEC              <1>             lea     edi, [ebp - 20]                                 ; }
    96                              <1> .22E:
    97                              <1> 
    98                              <1>             ; num of repetitions(== num of dots of base axis)
    99 000012B9 8B4EFC              <1>             mov     ecx, [esi - 4]                                  ; ECX == width of base axis
   100 000012BC 83F900              <1>             cmp     ecx, 0
   101 000012BF 7505                <1>             jnz     .30E
   102 000012C1 B901000000          <1>             mov     ecx, 1
   103                              <1> .30E:
   104                              <1> 
   105                              <1>             ; draw line
   106                              <1> .50L:
   107                              <1> 
   108                              <1> %ifdef      USE_SYSTEM_CALL
   109 000012C6 89C8                <1>             mov     eax, ecx
   110                              <1> 
   111 000012C8 8B5D18              <1>             mov     ebx, [ebp + 24]
   112 000012CB 8B4DF8              <1>             mov     ecx, [ebp -  8]
   113 000012CE 8B55EC              <1>             mov     edx, [ebp - 20]
   114 000012D1 CD82                <1>             int     0x82
   115                              <1> 
   116 000012D3 89C1                <1>             mov     ecx, eax
   117                              <1> %else
   120                              <1>             cdecl   draw_pixel, dword [ebp -  8],                                 dword [ebp - 20],                                 dword [ebp + 24]
   121                              <1> %endif
   122                              <1>             ; update base axis(1 dot)
   123 000012D5 8B46F8              <1>             mov     eax, [esi - 8]                                  ; EAX = inc of base axis(1 or -1)
   124 000012D8 0106                <1>             add     [esi - 0], eax
   125                              <1> 
   126                              <1>             ; update relative axis
   127 000012DA 8B45FC              <1>             mov     eax, [ebp - 4]                                  ; EAX = sum // total val of relative axis
   128 000012DD 0347FC              <1>             add     eax, [edi - 4]                                  ; EAX += dy // inc(draw_width of relative axis)
   129                              <1> 
   130 000012E0 8B5EFC              <1>             mov     ebx, [esi - 4]                                  ; EBX = dx  // inc(draw_width of base axis)
   131                              <1> 
   132 000012E3 39D8                <1>             cmp     eax, ebx                                        ; if (total val <= inc of relative axis)
   133 000012E5 7C07                <1>             jl      .52E                                            ; {
   134 000012E7 29D8                <1>             sub     eax, ebx                                        ;   EAX -= EBX // subtract inc of relative axis from total val
   135                              <1>                                                                     ;   // update coordinate of relative axis(1 dot)
   136 000012E9 8B5FF8              <1>             mov     ebx, [edi - 8]                                  ;   EBX = inc of relative axis
   137 000012EC 011F                <1>             add     [edi - 0], ebx
   138                              <1> .52E:                                                               ; }
   139                              <1> 
   140 000012EE 8945FC              <1>             mov     [ebp - 4], eax                                  ; update total val
   141                              <1> 
   142 000012F1 E2D3                <1>             loop    .50L
   143                              <1> .50E:
   144                              <1> 
   145                              <1>             ; return registers
   146 000012F3 5F                  <1>             pop     edi
   147 000012F4 5E                  <1>             pop     esi
   148 000012F5 5A                  <1>             pop     edx
   149 000012F6 59                  <1>             pop     ecx
   150 000012F7 5B                  <1>             pop     ebx
   151 000012F8 58                  <1>             pop     eax
   152                              <1> 
   153                              <1>             ; destruct stack frame
   154 000012F9 89EC                <1>             mov     esp, ebp
   155 000012FB 5D                  <1>             pop     ebp
   156                              <1> 
   157 000012FC C3                  <1>             ret
   228                                  %include    "../modules/protect/draw_rect.s"
     1                              <1> draw_rect:
     2                              <1> 
     3                              <1>             ; construct stack frame                                 ;   +24 | display color
     4 000012FD 55                  <1>             push    ebp                                             ;   +20 | Y end
     5 000012FE 89E5                <1>             mov     ebp, esp                                        ;   +16 | X end
     6                              <1>                                                                     ;   +12 | Y_start
     7                              <1>                                                                     ;EBP+ 8 | X_start
     8                              <1> 
     9                              <1>             ; save registers
    10 00001300 50                  <1>             push    eax
    11 00001301 53                  <1>             push    ebx
    12 00001302 51                  <1>             push    ecx
    13 00001303 52                  <1>             push    edx
    14 00001304 56                  <1>             push    esi
    15 00001305 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; get arguments
    18 00001306 8B4508              <1>             mov     eax, [ebp +  8]
    19 00001309 8B5D0C              <1>             mov     ebx, [ebp + 12]
    20 0000130C 8B4D10              <1>             mov     ecx, [ebp + 16]
    21 0000130F 8B5514              <1>             mov     edx, [ebp + 20]
    22 00001312 8B7518              <1>             mov     esi, [ebp + 24]
    23                              <1> 
    24                              <1>             ; confirm the size of the coordinate axes
    25 00001315 39C8                <1>             cmp     eax, ecx
    26 00001317 7C01                <1>             jl      .10E
    27 00001319 91                  <1>             xchg    eax, ecx
    28                              <1> .10E:
    29 0000131A 39D3                <1>             cmp     ebx, edx
    30 0000131C 7C02                <1>             jl      .20E
    31 0000131E 87DA                <1>             xchg    ebx, edx
    32                              <1> .20E:
    33                              <1> 
    34                              <1>             ; draw rectangle
    35                              <1>             cdecl   draw_line, eax, ebx, ecx, ebx, esi              ; upper line
    35                              <2> 
    35                              <2>  %rep %0 - 1
    35                              <2>  push %-1:-1
    35                              <2>  %rotate -1
    35                              <2>  %endrep
    35 00001320 56                  <3>  push %-1:-1
    35                              <3>  %rotate -1
    35 00001321 53                  <3>  push %-1:-1
    35                              <3>  %rotate -1
    35 00001322 51                  <3>  push %-1:-1
    35                              <3>  %rotate -1
    35 00001323 53                  <3>  push %-1:-1
    35                              <3>  %rotate -1
    35 00001324 50                  <3>  push %-1:-1
    35                              <3>  %rotate -1
    35                              <2>  %rotate -1
    35                              <2> 
    35 00001325 E824FFFFFF          <2>  call %1
    35                              <2> 
    35                              <2>  %if 1 < %0
    35 0000132A 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    35                              <2>  %endif
    35                              <2> 
    36                              <1>             cdecl   draw_line, eax, ebx, eax, edx, esi              ; left  line
    36                              <2> 
    36                              <2>  %rep %0 - 1
    36                              <2>  push %-1:-1
    36                              <2>  %rotate -1
    36                              <2>  %endrep
    36 0000132E 56                  <3>  push %-1:-1
    36                              <3>  %rotate -1
    36 0000132F 52                  <3>  push %-1:-1
    36                              <3>  %rotate -1
    36 00001330 50                  <3>  push %-1:-1
    36                              <3>  %rotate -1
    36 00001331 53                  <3>  push %-1:-1
    36                              <3>  %rotate -1
    36 00001332 50                  <3>  push %-1:-1
    36                              <3>  %rotate -1
    36                              <2>  %rotate -1
    36                              <2> 
    36 00001333 E816FFFFFF          <2>  call %1
    36                              <2> 
    36                              <2>  %if 1 < %0
    36 00001338 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    36                              <2>  %endif
    36                              <2> 
    37                              <1> 
    38 0000133C 4A                  <1>             dec     edx                                             ; // lower line up 1 dot
    39                              <1>             cdecl   draw_line, eax, edx, ecx, edx, esi              ; lower line
    39                              <2> 
    39                              <2>  %rep %0 - 1
    39                              <2>  push %-1:-1
    39                              <2>  %rotate -1
    39                              <2>  %endrep
    39 0000133D 56                  <3>  push %-1:-1
    39                              <3>  %rotate -1
    39 0000133E 52                  <3>  push %-1:-1
    39                              <3>  %rotate -1
    39 0000133F 51                  <3>  push %-1:-1
    39                              <3>  %rotate -1
    39 00001340 52                  <3>  push %-1:-1
    39                              <3>  %rotate -1
    39 00001341 50                  <3>  push %-1:-1
    39                              <3>  %rotate -1
    39                              <2>  %rotate -1
    39                              <2> 
    39 00001342 E807FFFFFF          <2>  call %1
    39                              <2> 
    39                              <2>  %if 1 < %0
    39 00001347 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    39                              <2>  %endif
    39                              <2> 
    40 0000134B 42                  <1>             inc     edx
    41                              <1> 
    42 0000134C 49                  <1>             dec     ecx                                             ; // right line left 1 dot
    43                              <1>             cdecl   draw_line, ecx, ebx, ecx, edx, esi              ; right line
    43                              <2> 
    43                              <2>  %rep %0 - 1
    43                              <2>  push %-1:-1
    43                              <2>  %rotate -1
    43                              <2>  %endrep
    43 0000134D 56                  <3>  push %-1:-1
    43                              <3>  %rotate -1
    43 0000134E 52                  <3>  push %-1:-1
    43                              <3>  %rotate -1
    43 0000134F 51                  <3>  push %-1:-1
    43                              <3>  %rotate -1
    43 00001350 53                  <3>  push %-1:-1
    43                              <3>  %rotate -1
    43 00001351 51                  <3>  push %-1:-1
    43                              <3>  %rotate -1
    43                              <2>  %rotate -1
    43                              <2> 
    43 00001352 E8F7FEFFFF          <2>  call %1
    43                              <2> 
    43                              <2>  %if 1 < %0
    43 00001357 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    43                              <2>  %endif
    43                              <2> 
    44                              <1> 
    45                              <1>             ; return registers
    46 0000135B 5F                  <1>             pop     edi
    47 0000135C 5E                  <1>             pop     esi
    48 0000135D 5A                  <1>             pop     edx
    49 0000135E 59                  <1>             pop     ecx
    50 0000135F 5B                  <1>             pop     ebx
    51 00001360 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 00001361 89EC                <1>             mov     esp, ebp
    55 00001363 5D                  <1>             pop     ebp
    56                              <1> 
    57 00001364 C3                  <1>             ret
   229                                  %include    "../modules/protect/int_to_str.s"
     1                              <1> int_to_str:
     2                              <1> 
     3                              <1>         ;construct stack frame
     4                              <1> 
     5 00001365 55                  <1>         push    ebp
     6 00001366 89E5                <1>         mov     ebp, esp                                ;   +24|flag
     7                              <1>                                                         ;   +20|radix
     8                              <1>                                                         ;   +16|dest buffer size
     9                              <1>                                                         ;   +12|dest buffer address
    10                              <1>                                                         ;   + 8|the value to be converted
    11                              <1>                                                         ;   + 4|Instruction Pointer
    12                              <1>                                                         ;EBP+ 0|EBP
    13                              <1>         ; save registers
    14                              <1> 
    15 00001368 50                  <1>         push    eax
    16 00001369 53                  <1>         push    ebx
    17 0000136A 51                  <1>         push    ecx
    18 0000136B 52                  <1>         push    edx
    19 0000136C 56                  <1>         push    esi
    20 0000136D 57                  <1>         push    edi
    21                              <1> 
    22                              <1>         ; get args
    23                              <1> 
    24 0000136E 8B4508              <1>         mov     eax, [ebp +  8]                         ; val = value
    25 00001371 8B750C              <1>         mov     esi, [ebp + 12]                         ; dest= buffer address
    26 00001374 8B4D10              <1>         mov     ecx, [ebp + 16]                         ; size= remaining buffer size
    27                              <1> 
    28 00001377 89F7                <1>         mov     edi, esi                                ; end of buffer
    29 00001379 01CF                <1>         add     edi, ecx                                ; dest = &dest[esize - 1]
    30 0000137B 4F                  <1>         dec     edi
    31                              <1> 
    32 0000137C 8B5D18              <1>         mov     ebx, [ebp + 24]
    33                              <1> 
    34                              <1>         ; signing judge
    35                              <1> 
    36 0000137F F7C301000000        <1>         test    ebx, 0b0001                             ; if (flags & 0x01) //if signed => ZF = 0
    37 00001385 7408                <1> .10Q:   je      .10E                                    ; {                 //if not ZF = 1 so => jmp
    38 00001387 83F800              <1>         cmp     eax, 0                                  ;   if (val < 0)    //CF = 1, ZF = 0
    39 0000138A 7D03                <1> .12Q:   jge     .12E                                    ;   {
    40 0000138C 83CB02              <1>         or      ebx, 0b0010                             ;       flags |= 2; //set B1
    41                              <1>                                                         ; }}
    42                              <1> .12E:
    43                              <1> .10E:
    44                              <1> 
    45                              <1>         ; sign output judge
    46                              <1> 
    47 0000138F F7C302000000        <1>         test    ebx, 0b0010
    48 00001395 7410                <1> .20Q:   je      .20E
    49 00001397 83F800              <1>         cmp     eax, 0
    50 0000139A 7D07                <1> .22Q:   jge     .22F
    51 0000139C F7D8                <1>         neg     eax                                     ; sign reverse
    52 0000139E C6062D              <1>         mov     [esi], byte '-'                         ; sign display
    53 000013A1 EB03                <1>         jmp     .22E
    54                              <1> .22F:
    55 000013A3 C6062B              <1>         mov     [esi], byte '+'
    56                              <1> .22E:
    57 000013A6 49                  <1>         dec     ecx                                     ; subtract remaining buffer size -> ?
    58                              <1> .20E:
    59                              <1> 
    60                              <1>         ; ASCII conversion
    61                              <1> 
    62 000013A7 8B5D14              <1>         mov     ebx, [ebp + 20]                          ; ebx = radix
    63                              <1> 
    64                              <1> .30L:                                                   ; do{
    65 000013AA BA00000000          <1>         mov     edx, 0
    66 000013AF F7F3                <1>         div     ebx                                    ;   edx = edx:eax % ebx;
    67                              <1>                                                         ;   eax = edx:eax / ebx;
    68                              <1> 
    69 000013B1 89D6                <1>         mov     esi, edx                                ;   //refer to coversion table
    70 000013B3 8A96[DE130000]      <1>         mov     dl, byte [.ascii + esi]                 ;   DL = ASCII[edx];
    71                              <1> 
    72 000013B9 8817                <1>         mov     [edi], dl                               ;   *dest = DL;
    73 000013BB 4F                  <1>         dec     edi                                     ;   dest--;
    74                              <1> 
    75 000013BC 83F800              <1>         cmp     eax, 0
    76 000013BF E0E9                <1>         loopnz  .30L                                    ; } while(eax);
    77                              <1> 
    78                              <1> .30E:
    79                              <1> 
    80                              <1>         ; padding (zero / blank)
    81                              <1> 
    82 000013C1 83F900              <1>         cmp     ecx, 0                                  ; if (esize)
    83 000013C4 740E                <1> .40Q:   je      .40E                                    ; {
    84 000013C6 B020                <1>         mov     al, ' '                                 ;   AL = ' '; // padding with blanks
    85 000013C8 66837D1804          <1>         cmp     [ebp + 24], word 0b0100                  ;   if (flags & 0x04)
    86 000013CD 7502                <1> .42Q:   jne     .42E                                    ;   {
    87 000013CF B030                <1>         mov     al, '0'                                 ;       AL = '0'; // padding with zero
    88                              <1> .42E:                                                   ;   }
    89 000013D1 FD                  <1>         std                                             ;   // DF = 1(dec)
    90 000013D2 F3AA                <1>         rep     stosb                                       ;   while (--ecx) * edi-- = ' ';
    91                              <1> .40E:                                                   ; }
    92                              <1> 
    93                              <1>         ; return registers
    94                              <1> 
    95 000013D4 5F                  <1>         pop     edi
    96 000013D5 5E                  <1>         pop     esi
    97 000013D6 5A                  <1>         pop     edx
    98 000013D7 59                  <1>         pop     ecx
    99 000013D8 5B                  <1>         pop     ebx
   100 000013D9 58                  <1>         pop     eax
   101                              <1> 
   102                              <1>         ; destruct stack frame
   103                              <1> 
   104 000013DA 89EC                <1>         mov     esp, ebp
   105 000013DC 5D                  <1>         pop     ebp
   106                              <1> 
   107 000013DD C3                  <1>         ret
   108                              <1> 
   109                              <1> 
   110 000013DE 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                      ; conversion table
   110 000013E7 39414243444546      <1>
   230                                  %include    "../modules/protect/rtc.s"
     1                              <1> rtc_get_time:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 000013EE 55                  <1>             push    ebp                                     ; EBP+8 | destination
     5 000013EF 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 000013F1 50                  <1>             push    eax
     9 000013F2 53                  <1>             push    ebx
    10                              <1> 
    11                              <1> ; // Avoid conflicts between RTC data updates and
    12                              <1> ; // on-chip RAM access by confirming UIP bit on Register A
    13                              <1> 
    14 000013F3 B00A                <1>             mov     al, 0x0A                                ; register A
    15 000013F5 E670                <1>             out     0x70, al
    16 000013F7 E471                <1>             in      al, 0x71                                ; al = register A
    17 000013F9 A880                <1>             test    al, 0x80                                ; if (UIP) // updating
    18 000013FB 7407                <1>             je      .10F                                    ; {
    19 000013FD B801000000          <1>             mov     eax, 1                                  ;   return = 1;
    20 00001402 EB27                <1>             jmp     .10E                                    ; }
    21                              <1> .10F:                                                       ; else
    22                              <1>                                                             ; {        // get time process
    23                              <1> 
    24                              <1>             ; main process
    25 00001404 B004                <1>             mov     al, 0x04                                ;   hour
    26 00001406 E670                <1>             out     0x70, al
    27 00001408 E471                <1>             in      al, 0x71
    28                              <1> 
    29 0000140A C1E008              <1>             shl     eax, 8
    30                              <1> 
    31 0000140D B002                <1>             mov     al, 0x02                                ;   minute
    32 0000140F E670                <1>             out     0x70, al
    33 00001411 E471                <1>             in      al, 0x71
    34                              <1> 
    35 00001413 C1E008              <1>             shl     eax, 8
    36                              <1> 
    37 00001416 B000                <1>             mov     al, 0x00                                ;   second
    38 00001418 E670                <1>             out     0x70, al
    39 0000141A E471                <1>             in      al, 0x71
    40                              <1> 
    41 0000141C 25FFFFFF00          <1>             and     eax, 0x00_FF_FF_FF                      ;   all data are in lower 3 bytes of eax register
    42                              <1> 
    43 00001421 8B5D08              <1>             mov     ebx, [ebp + 8]
    44 00001424 8903                <1>             mov     [ebx], eax                              ;   [dest] = real time
    45                              <1> 
    46 00001426 B800000000          <1>             mov     eax, 0                                  ;   return = 0;
    47                              <1> .10E:                                                       ; }
    48                              <1> 
    49                              <1>             ; return register
    50 0000142B 5B                  <1>             pop     ebx
    51 0000142C 58                  <1>             pop     eax
    52                              <1> 
    53                              <1>             ; destruct stack frame
    54 0000142D 89EC                <1>             mov     esp, ebp
    55 0000142F 5D                  <1>             pop     ebp
    56                              <1> 
    57 00001430 C3                  <1>             ret
   231                                  %include    "../modules/protect/draw_time.s"
     1                              <1> draw_time:
     2                              <1> 
     3                              <1>             ; construct stack frame                         ;   +20 | time data
     4 00001431 55                  <1>             push    ebp                                     ;   +16 | display color
     5 00001432 89E5                <1>             mov     ebp, esp                                ;   +12 | row
     6                              <1>                                                             ;EBP+ 8 | col
     7                              <1> 
     8                              <1>             ; save registers
     9 00001434 50                  <1>             push    eax
    10 00001435 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; get arg
    13 00001436 8B4514              <1>             mov     eax, [ebp + 20]
    14                              <1> 
    15 00001439 0FB6D8              <1>             movzx   ebx, al                                 ; ebx = second
    16                              <1>             cdecl   int_to_str, ebx, .sec, 2, 16, 0b0100
    16                              <2> 
    16                              <2>  %rep %0 - 1
    16                              <2>  push %-1:-1
    16                              <2>  %rotate -1
    16                              <2>  %endrep
    16 0000143C 6A04                <3>  push %-1:-1
    16                              <3>  %rotate -1
    16 0000143E 6A10                <3>  push %-1:-1
    16                              <3>  %rotate -1
    16 00001440 6A02                <3>  push %-1:-1
    16                              <3>  %rotate -1
    16 00001442 68[A3140000]        <3>  push %-1:-1
    16                              <3>  %rotate -1
    16 00001447 53                  <3>  push %-1:-1
    16                              <3>  %rotate -1
    16                              <2>  %rotate -1
    16                              <2> 
    16 00001448 E818FFFFFF          <2>  call %1
    16                              <2> 
    16                              <2>  %if 1 < %0
    16 0000144D 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    16                              <2>  %endif
    16                              <2> 
    17                              <1> 
    18 00001451 88E3                <1>             mov     bl, ah                                  ; ebx = min
    19                              <1>             cdecl   int_to_str, ebx, .min, 2, 16, 0b0100
    19                              <2> 
    19                              <2>  %rep %0 - 1
    19                              <2>  push %-1:-1
    19                              <2>  %rotate -1
    19                              <2>  %endrep
    19 00001453 6A04                <3>  push %-1:-1
    19                              <3>  %rotate -1
    19 00001455 6A10                <3>  push %-1:-1
    19                              <3>  %rotate -1
    19 00001457 6A02                <3>  push %-1:-1
    19                              <3>  %rotate -1
    19 00001459 68[A0140000]        <3>  push %-1:-1
    19                              <3>  %rotate -1
    19 0000145E 53                  <3>  push %-1:-1
    19                              <3>  %rotate -1
    19                              <2>  %rotate -1
    19                              <2> 
    19 0000145F E801FFFFFF          <2>  call %1
    19                              <2> 
    19                              <2>  %if 1 < %0
    19 00001464 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    19                              <2>  %endif
    19                              <2> 
    20                              <1> 
    21 00001468 C1E810              <1>             shr     eax, 16                                 ; ax = hour
    22                              <1>             cdecl   int_to_str, eax, .hour, 2, 16, 0b0100
    22                              <2> 
    22                              <2>  %rep %0 - 1
    22                              <2>  push %-1:-1
    22                              <2>  %rotate -1
    22                              <2>  %endrep
    22 0000146B 6A04                <3>  push %-1:-1
    22                              <3>  %rotate -1
    22 0000146D 6A10                <3>  push %-1:-1
    22                              <3>  %rotate -1
    22 0000146F 6A02                <3>  push %-1:-1
    22                              <3>  %rotate -1
    22 00001471 68[9D140000]        <3>  push %-1:-1
    22                              <3>  %rotate -1
    22 00001476 50                  <3>  push %-1:-1
    22                              <3>  %rotate -1
    22                              <2>  %rotate -1
    22                              <2> 
    22 00001477 E8E9FEFFFF          <2>  call %1
    22                              <2> 
    22                              <2>  %if 1 < %0
    22 0000147C 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    22                              <2>  %endif
    22                              <2> 
    23                              <1> 
    24                              <1>             ; display time
    25                              <1>             cdecl   draw_str, dword [ebp + 8], dword [ebp + 12], dword [ebp + 16], .hour
    25                              <2> 
    25                              <2>  %rep %0 - 1
    25                              <2>  push %-1:-1
    25                              <2>  %rotate -1
    25                              <2>  %endrep
    25 00001480 68[9D140000]        <3>  push %-1:-1
    25                              <3>  %rotate -1
    25 00001485 FF7510              <3>  push %-1:-1
    25                              <3>  %rotate -1
    25 00001488 FF750C              <3>  push %-1:-1
    25                              <3>  %rotate -1
    25 0000148B FF7508              <3>  push %-1:-1
    25                              <3>  %rotate -1
    25                              <2>  %rotate -1
    25                              <2> 
    25 0000148E E822FCFFFF          <2>  call %1
    25                              <2> 
    25                              <2>  %if 1 < %0
    25 00001493 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    25                              <2>  %endif
    25                              <2> 
    26                              <1> 
    27                              <1>             ; return registers
    28 00001497 5B                  <1>             pop     ebx
    29 00001498 58                  <1>             pop     eax
    30                              <1> 
    31                              <1>             ; destruct stack frame
    32 00001499 89EC                <1>             mov     esp, ebp
    33 0000149B 5D                  <1>             pop     ebp
    34                              <1> 
    35 0000149C C3                  <1>             ret
    36                              <1> 
    37 0000149D 5A5A3A              <1> .hour:  db  "ZZ:"
    38 000014A0 5A5A3A              <1> .min:  db  "ZZ:"
    39 000014A3 5A5A00              <1> .sec:  db  "ZZ", 0
   232                                  %include    "../modules/protect/interrupt.s"
     1                              <1> ; Initialize vector of IDTR
     2                              <1> 
     3 000014A6 90<rept>            <1> ALIGN 4
     4 000014A8 FF07                <1> IDTR:       dw      8 * 256 - 1                                     ; limit of IDT
     5 000014AA 00001000            <1>             dd      VECT_BASE                                       ; base address of IDT
     6                              <1> 
     7                              <1> ; Initialize IDT
     8                              <1> 
     9                              <1> init_int:
    10                              <1> 
    11                              <1>             ; save registers
    12 000014AE 50                  <1>             push    eax
    13 000014AF 53                  <1>             push    ebx
    14 000014B0 51                  <1>             push    ecx
    15 000014B1 57                  <1>             push    edi
    16                              <1> 
    17                              <1>             ; define Interrupt Gate Descriptor and apply default process to them
    18                              <1> 
    19 000014B2 8D05[F8150000]      <1>             lea     eax, [int_default]                              ; EAX = the address of interrupt process
    20 000014B8 BB008E0800          <1>             mov     ebx, 0x0008_8E00                                ; EBX = segment selector & P,DPL,DT,TYPE
    21 000014BD 6693                <1>             xchg    ax, bx                                          ; exchange lower word
    22                              <1> 
    23 000014BF B900010000          <1>             mov     ecx, 256                                        ; num of Interrupt Gate Descriptor
    24 000014C4 BF00001000          <1>             mov     edi, VECT_BASE                                  ; base address of Interrupt Descriptor Table
    25                              <1> 
    26                              <1> .10L:
    27 000014C9 891F                <1>             mov     [edi + 0], ebx                                  ; interrupt descriptor(lower)
    28 000014CB 894704              <1>             mov     [edi + 4], eax                                  ; interrupt descriptor(upper)
    29 000014CE 83C708              <1>             add     edi, 8                                          ; EDI += 8 byte
    30 000014D1 E2F6                <1>             loop    .10L
    31                              <1> 
    32                              <1>             ; set up Interrupt Descriptor
    33 000014D3 0F011D[A8140000]    <1>             lidt    [IDTR]
    34                              <1> 
    35                              <1>             ; return registers
    36 000014DA 5F                  <1>             pop     edi
    37 000014DB 59                  <1>             pop     ecx
    38 000014DC 5B                  <1>             pop     ebx
    39 000014DD 58                  <1>             pop     eax
    40                              <1> 
    41 000014DE C3                  <1>             ret
    42                              <1> 
    43                              <1> int_stop:
    44                              <1> 
    45 000014DF FB                  <1>             sti                                                     ; interrupt enable
    46                              <1> 
    47                              <1>             ; display the string indicated in EAX
    48                              <1>             cdecl   draw_str, 25, 15, 0x060F, eax
    48                              <2> 
    48                              <2>  %rep %0 - 1
    48                              <2>  push %-1:-1
    48                              <2>  %rotate -1
    48                              <2>  %endrep
    48 000014E0 50                  <3>  push %-1:-1
    48                              <3>  %rotate -1
    48 000014E1 680F060000          <3>  push %-1:-1
    48                              <3>  %rotate -1
    48 000014E6 6A0F                <3>  push %-1:-1
    48                              <3>  %rotate -1
    48 000014E8 6A19                <3>  push %-1:-1
    48                              <3>  %rotate -1
    48                              <2>  %rotate -1
    48                              <2> 
    48 000014EA E8C6FBFFFF          <2>  call %1
    48                              <2> 
    48                              <2>  %if 1 < %0
    48 000014EF 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    48                              <2>  %endif
    48                              <2> 
    49                              <1> 
    50                              <1>             ; convert stack data into string
    51 000014F3 8B0424              <1>             mov     eax, [esp + 0]                                  ; EIP
    52                              <1>             cdecl   int_to_str, eax, .p1, 8, 16, 0b0100
    52                              <2> 
    52                              <2>  %rep %0 - 1
    52                              <2>  push %-1:-1
    52                              <2>  %rotate -1
    52                              <2>  %endrep
    52 000014F6 6A04                <3>  push %-1:-1
    52                              <3>  %rotate -1
    52 000014F8 6A10                <3>  push %-1:-1
    52                              <3>  %rotate -1
    52 000014FA 6A08                <3>  push %-1:-1
    52                              <3>  %rotate -1
    52 000014FC 68[BB150000]        <3>  push %-1:-1
    52                              <3>  %rotate -1
    52 00001501 50                  <3>  push %-1:-1
    52                              <3>  %rotate -1
    52                              <2>  %rotate -1
    52                              <2> 
    52 00001502 E85EFEFFFF          <2>  call %1
    52                              <2> 
    52                              <2>  %if 1 < %0
    52 00001507 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    52                              <2>  %endif
    52                              <2> 
    53                              <1> 
    54 0000150B 8B442404            <1>             mov     eax, [esp + 4]                                  ; CS
    55                              <1>             cdecl   int_to_str, eax, .p2, 8, 16, 0b0100
    55                              <2> 
    55                              <2>  %rep %0 - 1
    55                              <2>  push %-1:-1
    55                              <2>  %rotate -1
    55                              <2>  %endrep
    55 0000150F 6A04                <3>  push %-1:-1
    55                              <3>  %rotate -1
    55 00001511 6A10                <3>  push %-1:-1
    55                              <3>  %rotate -1
    55 00001513 6A08                <3>  push %-1:-1
    55                              <3>  %rotate -1
    55 00001515 68[CC150000]        <3>  push %-1:-1
    55                              <3>  %rotate -1
    55 0000151A 50                  <3>  push %-1:-1
    55                              <3>  %rotate -1
    55                              <2>  %rotate -1
    55                              <2> 
    55 0000151B E845FEFFFF          <2>  call %1
    55                              <2> 
    55                              <2>  %if 1 < %0
    55 00001520 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    55                              <2>  %endif
    55                              <2> 
    56                              <1> 
    57 00001524 8B442408            <1>             mov     eax, [esp + 8]                                  ; EFLAGS
    58                              <1>             cdecl   int_to_str, eax, .p3, 8, 16, 0b0100
    58                              <2> 
    58                              <2>  %rep %0 - 1
    58                              <2>  push %-1:-1
    58                              <2>  %rotate -1
    58                              <2>  %endrep
    58 00001528 6A04                <3>  push %-1:-1
    58                              <3>  %rotate -1
    58 0000152A 6A10                <3>  push %-1:-1
    58                              <3>  %rotate -1
    58 0000152C 6A08                <3>  push %-1:-1
    58                              <3>  %rotate -1
    58 0000152E 68[DD150000]        <3>  push %-1:-1
    58                              <3>  %rotate -1
    58 00001533 50                  <3>  push %-1:-1
    58                              <3>  %rotate -1
    58                              <2>  %rotate -1
    58                              <2> 
    58 00001534 E82CFEFFFF          <2>  call %1
    58                              <2> 
    58                              <2>  %if 1 < %0
    58 00001539 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    58                              <2>  %endif
    58                              <2> 
    59                              <1> 
    60 0000153D 8B44240C            <1>             mov     eax, [esp + 12]
    61                              <1>             cdecl   int_to_str, eax, .p4, 8, 16, 0b0100
    61                              <2> 
    61                              <2>  %rep %0 - 1
    61                              <2>  push %-1:-1
    61                              <2>  %rotate -1
    61                              <2>  %endrep
    61 00001541 6A04                <3>  push %-1:-1
    61                              <3>  %rotate -1
    61 00001543 6A10                <3>  push %-1:-1
    61                              <3>  %rotate -1
    61 00001545 6A08                <3>  push %-1:-1
    61                              <3>  %rotate -1
    61 00001547 68[EE150000]        <3>  push %-1:-1
    61                              <3>  %rotate -1
    61 0000154C 50                  <3>  push %-1:-1
    61                              <3>  %rotate -1
    61                              <2>  %rotate -1
    61                              <2> 
    61 0000154D E813FEFFFF          <2>  call %1
    61                              <2> 
    61                              <2>  %if 1 < %0
    61 00001552 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    61                              <2>  %endif
    61                              <2> 
    62                              <1> 
    63                              <1>             ; display string
    64                              <1>             cdecl   draw_str, 25, 16, 0x0F04, .s1
    64                              <2> 
    64                              <2>  %rep %0 - 1
    64                              <2>  push %-1:-1
    64                              <2>  %rotate -1
    64                              <2>  %endrep
    64 00001556 68[B4150000]        <3>  push %-1:-1
    64                              <3>  %rotate -1
    64 0000155B 68040F0000          <3>  push %-1:-1
    64                              <3>  %rotate -1
    64 00001560 6A10                <3>  push %-1:-1
    64                              <3>  %rotate -1
    64 00001562 6A19                <3>  push %-1:-1
    64                              <3>  %rotate -1
    64                              <2>  %rotate -1
    64                              <2> 
    64 00001564 E84CFBFFFF          <2>  call %1
    64                              <2> 
    64                              <2>  %if 1 < %0
    64 00001569 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    64                              <2>  %endif
    64                              <2> 
    65                              <1>             cdecl   draw_str, 25, 17, 0x0F04, .s2
    65                              <2> 
    65                              <2>  %rep %0 - 1
    65                              <2>  push %-1:-1
    65                              <2>  %rotate -1
    65                              <2>  %endrep
    65 0000156D 68[C5150000]        <3>  push %-1:-1
    65                              <3>  %rotate -1
    65 00001572 68040F0000          <3>  push %-1:-1
    65                              <3>  %rotate -1
    65 00001577 6A11                <3>  push %-1:-1
    65                              <3>  %rotate -1
    65 00001579 6A19                <3>  push %-1:-1
    65                              <3>  %rotate -1
    65                              <2>  %rotate -1
    65                              <2> 
    65 0000157B E835FBFFFF          <2>  call %1
    65                              <2> 
    65                              <2>  %if 1 < %0
    65 00001580 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    65                              <2>  %endif
    65                              <2> 
    66                              <1>             cdecl   draw_str, 25, 18, 0x0F04, .s3
    66                              <2> 
    66                              <2>  %rep %0 - 1
    66                              <2>  push %-1:-1
    66                              <2>  %rotate -1
    66                              <2>  %endrep
    66 00001584 68[D6150000]        <3>  push %-1:-1
    66                              <3>  %rotate -1
    66 00001589 68040F0000          <3>  push %-1:-1
    66                              <3>  %rotate -1
    66 0000158E 6A12                <3>  push %-1:-1
    66                              <3>  %rotate -1
    66 00001590 6A19                <3>  push %-1:-1
    66                              <3>  %rotate -1
    66                              <2>  %rotate -1
    66                              <2> 
    66 00001592 E81EFBFFFF          <2>  call %1
    66                              <2> 
    66                              <2>  %if 1 < %0
    66 00001597 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    66                              <2>  %endif
    66                              <2> 
    67                              <1>             cdecl   draw_str, 25, 19, 0x0F04, .s4
    67                              <2> 
    67                              <2>  %rep %0 - 1
    67                              <2>  push %-1:-1
    67                              <2>  %rotate -1
    67                              <2>  %endrep
    67 0000159B 68[E7150000]        <3>  push %-1:-1
    67                              <3>  %rotate -1
    67 000015A0 68040F0000          <3>  push %-1:-1
    67                              <3>  %rotate -1
    67 000015A5 6A13                <3>  push %-1:-1
    67                              <3>  %rotate -1
    67 000015A7 6A19                <3>  push %-1:-1
    67                              <3>  %rotate -1
    67                              <2>  %rotate -1
    67                              <2> 
    67 000015A9 E807FBFFFF          <2>  call %1
    67                              <2> 
    67                              <2>  %if 1 < %0
    67 000015AE 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    67                              <2>  %endif
    67                              <2> 
    68                              <1> 
    69                              <1>             ; infinite loop
    70 000015B2 EBFE                <1>             jmp     $
    71                              <1> 
    72 000015B4 4553502B20303A      <1> .s1:        db  "ESP+ 0:"
    73 000015BB 5F5F5F5F5F5F5F5F20- <1> .p1:        db  "________ ", 0
    73 000015C4 00                  <1>
    74 000015C5 2020202B20343A      <1> .s2:        db  "   + 4:"
    75 000015CC 5F5F5F5F5F5F5F5F20- <1> .p2:        db  "________ ", 0
    75 000015D5 00                  <1>
    76 000015D6 2020202B20383A      <1> .s3:        db  "   + 8:"
    77 000015DD 5F5F5F5F5F5F5F5F20- <1> .p3:        db  "________ ", 0
    77 000015E6 00                  <1>
    78 000015E7 2020202B31323A      <1> .s4:        db  "   +12:"
    79 000015EE 5F5F5F5F5F5F5F5F20- <1> .p4:        db  "________ ", 0
    79 000015F7 00                  <1>
    80                              <1> 
    81                              <1> int_default:
    82 000015F8 9C                  <1>             pushf                                                   ; EFLAGS
    83 000015F9 0E                  <1>             push    cs                                              ; CS
    84 000015FA 68[DF140000]        <1>             push    int_stop                                        ; the process of displaying stack
    85                              <1> 
    86 000015FF B8[05160000]        <1>             mov     eax, .s0                                        ; interrupt type
    87 00001604 CF                  <1>             iret
    88                              <1> 
    89 00001605 203C2020202053544F- <1> .s0:        db  " <    STOP    > ", 0
    89 0000160E 50202020203E2000    <1>
    90                              <1> 
    91                              <1> int_zero_div:
    92 00001616 9C                  <1>             pushf                                                   ; EFLAGS
    93 00001617 0E                  <1>             push    cs                                              ; CS
    94 00001618 68[DF140000]        <1>             push    int_stop                                        ; the process of displaying stack
    95                              <1> 
    96 0000161D B8[23160000]        <1>             mov     eax, .s0                                        ; interrupt type
    97 00001622 CF                  <1>             iret
    98                              <1> 
    99 00001623 203C20205A45524F20- <1> .s0:        db  " <  ZERO DIV  > ", 0
    99 0000162C 44495620203E2000    <1>
   100                              <1> 
   101                              <1> 
   233                                  %include    "../modules/protect/pic.s"
     1                              <1> init_pic:
     2                              <1> 
     3                              <1>             ; save register
     4 00001634 50                  <1>             push    eax
     5                              <1> 
     6                              <1>             ; set up Master PIC
     7                              <1>             outp    0x20, 0x11                              ; MASTER.ICW1 = 0x11
     7 00001635 B011                <2>  mov al, %2
     7 00001637 E620                <2>  out %1, al
     8                              <1>             outp    0x21, 0x20                              ; MASTER.ICW2 = 0x20 // interrupt vector
     8 00001639 B020                <2>  mov al, %2
     8 0000163B E621                <2>  out %1, al
     9                              <1>             outp    0x21, 0x04                              ; MASTER.ICW3 = 0x04 // slave connection position : IRQ2
     9 0000163D B004                <2>  mov al, %2
     9 0000163F E621                <2>  out %1, al
    10                              <1>             outp    0x21, 0x05                              ; MASTER.ICW4 = 0x05
    10 00001641 B005                <2>  mov al, %2
    10 00001643 E621                <2>  out %1, al
    11                              <1>             outp    0x21, 0xFF                              ; master interrupt mask
    11 00001645 B0FF                <2>  mov al, %2
    11 00001647 E621                <2>  out %1, al
    12                              <1> 
    13                              <1>             ; set up Slave
    14                              <1>             outp    0xA0, 0x11                              ; SLAVE.ICW1 = 0x11
    14 00001649 B011                <2>  mov al, %2
    14 0000164B E6A0                <2>  out %1, al
    15                              <1>             outp    0xA1, 0x28                              ; SLAVE.ICW2 = 0x28 // interrupt vector
    15 0000164D B028                <2>  mov al, %2
    15 0000164F E6A1                <2>  out %1, al
    16                              <1>             outp    0xA1, 0x02                              ; SLAVE.ICW3 = 0x02 // slave ID = 2
    16 00001651 B002                <2>  mov al, %2
    16 00001653 E6A1                <2>  out %1, al
    17                              <1>             outp    0xA1, 0x01                              ; SLAVE.ICW4 = 0x01
    17 00001655 B001                <2>  mov al, %2
    17 00001657 E6A1                <2>  out %1, al
    18                              <1>             outp    0xA1, 0xFF                              ; slave interrupt mask
    18 00001659 B0FF                <2>  mov al, %2
    18 0000165B E6A1                <2>  out %1, al
    19                              <1> 
    20                              <1>             ; return regisiter
    21 0000165D 58                  <1>             pop     eax
    22                              <1> 
    23 0000165E C3                  <1>             ret
   234                                  %include    "../modules/protect/int_rtc.s"
     1                              <1> int_rtc:
     2                              <1> 
     3                              <1>             ; save registers
     4 0000165F 60                  <1>             pusha
     5 00001660 1E                  <1>             push    ds
     6 00001661 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment selector for data
     9 00001662 66B81000            <1>             mov     ax, 0x0010                                      ; offset from the beginnig of GDT // second element
    10 00001666 8ED8                <1>             mov     ds, ax
    11 00001668 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; get time from RTC
    14                              <1>             cdecl   rtc_get_time, RTC_TIME
    14                              <2> 
    14                              <2>  %rep %0 - 1
    14                              <2>  push %-1:-1
    14                              <2>  %rotate -1
    14                              <2>  %endrep
    14 0000166A 68[FC020000]        <3>  push %-1:-1
    14                              <3>  %rotate -1
    14                              <2>  %rotate -1
    14                              <2> 
    14 0000166F E87AFDFFFF          <2>  call %1
    14                              <2> 
    14                              <2>  %if 1 < %0
    14 00001674 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    14                              <2>  %endif
    14                              <2> 
    15                              <1> 
    16                              <1>             ; get RTC interrupt factor
    17                              <1>             outp    0x70, 0x0C                                      ; select register C
    17 00001678 B00C                <2>  mov al, %2
    17 0000167A E670                <2>  out %1, al
    18 0000167C E471                <1>             in      al, 0x71
    19                              <1> 
    20                              <1>             ; clear interrupt flag
    21 0000167E B020                <1>             mov     al, 0x20                                        ; AL = EOI command
    22 00001680 E6A0                <1>             out     0xA0, al                                        ; slave PIC
    23 00001682 E620                <1>             out     0x20, al                                        ; master PIC
    24                              <1> 
    25                              <1>             ; return register
    26 00001684 07                  <1>             pop     es
    27 00001685 1F                  <1>             pop     ds
    28 00001686 61                  <1>             popa
    29                              <1> 
    30 00001687 CF                  <1>             iret                                                    ; end of interrupt process
    31                              <1>                                                                     ; return including flag register => iret
    32                              <1> 
    33                              <1> ; Enable interrupt by RTC itself
    34                              <1> 
    35                              <1> rtc_int_en:
    36                              <1> 
    37                              <1>             ; construct stack frame
    38 00001688 55                  <1>             push    ebp
    39 00001689 89E5                <1>             mov     ebp, esp                                        ;EBP+8 | enable bit
    40                              <1> 
    41                              <1>             ; save register
    42 0000168B 50                  <1>             push    eax
    43                              <1> 
    44                              <1>             ; set up Interrupt Permission
    45                              <1>             outp    0x70, 0x0B                                      ; select register B
    45 0000168C B00B                <2>  mov al, %2
    45 0000168E E670                <2>  out %1, al
    46                              <1> 
    47 00001690 E471                <1>             in      al, 0x71
    48 00001692 0A4508              <1>             or      al, [ebp + 8]                                   ; set the specified bit
    49                              <1> 
    50 00001695 E671                <1>             out     0x71, al                                        ; write down to register B
    51                              <1> 
    52                              <1>             ; return register
    53 00001697 58                  <1>             pop     eax
    54                              <1> 
    55                              <1>             ; destruct stack frame
    56 00001698 89EC                <1>             mov     esp, ebp
    57 0000169A 5D                  <1>             pop     ebp
    58                              <1> 
    59 0000169B C3                  <1>             ret
   235                                  %include    "../modules/protect/int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1> 
     3                              <1>             ; save registers
     4 0000169C 60                  <1>             pusha
     5 0000169D 1E                  <1>             push    ds
     6 0000169E 06                  <1>             push    es
     7                              <1> 
     8                              <1>             ; set up segment for data
     9 0000169F 66B81000            <1>             mov     ax, 0x0010
    10 000016A3 8ED8                <1>             mov     ds, ax
    11 000016A5 8EC0                <1>             mov     es, ax
    12                              <1> 
    13                              <1>             ; read buffer of KBC
    14 000016A7 E460                <1>             in      al, 0x60                                    ; AL = get key code
    15                              <1> 
    16                              <1>             ; save key code
    17                              <1>             cdecl   ring_wr, _KEY_BUFF, eax
    17                              <2> 
    17                              <2>  %rep %0 - 1
    17                              <2>  push %-1:-1
    17                              <2>  %rotate -1
    17                              <2>  %endrep
    17 000016A9 50                  <3>  push %-1:-1
    17                              <3>  %rotate -1
    17 000016AA 68[C0160000]        <3>  push %-1:-1
    17                              <3>  %rotate -1
    17                              <2>  %rotate -1
    17                              <2> 
    17 000016AF E856000000          <2>  call %1
    17                              <2> 
    17                              <2>  %if 1 < %0
    17 000016B4 6683C408            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    17                              <2>  %endif
    17                              <2> 
    18                              <1> 
    19                              <1>             ; send interrupt end command
    20                              <1>             outp    0x20, 0x20                                  ; master PIC: EOI command
    20 000016B8 B020                <2>  mov al, %2
    20 000016BA E620                <2>  out %1, al
    21                              <1> 
    22                              <1>             ; return registers
    23 000016BC 07                  <1>             pop     es
    24 000016BD 1F                  <1>             pop     ds
    25 000016BE 61                  <1>             popa
    26                              <1> 
    27 000016BF CF                  <1>             iret
    28                              <1> 
    29                              <1> ALIGN 4, db 0
    30 000016C0 00<rept>            <1> _KEY_BUFF:  times ring_buff_size db 0
   236                                  %include    "../modules/protect/ring_buff.s"
     1                              <1> ring_rd:
     2                              <1> 
     3                              <1>             ; construct stack frame                                     ;    +12 | save_dest address
     4 000016D8 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
     5 000016D9 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save registers
     8 000016DB 50                  <1>             push    eax
     9 000016DC 53                  <1>             push    ebx
    10 000016DD 56                  <1>             push    esi
    11 000016DE 57                  <1>             push    edi
    12                              <1> 
    13                              <1>             ; get args
    14 000016DF 8B7508              <1>             mov     esi, [ebp +  8]
    15 000016E2 8B7D0C              <1>             mov     edi, [ebp + 12]
    16                              <1> 
    17                              <1>             ; confirm the reading location
    18 000016E5 B800000000          <1>             mov     eax, 0                                              ; EAX = 0 // no data
    19 000016EA 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = rp
    20 000016EC 3B5E04              <1>             cmp     ebx, [esi + ring_buff.wp]                           ; if (EBX != wp)
    21 000016EF 7411                <1>             je      .10E                                                ; {
    22                              <1> 
    23 000016F1 8A441E08            <1>             mov     al, [esi + ring_buff.item + ebx]                    ;   AL = BUFFER[rp] // store key code(unit:byte)
    24                              <1> 
    25 000016F5 8807                <1>             mov     [edi], al                                           ;   [EDI] = AL      // save data
    26                              <1> 
    27 000016F7 43                  <1>             inc     ebx                                                 ;   EBX++           // next reading location
    28 000016F8 83E30F              <1>             and     ebx, RING_INDEX_MASK                                ;   EBX &= 0x0F     // limit size
    29 000016FB 891E                <1>             mov     [esi + ring_buff.rp], ebx                           ;   rp = EBX        // save the reading location
    30                              <1> 
    31 000016FD B801000000          <1>             mov     eax, 1                                              ;   EAX = 1         // data exists
    32                              <1> .10E:                                                                   ; }
    33                              <1> 
    34                              <1>             ; return registers
    35 00001702 5F                  <1>             pop     edi
    36 00001703 5E                  <1>             pop     esi
    37 00001704 5B                  <1>             pop     ebx
    38 00001705 58                  <1>             pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 00001706 89EC                <1>             mov     esp, ebp
    42 00001708 5D                  <1>             pop     ebp
    43                              <1> 
    44 00001709 C3                  <1>             ret
    45                              <1> 
    46                              <1> ring_wr:
    47                              <1> 
    48                              <1>             ; construct stack frame                                     ;    +12 | data to write
    49 0000170A 55                  <1>             push    ebp                                                 ; EBP+ 8 | ring buffer
    50 0000170B 89E5                <1>             mov     ebp, esp
    51                              <1> 
    52                              <1>             ; save registers
    53 0000170D 50                  <1>             push    eax
    54 0000170E 53                  <1>             push    ebx
    55 0000170F 51                  <1>             push    ecx
    56 00001710 56                  <1>             push    esi
    57 00001711 57                  <1>             push    edi
    58                              <1> 
    59                              <1>             ; get args
    60 00001712 8B7508              <1>             mov     esi, [ebp + 8]
    61                              <1> 
    62                              <1>             ; confirm the writing location
    63 00001715 B800000000          <1>             mov     eax, 0
    64 0000171A 8B5E04              <1>             mov     ebx, [esi + ring_buff.wp]                           ; writing position
    65 0000171D 89D9                <1>             mov     ecx, ebx
    66 0000171F 41                  <1>             inc     ecx                                                 ; next writing location
    67 00001720 83E10F              <1>             and     ecx, RING_INDEX_MASK                                ; size limit
    68                              <1> 
    69 00001723 3B0E                <1>             cmp     ecx, [esi + ring_buff.rp]                           ; if (ECX != rp)
    70 00001725 740F                <1>             je      .10E                                                ; {
    71                              <1> 
    72 00001727 8A450C              <1>             mov     al, [ebp + 12]                                      ;   AL = data
    73                              <1> 
    74 0000172A 88441E08            <1>             mov     [esi + ring_buff.item + ebx], al                    ;   BUFFER[wp] = AL // save key code
    75 0000172E 894E04              <1>             mov     [esi + ring_buff.wp], ecx                           ;   wp = ECX        // save the writing location
    76 00001731 B801000000          <1>             mov     eax, 1
    77                              <1> .10E:
    78                              <1> 
    79                              <1>             ; return registers
    80 00001736 5F                  <1>             pop     edi
    81 00001737 5E                  <1>             pop     esi
    82 00001738 59                  <1>             pop     ecx
    83 00001739 5B                  <1>             pop     ebx
    84 0000173A 58                  <1>             pop     eax
    85                              <1> 
    86                              <1>             ; destruct stack frame
    87 0000173B 89EC                <1>             mov     esp, ebp
    88 0000173D 5D                  <1>             pop     ebp
    89                              <1> 
    90 0000173E C3                  <1>             ret
    91                              <1> 
    92                              <1> draw_key:
    93                              <1> 
    94                              <1>             ; construct stack frame                                     ;    +16 | ring buffer
    95 0000173F 55                  <1>             push    ebp                                                 ;    +12 | row
    96 00001740 89E5                <1>             mov     ebp, esp                                            ; EBP+ 8 | col
    97                              <1> 
    98                              <1>             ; save registers
    99 00001742 60                  <1>             pusha                                                       ; save EAX,EBX,ECX,EDX,EDI,ESI,EBP,ESP
   100                              <1> 
   101                              <1>             ; get args
   102 00001743 8B5508              <1>             mov     edx, [ebp +  8]
   103 00001746 8B7D0C              <1>             mov     edi, [ebp + 12]
   104 00001749 8B7510              <1>             mov     esi, [ebp + 16]
   105                              <1> 
   106                              <1>             ; get ring buffer info
   107 0000174C 8B1E                <1>             mov     ebx, [esi + ring_buff.rp]                           ; EBX = wp // writing location
   108 0000174E 8D7608              <1>             lea     esi, [esi + ring_buff.item]
   109 00001751 B910000000          <1>             mov     ecx, RING_ITEM_SIZE
   110                              <1> 
   111                              <1>             ; display data
   112                              <1> .10L:
   113                              <1> 
   114 00001756 4B                  <1>             dec     ebx                                                 ; EBX-- == where data exists
   115 00001757 83E30F              <1>             and     ebx, RING_INDEX_MASK
   116 0000175A 8A041E              <1>             mov     al, [esi + ebx]                                     ; EAX = KEY_BUFF[EBX]
   117                              <1> 
   118                              <1>             cdecl   int_to_str, eax, .tmp, 2, 16, 0b0100
   118                              <2> 
   118                              <2>  %rep %0 - 1
   118                              <2>  push %-1:-1
   118                              <2>  %rotate -1
   118                              <2>  %endrep
   118 0000175D 6A04                <3>  push %-1:-1
   118                              <3>  %rotate -1
   118 0000175F 6A10                <3>  push %-1:-1
   118                              <3>  %rotate -1
   118 00001761 6A02                <3>  push %-1:-1
   118                              <3>  %rotate -1
   118 00001763 68[8E170000]        <3>  push %-1:-1
   118                              <3>  %rotate -1
   118 00001768 50                  <3>  push %-1:-1
   118                              <3>  %rotate -1
   118                              <2>  %rotate -1
   118                              <2> 
   118 00001769 E8F7FBFFFF          <2>  call %1
   118                              <2> 
   118                              <2>  %if 1 < %0
   118 0000176E 6683C414            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
   118                              <2>  %endif
   118                              <2> 
   119                              <1>             cdecl   draw_str, edx, edi, 0x02, .tmp
   119                              <2> 
   119                              <2>  %rep %0 - 1
   119                              <2>  push %-1:-1
   119                              <2>  %rotate -1
   119                              <2>  %endrep
   119 00001772 68[8E170000]        <3>  push %-1:-1
   119                              <3>  %rotate -1
   119 00001777 6A02                <3>  push %-1:-1
   119                              <3>  %rotate -1
   119 00001779 57                  <3>  push %-1:-1
   119                              <3>  %rotate -1
   119 0000177A 52                  <3>  push %-1:-1
   119                              <3>  %rotate -1
   119                              <2>  %rotate -1
   119                              <2> 
   119 0000177B E835F9FFFF          <2>  call %1
   119                              <2> 
   119                              <2>  %if 1 < %0
   119 00001780 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
   119                              <2>  %endif
   119                              <2> 
   120                              <1> 
   121 00001784 83C203              <1>             add     edx, 3                                              ; updata display position(3 chars)
   122                              <1> 
   123 00001787 E2CD                <1>             loop    .10L
   124                              <1> .10E:
   125                              <1> 
   126                              <1>             ; return registers
   127 00001789 61                  <1>             popa
   128                              <1> 
   129                              <1>             ; destruct stack frame
   130 0000178A 89EC                <1>             mov     esp, ebp
   131 0000178C 5D                  <1>             pop     ebp
   132                              <1> 
   133 0000178D C3                  <1>             ret
   134                              <1> 
   135 0000178E 2D2D2000            <1> .tmp        db "-- ", 0
   237                                  %include    "../modules/protect/timer.s"
     1                              <1> int_en_timer0:
     2                              <1> 
     3                              <1>             ; save register
     4 00001792 50                  <1>             push    eax                                     ; use eax register on outp
     5                              <1> 
     6                              <1>             outp    0x43, 0b_00_11_010_0                    ; counter 0|access way:lower/upper|mode 2|16 bit binary couner
     6 00001793 B034                <2>  mov al, %2
     6 00001795 E643                <2>  out %1, al
     7                              <1>             outp    0x40, 0x9C                              ; lower byte
     7 00001797 B09C                <2>  mov al, %2
     7 00001799 E640                <2>  out %1, al
     8                              <1>             outp    0x40, 0x2E                              ; upper byte
     8 0000179B B02E                <2>  mov al, %2
     8 0000179D E640                <2>  out %1, al
     9                              <1> 
    10                              <1>             ; return register
    11 0000179F 58                  <1>             pop     eax
    12                              <1> 
    13 000017A0 C3                  <1>             ret
   238                                  %include    "../modules/protect/draw_rotation_bar.s"
     1                              <1> ;--------------------------------------------------------------------------------------------
     2                              <1> ;char update cycle
     3                              <1> ;=> The value obtained by reading the value of Timer interrupt counter
     4                              <1> ;   and shifting it to the right by 4 bits
     5                              <1> ;   and if the value is different from the previous value, it's the time to update.
     6                              <1> ;--------------------------------------------------------------------------------------------
     7                              <1> 
     8                              <1> draw_rotation_bar:
     9                              <1> 
    10                              <1>             ; save register
    11 000017A1 50                  <1>             push    eax
    12                              <1> 
    13                              <1>             ; main process
    14 000017A2 A1[1C0B0000]        <1>             mov     eax, [TIMER_COUNT]
    15 000017A7 C1E804              <1>             shr     eax, 4
    16 000017AA 3B05[D4170000]      <1>             cmp     eax, [.index]
    17 000017B0 741E                <1>             je      .10E
    18                              <1> 
    19 000017B2 A3[D4170000]        <1>             mov     [.index], eax
    20 000017B7 83E003              <1>             and     eax, 0x03                                       ; limit to the range 0 to 3
    21                              <1> 
    22 000017BA 8A80[D8170000]      <1>             mov     al, [.table + eax]                              ; AL = table[index]
    23                              <1>             cdecl   draw_char, 0, 29, 0x000F, eax
    23                              <2> 
    23                              <2>  %rep %0 - 1
    23                              <2>  push %-1:-1
    23                              <2>  %rotate -1
    23                              <2>  %endrep
    23 000017C0 50                  <3>  push %-1:-1
    23                              <3>  %rotate -1
    23 000017C1 6A0F                <3>  push %-1:-1
    23                              <3>  %rotate -1
    23 000017C3 6A1D                <3>  push %-1:-1
    23                              <3>  %rotate -1
    23 000017C5 6A00                <3>  push %-1:-1
    23                              <3>  %rotate -1
    23                              <2>  %rotate -1
    23                              <2> 
    23 000017C7 E8C3F7FFFF          <2>  call %1
    23                              <2> 
    23                              <2>  %if 1 < %0
    23 000017CC 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    23                              <2>  %endif
    23                              <2> 
    24                              <1> 
    25                              <1> .10E:
    26                              <1> 
    27                              <1>             ; return register
    28 000017D0 58                  <1>             pop     eax
    29                              <1> 
    30 000017D1 C3                  <1>             ret
    31                              <1> 
    32 000017D2 00<rept>            <1> ALIGN 4, db 0
    33 000017D4 00000000            <1> .index      dd 0                                                    ; previous value
    34 000017D8 7C2F2D5C            <1> .table      db "|/-\"                                               ; display bar
   239                                  %include    "../modules/protect/call_gate.s"
     1                              <1> ;--------------------------------------------------
     2                              <1> ; This is a rapper of draw_str func.
     3                              <1> ;--------------------------------------------------
     4                              <1> 
     5                              <1> call_gate:
     6                              <1> 
     7                              <1>             ; construct stack frame
     8                              <1>                                                                     ;    +24 | char
     9                              <1>                                                                     ;    +20 | display color
    10                              <1>                                                                     ;    +16 | row
    11                              <1>                                                                     ;    +12 | column
    12                              <1>                                                                     ; EBP+ 8 | CS(code segment)
    13 000017DC 55                  <1>             push    ebp
    14 000017DD 89E5                <1>             mov     ebp, esp
    15                              <1> 
    16                              <1>             ; save registers
    17 000017DF 60                  <1>             pusha
    18 000017E0 1E                  <1>             push    ds
    19 000017E1 06                  <1>             push    es
    20                              <1> 
    21                              <1>             ; set up segment for data
    22 000017E2 66B81000            <1>             mov     ax, 0x0010
    23 000017E6 8ED8                <1>             mov     ds, ax
    24 000017E8 8EC0                <1>             mov     es, ax
    25                              <1> 
    26                              <1>             ; display string
    27 000017EA 8B450C              <1>             mov     eax, dword [ebp + 12]
    28 000017ED 8B5D10              <1>             mov     ebx, dword [ebp + 16]
    29 000017F0 8B4D14              <1>             mov     ecx, dword [ebp + 20]
    30 000017F3 8B5518              <1>             mov     edx, dword [ebp + 24]
    31                              <1>             cdecl   draw_str, eax, ebx, ecx, edx
    31                              <2> 
    31                              <2>  %rep %0 - 1
    31                              <2>  push %-1:-1
    31                              <2>  %rotate -1
    31                              <2>  %endrep
    31 000017F6 52                  <3>  push %-1:-1
    31                              <3>  %rotate -1
    31 000017F7 51                  <3>  push %-1:-1
    31                              <3>  %rotate -1
    31 000017F8 53                  <3>  push %-1:-1
    31                              <3>  %rotate -1
    31 000017F9 50                  <3>  push %-1:-1
    31                              <3>  %rotate -1
    31                              <2>  %rotate -1
    31                              <2> 
    31 000017FA E8B6F8FFFF          <2>  call %1
    31                              <2> 
    31                              <2>  %if 1 < %0
    31 000017FF 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    31                              <2>  %endif
    31                              <2> 
    32                              <1> 
    33                              <1>             ; return registers
    34 00001803 07                  <1>             pop     es
    35 00001804 1F                  <1>             pop     ds
    36 00001805 61                  <1>             popa
    37                              <1> 
    38                              <1>             ; destruct stack frame
    39 00001806 89EC                <1>             mov     esp, ebp
    40 00001808 5D                  <1>             pop     ebp
    41                              <1> 
    42 00001809 CA1000              <1>             retf    4 * 4                                                ; end func and adjust arguments
   240                                  %include    "../modules/protect/trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1> 
     3                              <1>             ; output a char
     4                              <1>             cdecl   draw_char,  ecx, edx, ebx, eax
     4                              <2> 
     4                              <2>  %rep %0 - 1
     4                              <2>  push %-1:-1
     4                              <2>  %rotate -1
     4                              <2>  %endrep
     4 0000180C 50                  <3>  push %-1:-1
     4                              <3>  %rotate -1
     4 0000180D 53                  <3>  push %-1:-1
     4                              <3>  %rotate -1
     4 0000180E 52                  <3>  push %-1:-1
     4                              <3>  %rotate -1
     4 0000180F 51                  <3>  push %-1:-1
     4                              <3>  %rotate -1
     4                              <2>  %rotate -1
     4                              <2> 
     4 00001810 E87AF7FFFF          <2>  call %1
     4                              <2> 
     4                              <2>  %if 1 < %0
     4 00001815 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
     4                              <2>  %endif
     4                              <2> 
     5                              <1> 
     6 00001819 CF                  <1>             iret
     7                              <1> 
     8                              <1> trap_gate_82:
     9                              <1> 
    10                              <1>             ; draw pixel
    11                              <1>             cdecl   draw_pixel, ecx, edx, ebx
    11                              <2> 
    11                              <2>  %rep %0 - 1
    11                              <2>  push %-1:-1
    11                              <2>  %rotate -1
    11                              <2>  %endrep
    11 0000181A 53                  <3>  push %-1:-1
    11                              <3>  %rotate -1
    11 0000181B 52                  <3>  push %-1:-1
    11                              <3>  %rotate -1
    11 0000181C 51                  <3>  push %-1:-1
    11                              <3>  %rotate -1
    11                              <2>  %rotate -1
    11                              <2> 
    11 0000181D E84DF9FFFF          <2>  call %1
    11                              <2> 
    11                              <2>  %if 1 < %0
    11 00001822 6683C40C            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    11                              <2>  %endif
    11                              <2> 
    12                              <1> 
    13 00001826 CF                  <1>             iret
   241                                  %include    "../modules/protect/test_and_set.s"
     1                              <1> test_and_set:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                                     ; EBP+8 | address of global variable
     5 00001827 55                  <1>             push    ebp
     6 00001828 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 0000182A 50                  <1>             push    eax
    10 0000182B 53                  <1>             push    ebx
    11                              <1> 
    12                              <1>             ; test and set
    13 0000182C B800000000          <1>             mov     eax, 0                                          ; local = 0
    14 00001831 8B5D08              <1>             mov     ebx, [ebp + 8]                                  ; global = address
    15                              <1> 
    16                              <1> .10L:
    17 00001834 F00FAB03            <1>             lock bts [ebx], eax                                     ; CF = TEST_AND_SET(IN_USE, 1)
    18 00001838 7307                <1>             jnc     .10E                                            ; if(0 == CF)
    19                              <1>                                                                     ;   break;
    20                              <1> 
    21                              <1> .12L:
    22 0000183A 0FA303              <1>             bt      [ebx], eax                                      ; CF = TEST(IN_USE, 1)
    23 0000183D 72FB                <1>             jc      .12L                                            ; if(0 == CF)
    24                              <1>                                                                     ;   break;
    25 0000183F EBF3                <1>             jmp     .10L
    26                              <1> .10E:
    27                              <1> 
    28                              <1>             ; return registers
    29 00001841 5B                  <1>             pop     ebx
    30 00001842 58                  <1>             pop     eax
    31                              <1> 
    32                              <1>             ; destruct stakc frame
    33 00001843 89EC                <1>             mov     esp, ebp
    34 00001845 5D                  <1>             pop     ebp
    35                              <1> 
    36 00001846 C3                  <1>             ret
   242                                  %include    "../modules/protect/int_nm.s"
     1                              <1> get_tss_base:
     2                              <1> 
     3                              <1>             ; EBX == TSS selector
     4                              <1> 
     5 00001847 8B83[EA080000]      <1>             mov     eax, [GDT + ebx + 2]                            ; EAX = TSS[23:0]
     6 0000184D C1E008              <1>             shl     eax, 8
     7 00001850 8A83[EF080000]      <1>             mov     al,  [GDT + ebx + 7]                            ; AL  = TSS[31:24]
     8 00001856 C1C808              <1>             ror     eax, 8
     9                              <1> 
    10 00001859 C3                  <1>             ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1> 
    14                              <1>             ; EAX == base address of TSS descriptor
    15                              <1> 
    16 0000185A DD7068              <1>             fnsave  [eax + 104]                                     ; // save FPU context
    17 0000185D C780D4000000010000- <1>             mov     [eax + 104 + 108], dword 1                      ; saved = 1 // a flag which shows FPU context is saved.
    17 00001866 00                  <1>
    18                              <1> 
    19 00001867 C3                  <1>             ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1> 
    23 00001868 83B8D400000000      <1>             cmp     [eax + 104 + 108], dword 0                      ; if (0 == saved)
    24 0000186F 7504                <1>             jne     .10F
    25 00001871 DBE3                <1>             fninit                                                  ; initialize FPU
    26 00001873 EB03                <1>             jmp     .10E
    27                              <1> .10F:
    28 00001875 DD6068              <1>             frstor  [eax + 104]                                     ; return FPU context
    29                              <1> .10E:
    30 00001878 C3                  <1>             ret
    31                              <1> 
    32                              <1> int_nm:
    33                              <1> 
    34                              <1>             ; save registers
    35 00001879 60                  <1>             pusha
    36 0000187A 1E                  <1>             push    ds
    37 0000187B 06                  <1>             push    es
    38                              <1> 
    39                              <1>             ; set up selector for Kernel
    40 0000187C 66B81000            <1>             mov     ax, DS_KERNEL
    41 00001880 8ED8                <1>             mov     ds, ax
    42 00001882 8EC0                <1>             mov     es, ax
    43                              <1> 
    44                              <1>             ; clear Task Switch flag
    45 00001884 0F06                <1>             clts                                                    ; CR0.TS = 0
    46                              <1>                                                                     ; // TS bit is gonna be set by CPU
    47                              <1>                                                                     ; // when Task Switching happend.
    48                              <1> 
    49                              <1>             ; get previous/this time task
    50 00001886 8B3D[D0180000]      <1>             mov     edi, [.last_tss]                                ; TSS of the task that last used FPU
    51 0000188C 0F00CE              <1>             str     esi                                             ; TSS of the task using FPU this time
    52 0000188F 83E6F8              <1>             and     esi, ~0x0007                                    ; mask segment selector[2:0] // TI:RPL
    53                              <1> 
    54                              <1>             ; compare previous task with the one of this time
    55 00001892 83FF00              <1>             cmp     edi, 0                                          ; if not exist previous task
    56 00001895 7420                <1>             je      .10F
    57                              <1> 
    58 00001897 39FE                <1>             cmp     esi, edi
    59 00001899 741A                <1>             je      .12E
    60                              <1> 
    61 0000189B FA                  <1>             cli                                                     ; disable interrupt
    62                              <1> 
    63                              <1>             ; save previous FPU context
    64 0000189C 89FB                <1>             mov     ebx, edi
    65 0000189E E8A4FFFFFF          <1>             call    get_tss_base                                    ; get TSS address
    66 000018A3 E8B2FFFFFF          <1>             call    save_fpu_context
    67                              <1> 
    68                              <1>             ; return FPU context of this time
    69 000018A8 89F3                <1>             mov     ebx, esi
    70 000018AA E898FFFFFF          <1>             call    get_tss_base
    71 000018AF E8B4FFFFFF          <1>             call    load_fpu_context
    72                              <1> 
    73 000018B4 FB                  <1>             sti                                                     ; enable interrupt
    74                              <1> 
    75                              <1> .12E:
    76 000018B5 EB0E                <1>             jmp     .10E
    77                              <1> .10F:
    78                              <1> 
    79 000018B7 FA                  <1>             cli                                                     ; disable interrupt
    80                              <1> 
    81                              <1>             ; return FPU context of this time
    82 000018B8 89F3                <1>             mov     ebx, esi
    83 000018BA E888FFFFFF          <1>             call    get_tss_base
    84 000018BF E8A4FFFFFF          <1>             call    load_fpu_context
    85                              <1> 
    86 000018C4 FB                  <1>             sti                                                     ; enable interrupt
    87                              <1> 
    88                              <1> .10E:
    89 000018C5 8935[D0180000]      <1>             mov     [.last_tss], esi                                ; save task that used FPU
    90                              <1> 
    91                              <1>             ; return registers
    92 000018CB 07                  <1>             pop     es
    93 000018CC 1F                  <1>             pop     ds
    94 000018CD 61                  <1>             popa
    95                              <1> 
    96 000018CE CF                  <1>             iret
    97                              <1> 
    98 000018CF 00                  <1> ALIGN 4, db 0
    99 000018D0 00000000            <1> .last_tss:  dd  0
   243                                  %include    "../modules/protect/wait_tick.s"
     1                              <1> wait_tick:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4                              <1>                                                             ; EBP +8 | waif == num of system interrupt
     5 000018D4 55                  <1>             push    ebp
     6 000018D5 89E5                <1>             mov     ebp, esp
     7                              <1> 
     8                              <1>             ; save registers
     9 000018D7 50                  <1>             push    eax
    10 000018D8 51                  <1>             push    ecx
    11                              <1> 
    12                              <1>             ; wait
    13 000018D9 8B4D08              <1>             mov     ecx, [ebp + 8]
    14 000018DC A1[1C0B0000]        <1>             mov     eax, [TIMER_COUNT]
    15                              <1> 
    16                              <1> .10L:
    17 000018E1 3905[1C0B0000]      <1>             cmp     [TIMER_COUNT], eax                      ; while(TIMER != eax)
    18 000018E7 74F8                <1>             je      .10L
    19 000018E9 40                  <1>             inc     eax                                     ; eax++
    20 000018EA E2F5                <1>             loop    .10L                                    ; while(--ecx)
    21                              <1> 
    22                              <1>             ; return registers
    23 000018EC 59                  <1>             pop     ecx
    24 000018ED 58                  <1>             pop     eax
    25                              <1> 
    26                              <1>             ; destruct stakc frame
    27 000018EE 89EC                <1>             mov     esp, ebp
    28 000018F0 5D                  <1>             pop     ebp
    29                              <1> 
    30 000018F1 C3                  <1>             ret
   244                                  %include    "../modules/protect/memcpy.s"
     1                              <1> memcpy:
     2                              <1> 
     3                              <1>         ; construct stack frame
     4                              <1> 
     5 000018F2 55                  <1>         push    ebp
     6 000018F3 89E5                <1>         mov     ebp, esp
     7                              <1> 
     8                              <1>         ; save registers
     9                              <1> 
    10 000018F5 51                  <1>         push    ecx
    11 000018F6 56                  <1>         push    esi
    12 000018F7 57                  <1>         push    edi
    13                              <1> 
    14                              <1>         ; copy byte by byte
    15                              <1> 
    16 000018F8 FC                  <1>         cld
    17 000018F9 8B7D08              <1>         mov     edi, [ebp + 8]
    18 000018FC 8B750C              <1>         mov     esi, [ebp + 12]
    19 000018FF 8B4D10              <1>         mov     ecx, [ebp + 16]
    20                              <1> 
    21 00001902 F3A4                <1>         rep movsb
    22                              <1> 
    23                              <1>         ; return registers
    24                              <1> 
    25 00001904 5F                  <1>         pop     edi
    26 00001905 5E                  <1>         pop     esi
    27 00001906 59                  <1>         pop     ecx
    28                              <1> 
    29                              <1>         ; destruct stack frame
    30                              <1> 
    31 00001907 89EC                <1>         mov     esp, ebp
    32 00001909 5D                  <1>         pop     ebp
    33                              <1> 
    34 0000190A C3                  <1>         ret
   245                                  %include    "../modules/protect/ctrl_alt_end.s"
     1                              <1> ctrl_alt_end:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 0000190B 55                  <1>             push    ebp
     5 0000190C 89E5                <1>             mov     ebp, esp                                        ; EBP +8 | key code
     6                              <1> 
     7                              <1>             ; ; save registers
     8                              <1>             ; push    eax
     9                              <1> 
    10                              <1>             ; save key state
    11 0000190E 8B4508              <1>             mov     eax, [ebp + 8]
    12 00001911 0FBAF007            <1>             btr     eax, 7                                          ; CF = EAX & 0x80
    13 00001915 7209                <1>             jc      .10F                                            ; if (0 == CF)
    14 00001917 0FAB05[5D190000]    <1>             bts     [.key_state], eax                               ; {
    15 0000191E EB07                <1>             jmp     .10E                                            ;   // set flag
    16                              <1> .10F:                                                               ; } else {
    17 00001920 0FBB05[5D190000]    <1>             btc     [.key_state], eax                               ;   // clear flag
    18                              <1> .10E:                                                               ; }
    19                              <1> 
    20                              <1>             ; judge whether target key pressed
    21 00001927 B81D000000          <1>             mov     eax, 0x1D                                       ; [Ctrl]
    22 0000192C 0FA305[5D190000]    <1>             bt      [.key_state], eax                               ; CF = .key_state[0x1D]
    23 00001933 7321                <1>             jnc     .20E
    24                              <1> 
    25 00001935 B838000000          <1>             mov     eax, 0x38                                       ; [Alt]
    26 0000193A 0FA305[5D190000]    <1>             bt      [.key_state], eax
    27 00001941 7313                <1>             jnc     .20E
    28                              <1> 
    29 00001943 B84F000000          <1>             mov     eax, 0x4F                                       ; [End]
    30 00001948 0FA305[5D190000]    <1>             bt      [.key_state], eax
    31 0000194F 7305                <1>             jnc     .20E
    32                              <1> 
    33 00001951 B8FFFFFFFF          <1>             mov     eax, -1                                         ; if (get target key code) return -1;
    34                              <1> .20E:
    35 00001956 C1F808              <1>             sar     eax, 8                                          ; ret >>= 8 // MSB = MSB, CF = LSB
    36                              <1> 
    37                              <1>             ; ; return registers
    38                              <1>             ; pop     eax
    39                              <1> 
    40                              <1>             ; destruct stack frame
    41 00001959 89EC                <1>             mov     esp, ebp
    42 0000195B 5D                  <1>             pop     ebp
    43                              <1> 
    44 0000195C C3                  <1>             ret
    45                              <1> 
    46 0000195D 00<rept>            <1> .key_state: times 32 db 0
   246                                  %include    "../modules/protect/power_off.s"
     1                              <1> power_off:
     2                              <1> 
     3                              <1>             ; save registers
     4 0000197D 50                  <1> 		    push	eax
     5 0000197E 53                  <1> 		    push	ebx
     6 0000197F 51                  <1> 		    push	ecx
     7 00001980 52                  <1> 		    push	edx
     8 00001981 56                  <1> 		    push	esi
     9                              <1> 
    10                              <1>             ; display 'Power off...'
    11                              <1>             cdecl   draw_str, 25, 14, 0x020F, .s0
    11                              <2> 
    11                              <2>  %rep %0 - 1
    11                              <2>  push %-1:-1
    11                              <2>  %rotate -1
    11                              <2>  %endrep
    11 00001982 68[021B0000]        <3>  push %-1:-1
    11                              <3>  %rotate -1
    11 00001987 680F020000          <3>  push %-1:-1
    11                              <3>  %rotate -1
    11 0000198C 6A0E                <3>  push %-1:-1
    11                              <3>  %rotate -1
    11 0000198E 6A19                <3>  push %-1:-1
    11                              <3>  %rotate -1
    11                              <2>  %rotate -1
    11                              <2> 
    11 00001990 E820F7FFFF          <2>  call %1
    11                              <2> 
    11                              <2>  %if 1 < %0
    11 00001995 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    11                              <2>  %endif
    11                              <2> 
    12                              <1> 
    13                              <1>             ; disable paging
    14 00001999 0F20C0              <1>             mov     eax, cr0
    15 0000199C 25FFFFFF7F          <1>             and     eax, 0x7FFF_FFFF                            ; CR0 &= ~PG
    16 000019A1 0F22C0              <1>             mov     cr0, eax
    17 000019A4 EB00                <1>             jmp     $ + 2                                       ; FLUSH()
    18                              <1> 
    19                              <1>             ; confirm ACPI data
    20 000019A6 A1047E0000          <1>             mov     eax, [0x7C00 + 512 + 4]                     ; EAX = ACPI address
    21 000019AB 8B1D087E0000        <1>             mov     ebx, [0x7C00 + 512 + 8]                     ; EBX = length
    22 000019B1 83F800              <1>             cmp     eax, 0
    23 000019B4 7473                <1>             je      .10E
    24                              <1> 
    25                              <1>             ; search RSDT table
    26                              <1>             cdecl   acpi_find, eax, ebx, 'RSDT'                 ; EAX = acpi_find('RSDT')
    26                              <2> 
    26                              <2>  %rep %0 - 1
    26                              <2>  push %-1:-1
    26                              <2>  %rotate -1
    26                              <2>  %endrep
    26 000019B6 6852534454          <3>  push %-1:-1
    26                              <3>  %rotate -1
    26 000019BB 53                  <3>  push %-1:-1
    26                              <3>  %rotate -1
    26 000019BC 50                  <3>  push %-1:-1
    26                              <3>  %rotate -1
    26                              <2>  %rotate -1
    26                              <2> 
    26 000019BD E86A010000          <2>  call %1
    26                              <2> 
    26                              <2>  %if 1 < %0
    26 000019C2 6683C40C            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    26                              <2>  %endif
    26                              <2> 
    27 000019C6 83F800              <1>             cmp     eax, 0
    28 000019C9 745E                <1>             je      .10E
    29                              <1> 
    30                              <1>             ; search FACP table
    31                              <1>             cdecl   find_rsdt_entry, eax, 'FACP'                ; EAX = find_rsdt_entry('FACP')
    31                              <2> 
    31                              <2>  %rep %0 - 1
    31                              <2>  push %-1:-1
    31                              <2>  %rotate -1
    31                              <2>  %endrep
    31 000019CB 6846414350          <3>  push %-1:-1
    31                              <3>  %rotate -1
    31 000019D0 50                  <3>  push %-1:-1
    31                              <3>  %rotate -1
    31                              <2>  %rotate -1
    31                              <2> 
    31 000019D1 E884010000          <2>  call %1
    31                              <2> 
    31                              <2>  %if 1 < %0
    31 000019D6 6683C408            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    31                              <2>  %endif
    31                              <2> 
    32 000019DA 83F800              <1>             cmp     eax, 0
    33 000019DD 744A                <1>             je      .10E
    34                              <1> 
    35 000019DF 8B5828              <1>             mov     ebx, [eax + 40]                             ; // get DSDT address
    36 000019E2 83FB00              <1>             cmp     ebx, 0
    37 000019E5 7442                <1>             je      .10E
    38                              <1> 
    39                              <1>             ; save ACPI register
    40 000019E7 8B4840              <1>             mov     ecx, [eax + 64]                             ; get ACPI register
    41 000019EA 890D[201B0000]      <1>             mov     [PM1a_CNT_BLK], ecx                         ; PM1a_CNT_BLK = FACP.PM1a_CNT_BLK
    42                              <1> 
    43 000019F0 8B4844              <1>             mov     ecx, [eax + 68]
    44 000019F3 890D[241B0000]      <1>             mov     [PM1b_CNT_BLK], ecx
    45                              <1> 
    46                              <1>             ; search S5 Name Space
    47 000019F9 8B4B04              <1>             mov     ecx, [ebx + 4]                              ; ECX = DSDT.Length // data length
    48 000019FC 83E924              <1>             sub     ecx, 36                                     ; ECX -= 36         // subtract table header
    49 000019FF 83C324              <1>             add     ebx, 36                                     ;                   // add      table header
    50                              <1>             cdecl   acpi_find, ebx, ecx, '_S5_'                 ; EAX = acpi_find('_S5_')
    50                              <2> 
    50                              <2>  %rep %0 - 1
    50                              <2>  push %-1:-1
    50                              <2>  %rotate -1
    50                              <2>  %endrep
    50 00001A02 685F53355F          <3>  push %-1:-1
    50                              <3>  %rotate -1
    50 00001A07 51                  <3>  push %-1:-1
    50                              <3>  %rotate -1
    50 00001A08 53                  <3>  push %-1:-1
    50                              <3>  %rotate -1
    50                              <2>  %rotate -1
    50                              <2> 
    50 00001A09 E81E010000          <2>  call %1
    50                              <2> 
    50                              <2>  %if 1 < %0
    50 00001A0E 6683C40C            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    50                              <2>  %endif
    50                              <2> 
    51 00001A12 83F800              <1>             cmp     eax, 0
    52 00001A15 7412                <1>             je      .10E
    53                              <1> 
    54                              <1>             ; get package data
    55 00001A17 83C004              <1>             add     eax, 4                                      ; EAX = top element
    56                              <1>             cdecl   acpi_package_value, eax                     ; EAX = package data
    56                              <2> 
    56                              <2>  %rep %0 - 1
    56                              <2>  push %-1:-1
    56                              <2>  %rotate -1
    56                              <2>  %endrep
    56 00001A1A 50                  <3>  push %-1:-1
    56                              <3>  %rotate -1
    56                              <2>  %rotate -1
    56                              <2> 
    56 00001A1B E86D010000          <2>  call %1
    56                              <2> 
    56                              <2>  %if 1 < %0
    56 00001A20 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    56                              <2>  %endif
    56                              <2> 
    57 00001A24 A3[281B0000]        <1>             mov     [S5_PACKAGE], eax
    58                              <1> 
    59                              <1> .10E:
    60                              <1> 
    61                              <1>             ; enable paging
    62 00001A29 0F20C0              <1>             mov     eax, cr0
    63 00001A2C 0D00000080          <1>             or      eax, (1 << 31)                              ; set PG bit
    64 00001A31 0F22C0              <1>             mov     cr0, eax
    65 00001A34 EB00                <1>             jmp     $ + 2                                       ; FLUSH()
    66                              <1> 
    67                              <1>             ; get ACPI register
    68 00001A36 8B15[201B0000]      <1>             mov     edx, [PM1a_CNT_BLK]                         ; EDX = FACP.PM1a_CNT_BLK
    69 00001A3C 83FA00              <1>             cmp     edx, 0
    70 00001A3F 0F8495000000        <1>             je      .20E
    71                              <1> 
    72                              <1>             ; display countdown
    73                              <1>             cdecl   draw_str, 38, 14, 0x020F, .s3
    73                              <2> 
    73                              <2>  %rep %0 - 1
    73                              <2>  push %-1:-1
    73                              <2>  %rotate -1
    73                              <2>  %endrep
    73 00001A45 68[191B0000]        <3>  push %-1:-1
    73                              <3>  %rotate -1
    73 00001A4A 680F020000          <3>  push %-1:-1
    73                              <3>  %rotate -1
    73 00001A4F 6A0E                <3>  push %-1:-1
    73                              <3>  %rotate -1
    73 00001A51 6A26                <3>  push %-1:-1
    73                              <3>  %rotate -1
    73                              <2>  %rotate -1
    73                              <2> 
    73 00001A53 E85DF6FFFF          <2>  call %1
    73                              <2> 
    73                              <2>  %if 1 < %0
    73 00001A58 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    73                              <2>  %endif
    73                              <2> 
    74                              <1>             cdecl   wait_tick, 100
    74                              <2> 
    74                              <2>  %rep %0 - 1
    74                              <2>  push %-1:-1
    74                              <2>  %rotate -1
    74                              <2>  %endrep
    74 00001A5C 6A64                <3>  push %-1:-1
    74                              <3>  %rotate -1
    74                              <2>  %rotate -1
    74                              <2> 
    74 00001A5E E871FEFFFF          <2>  call %1
    74                              <2> 
    74                              <2>  %if 1 < %0
    74 00001A63 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    74                              <2>  %endif
    74                              <2> 
    75                              <1>             cdecl   draw_str, 38, 14, 0x020F, .s2
    75                              <2> 
    75                              <2>  %rep %0 - 1
    75                              <2>  push %-1:-1
    75                              <2>  %rotate -1
    75                              <2>  %endrep
    75 00001A67 68[161B0000]        <3>  push %-1:-1
    75                              <3>  %rotate -1
    75 00001A6C 680F020000          <3>  push %-1:-1
    75                              <3>  %rotate -1
    75 00001A71 6A0E                <3>  push %-1:-1
    75                              <3>  %rotate -1
    75 00001A73 6A26                <3>  push %-1:-1
    75                              <3>  %rotate -1
    75                              <2>  %rotate -1
    75                              <2> 
    75 00001A75 E83BF6FFFF          <2>  call %1
    75                              <2> 
    75                              <2>  %if 1 < %0
    75 00001A7A 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    75                              <2>  %endif
    75                              <2> 
    76                              <1>             cdecl   wait_tick, 100
    76                              <2> 
    76                              <2>  %rep %0 - 1
    76                              <2>  push %-1:-1
    76                              <2>  %rotate -1
    76                              <2>  %endrep
    76 00001A7E 6A64                <3>  push %-1:-1
    76                              <3>  %rotate -1
    76                              <2>  %rotate -1
    76                              <2> 
    76 00001A80 E84FFEFFFF          <2>  call %1
    76                              <2> 
    76                              <2>  %if 1 < %0
    76 00001A85 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    76                              <2>  %endif
    76                              <2> 
    77                              <1>             cdecl   draw_str, 38, 14, 0x020F, .s1
    77                              <2> 
    77                              <2>  %rep %0 - 1
    77                              <2>  push %-1:-1
    77                              <2>  %rotate -1
    77                              <2>  %endrep
    77 00001A89 68[131B0000]        <3>  push %-1:-1
    77                              <3>  %rotate -1
    77 00001A8E 680F020000          <3>  push %-1:-1
    77                              <3>  %rotate -1
    77 00001A93 6A0E                <3>  push %-1:-1
    77                              <3>  %rotate -1
    77 00001A95 6A26                <3>  push %-1:-1
    77                              <3>  %rotate -1
    77                              <2>  %rotate -1
    77                              <2> 
    77 00001A97 E819F6FFFF          <2>  call %1
    77                              <2> 
    77                              <2>  %if 1 < %0
    77 00001A9C 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    77                              <2>  %endif
    77                              <2> 
    78                              <1>             cdecl   wait_tick, 100
    78                              <2> 
    78                              <2>  %rep %0 - 1
    78                              <2>  push %-1:-1
    78                              <2>  %rotate -1
    78                              <2>  %endrep
    78 00001AA0 6A64                <3>  push %-1:-1
    78                              <3>  %rotate -1
    78                              <2>  %rotate -1
    78                              <2> 
    78 00001AA2 E82DFEFFFF          <2>  call %1
    78                              <2> 
    78                              <2>  %if 1 < %0
    78 00001AA7 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
    78                              <2>  %endif
    78                              <2> 
    79                              <1> 
    80                              <1>             ; set PM1a_CNT_BLK
    81 00001AAB 660FB605[281B0000]  <1>             movzx   ax, [S5_PACKAGE.0]                          ; // PM1a_CNT_BLK
    82 00001AB3 66C1E00A            <1>             shl     ax, 10                                      ; AX  = SLP_TYPx
    83 00001AB7 660D0020            <1>             or      ax, 1 << 13                                 ; AX |= SLP_EN
    84 00001ABB 66EF                <1>             out     dx, ax                                      ; out(PM1a_CNT_BLK, AX)
    85                              <1> 
    86                              <1>             ; confirm PM1b_CNT_BLK
    87 00001ABD 8B15[241B0000]      <1>             mov     edx, [PM1b_CNT_BLK]
    88 00001AC3 83FA00              <1>             cmp     edx, 0
    89 00001AC6 7412                <1>             je      .20E
    90                              <1> 
    91                              <1>             ; set PM1b_CNT_BLK(lower 1 byte)
    92 00001AC8 660FB605[291B0000]  <1>             movzx   ax, [S5_PACKAGE.1]
    93 00001AD0 66C1E00A            <1>             shl     ax, 10
    94 00001AD4 660D0020            <1>             or      ax, 1 << 13
    95 00001AD8 66EF                <1>             out     dx, ax
    96                              <1> 
    97                              <1> .20E:
    98                              <1> 
    99                              <1>             ; wait for power off
   100                              <1>             cdecl   wait_tick, 100
   100                              <2> 
   100                              <2>  %rep %0 - 1
   100                              <2>  push %-1:-1
   100                              <2>  %rotate -1
   100                              <2>  %endrep
   100 00001ADA 6A64                <3>  push %-1:-1
   100                              <3>  %rotate -1
   100                              <2>  %rotate -1
   100                              <2> 
   100 00001ADC E8F3FDFFFF          <2>  call %1
   100                              <2> 
   100                              <2>  %if 1 < %0
   100 00001AE1 6683C404            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
   100                              <2>  %endif
   100                              <2> 
   101                              <1> 
   102                              <1>             ; message that power off process failed
   103                              <1>             cdecl   draw_str, 38, 14, 0x020F, .s4
   103                              <2> 
   103                              <2>  %rep %0 - 1
   103                              <2>  push %-1:-1
   103                              <2>  %rotate -1
   103                              <2>  %endrep
   103 00001AE5 68[1C1B0000]        <3>  push %-1:-1
   103                              <3>  %rotate -1
   103 00001AEA 680F020000          <3>  push %-1:-1
   103                              <3>  %rotate -1
   103 00001AEF 6A0E                <3>  push %-1:-1
   103                              <3>  %rotate -1
   103 00001AF1 6A26                <3>  push %-1:-1
   103                              <3>  %rotate -1
   103                              <2>  %rotate -1
   103                              <2> 
   103 00001AF3 E8BDF5FFFF          <2>  call %1
   103                              <2> 
   103                              <2>  %if 1 < %0
   103 00001AF8 6683C410            <2>  add sp, (__BITS__ >> 3) * (%0 - 1)
   103                              <2>  %endif
   103                              <2> 
   104                              <1> 
   105                              <1>             ; return registers
   106 00001AFC 5E                  <1> 		    pop		esi
   107 00001AFD 5A                  <1> 		    pop		edx
   108 00001AFE 59                  <1> 		    pop		ecx
   109 00001AFF 5B                  <1> 		    pop		ebx
   110 00001B00 58                  <1> 		    pop		eax
   111                              <1> 
   112 00001B01 C3                  <1>             ret
   113                              <1> 
   114 00001B02 20506F776572206F66- <1> .s0:            db  " Power off...   ", 0
   114 00001B0B 662E2E2E20202000    <1>
   115 00001B13 203100              <1> .s1:            db  " 1", 0
   116 00001B16 203200              <1> .s2:            db  " 2", 0
   117 00001B19 203300              <1> .s3:            db  " 3", 0
   118 00001B1C 4E4700              <1> .s4:            db  "NG", 0
   119                              <1> 
   120 00001B1F 00                  <1> ALIGN   4,  db 0
   121 00001B20 00000000            <1> PM1a_CNT_BLK:   dd 0
   122 00001B24 00000000            <1> PM1b_CNT_BLK:   dd 0
   123                              <1> S5_PACKAGE:
   124 00001B28 00                  <1> .0:             db 0
   125 00001B29 00                  <1> .1:             db 0
   126 00001B2A 00                  <1> .2:             db 0
   127 00001B2B 00                  <1> .3:             db 0
   128                              <1> 
   247                                  %include    "../modules/protect/acpi_find.s"
     1                              <1> acpi_find:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00001B2C 55                  <1>             push    ebp
     5 00001B2D 89E5                <1>             mov     ebp, esp                                    ;    +16 | search_target data
     6                              <1>                                                                 ;    +12 | size
     7                              <1>                                                                 ; EBP+ 8 | address
     8                              <1> 
     9                              <1>             ; save registers
    10 00001B2F 53                  <1>             push    ebx
    11 00001B30 51                  <1>             push    ecx
    12 00001B31 57                  <1>             push    edi
    13                              <1> 
    14                              <1>             ; get args
    15 00001B32 8B7D08              <1>             mov     edi, [ebp + 8]
    16 00001B35 8B4D0C              <1>             mov     ecx, [ebp + 12]
    17 00001B38 8B4510              <1>             mov     eax, [ebp + 16]
    18                              <1> 
    19                              <1>             ; search name
    20 00001B3B FC                  <1>             cld                                                 ; direction:plus
    21                              <1> .10L:                                                           ; for ( ; ; )
    22                              <1>                                                                 ; {
    23 00001B3C F2AE                <1>             repne   scasb                                       ;   while (AL != *EDI) EDI++
    24                              <1> 
    25 00001B3E 83F900              <1>             cmp     ecx, 0                                      ;   if (0 == ECX)
    26 00001B41 7507                <1>             jnz     .11E                                        ;   {
    27 00001B43 B800000000          <1>             mov     eax, 0                                      ;       EAX = 0; // not found
    28 00001B48 EB09                <1>             jmp     .10E                                        ;       break;
    29                              <1> .11E:                                                           ;   }
    30                              <1> 
    31 00001B4A 263B47FF            <1>             cmp     eax, [es:edi - 1]                           ;   if (EAX != *EDI) // whether corresponds 4 char
    32 00001B4E 75EC                <1>             jne     .10L                                        ;       continue;
    33                              <1> 
    34                              <1>             ; correspond
    35 00001B50 4F                  <1>             dec     edi
    36 00001B51 89F8                <1>             mov     eax, edi                                    ;   EAX = search target address; // return value
    37                              <1> 
    38                              <1> .10E:                                                           ; }
    39                              <1> 
    40                              <1>             ; return registers
    41 00001B53 5F                  <1>             pop     edi
    42 00001B54 59                  <1>             pop     ecx
    43 00001B55 5B                  <1>             pop     ebx
    44                              <1> 
    45                              <1>             ; destruct stack frame
    46 00001B56 89EC                <1>             mov     esp, ebp
    47 00001B58 5D                  <1>             pop     ebp
    48                              <1> 
    49 00001B59 C3                  <1>             ret
   248                                  %include    "../modules/protect/find_rsdt_entry.s"
     1                              <1> find_rsdt_entry:
     2                              <1> 
     3                              <1> 
     4                              <1>             ; construct stack frame
     5 00001B5A 55                  <1>             push    ebp
     6 00001B5B 89E5                <1>             mov     ebp, esp                                    ;    +12 | tabel identifier
     7                              <1>                                                                 ; EBP+ 8 | address of RSDT table
     8                              <1> 
     9                              <1>             ; save registers
    10 00001B5D 53                  <1>             push    ebx
    11 00001B5E 51                  <1>             push    ecx
    12 00001B5F 56                  <1>             push    esi
    13 00001B60 57                  <1>             push    edi
    14                              <1> 
    15                              <1>             ; get args
    16 00001B61 8B7508              <1>             mov     esi, [ebp + 8]
    17 00001B64 8B4D0C              <1>             mov     ecx, [ebp + 12]
    18                              <1> 
    19 00001B67 BB00000000          <1>             mov     ebx, 0                                      ; initialization // EBX = address of target ACPI table
    20                              <1> 
    21                              <1>             ; the process of searching ACPI table
    22 00001B6C 89F7                <1>             mov     edi, esi
    23 00001B6E 037E04              <1>             add     edi, [esi + 4]                              ; EDI = &ENTRY[MAX]
    24 00001B71 83C624              <1>             add     esi, 36                                     ; ESI = &ENTRY[0]
    25                              <1> .10L:
    26 00001B74 39FE                <1>             cmp     esi, edi                                    ; while(ESI < EDI)
    27 00001B76 7D0B                <1>             jge     .10E
    28                              <1> 
    29 00001B78 AD                  <1>             lodsd                                              ; EAX = [ESI++]     // entry
    30                              <1> 
    31 00001B79 3908                <1>             cmp     [eax], ecx                                  ; compare with target table name
    32 00001B7B 7504                <1>             jne     .12E
    33 00001B7D 89C3                <1>             mov     ebx, eax                                    ; correspond
    34 00001B7F EB02                <1>             jmp     .10E
    35 00001B81 EBF1                <1> .12E:       jmp     .10L
    36                              <1> 
    37                              <1> .10E:
    38 00001B83 89D8                <1>             mov     eax, ebx
    39                              <1> 
    40                              <1>             ; return registers
    41 00001B85 5F                  <1>             pop     edi
    42 00001B86 5E                  <1>             pop     esi
    43 00001B87 59                  <1>             pop     ecx
    44 00001B88 5B                  <1>             pop     ebx
    45                              <1> 
    46                              <1>             ; destruct stack frame
    47 00001B89 89EC                <1>             mov     esp, ebp
    48 00001B8B 5D                  <1>             pop     ebp
    49                              <1> 
    50 00001B8C C3                  <1>             ret
   249                                  %include    "../modules/protect/acpi_package_value.s"
     1                              <1> acpi_package_value:
     2                              <1> 
     3                              <1>             ; construct stack frame
     4 00001B8D 55                  <1>             push    ebp                                         ; EBP+ 8 | address to Package
     5 00001B8E 89E5                <1>             mov     ebp, esp
     6                              <1> 
     7                              <1>             ; save register
     8 00001B90 56                  <1>             push    esi
     9                              <1> 
    10                              <1>             ; get arg
    11 00001B91 8B7508              <1>             mov     esi, [ebp + 8]
    12                              <1> 
    13                              <1>             ; skip packet header
    14 00001B94 46                  <1>             inc     esi                                         ; ESI++ // skip 'PackageOp'
    15 00001B95 46                  <1>             inc     esi                                         ; ESI++ // skip 'PkgLength'
    16 00001B96 46                  <1>             inc     esi                                         ; ESI++ // skip 'NumElements'
    17                              <1>                                                                 ; ESI = PackageElementList
    18                              <1> 
    19                              <1>             ; get only 2 byte
    20 00001B97 8A06                <1>             mov     al, [esi]
    21 00001B99 3C0B                <1>             cmp     al, 0x0B
    22 00001B9B 740A                <1>             je      .C0B
    23 00001B9D 3C0C                <1>             cmp     al, 0x0C
    24 00001B9F 7406                <1>             je      .C0C
    25 00001BA1 3C0E                <1>             cmp     al, 0x0E
    26 00001BA3 7402                <1>             je      .C0E
    27 00001BA5 EB08                <1>             jmp     .C0A
    28                              <1> .C0B:                                                           ; case 0x0B: // 'WordPrefix'
    29                              <1> .C0C:                                                           ; case 0x0C: // 'DWordPrefix'
    30                              <1> .C0E:                                                           ; case 0x0E: // 'QWordPrefix'
    31 00001BA7 8A4601              <1>             mov     al, [esi + 1]                               ; AL = ESI[1]
    32 00001BAA 8A6602              <1>             mov     ah, [esi + 2]                               ; AH = ESI[2]
    33 00001BAD EB13                <1>             jmp     .10E
    34                              <1> 
    35                              <1> .C0A:                                                           ; default:  // 'BytePrefix' | 'ConstObj'
    36                              <1>                                                                 ;   // fist 1 byte
    37                              <1>                                                                 ; if (0x0A == AL)
    38 00001BAF 3C0A                <1>             cmp     al, 0x0A                                    ; {
    39 00001BB1 7504                <1>             jne     .11E                                        ;   AL = *ESI
    40 00001BB3 8A4601              <1>             mov     al, [esi + 1]                               ;   ESI++
    41 00001BB6 46                  <1>             inc     esi
    42                              <1> .11E:                                                           ; }
    43                              <1> 
    44 00001BB7 46                  <1>             inc     esi                                         ; // next 1 byte
    45                              <1> 
    46 00001BB8 8A26                <1>             mov     ah, [esi]                                   ; AH = *ESI
    47 00001BBA 80FC0A              <1>             cmp     ah, 0x0A                                    ; if (0x0A == AL)
    48 00001BBD 7503                <1>             jne     .12E                                        ; {
    49 00001BBF 8A6601              <1>             mov     ah, [esi + 1]                               ;   AH = ESI[1]
    50                              <1> .12E:                                                           ; }
    51                              <1> .10E:                                                           ; }
    52                              <1> 
    53                              <1> 
    54                              <1>             ; return register
    55 00001BC2 5E                  <1>             pop     esi
    56                              <1> 
    57                              <1>             ; destruct stack frame
    58 00001BC3 89EC                <1>             mov     esp, ebp
    59 00001BC5 5D                  <1>             pop     ebp
    60                              <1> 
    61 00001BC6 C3                  <1>             ret
   250                                  
   251                                  ;-------------------------------------------------------------------------------------------------
   252                                  ; PADDING
   253                                  ;-------------------------------------------------------------------------------------------------
   254 00001BC7 00<rept>                            times   KERNEL_SIZE - ($ - $$)      db 0x00     ; size of kernel // 8K byte
   255                                  
   256                                  ;-------------------------------------------------------------------------------------------------
   257                                  ; FAT
   258                                  ;-------------------------------------------------------------------------------------------------
   259                                  
   260                                  %include    "fat.s"
     1                              <1> ;----------------------------------------------------------------
     2                              <1> ;   FAT:FAT-1
     3                              <1> ;----------------------------------------------------------------
     4                              <1>             times (FAT1_START) - ($ - $$)   db  0x00
     5                              <1> ;----------------------------------------------------------------
     6                              <1> FAT1:
     7 00002000 FFFF                <1>             db      0xFF, 0xFF                                   ; cluster 0
     8 00002002 FFFF                <1>             dw      0xFFFF                                       ; cluster 1
     9 00002004 FFFF                <1>             dw      0xFFFF                                       ; cluster 2
    10                              <1> 
    11                              <1> ;----------------------------------------------------------------
    12                              <1> ;   FAT:FAT-2
    13                              <1> ;----------------------------------------------------------------
    14 00002006 00<rept>            <1>             times (FAT2_START) - ($ - $$)   db  0x00
    15                              <1> ;----------------------------------------------------------------
    16                              <1> FAT2:
    17 00022000 FFFF                <1>             db      0xFF, 0xFF                                   ; cluster 0
    18 00022002 FFFF                <1>             dw      0xFFFF                                       ; cluster 1
    19 00022004 FFFF                <1>             dw      0xFFFF                                       ; cluster 2
    20                              <1> 
    21                              <1> ;----------------------------------------------------------------
    22                              <1> ;   FAT:ROOT DIRECTORY SPACE
    23                              <1> ;----------------------------------------------------------------
    24 00022006 00<rept>            <1>             times (ROOT_START) - ($ - $$)   db  0x00
    25                              <1> ;----------------------------------------------------------------
    26                              <1> FAT_ROOT:
    27 00042000 424F4F5441424C4544- <1>             db      'BOOTABLE', 'DSK'                           ; + 0:volume label
    27 00042009 534B                <1>
    28 0004200B 28                  <1>             db      ATTR_ARCHIVE | ATTR_VOLUME_ID              ; +11:type
    29 0004200C 00                  <1>             db      0x00                                        ; +12:(reserved)
    30 0004200D 00                  <1>             db      0x00                                        ; +13:TS
    31 0004200E 0000                <1>             dw      ( 0 << 11) | ( 0 << 5) | (0 / 2)            ; +14:created time
    32 00042010 0100                <1>             dw      ( 0 <<  9) | ( 0 << 5) | ( 1)               ; +16:created day
    33 00042012 0100                <1>             dw      ( 0 <<  9) | ( 0 << 5) | ( 1)               ; +18:accessed day
    34 00042014 0000                <1>             dw      0x0000                                      ; +20:(reserved)
    35 00042016 0000                <1>             dw      ( 0 << 11) | ( 0 << 5) | (0 / 2)            ; +22:updated time
    36 00042018 0100                <1>             dw      ( 0 <<  9) | ( 0 << 5) | ( 1)               ; +24:updated day
    37 0004201A 0000                <1>             dw      0                                           ; +26:first cluster
    38 0004201C 00000000            <1>             dd      0                                           ; +28:file size
    39                              <1> 
    40 00042020 5350454349414C2054- <1>             db      'SPECIAL ', 'TXT'                           ; + 0:volume label
    40 00042029 5854                <1>
    41 0004202B 20                  <1>             db      ATTR_ARCHIVE                                ; +11:type
    42 0004202C 00                  <1>             db      0x00                                        ; +12:(reserved)
    43 0004202D 00                  <1>             db      0                                           ; +13:TS
    44 0004202E 0000                <1>             dw      ( 0 << 11) | ( 0 << 5) | (0 / 2)            ; +14:created time
    45 00042030 0100                <1>             dw      ( 0 <<  9) | ( 0 << 5) | ( 1)               ; +16:created day
    46 00042032 0100                <1>             dw      ( 0 <<  9) | ( 0 << 5) | ( 1)               ; +18:accessed day
    47 00042034 0000                <1>             dw      0x0000                                      ; +20:(reserved)
    48 00042036 0000                <1>             dw      ( 0 << 11) | ( 0 << 5) | (0 / 2)            ; +22:updated time
    49 00042038 0100                <1>             dw      ( 0 <<  9) | ( 0 << 5) | ( 1)               ; +24:updated day
    50 0004203A 0200                <1>             dw      2                                           ; +26:first cluster
    51 0004203C 0B000000            <1>             dd      FILE.end - FILE                             ; +28:file size
    52                              <1> 
    53                              <1> ;----------------------------------------------------------------
    54                              <1> ;   FAT:DATA SPACE
    55                              <1> ;----------------------------------------------------------------
    56 00042040 00<rept>            <1>             times FILE_START - ($ - $$) db 0x00
    57                              <1> ;----------------------------------------------------------------
    58 00046000 68656C6C6F2C204641- <1> FILE:       db      'hello, FAT!'
    58 00046009 5421                <1>
    59 0004600B 00                  <1> .end:       db      0
    60                              <1> 
    61 0004600C 00<rept>            <1> ALIGN 512, db 0x00
    62                              <1> 
    63 00046200 00<rept>            <1>             times (512 * 63)    db 0x00
